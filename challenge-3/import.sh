#!/bin/bash

ENV_FILE="../.env"
SAMPLE_ENV_FILE="../.env.sample"

# Function to load existing .env values into an associative array
load_env_values() {
    declare -gA env_values
    if [ -f "$ENV_FILE" ]; then
        while IFS='=' read -r key value || [ -n "$key" ]; do
            # Skip comments and empty lines
            [[ $key =~ ^#.*$ || -z $key ]] && continue
            # Trim leading/trailing whitespace and quotes
            value=$(echo "$value" | sed -e 's/^[[:space:]"]*//g' -e 's/[[:space:]"]*$//g')
            env_values["$key"]="$value"
        done < "$ENV_FILE"
    fi
}

# Function to save env values to .env file
save_env_file() {
    # Create .env file with header
    echo "# Generated by import.sh - $(date)" > "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    
    # Azure AI Search configuration
    echo "# Azure AI Search configuration" >> "$ENV_FILE"
    echo "AZURE_SEARCH_SERVICE_NAME=${env_values[AZURE_SEARCH_SERVICE_NAME]}" >> "$ENV_FILE"
    echo "AZURE_SEARCH_ADMIN_KEY=${env_values[AZURE_SEARCH_ADMIN_KEY]}" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    
    # Azure OpenAI configuration
    echo "# Azure OpenAI configuration" >> "$ENV_FILE"
    echo "AZURE_OPENAI_ENDPOINT=${env_values[AZURE_OPENAI_ENDPOINT]}" >> "$ENV_FILE"
    echo "AZURE_OPENAI_KEY=${env_values[AZURE_OPENAI_KEY]}" >> "$ENV_FILE"
    echo "AZURE_OPENAI_DEPLOYMENT=${env_values[AZURE_OPENAI_DEPLOYMENT]}" >> "$ENV_FILE"
    echo "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${env_values[AZURE_OPENAI_EMBEDDING_DEPLOYMENT]}" >> "$ENV_FILE"
    echo "AZURE_OPENAI_API_VERSION=${env_values[AZURE_OPENAI_API_VERSION]}" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    
    # Azure AI Agents SDK configuration
    echo "# Azure AI Agents SDK configuration" >> "$ENV_FILE"
    echo "PROJECT_CONNECTION_STRING=${env_values[PROJECT_CONNECTION_STRING]}" >> "$ENV_FILE"
    echo "" >> "$ENV_FILE"
    
    # Azure Subscription ID
    echo "# Azure Subscription ID" >> "$ENV_FILE"
    echo "AZURE_SUBSCRIPTION_ID=${env_values[AZURE_SUBSCRIPTION_ID]}" >> "$ENV_FILE"
    
    echo "Environment settings saved to $ENV_FILE"
}

# Check if .env.sample exists
if [ ! -f "$SAMPLE_ENV_FILE" ]; then
    echo "Error: $SAMPLE_ENV_FILE not found. Cannot continue."
    exit 1
fi

# Create .env from sample if it doesn't exist
if [ ! -f "$ENV_FILE" ]; then
    echo ".env file not found. Creating from sample..."
    cp "$SAMPLE_ENV_FILE" "$ENV_FILE"
    echo "Created $ENV_FILE from sample."
fi

# Initialize env values from existing .env file
declare -A env_values
load_env_values

# Check if already logged in to Azure CLI
echo "Checking Azure CLI login status..."
az_login_status=$(az account show 2>&1)
if [[ $? -ne 0 || "$az_login_status" == *"Please run 'az login' to setup account"* ]]; then
    echo "You are not logged in to Azure CLI. Initiating login..."
    # Login with device code authentication
    az login --use-device-code
    
    if [ $? -ne 0 ]; then
        echo "Failed to authenticate with Azure CLI. Please try again."
        exit 1
    fi
    echo "Successfully authenticated with Azure CLI."
else
    echo "Already logged in to Azure CLI."
    current_account=$(az account show --query name -o tsv)
    echo "Current account: $current_account"
fi

# Get subscription ID
subscription_id=$(az account show --query id -o tsv)
if [ -n "$subscription_id" ]; then
    if [ -z "${env_values[AZURE_SUBSCRIPTION_ID]}" ] || [ "${env_values[AZURE_SUBSCRIPTION_ID]}" != "$subscription_id" ]; then
        env_values[AZURE_SUBSCRIPTION_ID]="$subscription_id"
        echo "AZURE_SUBSCRIPTION_ID set to $subscription_id"
    else
        echo "AZURE_SUBSCRIPTION_ID already set correctly to $subscription_id"
    fi
else
    echo "Could not detect subscription ID"
fi

# Find resource groups relevant to the hackathon
echo "Looking for hackathon resource groups (starting with 'rg-aihack-user')..."
resource_groups=$(az group list --query "[?starts_with(name, 'rg-aihack-user')].name" -o json)
rg_count=$(echo "$resource_groups" | jq length)

if [ "$rg_count" -eq 0 ]; then
    echo "No hackathon resource groups found. Will search across all resource groups."
    # Find Azure AI Search service
    echo "Looking for Azure AI Search services..."
    search_services=$(az search service list --query "[].{name:name, resourceGroup:resourceGroup, location:location}" -o json)
else
    echo "Found $rg_count hackathon resource group(s):"
    echo "$resource_groups" | jq -r '.[]' | nl
    
    # Find Azure AI Search service in hackathon resource groups
    echo "Looking for Azure AI Search services in hackathon resource groups..."
    search_services="[]"
    
    # Loop through each hackathon resource group and search for services
    for rg in $(echo "$resource_groups" | jq -r '.[]'); do
        echo "Checking resource group: $rg"
        rg_services=$(az search service list --resource-group "$rg" --query "[].{name:name, resourceGroup:resourceGroup, location:location}" -o json 2>/dev/null)
        # Combine results if any services found
        if [ "$(echo "$rg_services" | jq length)" -gt 0 ]; then
            search_services=$(echo "$search_services" "$rg_services" | jq -s '.[0] + .[1]')
        fi
    done
fi

search_count=$(echo "$search_services" | jq length)

if [ "$search_count" -gt 0 ]; then
    echo "Found $search_count Azure AI Search service(s):"
    echo "$search_services" | jq -r '.[] | "\(.name) (Resource Group: \(.resourceGroup), Location: \(.location))"' | nl
    
    if [ "$search_count" -eq 1 ]; then
        search_name=$(echo "$search_services" | jq -r '.[0].name')
        search_rg=$(echo "$search_services" | jq -r '.[0].resourceGroup')
        env_values[AZURE_SEARCH_SERVICE_NAME]="$search_name"
        
        # Get search admin key
        echo "Getting admin key for $search_name..."
        admin_key=$(az search admin-key show --service-name "$search_name" --resource-group "$search_rg" --query primaryKey -o tsv)
        if [ -n "$admin_key" ]; then
            env_values[AZURE_SEARCH_ADMIN_KEY]="$admin_key"
            echo "Search admin key retrieved successfully"
        else
            echo "Failed to retrieve search admin key"
            read -p "Enter search admin key manually: " admin_key
            env_values[AZURE_SEARCH_ADMIN_KEY]="$admin_key"
        fi
    else
        read -p "Enter the number of the search service to use (1-$search_count): " search_num
        if [[ "$search_num" =~ ^[0-9]+$ ]] && [ "$search_num" -ge 1 ] && [ "$search_num" -le "$search_count" ]; then
            search_idx=$((search_num - 1))
            search_name=$(echo "$search_services" | jq -r ".[$search_idx].name")
            search_rg=$(echo "$search_services" | jq -r ".[$search_idx].resourceGroup")
            env_values[AZURE_SEARCH_SERVICE_NAME]="$search_name"
            
            # Get search admin key
            echo "Getting admin key for $search_name..."
            admin_key=$(az search admin-key show --service-name "$search_name" --resource-group "$search_rg" --query primaryKey -o tsv)
            if [ -n "$admin_key" ]; then
                env_values[AZURE_SEARCH_ADMIN_KEY]="$admin_key"
                echo "Search admin key retrieved successfully"
            else
                echo "Failed to retrieve search admin key"
                read -p "Enter search admin key manually: " admin_key
                env_values[AZURE_SEARCH_ADMIN_KEY]="$admin_key"
            fi
        else
            echo "Invalid selection"
        fi
    fi
else
    echo "No Azure AI Search services found in your subscription"
    read -p "Enter search service name manually: " search_name
    env_values[AZURE_SEARCH_SERVICE_NAME]="$search_name"
    
    read -p "Enter search admin key manually: " admin_key
    env_values[AZURE_SEARCH_ADMIN_KEY]="$admin_key"
fi

# Find Azure OpenAI resources
echo "Looking for Azure OpenAI resources..."

# Download credentials from the shared blob URL
echo "Downloading OpenAI credentials from shared blob URL..."
CREDS_URL="https://stfoundryaitourshared.blob.core.windows.net/credentials/creds.env?sp=r&st=2025-03-28T09:13:49Z&se=2025-03-28T18:00:00Z&spr=https&sv=2024-11-04&sr=b&sig=9Hq9V3pMd1hlWUsQFg8cbnKOvspH2YWVsj9IrJ1lCAw%3D"
CREDS_CONTENT=$(curl -s "$CREDS_URL")

if [ $? -eq 0 ] && [ -n "$CREDS_CONTENT" ]; then
    echo "Successfully downloaded credentials"
    
    # Extract AZURE_OPENAI_ENDPOINT and AZURE_OPENAI_KEY
    # The content is expected to be in format: AZURE_OPENAI_ENDPOINT=<value> AZURE_OPENAI_KEY=<value>
    OPENAI_ENDPOINT=$(echo "$CREDS_CONTENT" | sed -n 's/AZURE_OPENAI_ENDPOINT=\([^ ]*\).*/\1/p')
    OPENAI_KEY=$(echo "$CREDS_CONTENT" | sed -n 's/.*AZURE_OPENAI_KEY=\([^ ]*\).*/\1/p')
    
    if [ -n "$OPENAI_ENDPOINT" ] && [ -n "$OPENAI_KEY" ]; then
        env_values[AZURE_OPENAI_ENDPOINT]="$OPENAI_ENDPOINT"
        env_values[AZURE_OPENAI_KEY]="$OPENAI_KEY"
        echo "Azure OpenAI endpoint and key retrieved from credentials file"
        
        # Set default values for model deployments if not already set
        if [ -z "${env_values[AZURE_OPENAI_DEPLOYMENT]}" ]; then
            env_values[AZURE_OPENAI_DEPLOYMENT]="gpt-4o-mini"
            echo "Setting default AZURE_OPENAI_DEPLOYMENT to gpt-4o-mini"
        fi
        
        if [ -z "${env_values[AZURE_OPENAI_EMBEDDING_DEPLOYMENT]}" ]; then
            env_values[AZURE_OPENAI_EMBEDDING_DEPLOYMENT]="text-embedding-ada-002"
            echo "Setting default AZURE_OPENAI_EMBEDDING_DEPLOYMENT to text-embedding-ada-002"
        fi
        
        if [ -z "${env_values[AZURE_OPENAI_API_VERSION]}" ]; then
            env_values[AZURE_OPENAI_API_VERSION]="2024-12-01-preview"
            echo "Setting AZURE_OPENAI_API_VERSION to latest: 2024-12-01-preview"
        fi
    else
        echo "Failed to extract OpenAI endpoint and key from credentials file"
        echo "Falling back to manual entry or search for OpenAI resources"
        # Continue with the original OpenAI resource search logic below
        openai_resources=$(az cognitiveservices account list --query "[?kind=='OpenAI'].{name:name, resourceGroup:resourceGroup, location:location, endpoint:properties.endpoint}" -o json)
        FALLBACK_TO_SEARCH=true
    fi
else
    echo "Failed to download credentials from shared blob URL"
    echo "Falling back to manual entry or search for OpenAI resources"
    # Continue with the original OpenAI resource search logic below
    openai_resources=$(az cognitiveservices account list --query "[?kind=='OpenAI'].{name:name, resourceGroup:resourceGroup, location:location, endpoint:properties.endpoint}" -o json)
    FALLBACK_TO_SEARCH=true
fi

# Only continue with original OpenAI search logic if needed
if [ "${FALLBACK_TO_SEARCH:-false}" = true ]; then
    openai_count=$(echo "$openai_resources" | jq length)

    if [ "$openai_count" -gt 0 ]; then
        echo "Found $openai_count Azure OpenAI resource(s):"
        echo "$openai_resources" | jq -r '.[] | "\(.name) (Resource Group: \(.resourceGroup), Location: \(.location), Endpoint: \(.endpoint))"' | nl
        
        if [ "$openai_count" -eq 1 ]; then
            openai_name=$(echo "$openai_resources" | jq -r '.[0].name')
            openai_rg=$(echo "$openai_resources" | jq -r '.[0].resourceGroup')
            openai_endpoint=$(echo "$openai_resources" | jq -r '.[0].endpoint')
            env_values[AZURE_OPENAI_ENDPOINT]="$openai_endpoint"
            
            # Get OpenAI key
            echo "Getting key for $openai_name..."
            openai_key=$(az cognitiveservices account keys list --name "$openai_name" --resource-group "$openai_rg" --query key1 -o tsv)
            if [ -n "$openai_key" ]; then
                env_values[AZURE_OPENAI_KEY]="$openai_key"
                echo "OpenAI key retrieved successfully"
            else
                echo "Failed to retrieve OpenAI key"
                read -p "Enter OpenAI key manually: " openai_key
                env_values[AZURE_OPENAI_KEY]="$openai_key"
            fi
            
            # List model deployments
            echo "Retrieving OpenAI model deployments..."
            # Note: there's no direct Az CLI command for this, we would need to use REST API
            # For now, ask user to input the deployment names
            env_values[AZURE_OPENAI_DEPLOYMENT]="gpt-4o-mini"
            env_values[AZURE_OPENAI_EMBEDDING_DEPLOYMENT]="text-embedding-ada-002"
            env_values[AZURE_OPENAI_API_VERSION]="2024-12-01-preview"
        else
            read -p "Enter the number of the OpenAI resource to use (1-$openai_count): " openai_num
            if [[ "$openai_num" =~ ^[0-9]+$ ]] && [ "$openai_num" -ge 1 ] && [ "$openai_num" -le "$openai_count" ]; then
                openai_idx=$((openai_num - 1))
                openai_name=$(echo "$openai_resources" | jq -r ".[$openai_idx].name")
                openai_rg=$(echo "$openai_resources" | jq -r ".[$openai_idx].resourceGroup")
                openai_endpoint=$(echo "$openai_resources" | jq -r ".[$openai_idx].endpoint")
                env_values[AZURE_OPENAI_ENDPOINT]="$openai_endpoint"
                
                # Get OpenAI key
                echo "Getting key for $openai_name..."
                openai_key=$(az cognitiveservices account keys list --name "$openai_name" --resource-group "$openai_rg" --query key1 -o tsv)
                if [ -n "$openai_key" ]; then
                    env_values[AZURE_OPENAI_KEY]="$openai_key"
                    echo "OpenAI key retrieved successfully"
                else
                    echo "Failed to retrieve OpenAI key"
                    read -p "Enter OpenAI key manually: " openai_key
                    env_values[AZURE_OPENAI_KEY]="$openai_key"
                fi
                
                # List model deployments
                echo "Retrieving OpenAI model deployments..."
                # Note: there's no direct Az CLI command for this, we would need to use REST API
                # For now, ask user to input the deployment names
                read -p "Enter OpenAI completion model deployment name: " completion_deployment
                env_values[AZURE_OPENAI_DEPLOYMENT]="$completion_deployment"
                
                read -p "Enter OpenAI embedding model deployment name: " embedding_deployment
                env_values[AZURE_OPENAI_EMBEDDING_DEPLOYMENT]="$embedding_deployment"
                
                # Set API version if not already set
                if [ -z "${env_values[AZURE_OPENAI_API_VERSION]}" ]; then
                    env_values[AZURE_OPENAI_API_VERSION]="2024-12-01-preview"
                    echo "Setting AZURE_OPENAI_API_VERSION to latest: 2024-12-01-preview"
                fi
            else
                echo "Invalid selection"
            fi
        fi
    else
        echo "No Azure OpenAI resources found in your subscription"
        read -p "Enter OpenAI endpoint manually: " openai_endpoint
        env_values[AZURE_OPENAI_ENDPOINT]="$openai_endpoint"
        
        read -p "Enter OpenAI key manually: " openai_key
        env_values[AZURE_OPENAI_KEY]="$openai_key"
        
        read -p "Enter OpenAI completion model deployment name: " completion_deployment
        env_values[AZURE_OPENAI_DEPLOYMENT]="$completion_deployment"
        
        read -p "Enter OpenAI embedding model deployment name: " embedding_deployment
        env_values[AZURE_OPENAI_EMBEDDING_DEPLOYMENT]="$embedding_deployment"
        
        # Set API version if not already set
        if [ -z "${env_values[AZURE_OPENAI_API_VERSION]}" ]; then
            env_values[AZURE_OPENAI_API_VERSION]="2024-12-01-preview"
            echo "Setting AZURE_OPENAI_API_VERSION to latest: 2024-12-01-preview"
        fi
    fi
fi

# For PROJECT_CONNECTION_STRING, we need to:
# 1. Find the Azure AI project in the resource group that we found previously
# 2. Extract the project ID and use it in the connection string
# 3. Keep the existing value if no project is found
echo "Looking for Azure AI projects in resource groups..."

# Initialize the project connection string variable
project_conn_string=""

# If we found hackathon resource groups, search in them
if [ "$rg_count" -gt 0 ]; then
    # Loop through each hackathon resource group and search for AI projects
    for rg in $(echo "$resource_groups" | jq -r '.[]'); do
        echo "Checking for AI projects in resource group: $rg"
        # List resources of type Microsoft.MachineLearningServices/workspaces
        ai_projects=$(az resource list --resource-type "Microsoft.MachineLearningServices/workspaces" --query "[].{name:name, id:id}" -o json 2>/dev/null)
        
        project_count=$(echo "$ai_projects" | jq length)
        
        if [ "$project_count" -gt 0 ]; then
            echo "Found $project_count AI project(s) in $rg:"
            echo "$ai_projects" | jq -r '.[] | "\(.name) (ID: \(.id))"' | nl
            
            project_id=$(echo "$ai_projects" | jq -r '.[1].id')
            project_name=$(echo "$ai_projects" | jq -r '.[1].name')
            echo "Using AI project: $project_name"

            project_object=$(az resource show --ids "$project_id")
            project_conn_string=$(echo "$project_object" | jq -r '.properties.workspaceId')

            if [ -z "$project_conn_string" ]; then
                echo "Failed to retrieve connection string for $project_name"
                read -p "Enter PROJECT_CONNECTION_STRING manually: " project_conn_string
            fi


            project_conn_string="swedencentral.api.azureml.ms;${env_values[AZURE_SUBSCRIPTION_ID]};$rg;$project_name"
            
            
            # If we found a project, break the loop
            if [ -n "$project_conn_string" ]; then
                break
            fi
        fi
    done
fi

if [ -z "$project_conn_string" ]; then
    ai_projects=$(az resource list --resource-group "rg-foundryhub" --resource-type "Microsoft.MachineLearningServices/workspaces" --query "[].{name:name, id:id}" -o json 2>/dev/null)

        project_count=$(echo "$ai_projects" | jq length)
        
        if [ "$project_count" -gt 0 ]; then
            echo "Found $project_count AI project(s) in $rg:"
            echo "$ai_projects" | jq -r '.[] | "\(.name) (ID: \(.id))"' | nl
            
            if [ "$project_count" -eq 1 ]; then
                project_id=$(echo "$ai_projects" | jq -r '.[0].id')
                project_name=$(echo "$ai_projects" | jq -r '.[0].name')
                echo "Using AI project: $project_name"

                project_object=$(az resource show --ids "$project_id")
                project_conn_string=$(echo "$project_object" | jq -r '.properties.workspaceId')

                if [ -z "$project_conn_string" ]; then
                    echo "Failed to retrieve connection string for $project_name"
                    read -p "Enter PROJECT_CONNECTION_STRING manually: " project_conn_string
                fi


                project_conn_string="swedencentral.api.azureml.ms;${env_values[AZURE_SUBSCRIPTION_ID]};$rg;$project_name"
            else
                read -p "Enter the number of the AI project to use (1-$project_count): " project_num
                if [[ "$project_num" =~ ^[0-9]+$ ]] && [ "$project_num" -ge 1 ] && [ "$project_num" -le "$project_count" ]; then
                    project_idx=$((project_num - 1))
                    project_id=$(echo "$ai_projects" | jq -r ".[$project_idx].id")
                    project_name=$(echo "$ai_projects" | jq -r ".[$project_idx].name")
                    echo "Using AI project: $project_name"
                    project_conn_string="projectid=$project_id"
                else
                    echo "Invalid selection, keeping existing connection string if available"
                fi
            fi
            
            # If we found a project, break the loop
            if [ -n "$project_conn_string" ]; then
                break
            fi
        fi

fi


# If no project was found or the connection string couldn't be set automatically
if [ -z "$project_conn_string" ]; then
    # Keep existing value if it exists
    if [ -n "${env_values[PROJECT_CONNECTION_STRING]}" ]; then
        echo "No Azure AI projects found. Keeping existing PROJECT_CONNECTION_STRING."
        project_conn_string="${env_values[PROJECT_CONNECTION_STRING]}"
    else
        echo "No Azure AI projects found and no existing PROJECT_CONNECTION_STRING."
        read -p "Enter PROJECT_CONNECTION_STRING manually: " project_conn_string
    fi
fi

# Update the environment value
env_values[PROJECT_CONNECTION_STRING]="$project_conn_string"

# Save all values to .env file
save_env_file

# Check if all required variables are now set
required_vars=(
    "AZURE_SEARCH_SERVICE_NAME" 
    "AZURE_SEARCH_ADMIN_KEY"
    "AZURE_OPENAI_ENDPOINT"
    "AZURE_OPENAI_KEY"
    "AZURE_OPENAI_DEPLOYMENT"
    "AZURE_OPENAI_EMBEDDING_DEPLOYMENT"
    "AZURE_OPENAI_API_VERSION"
    "PROJECT_CONNECTION_STRING"
    "AZURE_SUBSCRIPTION_ID"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${env_values[$var]}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -ne 0 ]; then
    echo "Warning: The following required environment variables are still missing or empty:"
    for var in "${missing_vars[@]}"; do
        echo "  - $var"
    done
    echo "Please edit $ENV_FILE to provide these values before continuing."
    exit 1
fi

echo "Environment configured successfully!"
echo "All required variables are set in $ENV_FILE"


