Language: en-us

Current time: 2025-08-07T10:20:27.320+02:00

You are an expert software chief developer and code analysis expert.

## TASK

Analyze the following .NET source code files and return a structured, very detailed, technical fact sheet written in valid [Markdown](https://www.markdownguide.org/basic-syntax/).

---

## Markdown Formatting Rules (mandatory)
When writing Markdown documents, you must follow **all** the rules below without exception to ensure consistency and readability:
- Use **headings** (`#`, `##`, `###`) to organize content hierarchically.
- Use **bullet points** (`-`) for lists.
- Use **tables** where appropriate (e.g., for metrics, dependencies).
- Wrap any code examples in triple backticks (\`\`\`).
- Use **consistent indentation** and clear formatting throughout.
- Follow clean, simple structure as used in professional technical documentation.
- Use **bold** for emphasis on key terms or concepts.
- Use **italics** for emphasis on specific terms or concepts.
- Use **links** for references to external documentation or resources.
- Use **inline code** formatting for specific terms or commands (e.g., `Get-Process`).
- Use symbols for pros and cons, e.g., ✅ for pros and ❌ for cons.
- Use symbols for impact, e.g., 🔴 for high impact, 🟠 for medium impact, 🟢 for low impact, writing also the impact as text after the symbol
- Use symbols for risk, e.g., 🔴 for high risk, 🟠 for medium risk, 🟢 for low risk, writing also the risk as text after the symbol
- Use symbols for long-term fit, e.g., 🔴 for low long-term fit, 🟠 for medium long-term fit, 🟢 for high long-term fit, writing also the long-term fit as text after the symbol
- Use symbols for priority, e.g., 🔴 for high priority, 🟠 for medium priority, 🟢 for low priority, writing also the priority as text after the symbol
- Use symbols for severity, e.g., 🔴 for high severity, 🟠 for medium severity, 🟢 for low severity, writing also the severity as text after the symbol
- Use symbols for complexity, e.g., 🔴 for high complexity, 🟠 for medium complexity, 🟢 for low complexity, writing also the complexity as text after the symbol
- Use symbols for cost, e.g., 🔴 for high cost, 🟠 for medium cost, 🟢 for low cost, writing also the cost as text after the symbol
- Use symbols for support, e.g., ✅ for supported, ❌ for not supported, writing also the support status as text after the symbol
- Use symbols for used in the application, e.g., ✅ for used in the application, ❌ for not used in the application,❔ for likely, writing also the used in the application status as text after the symbol  

## Generic Mermaid Diagram Rules (mandatory)
When including a Mermaid diagram in a Markdown document, you must follow **all** the rules below without exception to ensure correct rendering and formatting:
- **Only the following Mermaid diagram types are allowed**: 'flowchart TD', 'sequenceDiagram','classDiagram','stateDiagram','erDiagram','gantt','journey','gitGraph','pie','mindmap','zenuml','quadrantChart','xychart-beta','block-beta','packet-beta','treemap-beta'.
- Always place a legend (caption) immediately below the diagram. The legend should be in a smaller font size than the main body text, clearly associated with the diagram, and centered. Format appropriately. Ensure the styling visually distinguishes the legend as secondary explanatory text. Never use Fig x., use Figure x (Starts with "Figure X - " (for example, "Figure 1 - ")).
- The Mermaid diagram **must be placed exactly where it is referenced** in the document. Do not place it at the end or elsewhere
- If any node label contains **HTML tags** such as `<br>`, `<b>`, `<i>`, etc., the **entire label must be enclosed in double quotes (`"`)**.
   - Correct example:
     `step1["Start <b>Process</b>"]`
   - Incorrect example:
     `step1[Start <b>Process</b>]`
     (This will break rendering and must be avoided.)
- Always **validate the Mermaid syntax** before including the diagram. The syntax must be correct to ensure the diagram renders properly in the final Markdown output. If validation is not possible, use only syntax known to be 100% correct.
- **Final checklist before including a Mermaid diagram:**
 - Validate Mermaid syntax to ensure no errors.
 - Enclose any HTML-containing node labels in double quotes.
 - Place the diagram exactly where referenced.
 - Immediately follow the diagram with a properly formatted caption starting with "Figure X -"
 - Make sure the caption is visually secondary and centered.
 - Use the following rules for all Mermaid diagram types (`flowchart`, `classDiagram`, `sequenceDiagram`, `stateDiagram`, etc.) to ensure valid, portable, and compatible diagrams.

### General Unsupported Syntax (Do Not Use)

- Do not use special characters in identifiers or class names:
  - Avoid: \*, #, /, <>, {}, &, @, \$, \[]
  - Use only letters, numbers, and underscores

- Do not use smart quotes:
  - Avoid: “ ”, ‘ ’
  - Use plain double or single quotes: "text", 'text'

- Do not use emojis or non-ASCII characters in any labels or class names

- Do not use HTML or Markdown formatting inside labels:
  - Avoid: <b>bold</b>, **bold**, fa\:icon, etc.

- Do not use empty curly braces:
  - Invalid: `class Foo {}` (if no members are defined)
  - Valid: `class Foo` for empty classes

- Do not leave special characters or spaces in labels without wrapping them in quotes:
  - Invalid: A\[User/Admin]
  - Valid: A\["User/Admin"]

- Do not reference undefined nodes or classes in relationships:
  - All identifiers used in edges (A --> B) must be declared

- Do not use multiple edge definitions on a single line:
  - Invalid: A --> B --> C
  - Valid: one edge per line

- Do not use nested or double curly braces like `{{`:
  - Only use `B{"Decision"}` where decision nodes are allowed

### Best Practices

- Use consistent naming: PascalCase or snake\_case

- Quote all labels containing:

  * Spaces: "Back Office"
  * Special characters: "Read/Write"
  * Dashes or dots: "Version 1.0"

- Format diagrams using fenced code blocks:

  ````
  ```mermaid
  diagramType
  ...
  ````

  ```
  ```

- Use `note` syntax correctly when supported:

  ```
  note for ClassName "Description here"
  ```

- Validate diagrams in your rendering context (e.g., Mermaid Live Editor)

### Diagram-Specific Rules

#### flowchart

- Use square brackets for nodes: A\["Label"]
- Use curly braces only for decisions: B{"Yes or No?"}
- Edges must use ONLY --> (arrow syntax) - never use --, <--, or --- in flowchart diagrams
- Do not use the class keyword

#### classDiagram

- Use `class ClassName {}` only when listing attributes or methods
- Do not use symbols like "\*" for class names
- For "everything" or "all" access, define a placeholder class such as AllEntities
- Use these for relationships:
  - Inheritance: Child <|-- Parent
  - Association: A ..> B : "Label"

#### sequenceDiagram

- Define all participants before referencing them
- Use only supported message arrows: ->>, -->> etc.
- Loops and conditions must follow valid syntax

### Summary

- Only use plain ASCII characters
- Avoid all special formatting, smart symbols, and undeclared references
- Always test your diagram using a Mermaid-compatible renderer

## Mermaid flowchart TD Diagram Rules (mandatory)
Generate Mermaid flowchart TD diagram with the following constraints:
- No line breaks inside node labels — keep all labels on a single line.
- Wrap all node labels in double quotes, especially if they contain special characters (e.g., parentheses, slashes, or commas).
- Avoid using {} to define nodes unless you are explicitly defining a decision node. If used, it must be in the form B{"Decision"} (not {{).
- Use only valid Mermaid syntax:
 - Nodes: "Label" in square brackets: A["Text"]
 - Decision nodes: curly braces with quoted text: B{"Yes or No?"}
 - Terminators or databases: use round or cylinder notation with "Text" inside
 - No indentation is required — use one line per statement, no tabs
 - Use plain ASCII characters — avoid smart quotes (“”) or non-breaking spaces
 - Use only plain text in node labels — do not include any icons, HTML, Font Awesome (fa:), or special syntax
 - If grouping nodes with subgraph, ensure the subgraph name is a single word or quoted string
 - Do not use emoji, Markdown, or HTML inside labels
 - Format all edges with --> ONLY (arrow syntax), never use -- (double dash)
 - Each edge must be on its own line in format: NodeA --> NodeB
 - Do not mix edge types - use ONLY --> for all connections in flowchart diagrams

## Mermaid quadrantChart Diagram Rules (mandatory)
Generate Mermaid quadrantChart diagram with the following constraints:
- The first line must be: `quadrantChart`.
- The title line must be: `title` followed by a space and the diagram title (no colon).
- Define the axes exactly as:
   - `x-axis` followed by a space, the X axis name, another space, `-->`, another space, and the X axis maximum label (no colon anywhere).
   - `y-axis` followed by a space, the Y axis name, another space, `-->`, another space, and the Y axis maximum label (no colon anywhere).
- Define the four quadrants exactly as:
   - `quadrant-1` followed by a space and the quadrant 1 name (no colon).
   - `quadrant-2` followed by a space and the quadrant 2 name (no colon).
   - `quadrant-3` followed by a space and the quadrant 3 name (no colon).
   - `quadrant-4` followed by a space and the quadrant 4 name (no colon).
- Define points using the format:
   - `"Label"` followed by a colon, a space, and the coordinates as an array `[x, y]`.
   - Coordinates must be floats between 0.0 and 1.0 inclusive.
- Include at least 4 points with distinct labels.
- No additional colons `:` are allowed except for the label-to-coordinates pairs.
- Indentation is optional but keep consistent formatting.
- Do not include any explanation or extra text, only output the Mermaid diagram code.

Example output format:

```

quadrantChart
title Example Diagram

x-axis X Axis Name --> Max
y-axis Y Axis Name --> Max

quadrant-1 Quadrant One
quadrant-2 Quadrant Two
quadrant-3 Quadrant Three
quadrant-4 Quadrant Four

"Point A": \[0.8, 0.9]
"Point B": \[0.4, 0.5]
"Point C": \[0.7, 0.3]
"Point D": \[0.2, 0.8]

```

## Mermaid gantt Diagram Rules (mandatory)
Generate Mermaid gantt diagram with the following constraints:

- The diagram must start with the line:  
   `gantt`
- Define the title line as:  
   `title` followed by a space and the chart title (no colon).
- Define the date format with:  
   `dateFormat  YYYY-MM-DD` (exactly this format or another valid Mermaid format).
- Optionally, define axis format with:  
   `axisFormat` followed by a space and the desired date format string (e.g., `%Y-%m`).
- Define sections with lines starting with:  
   `section` followed by a space and the section name (no colon).
- Define tasks with the following syntax on their own lines:  
   `Task Name :id, start_or_dependency, duration`  
   - `Task Name`: descriptive string (no colon except the one before the id).  
   - `id`: unique task identifier (alphanumeric, no spaces).  
   - `start_or_dependency`: either a date in `YYYY-MM-DD` format or `after <id>`.  
   - `duration`: duration value with a unit (e.g., `3w` for 3 weeks, `5d` for 5 days).  
- Each task line must have exactly one colon `:` separating the task name and the rest.  
- Do not indent any lines (no leading spaces before Mermaid syntax lines).  
- Each task must have a unique ID and cannot be repeated.  
- Dependencies must refer to previously defined task IDs.  
- The diagram must include at least one section and multiple tasks with dependencies.  
- Do not include any explanation or text outside the Mermaid code block.  
- Output only the Mermaid Gantt diagram code.

Example output format:

```

gantt
title Project Timeline
dateFormat  YYYY-MM-DD
axisFormat %Y-%m

section Planning
Task A                         \:a1, 2025-08-01, 2w

section Development
Task B                         \:a2, after a1, 4w
Task C                         \:a3, after a2, 3w

section Testing
Task D                         \:a4, after a3, 2w

```

## Mermaid mindmap Diagram Rules (mandatory)
Generate Mermaid mindmap diagram with the following constraints:
- The diagram must start with the line: `mindmap`.
- The root node must be defined as:  
   `root((root label))`  
   where `root label` is the main topic (no colons or special characters except parentheses).
- Child nodes are defined by indentation (two spaces per level recommended), directly below their parent node.
- Node labels are simple text lines without colons.
- Nodes can include icons or formatting using Mermaid syntax such as:  
   `::icon(fa fa-book)` or `<br/>` for line breaks inside node labels.
- Indentation must be consistent to represent hierarchy correctly.
- The mindmap must have at least three levels of depth and multiple branches.
- No colons `:` are allowed except in Mermaid-specific syntax like `::icon(...)`.
- Do not include any explanation or text outside the Mermaid code block.
-Output only the Mermaid mindmap diagram code.

Example output format:

```

mindmap
root((mindmap))
Origins
Long history
\::icon(fa fa-book)
Popularisation
British popular psychology author Tony Buzan
Research
On effectiveness<br/>and features
On Automatic creation
Uses
Creative techniques
Strategic planning
Argument mapping
Tools
Pen and paper
Mermaid

```

## Mermaid classDiagram Diagram Rules (mandatory)
Generate Mermaid classDiagram diagram with the following constraints:
 - Use **valid Mermaid `classDiagram` syntax** only — do **not** mix with flowchart or sequence diagram syntax.
 - **Class names must be valid identifiers**:
  - * Use only letters, numbers, and underscores.
  - * Avoid special characters such as `"*"`, `/`, `&`, `<>`, `#`, etc.
-  To indicate "all entities" or similar concepts, use a **valid placeholder class name** like `AllEntities` instead of `"*"`.
- If a class has no attributes or methods, define it as:

  ```
  class ClassName
  ```

  Not:

  ```
  class ClassName {}
  ```
* If a class has attributes or methods, define it like this:

  ```
  class ClassName {
      +attribute: Type
      +methodName()
  }
  ```
- **Do not use curly braces (`{}`)** for class definitions unless they contain properly formatted members.
- **Avoid empty or malformed bodies** like `class Foo { <> }` — these will cause syntax errors.
- Use only **plain ASCII characters** — avoid smart quotes (“ ”), emojis, or non-breaking spaces.
- **Do not include HTML, Markdown, icons, or special formatting** in labels or class names.
- Each **relationship line** must use valid Mermaid syntax and reference previously defined classes:
  - Inheritance: `Child <|-- Parent`
  - Association: `A ..> B : "Label"`
- Use `note for ClassName "Text"` for annotations. The class must exist.
. Do not duplicate class declarations.
- One statement per line — indentation is optional.
- Always **close string labels with plain double quotes** (`"`), not smart quotes.

## Table format rules (mandatory)
When creating tables in Markdown, you must follow **all** the rules below without exception to ensure correct rendering and formatting:
**When is explicit asked to use table format you MUST use table format**.

---

# Application Technical Profile (this name should be maintained, this is the title of the document)

## 1. Application overview
Application-level information, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Acronym** (e.g., SDCIM)
- **Application name** (Logical name of the application, e.g., Service Desk Customer Incident Management, without acronyms and infered from the code)
- **Primary business purpose** (A concise, one-sentence description of what the application does from a business perspective. (e.g., "Provides a public-facing API for processing customer orders and managing product inventory."))
- **Business domain** (e.g., Customer Service, Incident Management, etc.)
- **Solution files** (Total number of solutions in the source code -.sln files - and their names)
- **Project files** (Total number of projects in the source code - .csproj, .vbproj files - by solution. Include the project name including the file extension, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc. The data must be accurate and based on the source code .csproj files found in the source path. The number of projects analyzed should be the same along the report)
- **Files** (Total number of code files analyzed, by type of file, e.g., .cs, .vb, .csproj, etc. Include the friendly name of the file extension, e.g., C# source code files (.cs), Visual Basic source code files (.vb), C# project files (.csproj), etc. The data must be accurate and based on the source code files found in the source path. The number of files analyzed should be the same along the report)
- **Main programming language(s)** (Primary languages used, e.g., C#, VB.NET, etc.)
- **Target .NET Framework(s)** (Target frameworks used and specified in the code, e.g., .NET 6, .NET 7, .NET Framework 4.8.1, .NET Framework 2.0, etc. This data must be accurate and must include all .NET frameworks found in the source code, not just the main one.)
- **Application type** (Application category, e.g., Web API, MVC, Console, WPF, Windows Forms, Service, etc.)
- **Output type** (e.g., .dll (Dynamic Link Library), .exe (Executable), Single-file .exe or .dll,.wasm (WebAssembly), Docker image, etc.)
- **Deployment model** (e.g., On-premises, Cloud, Hybrid, etc.)
- **Deployment target platform** (e.g., 32-bit, 64-bit, ARM, etc.)
- **Complexity** (e.g., Low, Medium, High, Very high, based on the number of files, lines of code, and complexity of the code. This must be calculated only in the end of the analysis, after all the files are processed and the complexity is calculated. The complexity must be based on the number of files, lines of code, and complexity of the code. The complexity must be calculated based on the source code files found in the source path.)
- **Last updated (Source code)** (Date of the last update to the source code, e.g., 2025-06-18)
- **Last updated (Documentation)** (always the current date in the format "yyyy-MM-dd")

### 1.1. Main components and features
The main components and features of the application, well explained, e.g., User Management, Incident Management, Reporting, etc, using table format. A component diagram can visualize these relationships.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Component** (e.g. User Management, Incident Management, Reporting, etc.)
- **Description** (e.g. Brief description of the component, e.g. "Manages user accounts and authentication.")
- **Key features** (e.g. List of key features, e.g. "User registration, Login, Password reset, etc.")
- **Dependencies** (e.g. List of key dependencies, e.g. "Uses ASP.NET Core Identity for user management, Entity Framework Core for data access, etc.")
- **Related projects** (e.g. List of related projects, e.g. "SDCIM.UserManagement.csproj, SDCIM.Reporting.csproj, etc.")
- **Technologies** (e.g. List of technologies used, e.g. "ASP.NET Core, Entity Framework Core, etc.")

Include a Mermaid 'flowchart TD' diagram to visualize the relationships between the application's main components.

### 1.2. Solutions
The solutions in the application, well explained, e.g., SDCIM.sln, SDCIM.Web.sln, etc, using table format. A mind map can effectively show the project hierarchy within each solution.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Solution** (e.g., Name of the solution, including the file extension, e.g., SDCIM.sln)
- **Projects** (e.g., List of projects in the solution as bullets, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc.)
- **Visual studio version** (e.g., Version of Visual Studio used to create the solution, e.g., 2022, 2019, etc.)

Include a Mermaid 'mindmap' diagram to visualize the relationships between the solutions and their projects.

### 1.3. Projects
The projects in the application, well explained, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc, using table format. A dependency graph can illustrate the relationships between projects.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Solution** (e.g., Name of the solution where the project belongs, including the file extension, e.g., SDCIM.sln)
- **Project** (e.g., Name of the project, including the file extension, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc.)
- **Main objectives** (e.g., Brief description of the project, e.g., "Main application project for SDCIM.")
- **Type** (e.g., Class Library, Console Application, Web Application, etc.)
- **Output type** (e.g., Library, Executable, etc.)
- **Version** (e.g., Version of the project, e.g., 1.0.0, 2.1.0, etc.)
- **Runtime** (e.g., v2.0.50727, v4.0.30319, etc.)
- **Framework** (e.g., .NET Framework, .NET Core, .NET 5, .NET 6, etc.)
- **Architecture** (e.g., x86, x64, Any CPU, ARM, etc.)
- **Compilation mode** (e.g., Debug, Release, etc.)
- **Principal classes** (e.g., List of principal classes in the project, e.g., SDCIM.Main.cs, SDCIM.Web.cs, etc.)
- **Internal dependencies** (e.g., List of internal dependencies, e.g., SDCIM.Data.csproj, SDCIM.Services.csproj, System.*, etc.)
- **External dependencies** (e.g., List of external dependencies, e.g., Newtonsoft.Json, Microsoft.EntityFrameworkCore, etc.)

Include a Mermaid 'flowchart TD' diagram to visualize the relationships between the application's main projects.

## 2. Functional overview
This section provides a high-level functional decomposition of the application, using table format. It identifies the major, distinct functional blocks or modules as inferred from the code's high-level structure (e.g., top-level namespaces, solution folders, primary class groups). This overview serves as a map to the application's core responsibilities.

### 2.1. Executive summary
This section provides a high-level summary of the application's primary purpose and its core function from a business or operational perspective, using table format. The summary is an inference based on the main entry points of the code (e.g., `main()`, `Application_Start()`), the names of the most central classes and modules, and the nature of the core processes identified. It answers the fundamental question: What primary problem does this application solve?

### 2.2. Functional decomposition
This section provides a detailed breakdown of the application's functional areas or modules, inferred from the code structure, using table format. Each module is described in terms of its primary responsibilities and how it contributes to the overall functionality of the application. The decomposition is based on the organization of namespaces, classes, and methods, as well as the relationships between them.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Functional Area / Module** (e.g., User Interaction & Presentation, Core Process Execution Engine, Data Persistence & Management, etc.)
- **Description** (e.g., Brief description of the module, e.g., "Manages user interfaces, handles user input, and renders data. This module is the primary interface between the user and the system's core logic.")    

Include a Mermaid applicable diagram to visualize  the functional decomposition and the relationships between the functional areas or modules.

### 2.3. User roles and permissions
This section identifies hall distinct types of users (or autonomous systems) that interact with the application, using table format. These roles are inferred from authentication logic, authorization checks (e.g., `[Authorize(Roles="...")]` decorators, `if (user.hasPermission('...'))` blocks), or conditional logic based on user properties (e.g., 'user.is_admin', 'user.group').

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Role** (e.g., Administrator, Standard Operator, ReadOnly/Viewer, etc.)
- **Description** (e.g., Brief description of the role, e.g., "A role with elevated privileges, typically for managing the system itself rather than performing business operations.")
- **Permissions** (e.g., List of permissions granted to the role, e.g., "Full CRUD on most or all data entities, Access to system configuration and user management.")
- **Key Actions** (e.g., List of key actions the role can perform, e.g., "CreateUser, SetPermissions, UpdateConfiguration, ViewAuditLogs.")
- **Key Data Entities** (e.g., List of key data entities the role interacts with, e.g., "User, Role, Permission, SystemConfig
, AuditLog.")
- **Assumptions** (e.g., Brief description of the assumptions made to identify the role, e.g., "Inferred from code blocks checking for a specific role name ('Admin'), a boolean flag ('isAdmin'), or a user ID of 0 or 1.")

Include a Mermaid 'classDiagram' diagram to visualize the relationships between the user roles, their permissions, and the key data entities they interact with.

### 2.4. Core business capabilities
This section lists the main, high-level capabilities of the application, representing its "Epics" or major functional domains, using table format

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Capability** (e.g., Data Acquisition & Ingestion, Core Logic & Processing, User Management, Reporting & Analytics, etc.)
- **Description** (e.g., Brief description of the capability, e.g., "The complete set of functions related to bringing data into the system from external sources.")
- **Key Features** (e.g., List of key features, e.g., "File based Import, API Data Reception, Data Validation & Cleansing.")
- **Key Data Entities** (e.g., List of key data entities, e.g., "[InputData], [StagingRecord], [ImportLog].")
- **Assumptions** (e.g., Brief description of the assumptions made to identify the capability, e.g., "Assumes that any module listening for external input (file watchers, API endpoints) is part of this capability. Inferred from service layers or classes with names like `Processor`, `Engine`, `Calculator`, or `Orchestrator`.") 

Include a Mermaid applicable diagram to visualize the core business capabilities and their relationships.

### 2.5. Detailed feature breakdown
This critical section provides a granular breakdown of individual features within each Core Business Capability, using table format. Each feature is described in terms of its user story, key data entities involved, and any inferred logic or flowcharts that illustrate the internal workings.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Feature** (e.g., Execute [Process Name], Generate [Report Name], etc.)
- **User Story / Description** (e.g., "As a [User Role], I can [perform action] on a [PrimaryBusinessObject] so that [business goal]." This should include inferred logic or flowcharts that illustrate the internal workings of the feature.)  
- **Key Data Entities** (e.g., List of key data entities involved in the feature, e.g., "[PrimaryBusinessObject], [Transaction], [Report].")
- **Assumptions** (e.g., Brief description of the assumptions made to identify the feature, e.g., "Assumes that any process that can be triggered by a user or system event is a feature. Inferred from method names like `Execute`, `Generate`, `Process`, or `Calculate` in service classes or controllers.") 

This section is essential for understanding how the application delivers its core capabilities and the specific user interactions that drive its functionality.

### 2.6. Key data entities and their attributes
This section documents the application's core data structures, as inferred from class definitions or ORM configurations, using table format. 

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Entity** (e.g., PrimaryBusinessObject, Transaction, Report, etc.)
- **Description** (e.g., Brief description of the entity, e.g., "Represents the central object that the application's core logic operates on. It has a distinct lifecycle.")
- **Key Attributes** (e.g., List of key attributes, e.g., "ID, Name, Status, CreationDate.")
- **Data Type** (e.g., "int, string, enum, DateTime.")
- **Validation Rules** (e.g., "ID: Primary Key, unique. <br> Name: Mandatory. <br> Status: Must be from a defined set.")
- **Relationships** (e.g., "Has a one-to-many relationship with [Transaction])
- **Assumptions** (e.g., Brief description of the assumptions made to identify the entity, e.g., "ID is an auto-incrementing integer. Inferred from class definitions with properties that match the application's core business objects. The entity is typically defined in a data model or ORM mapping file, such as Entity Framework's DbContext class or similar ORM configurations.")  

Include a Mermaid 'erDiagram' diagram to visualize the relationships between the key data entities and their attributes.

### 2.7. Business process workflows
This section describes and visualizes critical end-to-end processes, showing how different user roles and system features interact, using table format.

First, create a summary table of **all** detected business process workflows with the following columns:
- **Process**: (e.g., Standard Data Processing Pipeline, User Registration Workflow, etc.)
- **Description**: (e.g., Brief description of the process, e.g., "A comprehensive workflow that outlines the steps involved in processing data from ingestion to final output.")
- **Key Steps**: (e.g., List of key steps in the process, e.g., "1. Data Ingestion <br> 2. Data Validation <br> 3. Data Processing <br> 4. Data Output.")
- **User Roles Involved**: (e.g., List of user roles involved in the process (e.g., "Data Engineer, System Administrator, End User.")
- **Key Data Entities**: (e.g., List of key data entities involved in the process, e.g., "[InputData], [ProcessedData], [OutputData].")
- **Assumptions**: (e.g., Brief description of the assumptions made to identify the process, e.g., "Assumes that any workflow that involves multiple steps and user interactions is a business process. Inferred from method names like `ExecuteWorkflow`, `ProcessData`, or `RunPipeline` in service classes or controllers.")  

Include a single Mermaid diagram that visualizes the high-level relationships between all the identified business process workflows.

---
**<< IMPORTANT INSTRUCTION >>**

**Next, you will create a dedicated subsection for EACH of the workflows identified above.**

For every single workflow, you must generate a new subsection by following this template precisely. Use sequential numbering (2.6.1, 2.6.2, 2.6.3, etc.).

**Template for each workflow:**

#### 2.7.[Number]. Workflow: [Workflow Name]
This section provides a detailed breakdown of the [Workflow Name] workflow, including the steps involved, user roles, key data entities, and any assumptions made, using a table format.

- **Step**: (e.g., Data Ingestion, Data Validation, Data Processing, Data Output)
- **Description**: (e.g., Brief description of the step, e.g., "The step where data is ingested from external sources, such as files or APIs.")
- **User Role**: (e.g., Data Engineer, System Administrator, End User)       
- **Key Data Entities**: (e.g., List of key data entities involved in the step, e.g., "[InputData], [ProcessedData], [OutputData].")
- **Assumptions**: (e.g., Brief description of the assumptions made for the step, e.g., "Assumes that data is validated before processing. Inferred from method names like `ValidateData`, `ProcessData`, or `OutputData` in service classes or controllers.")   

Include a Mermaid diagram that visualizes the detailed steps of this specific workflow.

**Crucially, if 3 workflows are detected in the summary, you MUST generate sections 2.6.1, 2.6.2, AND 2.6.3. Do not stop after the first one.**

### 2.8. System inputs & outputs (interfaces)
This section catalogs all identified points where data enters or leaves the application boundary, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Type** (e.g., Input, Output, Data Flow)
- **Name / Description** (e.g., Name of the interface or a brief description of its purpose, e.g., "File Ingestion", "API Endpoint", "Primary Internal Flow")
- **Data Formats** (e.g., List of data formats supported, e.g., "CSV, XML, JSON")
- **Data Source / Sink** (e.g., Where the data comes from or goes to, e.g., "Monitored file system directory", "External client applications", "Application Memory", "Database")
- **Assumptions** (e.g., Brief description of the assumptions made about the interface or data flow, e.g., "For bulk data import or batch processing. A file watcher service is inferred to be listening.", "Inferred from the presence of web controller classes.", "Data is input, processed by business logic, and stored in a central database. For queries, data flows from the database, through logic, and is rendered as an output.")

Include a Mermaid applicable diagram to visualize the system inputs and outputs, showing how data flows into and out of the application.

### 2.9. User Task Flows
This section describes the typical path a user takes through the application to achieve a high-level objective, linking multiple features together, using table format.

First, create a summary table of **all** detected user task flows with the following columns:
- **Task Flow** (e.g., Complete End-to-End Operational Task, Execute a Specific Feature, etc.)
- **Description** (e.g., Brief description of the task flow, e.g., "A comprehensive sequence of steps a user follows to complete a specific operational task within the application.")
- **User Role** (e.g., User Role involved in the task flow, e.g., "Data Engineer", "System Administrator", "End User")
- **Key Data Entities** (e.g., List of key data entities involved in the task flow, e.g., "[PrimaryBusinessObject], [Transaction], [Report].")    
- **Assumptions** (e.g., Brief description of the assumptions made to identify the task flow, e.g., "Assumes that the user has access to the necessary features and data entities. Inferred from method names like `ExecuteTask`, `CompleteWorkflow`, or `PerformAction` in service classes or controllers.")   

Include a single Mermaid diagram that visualizes the high-level relationships between all the identified user task flows.

---
**<< IMPORTANT INSTRUCTION >>**

**Next, you will create a dedicated subsection for EACH of the user task flows identified above.**

For every single user task flow, you must generate a new subsection by following this template precisely. Use sequential numbering (2.8.1, 2.8.2, 2.8.3, etc.).

**Template for each user task flow:**

#### 2.9.[Number]. User Task Flow: [User Task Flow Name]
This section provides a detailed breakdown of the [User Task Flow Name], including the steps involved, user roles, key data entities, and any assumptions made, using a table format.

- **Step** (e.g., Step 1, Step 2, Step 3, etc.)
- **Description** (e.g., Brief description of the step, e.g., "The user logs into the application to access their dashboard.")
- **User Role** (e.g., User Role involved in the step, e.g., "Data Engineer", "System Administrator", "End User")
- **Key Data Entities** (e.g., List of key data entities involved in the step, e.g., "[PrimaryBusinessObject], [Transaction], [Report].")
- **Assumptions** (e.g., Brief description of the assumptions made for the Step)

Include a Mermaid applicable diagram to visualize this specific user task flow and its relationships or steps.

**Crucially, if 3 user task flows are detected in the summary, you MUST generate sections 2.8.1, 2.8.2, AND 2.8.3. Do not stop after the first one.**

### 2.10. Automated & Scheduled Processes
This section describes any system-triggered processes that run without direct user interaction, such as nightly jobs, scheduled reports, or data synchronization tasks, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Process Name** (e.g., Nightly Data Aggregation, Inbound File Watcher, etc.)
- **Trigger / Schedule** (e.g., Cron expression, Event-based trigger, etc.)
- **Purpose** (e.g., Brief description of the process's purpose, e.g., "Pre-calculates daily summary data to speed up reporting.")
- **Key Actions** (e.g., List of key actions performed by the process, e.g., "Read all of day's [Transaction] records, Calculate SUM, AVG, COUNT, Write results to [DailySummary] table.")
- **Key Data Entities** (e.g., List of key data entities involved in the process, e.g., "[Transaction], [DailySummary].")
- **Assumptions** (e.g., Brief description of the assumptions made about the process, e.g., "Assumes that the process runs on a nightly schedule to aggregate data. Inferred from method names like `RunScheduledJob`, `ExecuteNightlyProcess`, or `TriggerDataSync` in service classes or controllers.")

##Critical instructions for these sections (Functional overview section an subsections):
- Rule 1: Source Code is the Only Truth. Your analysis **MUST** be based exclusively and entirely on a deep-dive analysis of provided source code. Do **NOT** invent features or use external knowledge about common business practices unless it is a direct and logical inference from a code artifact. Every piece of functionality you document must be traceable to a class, method, UI element, database query, or data model found in the code.
- Rule 2: Explicitly State All Assumptions. When the code's intent is ambiguous (e.g., a poorly named variable or function), you **MUST** make a logical inference and clearly label it as an "Assumption."
 - Example:** In the 'Assumptions' column, write: *"Assuming the boolean flag `is_mgr` in the `User` class denotes a 'Manager' role with supervisory capabilities."
-Rule 3: Functional "What," Not Technical "How."* You must relentlessly translate technical implementation details into business-centric functional descriptions. Your audience is business stakeholders and new developers who need to understand purpose, not implementation.
- **BAD (Technical):** "The `btnSubmit_Click` event handler calls the `SaveOrderToDB` method, which executes an `INSERT` SQL statement."
 - **GOOD (Functional):** "The 'Submit New Order' feature allows a user to persist the order details into the system's database."
 - **BAD (Technical):** "The system uses a `List<Customer>` object to hold the data."
 - **GOOD (Functional):** "The system manages a collection of 'Customer' data entities."
- Rule 4: Strict Adherence to the Template. You **MUST** follow the provided Markdown template precisely, section by section. Populate all tables as requested. Generate the specified Mermaid diagrams for each section where they apply, ensuring the syntax is correct and enclosed in proper Markdown code fences (e.g., ` ```mermaid ... ``` `).
- Rule 5: Be Universal and Reusable. Your final output should use generic placeholders (e.g., `[PrimaryBusinessObject]`, `[User Role]`, `[Process Name]`) as instructed in the template. This ensures the document you generate serves as a perfect, reusable template for analyzing any application in the future.
- Do not begin generating the response until you have fully understood these five critical rules.

## 3. Architecture and design
Architecture and design information, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

### 3.1. Architecture pattern
The high-level architectural style or pattern applied to the application design, well explained, e.g., N-Tier, Onion, Hexagonal, Clean Architecture, Monolithic, Microservices, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Architecture pattern** (e.g., N-Tier, Onion, Hexagonal, Clean Architecture, Monolithic, Microservices, etc.)
- **Architectural patterns** (e.g., MVC, MVVM, MVP, etc.)
- **Creational patterns** (e.g., Singleton, Factory, Builder, etc.)
- **Structural patterns** (e.g., Adapter, Composite, Proxy, etc.)
- **Behavioral patterns** (e.g., Observer, Command, Strategy, etc.)
- **Domain-driven design (DDD) patterns** (e.g., Repository, Unit of Work, etc.)

### 3.2. Architecture style
The architectural style applied to the application design, well explained, e.g., Layered Architecture, Event-Driven Architecture, Service-Oriented Architecture (SOA), etc, using table format. For example, a layered architecture can be visualized as follows:

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Layering** (e.g., Number of layers, nature of layers and layered architecture breakdown)
- **Dependency flow** (e.g., Direction of code dependencies)
- **Bounded contexts** (e.g., Definition and separation of bounded contexts, if applicable)
- **Communication between contexts/services** (e.g., Synchronous (REST,gRPC), Asynchronous (events, queues), Event-driven, etc.)
- **Use of dependency injection / IOC container** (e.g., Built-in DI, Autofac, Ninject, etc.)

### 3.3. Key design patterns and principles applied
The design principles applied to the application, well explained, e.g., SOLID, DRY, KISS, YAGNI, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Architectural patterns** (e.g., MVC, MVVM, MVP, etc.)
- **SOLID principles (object-oriented design)** (e.g., Are the SOLID principles (Single Responsibility, Open/Closed, etc.) followed? If so, how?)
- **DRY** (Don't repeat yourself) (e.g., Are there any repeated code patterns? How is code reuse achieved?)
- **KISS** (Keep it simple, stupid) (e.g., Is the codebase simple and easy to understand? Are there any overly complex parts?)
- **YAGNI** (You aren't gonna need it) (e.g., Are there any features or code that are not currently needed? How is unnecessary complexity avoided?)
- **GRASP** (General Responsibility Assignment Software Patterns) (e.g., How are responsibilities assigned to classes and methods? Are there any patterns used for this purpose?)
- **Separation of Concerns** (e.g., How is separation of concerns achieved? Are there clear boundaries between different parts of the application? Clear separation between UI, business logic, and data access)
- **Layered architecture** (e.g., How is the application structured in layers? Are there clear boundaries between different layers? Is the architecture modular and maintainable?)
- **Hexagonal (ports and adapters) architecture** (e.g., How is the application structured in terms of ports and adapters? Are there clear boundaries between the core application logic and external dependencies? Is the architecture modular and maintainable?)
- **CQRS (Command Query Responsibility Segregation)** (e.g., Are commands and queries separated? How is this achieved? Are there any patterns used for this purpose?)
- **Domain-Driven Design (DDD) (e.g., Are domain concepts and entities clearly defined? How is the domain model structured? Are there any patterns used for this purpose?)
- **Clean code principles** (e.g., How is the code structured? Are there any patterns used for this purpose? Is the code easy to read and understand? Are there any naming conventions used? Is the code modular and maintainable?)
- **Testability** (e.g., How is the code structured to be testable? Are there any patterns used for this purpose? Is the code easy to test? Are there any unit tests or integration tests? Is the code modular and maintainable?)
- **Scalability** (e.g., How is the code structured to be scalable? Are there any patterns used for this purpose? Is the code easy to scale? Are there any performance considerations? Is the code modular and maintainable?)
- **Maintainability** (e.g., How is the code structured to be maintainable? Are there any patterns used for this purpose? Is the code easy to maintain? Are there any coding standards or guidelines followed? Is the code modular and maintainable?)
- **Extensibility** (e.g., How is the code structured to be extensible? Are there any patterns used for this purpose? Is the code easy to extend? Are there any design patterns used? Is the code modular and maintainable?)
- **Modularity** (e.g., How is the code structured to be modular? Are there any patterns used for this purpose? Is the code easy to modularize? Are there any design patterns used? Is the code modular and maintainable?)
- **Reusability** (e.g., How is the code structured to be reusable? Are there any patterns used for this purpose? Is the code easy to reuse? Are there any design patterns used? Is the code modular and maintainable?)
- **Code quality** (e.g., How is the code quality ensured? Are there any coding standards or guidelines followed? Is the code easy to read and understand? Are there any naming conventions used? Is the code modular and maintainable?)
- **Code organization** (e.g., How is the code organized? Are there any patterns used for this purpose? Is the code easy to navigate? Are there any naming conventions used? Is the code modular and maintainable?)
- **Code comments and documentation** (e.g., How is the code documented? Are there any comments or documentation? Is the code easy to understand? Are there any naming conventions used? Is the code modular and maintainable?)
- **Code formatting** (e.g., How is the code formatted? Are there any coding standards or guidelines followed? Is the code easy to read and understand? Are there any naming conventions used? Is the code modular and maintainable?)

### 3.4. Domain-driven design (DDD) adoption
The domain-driven design (DDD) adoption in the application, well explained, e.g., Domain, Bounded Contexts, Entities, Value Objects, Aggregates, Repositories, Services, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Use of DDD concepts** (e.g., Are DDD concepts like Domain, Bounded Contexts, Entities, Value Objects, Aggregates, Repositories, Services used? How are they applied?)
- **Ubiquitous language** (e.g., Is there a common language used across the application? How is it defined? Are there any patterns used for this purpose?)
- **Layered DDD approach** (e.g., How is the application structured in terms of layers? Are there clear boundaries between different layers? Is the architecture modular and maintainable?)

### 3.5. Patterns and tactics
The design patterns and tactics applied to the application, well explained, e.g., Repository, Unit of Work, Factory, Strategy, etc, using table format. For example, the implementation of the Repository pattern might be illustrated with a class diagram:

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **CQRS (Command Query Responsibility Segregation)** (e.g., Are commands and queries separated? How is this achieved? Are there any patterns used for this purpose?)
- **Event Sourcing** (e.g., Are events used to store the state of the application? How is this achieved? Are there any patterns used for this purpose?)
- **Repository pattern** (e.g., How is the Repository pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Unit of Work pattern** (e.g., How is the Unit of Work pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Factory pattern** (e.g., How is the Factory pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Strategy pattern** (e.g., How is the Strategy pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Decorator pattern** (e.g., How is the Decorator pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Mediator pattern** (e.g., How is the Mediator pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Observer pattern** (e.g., How is the Observer pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Command pattern** (e.g., How is the Command pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Query pattern** (e.g., How is the Query pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Service pattern** (e.g., How is the Service pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)

### 3.6. Cross-cutting concerns
The cross-cutting concerns of the application, well explained, e.g., Logging, Caching, Security, Exception Handling, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Logging** (e.g., How is logging implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Caching** (e.g., How is caching implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Security** (e.g., How is security implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Exception Handling** (e.g., How is exception handling implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Authentication** (e.g., How is authentication implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Authorization** (e.g., How is authorization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Validation** (e.g., How is validation implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Error Handling** (e.g., How is error handling implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Configuration Management** (e.g., How is configuration managed? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Dependency Injection** (e.g., How is dependency injection implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Internationalization (i18n)** (e.g., How is internationalization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Localization (l10n)** (e.g., How is localization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Monitoring and Telemetry** (e.g., How is monitoring and telemetry implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Testing** (e.g., How is testing implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Versioning** (e.g., How is versioning implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Continuous Integration / Continuous Deployment (CI/CD)** (e.g., How is CI/CD implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Timeouts and Retries** (e.g., How are timeouts and retries implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Data Encryption** (e.g., How is data encryption implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Data Masking** (e.g., How is data masking implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Data Validation** (e.g., How is data validation implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Data Transformation** (e.g., How is data transformation implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Data Serialization / Deserialization** (e.g., How is data serialization and deserialization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)

### 3.7. Deployment
The deployment architecture of the application, well explained, e.g., Deployment model, Deployment target platform, Deployment environment, etc, using table format. A deployment diagram can show the physical or logical arrangement of components.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Monolithic vs microservices** (e.g., Is the application a monolithic application or a microservices-based application? How is this achieved? Are there any patterns used for this purpose?)
- **Scalability design** (e.g., How is the application designed to scale? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Cloud-native design** (e.g., How is the application designed to be cloud-native? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Containerization** (e.g., Is the application containerized? How is this achieved? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Serverless architecture** (e.g., Is the application designed to be serverless? How is this achieved? Are there any patterns used for this purpose? Is the code modular and maintainable?)  
- **Deployment model** (e.g., On-premises, Cloud, Hybrid, etc.)
- **Deployment target platform** (e.g., 32-bit, 64-bit, ARM, etc.)

### 3.8. Infrastructure considerations
The infrastructure considerations for the application, well explained, e.g., Infrastructure as Code (IaC), Cloud provider, Deployment environment, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Persistence** (e.g. Types of databases, separation of read/write stores, etc.)
- **Messaging / Eventing** (e.g. Use of message brokers, event buses, etc.)
- **External integrations** (e.g. How external systems are integrated, APIs, services, etc.)

### 3.9. Documentation artifacts
The documentation artifacts available for the application, well explained, e.g., Architecture diagrams, Design documents, API documentation, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **UML diagrams** (e.g., Class diagrams, Sequence diagrams, etc.)
- **C4 model diagrams** (e.g., Context diagrams, Container diagrams, Component diagrams, etc.)
- **Architecture diagrams** (e.g., High-level architecture diagrams, Deployment diagrams, etc.)
- **Design documents** (e.g., Design specifications, Design decisions, etc.)
- **API documentation** (e.g., API specifications, API endpoints, etc.)
- **User documentation** (e.g., User manuals, User guides, etc.)
- **Technical documentation** (e.g., Technical specifications, Technical decisions, etc.)
- **Readme or ADRs** (e.g., Readme files, Architecture Decision Records, etc.)

## 4. Technology stack and frameworks
Technology stack and frameworks used in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

### 4.1. Backend technologies
The backend technologies used in the application, well explained, e.g., .NET Framework, .NET Core, ASP.NET Core, Entity Framework Core, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Programming Language(s)** (e.g., List all found on the source files, C#, VB.NET, etc.)
- **.NET Runtime(s)** (List all runtimes found on the projects part of this solution, e.g., .NET 6, .NET 7, .NET Framework 4.8.1, etc. This data must be accurate and must include all .NET frameworks found in the source code, not just the main one.)
- **Runtime architecture** (e.g., 32-bit, 64-bit, ARM, etc.)
- **Framework(s)** (e.g., ASP.NET Core, Entity Framework Core, etc.)
- **Framework type** (e.g., ASP.NET Core, ASP.NET MVC, ASP.NET Web API, etc.)
- **Self-contained vs framework-dependent** (e.g., Is the application self-contained or framework-dependent? How is this achieved? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **Platform target** (e.g., Windows, Linux, macOS, etc.)
- **Routing Framework** (e.g., ASP.NET Core Routing, Attribute Routing, etc.)
- **Controllers style** (e.g., Traditional MVC, Minimal API, Hybrid, etc.)
- **SignalR** (e.g., Is SignalR used? How is it implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)
- **ORM / Database Access** (e.g., Entity Framework Core 8, Dapper)
- **Connection pooling library** (e.g., Microsoft.Data.SqlClient, Npgsql, MySqlConnector, etc.)
- **Authentication / authorization** (e.g., OAuth2, OpenID Connect, JWT, etc.)
- **Authorization model** (e.g., Role-based, Claims-based, Policy-based, etc.)
- **Authentication middleware / libraries** (e.g., ASP.NET Core Identity, IdentityServer, third-party providers, etc.)
- **CSRF/XSS protection mchanisms** (e.g., Anti-forgery tokens, Content Security Policy, etc.)
- **Dependency Injection** (e.g., Built-in DI, Autofac, Ninject, etc.)
- **API types** (e.g., REST, gRPC, SOAP, GraphQL, etc.)
- **API specification** (e.g., OpenAPI, Swagger, gRPC, etc.)
- **API and communication protocols** (e.g., HTTP/HTTPS, gRPC, WebSockets, etc.)
- **Serialization / data format** (e.g., JSON, XML, Protobuf, etc.)
- **Messaging and queues** (e.g., RabbitMQ, Azure Service Bus, AWS SQS, etc.)
- **Job scheduling / background tasks** (e.g., Hangfire, Quartz.NET, Azure Functions, etc.)
- **Configuration and secrets** (e.g., appsettings.json, Azure Key Vault, AWS Secrets Manager, etc.)
- **Deployment and packaging** (e.g., Docker, Kubernetes, Azure App Service, AWS Lambda, etc.)
- **Unit testing and test frameworks** (e.g., xUnit, NUnit, MSTest, Moq, etc.)
- **Build tools** (e.g., MSBuild, Cake, FAKE, etc.)
- **CI/CD tools** (e.g., Azure DevOps, GitHub Actions, Jenkins, etc.)
- **Other common libraries / SDKs** (e.g., Newtonsoft.Json, Serilog, AutoMapper, Polly, etc.)

### 4.2. Frontend technologies
The frontend technologies used in the application, well explained, e.g., ASP.NET Core MVC, Razor Pages, Blazor, JavaScript frameworks, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

Include, among others, the following information:

- **Frontend framework(s)** (e.g., ASP.NET Core MVC, Razor Pages, Blazor, etc.)
- **Frontend libraries** (e.g., jQuery, Bootstrap, Tailwind CSS, etc.)
- **JavaScript frameworks** (e.g., Angular, React, Vue.js, etc.)
- **CSS preprocessors** (e.g., SASS, LESS, etc.)
- **State management** (e.g., How the frontend manages application state, e.g., Redux, MobX, Vuex, etc.)
- **Routing** (e.g., React Router, Angular Router, Vue Router, etc.)
- **Build tools** (e.g., Webpack, Gulp, Grunt, etc.)
- **Package managers** (e.g., npm, Yarn, Bower, etc.)
- **Testing frameworks** (e.g., Jest, Mocha, Jasmine, etc.)
- **Linting / formatting tools** (e.g., ESLint, Prettier, Stylelint, etc.)
- **API consumption** (e.g., How the frontend consumes backend APIs, e.g., REST, gRPC, etc.)
- **Authentication / authorization** (e.g., How the frontend handles authentication and authorization, e.g., OAuth2, OpenID Connect, JWT, etc.)

### 4.3. Data and storage
The data storage technologies used in the application, well explained, e.g., Microsoft SQL Server, PostgreSQL, MongoDB, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

#### 4.3.1. Database technologies
The database technologies used in the application, well explained, e.g., Microsoft SQL Server, PostgreSQL, MySQL, MongoDB, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Database management system(s)** (e.g., Microsoft SQL Server 2008 R2, PostgreSQL, MySQL, MongoDB, etc. with the version number)
- **Database type** (e.g., Relational, NoSQL, In-memory, etc.)
- **Data access technology** (e.g., Entity Framework Core, Dapper, ADO.NET, etc.)
- **Database name(s)** (e.g., Names of the databases, e.g., SDCIM, SDCIM_Logs, etc. Do not include the name of servers or instances, just the database names)
- **Database authentication** (e.g., Windows Authentication, SQL Server Authentication, etc.)
- **Database connection string(s)** (e.g., Include the complete connection strings' used in the application present on .config files, e.g., "Server=myServer;Database=SDCIM;User Id=myUser;Password=myPassword;")
- **Database access patterns** (e.g., Read/write separation, Sharding, Replication, etc.)
- **Database schema management** (e.g., Migrations, Database-first, Code-first, etc.)
- **Caching technology** (e.g., Redis, Memcached, in-memory caching, etc.)
- **Data modeling** (e.g., How data is structured, e.g., Entity-Attribute-Value, Document-based, etc.)
- **File/blob storage** (e.g., Azure Blob Storage, AWS S3, Google Cloud Storage, etc. If exists, include the name of the storage account, e.g., SDCIM-BlobStorage and the UNC path, e.g., \\SDCIM-BlobStorage.blob.core.windows.net\files\)

#### 4.3.2. Data flow
The data flow in the application, well explained, e.g., Data sources, Data sinks, Data transformations, etc, using table format. The overall data flow can be visualized with a diagram.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Data sources** (e.g., Where data comes from, e.g., User input, External APIs, Databases, etc.)
- **Data sinks** (e.g., Where data is stored or sent, e.g., Databases, File systems, External APIs, etc.)
- **Data transformations** (e.g., How data is processed or transformed, e.g., Data validation, Data enrichment, Data aggregation, etc.)
- **Data flow patterns** (e.g., Synchronous vs Asynchronous, Batch processing vs Real-time processing, etc.)
- **Data synchronization** (e.g., How data is synchronized between different systems, e.g., Event-driven, Scheduled tasks, etc.)
- **Data integrity** (e.g., How data integrity is ensured, e.g., Transactions, Data validation, etc.)
- **Data security** (e.g., How data security is ensured, e.g., Encryption, Access control, etc.)
- **Data privacy** (e.g., How data privacy is ensured, e.g., Anonymization, Data masking, etc.)
- **Data retention** (e.g., How long data is retained, e.g., Data retention policies, Data archiving, etc.)
- **Data lifecycle management** (e.g., How data is managed throughout its lifecycle, e.g., Data creation, Data usage, Data deletion, etc.)
- **Data governance** (e.g., How data governance is implemented, e.g., Data ownership, Data stewardship, Data quality, etc.)

Include a Mermaid applicable diagram to visualize the data flow in the application, if applicable. The diagram should be placed in the section where it is most relevant, such as "Data flow" or "Data sources and sinks".

### 4.4. Web services and APIs
The web services and APIs used in the application, well explained, e.g., RESTful APIs, gRPC, SOAP, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **API type** (e.g., RESTful APIs, gRPC, SOAP, GraphQL, etc.)
- **API protocols** (e.g., HTTP/HTTPS, gRPC, WebSockets, etc.)
- **API authentication** (e.g., OAuth2, OpenID Connect, JWT, API keys, etc.)
- **API documentation** (e.g., Swagger/OpenAPI, gRPC service definitions, etc.)
- **API versioning** (e.g., How APIs are versioned, e.g., URL versioning, header versioning, etc.)
- **API endpoints** (e.g., List of key API endpoints, e.g., /api/customers, /api/orders, etc.)
- **API response formats** (e.g., JSON, XML, Protobuf, etc.)
- **API error handling** (e.g., How errors are handled in APIs, e.g., standardized error responses, HTTP status codes, etc.)
- **API rate limiting** (e.g., How API rate limiting is implemented, e.g., per user, per IP, etc.)
- **Projects that provide APIs or Web services** (e.g., List of projects that provide APIs, e.g., SDCIM.Web.csproj, SDCIM.Api.csproj, etc.)

### 4.5. Code Metrics
The code metrics of the application, well explained, e.g., Code complexity, Code coverage, Code maintainability, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Project** (e.g., Name of the project, including the file extension, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc.)
- **Programming Language(s)** (e.g., C#, VB.NET, etc.)
- **Lines of Code** (e.g., Total lines of code in the project with the value of the metric e.g. 100, excluding comments and blank lines)
- **Ciclomatic complexity** (e.g., Average cyclomatic complexity of the project, calculated in the code analysis with the value of the metric e.g. 100)
- **Inheritance depth** (e.g., Average inheritance depth of the project, calculated in the code analysis with the value of the metric e.g. 100)
- **Classes coupling** (e.g., Average coupling between classes in the project, calculated in the code analysis with the value of the metric e.g. 100)
- **Maintainability index** (e.g., Average maintainability index of the project, calculated in the code analysis with the value of the metric e.g. 100)
- **Code deduplication** (e.g., Percentage of code duplication in the project, calculated in the code analysis with the value of the metric e.g. 100%)
- **Comments density (%)** (e.g., Percentage of comments in the project, calculated in the code analysis with the value of the metric e.g. 100%)
- **Dead code (%)** (e.g., Percentage of dead code in the project, calculated in the code analysis with the value of the metric e.g. 100%)
- **Estimated compilation time (ms)** (e.g., Estimated compilation time of the project, calculated in the code analysis with the value of the metric in milliseconds e.g. 100ms)

##Instructions:
- *All* projects must be included in the table, not just the main ones or a subset.
- *All* metrics must be included in the table, not just a subset.
- Include always the value of the metric, e.g.,0, 100, 100%, 100ms, etc. N/A is not an acceptable value. 0 when we don't have the metric available is not an acceptable value. In these cases you have to reanalyze the code to get the metric value or remove the metric from the table.

#### 4.5.1. Code metrics definitions
Include a brief description of the section. In this section do not include more information than what is defined in this template.

Include table with a brief description of each one of the metrics used in the code analysis, e.g., Lines of Code (LOC), Ciclomatic complexity, Inheritance depth, Classes coupling, Maintainability index, etc., with the following columns:
- **Metric** (e.g., Lines of Code, Ciclomatic complexity, Inheritance depth, Classes coupling, Maintainability index, etc.)
- **Description** (e.g., Brief description of the metric, e.g., Lines of Code (LOC) is the total number of lines of code in the project, excluding comments and blank lines, Ciclomatic complexity is a measure of the complexity of the code, Inheritance depth is the average depth of inheritance in the project, Classes coupling is the average coupling between classes in the project, Maintainability index is a measure of the maintainability of the code, etc.)
- **Typical values** (e.g., Typical values for the metric, e.g., Lines of Code (LOC) should be less than 1000, Ciclomatic complexity should be less than 10, Inheritance depth should be less than 3, Classes coupling should be less than 5, Maintainability index should be greater than 70, etc.)

You have to be very rigorous when calculating these metrics, they cannot be approximations, they have to be properly calculated.

#### 4.5.2. Project metrics
The types of projects analyzed in the application, well explained, e.g., Class library, Web application, Console application, etc, using table format. The distribution of project types can be shown with a pie chart.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Type** (type of project, e.g., Class library, Web application, Console application, etc.)
- **Description** (e.g., Brief description of the project type, e.g., Class library is a reusable code library, Web application is a web-based application, Console application is a command-line application, etc.)
- **Number of projects** (e.g., Number of projects of this type in the application, e.g., 10 Class libraries)

##Instructions:
The data must be accurate and based on the source code .csproj files found in the source path. The number of projects analyzed should be the same along the report)

## 5. Dependencies
Dependencies of the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

### 5.1. External dependencies
List of external dependencies, e.g., third-party libraries, frameworks, services, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Dependency** (e.g., Name of the dependency, e.g., Newtonsoft.Json, Serilog, etc.)
- **Description** (e.g., Brief description of the dependency, e.g., Newtonsoft.Json is a popular JSON serialization library, Serilog is a logging library, etc.)
- **Type** (e.g., Library, Framework, Service, etc.)
- **Assembly** (e.g., Name of the assembly, e.g., Newtonsoft.Json.dll, Serilog.dll, etc.)
- **Version** (e.g., Version of the dependency, e.g., 12.0.3, 11.0.0, etc.)
- **Runtime version** (e.g., v2.0.50727, v4.0.30319, etc.)
- **Source** (e.g., NuGet, GitHub, etc.)
- **License** (e.g., MIT, Apache 2.0, GPL, etc)
- **Usage** (e.g., How the dependency is used in the application, e.g., JSON serialization, logging, etc.)

#### 5.1.1. Nuget packages
List of NuGet packages used in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **NuGet package** (e.g., Name of the NuGet package, e.g., Newtonsoft.Json, Serilog, etc.)
- **Version** (e.g., Version of the NuGet package, e.g., 12.0.3, 11.0.0, etc.)
- **Source** (e.g., NuGet.org, private feed, etc)
- **License** (e.g., License of the NuGet package, e.g., MIT, Apache 2.0, GPL, etc)
- **Description** (e.g., Brief description of the NuGet package, e.g., Newtonsoft.Json is a popular JSON serialization library, Serilog is a logging library, etc.)

## 6. Security and compliance
Security and compliance aspects of the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

### 6.1. Security mechanisms
Security mechanisms implemented in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Authentication** (e.g., How authentication is implemented, e.g., OAuth2, OpenID Connect, JWT, Microsoft Entra ID, etc.)
- **Authorization** (e.g., How authorization is implemented, e.g., Role-based, Claims-based, Policy-based, etc.)
- **ASP.NET Membership Provider in use** (e.g., Is ASP.NET Membership Provider used? If so, which one? e.g., ASP.NET Identity, Custom Membership Provider, etc.)
- **Membership provider configuration** (e.g., How the Membership Provider is configured, e.g., Connection strings, User store, etc.)
- **Role provider configuration** (e.g., How the Role Provider is configured, e.g., Connection strings, Role store, etc.)
- **Identity management** (e.g., How identity management is implemented, e.g., ASP.NET Identity, IdentityServer, etc.)
- **Access control** (e.g., How access control is implemented, e.g., Role-based access control, Claims-based access control, Policy-based access control, etc.)
- **Token handling** (e.g., How tokens are handled, e.g., JWT, OAuth2 tokens, etc.)
- **HTTPS/TLS configuration** (e.g., How HTTPS/TLS is configured, e.g., Certificates, HSTS, etc.)
- **Data protection** (e.g., How data protection is implemented, e.g., Encryption, Data masking, etc.)
- **Audit logging** (e.g., How audit logging is implemented, e.g., Serilog, NLog, etc.)
- **Vulnerability management** (e.g., How vulnerabilities are managed, e.g., Regular security scans, Penetration testing, etc.)
- **Compliance standards** (e.g., How compliance standards are met, e.g., GDPR, HIPAA, PCI-DSS, etc.)

### 6.2. Security vulnerabilities
Security vulnerabilities identified in the application based on the OWASP Top 10 (2021), using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

Each row must contain links to recommended documentation or resources in the final column ("Links") for mitigation guidance.

| Test case Id | Category                                      | Vulnerability                                                      | Description                                                           | Affected components                  | Impact   | Severity   | Priority   | Recommended fix | Links |
| ------------ | --------------------------------------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------- | ------------------------------------ | -------- | -----------|------------| ---------------- | ------ |
| SEC-001      | A01: Broken Access Control                    | Lack of role validation on sensitive controllers or endpoints      | Missing role-based authorization on actions such as /Admin/DeleteUser | Controller classes, API endpoints    | High     | Very high  | High       | Implement RBAC    |        |
| SEC-002      | A02: Cryptographic Failures                   | Hardcoded cryptographic keys or use of weak encryption             | Use of MD5 or SHA1, hardcoded AES key in source code                  | Utility classes, encryption modules  | High     | High       | High       | Use strong crypto |        |
| SEC-003      | A03: Injection                                | Risk of SQL Injection via raw SQL commands or string concatenation | Use of string concatenation in ADO.NET or EF raw SQL queries          | Repository or data access classes    | High     | Very high  | Very high  | Use parameterized queries |        |
| SEC-004      | A05: Security Misconfiguration                | Misconfigured customErrors or missing HSTS header                  | customErrors="Off", no `app.UseHsts()` call                           | web.config, Startup.cs               | Medium   | Medium     | Medium     | Configure HSTS    |        |
| SEC-005      | A06: Vulnerable & Outdated Components         | Use of packages with known CVEs                                    | Newtonsoft.Json v10, log4net v2.0.8 with CVEs                         | .csproj files, NuGet dependencies    | High     | High       | High       | Upgrade packages  |        |
| SEC-006      | A07: Identification & Authentication Failures | Insecure password storage or missing account lockout               | Plaintext passwords or missing password hash verification             | Identity logic, Login controller     | High     | Very high  | Very high  | Use hashed passwords |      |
| SEC-007      | A08: Software & Data Integrity Failures       | No checksum or signature validation on config or packages          | Downloading external packages or scripts without validation           | Package restore, custom loader logic | Medium   | High       | Medium     | Validate integrity |        |
| SEC-008      | A09: Security Logging and Monitoring Failures | Logging sensitive data or missing login attempt logging            | Logging JWT tokens or passwords                                       | Logging configurations, logger calls | High     | High       | High       | Avoid sensitive logging |     |
| SEC-009      | A10: Server-Side Request Forgery              | Direct access to arbitrary internal URLs                           | Use of `HttpClient` or `WebRequest` with user-supplied input          | Utility classes or services          | High     | Very high  | High       | Sanitize input    |        |

### 6.3. Advanced and .NET-specific security vulnerabilities
Advanced and framework-specific vulnerabilities identified in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

Each row must contain links to recommended documentation or resources in the final column ("Links") for mitigation guidance.

| Test case Id | Category / Domain     | Vulnerability                                  | Description                                                    | Affected components                       | Impact   | Severity   | Priority   | Recommended fix | Links |
| ------------ | --------------------- | ---------------------------------------------- | -------------------------------------------------------------- | ----------------------------------------- | -------- | -----------|------------| ---------------- | ------ |
| SEC-010      | Authentication        | Insecure Cookie Configuration                  | Cookies missing `HttpOnly`, `Secure`, or `SameSite` flags      | Startup.cs, middleware config             | Medium   | High       | Medium     | Secure cookies   |        |
| SEC-011      | Authorization         | Use of insecure custom authorization logic     | Custom filters or decorators that fail to validate role/claims | Authorization handlers, custom attributes | High     | High       | High       | Use built-in auth |       |
| SEC-012      | ASP.NET Identity      | Weak password hashing algorithm                | Use of SHA1 or custom hashing instead of PBKDF2                | UserManager, Identity configuration       | High     | Very high  | High       | Use PBKDF2        |        |
| SEC-013      | Web.Config            | Secrets stored in config files                 | Passwords, connection strings with secrets in web.config       | web.config, appsettings.json              | High     | High       | High       | Use Key Vault     |        |
| SEC-014      | Third-party libraries | Use of insecure or deprecated crypto libraries | Use of BouncyCastle or own implementation                      | NuGet packages, crypto utility files      | High     | High       | Medium     | Replace libraries |        |
| SEC-015      | Logging               | Lack of PII redaction in logs                  | Logging full user profiles, passwords, or tokens               | Controllers, service layer logging        | High     | High       | High       | Mask sensitive data |     |

### 6.4. Security hardening opportunities
Security hardening opportunities identified in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

| Area          | Current state              | Hardening opportunity                           | Affected components | Impact   | Severity   | Priority   | Recommended fix | Links |
| ------------- | -------------------------- | ----------------------------------------------- | ------------------- | -------- | -----------|------------| ---------------- | ------ |
| Configuration | `debug=true` in production | Disable debug                                   | web.config          | High     | Medium     | High       | Disable debug     |        |
| Middleware    | Missing exception handling | Add centralized error handling                  | Startup.cs          | Medium   | Medium     | Medium     | Add error middleware |     |
| Headers       | Missing security headers   | Add `X-Frame-Options`, `X-Content-Type-Options` | Middleware          | Medium   | Medium     | Medium     | Add secure headers |        |

### 6.5. Dependency and SBOM vulnerabilities
Dependency vulnerabilities identified in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

| Package                   | Version | Known vulnerabilities (CVEs) | Source | Impact   | Severity   | Priority   | Recommended fix     | Links |
| ------------------------- | ------- | ---------------------------- | ------ | -------- | -----------|------------| ------------------- | ------ |
| Newtonsoft.Json           | 10.0.3  | CVE-2021-XYZ                 | NuGet  | High     | High       | High       | Upgrade to >=13.0.1 |        | 
| log4net                   | 2.0.8   | CVE-2018-XYZ                 | NuGet  | High     | High       | Medium     | Upgrade to latest   |        |
| System.Text.Encodings.Web | 4.5.0   | CVE-2021-XYZ                 | NuGet  | Medium   | Medium     | Medium     | Upgrade via SDK     |        |

### 6.6. Misconfigurations and dangerous defaults
Misconfigurations and dangerous defaults identified in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

| Setting / File   | Issue detected       | Description               | Impact   | Severity   | Priority   | Recommended fix        | Links |
| ---------------- | -------------------- | ------------------------- | -------- | -----------|------------| ----------------------- | ------ |
| web.config       | `customErrors="Off"` | Stack trace exposure      | Medium   | Medium     | Medium     | Set `customErrors="On"` |        |
| appsettings.json | Plaintext secrets    | Secret leakage            | High     | High       | High       | Use Azure Key Vault     |        |
| Startup.cs       | Missing `UseHsts()`  | No TLS protection headers | Medium   | Medium     | Medium     | Add `app.UseHsts()`     |        |

### 6.7. Data exposure and PII handling
Data exposure and Personally Identifiable Information (PII) handling issues identified in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

| Data type          | Location (Field / File) | Exposure risk       | Impact   | Severity   | Priority   | Recommended fix          | Links |
| ------------------ | ----------------------- | ------------------- | -------- | -----------|------------| ------------------------ | ------ |
| Email, Password    | Logs / DB               | PII exposure        | High     | High       | High       | Apply redaction, hashing |        |
| Credit Card Number | Forms, DB               | Stored in plaintext | High     | Very high  | High       | Encrypt at rest          |        |
| JWT tokens         | Console logs            | Leaked in logs      | High     | High       | High       | Mask or omit in logs     |        |

### 6.8. API-specific vulnerabilities
API-specific vulnerabilities identified in the application based on the OWASP API Top 10, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

| Test case Id | Category                               | Vulnerability                | Description                                      | Affected components   | Impact   | Severity   | Priority   | Recommended fix | Links |
| ------------ | -------------------------------------- | ---------------------------- | ------------------------------------------------ | --------------------- | -------- | -----------|------------| ---------------- | ------ |
| API-001      | A01: Broken Object Level Auth          | IDOR                         | Users access others' records via ID manipulation | API endpoints         | High     | Very high  | High       | Add object-level auth |     |
| API-002      | A03: Excessive Data Exposure           | Full objects in response     | Sensitive fields returned unnecessarily          | Controller responses  | High     | High       | High       | Filter response DTOs |      |
| API-003      | A04: Lack of Resources & Rate Limiting | No throttling in APIs        | API can be spammed or brute-forced               | Controller endpoints  | Medium   | Medium     | Medium     | Add rate limiting   |      |
| API-004      | A05: Broken Function Level Auth        | Unauthorized function access | Admin-only functions accessible to any user      | Role attribute checks | High     | Very high  | High       | Restrict access     |      |

### 6.9. Cloud-specific configuration issues
Cloud-specific configuration issues identified in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

Adapt the table to be cloud-agnostic, so it can be used for any cloud provider (Azure, AWS, GCP, etc.)

| Cloud resource   | Configuration Checked  | Issue                               | Best practice                   | Impact   | Severity   | Priority   | Recommended fix             | Links |
| ---------------- | ---------------------- | ----------------------------------- | ------------------------------- | -------- | -----------|------------| ---------------------------- | ------ |
| App Service      | HTTPS enforced         | Not enforced                        | Require HTTPS                   | High     | High       | High       | Force HTTPS                 |        |
| Key Vault        | Secrets stored in code | Not using Key Vault                 | Migrate secrets                 | High     | High       | High       | Use secrets management      |        |
| Storage          | Public access          | Blob containers publicly accessible | Set `publicAccess=Off`          | High     | Very high  | High       | Disable public access       |        |
| Managed Identity | Disabled               | Missing MSI                         | Enable system-assigned identity | Medium   | Medium     | Medium     | Enable MSI in deployment    |        |

### 6.10. Additional risk patterns detected
Additional risk patterns detected in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

| Test case Id | Category | Risk pattern                  | Description                               | Affected components     | Impact   | Severity   | Priority   | Recommended mitigation | Links |
| ------------ | -------- | ----------------------------- | ----------------------------------------- | ------------------------ | -------- | -----------|------------| ------------------------ | ------ |
| SEC-016      | Secrets  | Hardcoded Secrets             | Detected API keys and passwords in source | `*.cs`, `*.json`         | High     | Very high  | High       | Use environment variables |      |
| SEC-017      | Logging  | Sensitive Data in Logs        | JWTs and passwords logged                 | Logging setup            | High     | High       | High       | Mask tokens and passwords |     |
| SEC-018      | Session  | Insecure Cookie Flags         | Cookies missing `HttpOnly` or `SameSite`  | Cookie auth middleware   | Medium   | High       | Medium     | Set secure flags          |      |
| SEC-019      | Anti-bot | No CAPTCHA                    | Login form accepts brute force            | AccountController        | High     | Medium     | High       | Add CAPTCHA               |      |
| SEC-020      | Crypto   | Weak Encryption               | MD5 used for hashing                      | `HashHelper.cs`          | High     | Very high  | High       | Replace with SHA-256 or PBKDF2 |  |

## 7. Integrations
Integrations with other systems or services, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Integration type** (e.g., API, Webhook, Message Queue, etc.)
- **Integration name** (e.g., Name of the integration, e.g., Payment Gateway, CRM System, etc.)
- **Integration description** (e.g., Brief description of the integration, e.g., Payment Gateway is used for processing payments, CRM System is used for managing customer relationships, etc.)
- **Integration endpoint** (e.g., URL or endpoint of the integration, e.g., https://api.paymentgateway.com/v1/payments, https://crm.example.com/api/customers, etc.)
- **Integration authentication** (e.g., How authentication is implemented for the integration, e.g., API Key, OAuth2, etc.)
- **Integration data format** (e.g., Data format used for the integration, e.g., JSON, XML, etc.)
- **Integration protocols** (e.g., Protocols used for the integration, e.g., HTTP/HTTPS, gRPC, etc.)

## 8. Testing
Testing strategies and practices used in the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Testing type** (e.g., Unit Testing, Integration Testing, Functional Testing, Performance Testing, etc.)
- **Testing framework** (e.g., xUnit, NUnit, MSTest, etc.)
- **Testing tools** (e.g., Moq, AutoFixture, etc.)
- **Test coverage (%)** (e.g., Percentage of code covered by tests, e.g., 80%, 90%, etc.)
- **Test strategy** (e.g., How tests are organized, e.g., Test-driven development (TDD), Behavior-driven development (BDD), etc.)
- **Continuous Integration (CI)** (e.g., How CI is implemented, e.g., Azure DevOps, GitHub Actions, Jenkins, etc.)
- **Continuous Deployment (CD)** (e.g., How CD is implemented, e.g., Azure DevOps, GitHub Actions, Jenkins, etc.)

## 9. Known issues and limitations
Top-50 known issues and limitations of the application, in terms of performance, supportability, compliance, legacy, compatibility, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Issue Id** (e.g., Unique identifier for the issue or limitation, e.g., ISSUE-001, ISSUE-002, etc.)
- **Issue / limitation** (e.g., Description of the issue or limitation, e.g., Performance issues, Supportability issues, Compliance issues, Legacy code, Compatibility issues, etc.)
- **Category** (e.g., Category of the issue or limitation, e.g., Performance, Supportability, Compliance, Legacy, Compatibility, etc.)
- **Type** (e.g., Type of the issue or limitation, e.g., Bug, Limitation, Enhancement, etc.)
- **Impact** (e.g., Impact of the issue or limitation, e.g., High, Medium, Low)
- **Severity** (e.g., Severity of the issue or limitation, e.g., Critical, High, Medium, Low)
- **Priority** (e.g., Priority of the issue or limitation, e.g., Critical, High, Medium, Low)
- **Affected components** (e.g., Components affected by the issue or limitation, e.g., Web application, API, Database, etc.)
- **Workaround / strategy** (e.g., Workaround for the issue or limitation, e.g., Upgrade to a newer version, Refactor the code, etc.)
- **Notes** (e.g., Additional notes or comments about the issue or limitation)
- **References** (e.g., References to the issue or limitation, e.g., GitHub issues, Jira tickets, etc.)
- **Links** (e.g., Links to related documentation or resources)

#Instructions (mandatory):
- Provide always 50 known issues and limitations, not more, not less, by impact, from the most critical to the least critical.

## 10. Defects and inefficiencies
Top-50 defects and inefficiencies of the application, in detail,  in terms of coding best-practices, security, performance, supportability, compliance, legacy, compatibility, etc, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Defect Id** (e.g., Unique identifier for the defect or inefficiency, e.g., DEF-001, DEF-002, etc.)  
- **Defect / inefficiency** (e.g., Description of the defect or inefficiency, e.g., Code smells, Performance bottlenecks, Security vulnerabilities, etc.)
- **Category** (e.g., Category of the defect or inefficiency, e.g., Code quality, Performance, Security, etc.)
- **Type** (e.g., Type of the defect or inefficiency, e.g., Bug, Limitation, Enhancement, etc.)
- **Impact** (e.g., Impact of the defect or inefficiency, e.g., High, Medium, Low)
- **Severity** (e.g., Severity of the defect or inefficiency, e.g., Critical, High, Medium, Low)
- **Priority** (e.g., Priority of the defect or inefficiency, e.g., Critical, High, Medium, Low)
- **Root cause** (e.g., Root cause of the defect or inefficiency, e.g., Poor coding practices, Lack of testing, Misconfiguration, etc.)  
- **Affected components** (e.g., Components affected by the defect or inefficiency, e.g., Web application, API, Database, etc.)
- **Recommended fix** (e.g., Recommended fix for the defect or inefficiency, e.g., Refactor the code, Optimize the performance, Apply security patches, etc.)
- **Notes** (e.g., Additional notes or comments about the defect or inefficiency, e.g., Known workarounds, Limitations, etc.)
- **References** (e.g., References to the defect or inefficiency, e.g., GitHub issues, Jira tickets, etc.)  
- **Links** (e.g., Links to related documentation or resources)

#Instructions (mandatory):
- Provide always 50 defects and inefficiencies, not more, not less, by impact, from the most critical to the least critical.

## 11. Vulnerabilities
Top-50 vulnerabilities of the application, in detail, in terms of coding best-practices, security, performance, supportability, compliance, legacy, compatibility, etc, by impact, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Vulnerability Id** (e.g., Unique identifier for the vulnerability, e.g., VULN-001, VULN-002, etc.)
- **Vulnerability** (e.g., Description of the vulnerability, e.g., SQL Injection, Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), etc.)
- **Category** (e.g., Category of the vulnerability, e.g., Authentication, Authorization, Input Validation, etc.)
- **Type** (e.g., Type of the vulnerability, e.g., Bug, Limitation, Enhancement, etc.)
- **Impact** (e.g., Impact of the vulnerability, e.g., High, Medium, Low)
- **Severity** (e.g., Severity of the vulnerability, e.g., Critical, High, Medium, Low)
- **Priority** (e.g., Priority of the vulnerability, e.g., Critical, High, Medium, Low)
- **Root cause** (e.g., Root cause of the vulnerability, e.g., Poor coding practices, Lack of input validation, Misconfiguration, etc.)
- **Affected components** (e.g., Components affected by the vulnerability, e.g., Web    application, API, Database, etc.)
- **Recommended fix** (e.g., Recommended fix for the vulnerability, e.g., Upgrade to a newer version, Refactor the code, etc.)
- **Notes** (e.g., Additional notes or comments about the vulnerability, e.g., Known workarounds, Limitations, etc.)
- **References** (e.g., References to the vulnerability, e.g., CVE ID, OWASP Top 10, etc.)
- **Links** (e.g., Links to related documentation or resources, e.g., GitHub issues, Jira tickets, etc.)

#Instructions (mandatory):
- Provide always 50 vulnerabilities, not more, not less, by impact, from the most critical to the least critical.

## 12. Supportability and maintainability
Supportability and maintainability aspects of the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Component** (e.g., .NET version, Framework version, Database server version, Third-party libraries)
- **Current version** (e.g., Latest version of the component, e.g., .NET 6.0, ASP.NET Core 3.1, SQL Server 2019, etc.)
- **End of support date** (e.g., End of support date for the component, e.g., .NET 6.0 EOL is November 2024, ASP.NET Core 3.1 EOL is December 2022, SQL Server 2019 EOL is July 2025, etc.). The format of the date must be e.g. 2010-07-20. For the .NET Framework consider the end support date, for Operating Systems and Database Servers consider the extended support date.
- **Supportability** (e.g., How the component is supported, e.g., Regular updates, Security patches, etc.)
- **Latest stable version** (e.g., Latest stable version of the component, e.g., .NET 6.0, ASP.NET Core 3.1, SQL Server 2019, etc.)
- **Notes** (e.g., Additional notes or comments about the component, e.g., Known issues, Limitations, etc.)
- **Links** (e.g., to Microsoft Product Lifecycle associated with the components)

##Instructions for this section:
Provide information on how the application is supported in terms of:
- .NET version support (referring to the .NET version lifecycle)
- All .NET Framework or .NET versions must be included in the table, not just the main one or a subset. The same applies to all other components.
- If the component is .net framework, provide information on the .net framework version support related and not .net core or .net 5+ versions.
- Framework support (referring to the framework version lifecycle)
- Database server support (referring to the database server version lifecycle)
- Third-party libraries support (referring to the third-party libraries version lifecycle)

The table should also include the latest version of each component and the end of support date, if applicable.

### 12.1. .NET Framework lifecycle
The .NET Framework (not .NET or .NET Core) support / lifecycle for the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Version** (e.g., .NET Framework version (not .NET or .NET Core), e.g., .NET Framework 4.8.1, .NET Framework 4.8, .NET Framework 4.7.2, etc.)
- **Start date** (e.g., Start date of the support for the .NET Framework version (not .NET or .NET Core), e.g., 2010-07-20, 2019-04-18, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.))
- **End date** (e.g., End of support date for the .NET Framework version (not .NET or .NET Core), e.g., 2024-01-09, 2029-01-09, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.)
- **Supported** (e.g., Is the .NET Framework version still supported? Yes/No, with symbols)
- **Used in the application** (e.g., Is this version used in the application?)

If the end date is 'Follows OS Lifecycle', that is not acceptable, you have to use the real and accurate dates, e.g., 2024-01-09, 2029-01-09, etc. Search for the official Microsoft documentation to get the accurate dates.

##Instructions:
- Provide a complete and up-to-date list of *all* versions of the .NET Framework, since .NET Framework 1.0 - (not .NET or .NET Core), including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.
- 'Follows OS Lifecycle' on start and end dates, is not acceptable. The real and accurate dates must be used.
- To check the .NET Framework version used in the application, you can check the target framework in the .csproj files or the web.config files.

### 12.2. .NET lifecycle

This section outlines the support lifecycle for the modern, cross-platform .NET (formerly .NET Core), detailing the release types and support windows for each version relevant to the application.

Include a brief description of the section. In this section, do not include more information than what is defined in this template.

- **Version** (e.g., The .NET version, such as .NET 8, .NET 7, .NET 6, .NET Core 3.1, etc.)
- **Start date** (e.g., Start date of the support for the .NET version (only .NET or .NET Core), e.g., 2010-07-20, 2019-04-18, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.))
- **End date** (e.g., End of support date for the .NET version (only .NET or .NET Core), e.g., 2024-01-09, 2029-01-09, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.)
- **Supported** (e.g., Is the .NET version (only .NET or .NET Core) still supported? Yes/No, with symbols)
- **Used in the application** (e.g., Is this version used in the application?)

Instructions:
- Provide a complete and up-to-date list of all major versions of the modern .NET (only .NET or .NET Core), starting from .NET Core 1.0 up to the current latest version (including previews like .NET 9).
- The data must be accurate and based on the official Microsoft .NET and .NET Core Support Policy. You must use real and accurate dates for release and end-of-support.
- Clearly distinguish between LTS (Long-Term Support) and STS (Standard-Term Support) releases in the "Release Type" column.
- Indicate which versions are still supported and which have reached end-of-life (EOL).
- Use official Microsoft documentation (like the ".NET and .NET Core support policy" page on learn.microsoft.com) to validate the timelines. Include a reference URL.
- To check the .NET version used in the application, you can check the target framework in the .csproj files or the web.config files.

### 12.3. Windows Server Operating Systems lifecycle
The Windows Server Operating Systems lifecycle for the application, from Windows Server 2000, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Version** (e.g., Windows OS version, e.g., Windows Server 2012 R2, Windows Server 2016, Windows Server 2019, etc.)
- **Start date** (e.g., Start date of the support for the Windows OS version, e.g., 2013-10-18, 2016-10-12, 2019-10-02, etc.)
- **End date (mainstream)** (e.g., End of mainstream support date for the Windows OS version, e.g., 2018-10-09, 2020-01-11, 2024-01-09, etc.)
- **End date (extended)** (e.g., End of extended support date for the Windows OS version, e.g., 2023-10-10, 2025-01-12, 2029-01-09, etc.)
- **Supported** (e.g., Is the Windows OS version still supported? Yes/No, with symbols)
- **Used in the application** (e.g., Is this version used in the application?)

##Instructions:
- Provide a complete and up-to-date list of all versions of Windows Server Operating Systems, including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. If any versions follow the Windows OS lifecycle instead of a fixed date, explain how that affects their support timeline. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.
- All versions of Windows Server Operating Systems must be included, from Windows Server 2000 to the latest version, including their release dates and end-of-support dates. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.

### 12.4. Microsoft SQL Server lifecycle
The Microsoft SQL Server lifecycle for the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **Version** (e.g., Microsoft SQL Server version, e.g., SQL Server 2012, SQL Server 2014, SQL Server 2016, SQL Server 2017, SQL Server 2019, etc.)
- **Start date** (e.g., Start date of the support for the SQL Server version, e.g., 2012-04-01, 2014-06-01, 2016-06-01, 2017-10-02, 2019-11-04, etc.)
- **End date (mainstream)** (e.g., End of mainstream support date for the SQL Server version, e.g., 2017-07-11, 2019-07-09, 2021-01-12, etc.)
- **End date (extended)** (e.g., End of extended support date for the SQL Server version, e.g., 2022-07-12, 2024-07-09, 2025-01-14, etc.)
- **Supported** (e.g., Is the SQL Server version still supported? Yes/No, with symbols)
- **Used in the application** (e.g., Is this version used in the application?)

##Instructions:
 - Provide a complete and up-to-date list of all versions of Microsoft SQL Server, including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. If any versions follow the Windows OS lifecycle instead of a fixed date, explain how that affects their support timeline. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.
 - All versions of Microsoft SQL Server must be included, from SQL Server 2000 to the latest version, including their release dates and end-of-support dates. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.
 - To determine if the application is using a specific version of SQL Server, you can check the connection strings in the .config files or the database server version used in the application.

## 13. Modernization strategy
The modernization strategy for the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

##Instructions for this section:
 - Given the detailed analysis of this .NET application, provide three complete modernization strategies in a table format, and the step-by-step plan, also in a table format, to implement them.
 - Strategy 1: **Lift and Shift (without rehosting)**, maintaining the application current deployment model (e.g. on-premises) and evolving the application to the latest .NET Framework or .NET version (if the application uses .NET Framework the target should be .NET Framework), e.g., .NET 6, .NET 7, .NET Framework 4.8.1 and the database to the latest version of the database server, e.g., Microsoft SQL Server 2019, PostgreSQL 15, etc, without changing the architecture or the codebase, just updating the dependencies and the runtime.
 - Strategy 2: **Lift and Shift (with rehosting)**, rehosting the application to a cloud provider (e.g., Azure, AWS, GCP) and evolving the application to the latest .NET Framework or .NET version (if the application uses .NET Framework the target should be .NET Framework), e.g., .NET 6, .NET 7, .NET Framework 4.8.1 and the database to the latest version of the database server, e.g., Microsoft SQL Server 2019, PostgreSQL 15, etc, without changing the architecture or the codebase, just updating the dependencies and the runtime.
 - Strategy 3: **Refactor** (also known as "Repackage"), refactoring the application to use modern design patterns, architectures and technologies, e.g., microservices, serverless, cloud-native, etc, evolving the application to the latest .NET version, e.g., .NET 6, .NET 7 and the database to the latest version of the database server, e.g., Microsoft SQL Server 2019, PostgreSQL 15, etc.
 - Provide a table with comparison between the three strategies, including the pros and cons of each one with the following columns:
  - **Factor** (e.g., Complexity, Cost (Development), Cost (Functional testing), Cost (Infrastructure), Time to implement (Development), Time to test (Functional testing), Time to implement (Infrastructure), Risk, Long-term fit, time-to-market, etc.)
  - **Lift and Shift** (without rehosting)
  - **Lift and Shift** (with rehosting)
  - **Complete Refactor** (Refactor)

- The complexity and the time estimate to implement each strategy depends on the following factors which are only related with the development effort and not with the infrastructure or deployment effort:
 - Complexity low - the application is small, with few dependencies and a simple architecture = 1-2 weeks
 - Complexity medium - the application is medium-sized, with some dependencies and a moderate architecture = 3-5 weeks
 - Complexity high - the application is large, with many dependencies and a complex architecture = 6-8 weeks
 - Complexity very high - the application is very large, with many dependencies and a very complex architecture = 9-12 weeks

 ##Instruction: You must separate the development effort from the infrastructure or deployment effort, so the complexity and time estimate must be only related with the development effort.

### 13.1. Modernization strategy comparison
The comparison of the three modernization strategies, including the pros and cons of each one, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

Provide this information in the table with the following columns:
  - **Strategy** (e.g., Lift and Shift, Complete Refactor)
  - **Description** (e.g., Brief description of the strategy, e.g., Rehost the application to the latest .NET version, Refactor the application to use modern design patterns and architectures, etc.)
  - **Complexity** (e.g., Low, Medium, High, Very High)
  - **Development time estimate** (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - **Functional testing time estimate** (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - **Infrastructure time estimate** (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - **Deployment time estimate** (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - **Total time estimate** (e.g., sum of the development, functional testing, infrastructure and deployment time estimates, e.g., 4-6 weeks, 8-10 weeks, etc.)
  - **Cost estimate** (e.g., Low, Medium, High, Very High)
  - **Risk** (e.g., Low, Medium, High)
  - **Long-term fit** (e.g., Low, Medium, High)
  - **Time-to-market** (e.g., Low, Medium, High)
  - **Pros** (e.g., List of pros for the strategy, e.g., Low cost, Low risk, etc. Use symbols to indicate the pros)
  - **Cons** (e.g., List of cons for the strategy, e.g., Limited scalability, Limited maintainability, etc. Use symbols to indicate the cons)

### 13.2. Recommendation
The recommendation for the modernization strategy, based on the analysis of the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

#### 13.2.1. Step-by-step plan
The step-by-step plan to implement the recommended modernization strategy, using table format, in detail and taking into account Microsoft technologies and best practices. 

Include a brief description of the section.

##Instructions for this section:
- Provide a detailed step-by-step plan to implement the recommended modernization strategy, in high-level and low-level steps, using table format.

#### 13.2.2. Gantt chart
A Gantt chart to visualize the step-by-step plan, showing the timeline and dependencies of each step.

Include a Mermaid 'gantt' diagram to visualize the step-by-step plan for the recommended modernization strategy.

#Critical instructions for the diagram (always apply):
- The Mermaid diagram MUST be placed in the section where it is referenced, not at the end of the document.
- **Syntax Rule:** When defining a node's text label, if the text contains any HTML tags (like `<br>`, `<b>`, `<i>`), you MUST enclose the entire text label in double quotes (`"`). Example: `id["Text with <b>HTML</b>"]` is correct; `id[Text with <b>HTML</b>]` is incorrect and will fail.
- Always place a legend (caption) immediately below the diagram. The legend should be in a smaller font size than the main body text, clearly associated with the diagram, and centered. Format appropriately. Ensure the styling visually distinguishes the legend as secondary explanatory text. Never use Fig x., use Figure x.
- ALWAYS VALIDATE / ENSURE THE DIAGRAM SYNTAX BEFORE RUNNING THE SCRIPT, TO ENSURE IT IS CORRECT AND WILL RENDER PROPERLY IN THE FINAL MARKDOWN OUTPUT.

#Critical instructions for the caption (always apply):
- Immediately following the ` ```mermaid ` code block, you MUST place a text **caption**.
- The caption must start with "Figure X." (e.g., "Figure 1:"), followed by a brief description of the diagram.
- The caption should be in a smaller font or otherwise styled to be secondary to the main text.

## 14. Application porfolio management
The application portfolio management mapping of the application, IT component types, IT component attributes and portfolio strategy, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

### 14.1. IT Component types and attributes
The IT component types and attributes for the application, using table format.
Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **IT Component Type** (e.g., Application Server, Database, Operating System, Programming Language, Middleware, Cloud Service, Development Tool, ERP System, CRM Platform, Web Framework, Integration Platform, Security Tool, Infrastructure, Container Platform, Monitoring Tool, Business Intelligence Tool, Collaboration Tool, Network Component, Storage System)
- **Name** (e.g., Name of the component, e.g., Microsoft SQL Server, Apache Kafka, etc.)
- **Type** (e.g., Type of the component, e.g., Database, Middleware, Cloud Service, etc.)
- **Version(s)** (e.g., Version of the component, e.g., 2019, 5.7, v2.3.1, etc.)
- **Provider(s)** (e.g., Provider of the component, e.g., Microsoft, Oracle, AWS, etc.)
- **Support start date** (e.g., Release date of the component, e.g., 2020-01-15)
- **Support end date** (e.g., Retirement date of the component, e.g., 2025-12-31)
- **Support end date (extended)** (e.g., Extended support date of the component, e.g., 2027-12-31)
- **Support status** (e.g., Supported, Unsupported, Extended Support)

To complete the table below, provide a complete and up-to-date list of all versions of the .NET Framework, .NET, Windows Operating Systems, Microsoft SQL Server and other applicable, including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. If any versions follow the Windows OS lifecycle instead of a fixed date, explain how that affects their support timeline. The data must be accurate and based on official Microsoft or other manufacturer sources. Include source references or URLs where applicable.

##Instructions for this section:
- Provide the SAP LeanIX mapping of components, attributes, and relationships, for this application, the applicable, namely:
- IT Component Types:
- Application Server(s) (e.g., Microsoft IIS, Apache Tomcat, JBoss, etc.)
- Database(s) (e.g., Microsoft SQL Server, Oracle DB, PostgreSQL, etc.)
- Operating System(s) (e.g., Windows Server, Red Hat Enterprise Linux, Ubuntu, etc.)
- Programming Language(s) (e.g., Java, C#, Python, etc.)
- Middleware (e.g., IBM WebSphere MQ, Oracle Fusion Middleware, TIBCO, etc.)
- Cloud Service(s) (e.g., AWS S3, Azure Blob Storage, Google Cloud Functions, etc.)
- Development Tool(s) (e.g., Visual Studio, GitHub, Jenkins, etc.)
- ERP System(s) (e.g., SAP ECC, Oracle E-Business Suite, Microsoft Dynamics 365, etc.)
- CRM Platform(s) (e.g., Salesforce, Microsoft Dynamics CRM, HubSpot, etc.)
- Web Framework(s) (e.g., .NET, Angular, React, etc.)
- Integration Platform(s) (e.g., MuleSoft, Dell Boomi, Azure Logic Apps, etc.)
- Security Tool(s) (e.g., Okta, Fortinet, Symantec Endpoint Protection, etc.)
- Infrastructure(s) (e.g., VMware ESXi, Cisco UCS, Nutanix, etc.)
- Container Platform(s) (e.g., Docker, Kubernetes, OpenShift, etc.)
- Monitoring Tool(s) (e.g., Datadog, Prometheus, New Relic, etc.)
- Business Intelligence Tool(s) (e.g., Power BI, Tableau, Qlik, etc.)
- Collaboration Tool(s) (e.g., Microsoft Teams, Slack, Confluence, etc.)
- Network Component(s) (e.g., Cisco Router, F5 Load Balancer, Palo Alto Firewall, etc.)
- Storage System(s) (e.g., NetApp, Dell EMC, HPE 3PAR, etc.)
- IT Component Attributes:
- Name (e.g., Microsoft SQL Server, Apache Kafka)
- Type (e.g., Database, Middleware, Cloud Service)
- Version(s) (e.g., 2019, 5.7, v2.3.1)
- Provider(s) (e.g., Microsoft, Oracle, AWS)
- Lifecycle Phase (e.g., Active, Phase-Out, End-of-Life)
- Release Date (e.g., 2020-01-15)
- Retirement Date (e.g., 2025-12-31)
- Support Status (e.g., Supported, Unsupported, Extended Support)
- Technical Fit (e.g., Strategic, Tolerated, Obsolete)
- Functional Fit (e.g., Good, Adequate, Poor)
- Linked Applications (e.g., HR System, CRM Platform)
- Used By (e.g., Business Units, Teams, Projects)
- Tags (e.g., Cloud, Strategic, Legacy)
- Cost Center (e.g., IT Ops, R&D)
- License Type (e.g., Open Source, Commercial, SaaS Subscription)
- Risk Classification (e.g., High Risk, Low Risk)
- Data Classification (e.g., Public, Internal, Confidential)
- Compliance Relevance (e.g., GDPR, HIPAA, SOX)
- Hosting Type (e.g., On-Premises, Cloud, Hybrid)

- The goal is to provide a comprehensive mapping of the application components to the LeanIX model, including their attributes and relationships, to facilitate better understanding and management of the application landscape.

### 14.2. Portfolio strategy
The portfolio strategy for the application, using table format.

Include a brief description of the section. In this section do not include more information than what is defined in this template.

- **TIME Classification** (Evaluate this application by plotting the business value against its overall quality, e.g., Time classification of the application, e.g., Strategic, Tolerated, Obsolete with full details and explanation)
- **6R Classification** (Classify this application according to the 6R methodology, e.g., 6R classification of the application, e.g., Retain, Retire, Replace, Rehost, Refactor, Rebuild with full details and explanation)

Include this sentence at the end of the document: This application analysis was performed using Artificial Intelligence (AI). While AI enhances the process, it may still produce inaccuracies, and all results should be carefully reviewed. (this sentence never changes but can be translated to the language of the output).

---

##Instructions:

- Merge repeated or redundant information.
- Infer and fill in missing fields when logically possible.
- Ensure output is valid Markdown per https://www.markdownguide.org/basic-syntax/.
- Keep structure simple and usable in documentation.
- The output **must be in the language specified above**.
- Return **only the Markdown-formatted output** as the final result.

Please analyze only the information you can reliably infer from the code snippets below in a very detailed manner.

Begin with the first section.

---

## Source Input

Here are the data to analyze:


// FILE: SDCIM/CITestes/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/CITestes/CIServRemessaTestes.cs
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CIServRemessas;
using System.Transactions;
using CI = CIServico;
using CIServTester;
using CIControlo;

namespace CITestes
{
    /// <summary>
    /// Testes do projeto CIServRemessa
    /// </summary>
    [TestClass]
    public class CIServRemessaTestes
    {
        public CIServRemessaTestes()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        [TestMethod]
        public void Testa_ServRemessa_TratarTranchesBalcao()
        {
            CI.CIServicosThreadParameters parameters = new CI.CIServicosThreadParameters("");

            parameters.OpenConnection();

            ProcessarTrancheBalcao processarRemessas = new ProcessarTrancheBalcao(parameters, todas: true);

            parameters.CloseConnection();
        }
    }
}


// FILE: SDCIM/CITestes/CITestes.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CITestes</RootNamespace>
    <AssemblyName>CITestes</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ProjectTypeGuids>{3AC096D0-A1C2-E12C-1390-A8335801FDAB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericNet">
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.VisualStudio.QualityTools.UnitTestFramework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.ServiceProcess" />
    <Reference Include="System.Transactions" />
  </ItemGroup>
  <ItemGroup>
    <CodeAnalysisDependentAssemblyPaths Condition=" '$(VS100COMNTOOLS)' != '' " Include="$(VS100COMNTOOLS)..\IDE\PrivateAssemblies">
      <Visible>False</Visible>
    </CodeAnalysisDependentAssemblyPaths>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ProcessarTrancheBalcao.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="CIServRemessaTestes.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\ModusCI\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
    <ProjectReference Include="..\ModusCI\CIConfiguration\CIConfiguration.csproj">
      <Project>{84354208-75AC-4D71-A00A-95232EF2C59C}</Project>
      <Name>CIConfiguration</Name>
    </ProjectReference>
    <ProjectReference Include="..\ModusCI\CIControlo\CIControlo.csproj">
      <Project>{7AE1DE61-8341-4A18-8071-1222AA96117B}</Project>
      <Name>CIControlo</Name>
    </ProjectReference>
    <ProjectReference Include="..\ModusCI\CIServico\CIServico.csproj">
      <Project>{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}</Project>
      <Name>CIServico</Name>
    </ProjectReference>
    <ProjectReference Include="..\ModusCI\CIServRemessas\CIServRemessas.csproj">
      <Project>{08EAC62C-72D9-4654-9387-8C1620E52329}</Project>
      <Name>CIServRemessas</Name>
    </ProjectReference>
    <ProjectReference Include="..\ModusCI\CIServTester\CIServTester.csproj">
      <Project>{8D5B89F8-7C35-4848-BC4E-279A0723130C}</Project>
      <Name>CIServTester</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/CITestes/ProcessarTrancheBalcao.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using System.Diagnostics;

using NBiis;
using NBiis.Generic;
using CIConfigGlobalParameters;

namespace CITestes
{
    public partial class ProcessarTrancheBalcao : CIComumInterface
    {
        public void ErrorMessage(string sMessage)
        {
            Debug.WriteLine("ProcessarRemessas Error: " + sMessage);
        }
        public void WarningMessage(string sMessage)
        {
            Debug.WriteLine("ProcessarRemessas Warning: " + sMessage);
        }
        public void InfoMessage(string sMessage, string sHeader)
        {
            Debug.WriteLine("ProcessarRemessas Info: " + sMessage);
        }
        public void InfoMessageCount(string sMessage)
        {
        }

        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public ProcessarTrancheBalcao(CIConfigGP.CIGlobalParameters oParameters, bool todas = false)
        {
            m_oParameters = oParameters;

            CIServRemessas.ServRemessa servRemessa = new CIServRemessas.ServRemessa(this, m_oParameters);

            long? remessaId = null;

            do
            {
                remessaId = servRemessa.RemessaBalcaoParaProcessar();

                if (remessaId.HasValue)
                {
                    servRemessa.TratarTranchesBalcao(remessaId.Value);
                }
                else
                {
                    Debug.WriteLine("Nada para processar");
                }

            } while (todas && remessaId.HasValue);
        }
    }
}


// FILE: SDCIM/ModusCI/Alerta/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/Alerta/Accao.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace Alerta
{
    public class Accao
    {
        public enum enuTipoAccao { ND = 0, MAILWEBDAV = 1, SMS = 2, LOGDB = 3, LOGFILE = 4, EVENTVIEWER = 5, MAILEWS = 6, OUTRA = 99 };

        public int m_iACC_ID;
        public string m_sACC_DESC;
        public enuTipoAccao m_enuTIPACC_ID;
        public string m_sTIPACC_DESC;


        private void InitVars()
        {
            m_iACC_ID = 0;
            m_sACC_DESC = "ND";
            m_enuTIPACC_ID = enuTipoAccao.ND;
            m_sTIPACC_DESC = "ND";
        }

        public Accao()
        {
            InitVars();
        }

        public Accao(SqlDataReader dr)
        {
            InitVars();

            try
            {
                m_enuTIPACC_ID = (enuTipoAccao)Convert.ToInt16(dr["TIPACC_ID"]);
                m_sTIPACC_DESC = Convert.ToString(dr["TIPACC_DESC"]);
                m_iACC_ID = Convert.ToInt16(dr["ACC_ID"]);
                m_sACC_DESC = Convert.ToString(dr["ACC_DESC"]);
            }
            catch
            { 
            }
        }
        public ListViewItem MakeListViewItemAccao()
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_iACC_ID.ToString();
            olvItem.SubItems.Add(m_sACC_DESC);
            //olvItem.SubItems.Add(m_enuTIPACC_ID.ToString());
            olvItem.SubItems.Add(m_sTIPACC_DESC);

            return olvItem;
        }

    }
}


// FILE: SDCIM/ModusCI/Alerta/AccaoParam.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace Alerta
{
    public class AccaoParam
    {
        public Accao m_oAccao;

        public string m_sTIPACCP_NAME;
        public string m_sTIPACCP_VALUE;

        public string m_sACCP_NAME;
        public string m_sACCP_VALUE;

        private void InitTipAccPVars()
        {
            m_sTIPACCP_NAME = "";
            m_sTIPACCP_VALUE = "";
        }
        private void InitAccPVars()
        {
            m_sACCP_NAME = "";
            m_sACCP_VALUE = "";
        }

        public AccaoParam()
        {
            m_oAccao = new Accao();
            InitAccPVars();
            InitTipAccPVars();
        }

        public AccaoParam(SqlDataReader dr)
        {
            m_oAccao = new Accao(dr);

            InitAccPVars();
            InitTipAccPVars();

            try
            {
                m_sTIPACCP_NAME = Convert.ToString(dr["TIPACCP_NAME"]);
                m_sTIPACCP_VALUE = Convert.ToString(dr["TIPACCP_VALUE"]);
            }
            catch
            {
            }
            try
            {
                m_sACCP_NAME = Convert.ToString(dr["ACCP_NAME"]);
                m_sACCP_VALUE = Convert.ToString(dr["ACCP_VALUE"]);
            }
            catch
            {
            }
        }

        public ListViewItem MakeListViewItemParam1()
        {
            string sTipaccp_codificado = "********";
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_oAccao.m_sTIPACC_DESC.ToString();
                       
            olvItem.SubItems.Add(m_sTIPACCP_NAME);
            if (m_sTIPACCP_NAME.Equals("passwd"))
            {
                m_sTIPACCP_VALUE = sTipaccp_codificado;
            }
            olvItem.SubItems.Add(m_sTIPACCP_VALUE);

            return olvItem;
        }

        public ListViewItem MakeListViewItemParam2()
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_oAccao.m_sTIPACC_DESC.ToString();

            olvItem.SubItems.Add(m_oAccao.m_iACC_ID.ToString());
            olvItem.SubItems.Add(m_oAccao.m_sACC_DESC);

            olvItem.SubItems.Add(m_sACCP_NAME);
            olvItem.SubItems.Add(m_sACCP_VALUE);

            return olvItem;
        }


    }
}


// FILE: SDCIM/ModusCI/Alerta/Alerta.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{763022EF-042B-4160-AFFF-9E59EF4B02A5}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Alerta</RootNamespace>
    <AssemblyName>Alerta</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Accao.cs" />
    <Compile Include="AlertaSituacaoAccao.cs" />
    <Compile Include="AccaoParam.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="SituacaoAccao.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/Alerta/AlertaSituacaoAccao.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace Alerta
{
    public class AlertaSituacaoAccao
    {
        public string m_sALERT_ID;
        public DateTime m_dtAL_TIMER;
        public string m_sAL_TEXT;
        public string m_sAL_VARCHAR;

        public int m_iALACC_STATUS;
        public string m_sALACC_STATUS;
        public DateTime m_dtALACC_TIMER;
        
        public SituacaoAccao m_oSituacaoAccao;
        //public Accao m_oAccao; não necessita porque está Incluido em SituacaoAccao

        public AlertaSituacaoAccao()
        {
            m_oSituacaoAccao = new SituacaoAccao();

            m_sALERT_ID="";
            m_dtAL_TIMER=DateTime.MinValue;
            m_sAL_TEXT = "";
            m_sAL_VARCHAR = "";

            m_iALACC_STATUS=-1;
            m_sALACC_STATUS = "";
            m_dtALACC_TIMER = DateTime.MinValue;
        }

        public AlertaSituacaoAccao(SqlDataReader dr)
        {
            m_oSituacaoAccao = new SituacaoAccao(dr);

            m_sALERT_ID = dr["ALERT_ID"].ToString();
            m_dtAL_TIMER = Convert.ToDateTime(dr["AL_TIMER"]);
            m_sAL_TEXT = Convert.ToString(dr["AL_TEXT"]);
            m_sAL_VARCHAR = Convert.ToString(dr["AL_VARCHAR"]);

            m_iALACC_STATUS = Convert.ToInt16(dr["ALACC_STATUS"]);
            m_sALACC_STATUS = dr["ALERTA_STATUS_DESC"].ToString();
            m_dtALACC_TIMER = Convert.ToDateTime(dr["ALACC_TIMER"]);
        }

        public ListViewItem MakeListViewItemAlerta(string sDateTimeSysFmt)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_sALERT_ID;
            olvItem.SubItems.Add(m_dtAL_TIMER.ToString(sDateTimeSysFmt));
            olvItem.SubItems.Add(m_sAL_TEXT);
            olvItem.SubItems.Add(m_sAL_VARCHAR);

            olvItem.SubItems.Add(m_oSituacaoAccao.m_iSITUACAO_ID.ToString());
            olvItem.SubItems.Add(m_oSituacaoAccao.m_sSITUACAO_DESC);

            olvItem.SubItems.Add(m_oSituacaoAccao.m_oAccao.m_enuTIPACC_ID.ToString());
            olvItem.SubItems.Add(m_oSituacaoAccao.m_oAccao.m_sTIPACC_DESC);

            olvItem.SubItems.Add(m_oSituacaoAccao.m_oAccao.m_iACC_ID.ToString());
            olvItem.SubItems.Add(m_oSituacaoAccao.m_oAccao.m_sACC_DESC);

            olvItem.SubItems.Add(m_iALACC_STATUS.ToString() + " - " + m_sALACC_STATUS);
            olvItem.SubItems.Add(m_dtALACC_TIMER.ToString(sDateTimeSysFmt));

            return olvItem;
        }

        public void SetProcessado(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sQuery = "";

            sQuery = "UPDATE ALERTA_ALERTA_ACCAO set ALACC_STATUS=1, ALACC_TIMER= getdate()";
            sQuery += " where ALERT_ID=" + m_sALERT_ID;
            sQuery += " and ACC_ID=" + m_oSituacaoAccao.m_oAccao.m_iACC_ID.ToString();

            oParameters.DirectSqlNonQuery(sQuery);
        }

        public void SetErroProcessamento(CIConfigGP.CIGlobalParameters oParameters, string sErro)
        {
            try
            {
                string sQuery = "";

                //sQuery = "UPDATE ALERTA_ALERTA_ACCAO set ALACC_STATUS=-1, ALACC_TIMER= getdate(), ALACC_ERRO='" + sErro + "'";
                sQuery = "UPDATE ALERTA_ALERTA_ACCAO set ALACC_STATUS=-1, ALACC_TIMER= getdate() ";
                sQuery += " where ALERT_ID=" + m_sALERT_ID;
                sQuery += " and ACC_ID=" + m_oSituacaoAccao.m_oAccao.m_iACC_ID.ToString();

                oParameters.DirectSqlNonQuery(sQuery);
            }
            catch 
            { 
            }
        }

    }
}


// FILE: SDCIM/ModusCI/Alerta/SituacaoAccao.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace Alerta
{
    public class SituacaoAccao
    {
        public int m_iSITUACAO_ID;
        public string m_sSITUACAO_DESC;
        public Accao m_oAccao;

        public SituacaoAccao()
        {
            m_oAccao = new Accao();
            m_iSITUACAO_ID = -1;
            m_sSITUACAO_DESC = "";
        }

        public SituacaoAccao(SqlDataReader dr)
        {
            m_iSITUACAO_ID = Convert.ToInt16(dr["SITUACAO_ID"]);
            m_sSITUACAO_DESC = Convert.ToString(dr["SITUACAO_DESC"]);
            m_oAccao = new Accao(dr);
        }
        public ListViewItem MakeListViewItemSituacaoAccao()
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_iSITUACAO_ID.ToString();
            olvItem.SubItems.Add(m_sSITUACAO_DESC);
            olvItem.SubItems.Add(m_oAccao.m_iACC_ID.ToString());
            olvItem.SubItems.Add(m_oAccao.m_sACC_DESC);

            return olvItem;
        }

        public ListViewItem MakeListViewItemSituacao()
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_iSITUACAO_ID.ToString();
            olvItem.SubItems.Add(m_sSITUACAO_DESC);

            return olvItem;
        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIActividades/Properties/Resources.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryForm.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("QueryForm.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/Properties/Resources.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIActividades/ActividadeBalcaoForm.Designer.cs
﻿namespace CIActividades
{
    partial class ActividadeBalcaoForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            m_oMenuInterface.actividadeBalcaoEnable(true);
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ActividadeBalcaoForm));
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.toolStripButtonFechados = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonEspMaquinas = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonProcessamento = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonProcessado = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonEnviada = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonENVM = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonErro = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonRefresh = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonExitJanela = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.tsBtnRemessa = new System.Windows.Forms.ToolStripButton();
            this.tsBtnEstorno = new System.Windows.Forms.ToolStripButton();
            this.contextMenuStripRemessasResumo = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.verRemessasDetalheToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripRemessa = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuRemessaMudarEstado = new System.Windows.Forms.ToolStripMenuItem();
            this.verTranchesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.verDocumentosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripTranche = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.contextMenuStripTrancheMudaEstado = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripTrancheVerDocs = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripDocumento = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuDocumentosVerImagem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripResumoEstornos = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuItemResumoEstornos = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripRemessaEstorno = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuItemRemessaEstorno = new System.Windows.Forms.ToolStripMenuItem();
            this.mudarEstadoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripDocumentoEstorno = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuDocumentosEstornosVerImagem = new System.Windows.Forms.ToolStripMenuItem();
            this.label5 = new System.Windows.Forms.Label();
            this.lbBalcao = new System.Windows.Forms.Label();
            this.lbRemessaCI = new System.Windows.Forms.Label();
            this.lbTipoRemessa = new System.Windows.Forms.Label();
            this.lbDeposito = new System.Windows.Forms.Label();
            this.txBalcao = new System.Windows.Forms.TextBox();
            this.txRemessaCI = new System.Windows.Forms.TextBox();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.txDeposito = new System.Windows.Forms.TextBox();
            this.m_ctrldtInicio = new System.Windows.Forms.DateTimePicker();
            this.cbTRemessa = new System.Windows.Forms.ComboBox();
            this.label6 = new System.Windows.Forms.Label();
            this.spContainer = new System.Windows.Forms.SplitContainer();
            this.spContRemessas = new System.Windows.Forms.SplitContainer();
            this.spContAgrRemessas = new System.Windows.Forms.SplitContainer();
            this.listViewResumoRemessas = new NBIISNET.ListViewBase();
            this.Process = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.Remessa = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.EstadoRemessas = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.tpRemessa = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.Rems = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.Docs = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.Montante = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.ENVM = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.label1 = new System.Windows.Forms.Label();
            this.m_btRefreshRemessas = new System.Windows.Forms.Button();
            this.btnRemessasErro = new System.Windows.Forms.Button();
            this.listViewDetalhesRemessa = new NBIISNET.ListViewBase();
            this.colRemID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTimerEnviada = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemnum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRem = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemTP = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemDeposito = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemStat = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemTrans = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemChaveH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemCGDError = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemQT = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemMT = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemErro = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemMaquina = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.labelCountRemessas = new System.Windows.Forms.Label();
            this.spContTranDoc = new System.Windows.Forms.SplitContainer();
            this.listViewDetalhesTranche = new NBIISNET.ListViewBase();
            this.colTransRemID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransNumero = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransQt = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransMt = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransErro = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransChaveWS = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTIBCOEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.labelCountTranches = new System.Windows.Forms.Label();
            this.lblCountDocumentos = new System.Windows.Forms.Label();
            this.listViewDetalhesDocumentos = new NBIISNET.ListViewBase();
            this.detDocColDocId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocStat = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocNIB = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocRefarq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocNSeq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColChaveH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocIndex = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocMaquina = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocBaltom = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColChaveHext = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocTipo = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColReminData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColReminID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColTranoutID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColBalcao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColRemNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColTranoutStatId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColTranNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnDocColErro = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocDeposito = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.spContEstorno = new System.Windows.Forms.SplitContainer();
            this.listViewEstornoResumo = new NBIISNET.ListViewBase();
            this.colZProcess = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colZEstorno = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstadoEstr = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTpRemessa = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colQtEstorno = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colQtDocs = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colMontante = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colENVM = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.btEstorno = new System.Windows.Forms.Button();
            this.btnEstonoErro = new System.Windows.Forms.Button();
            this.label7 = new System.Windows.Forms.Label();
            this.spContEstRemDoc = new System.Windows.Forms.SplitContainer();
            this.listViewRemessaEstorno = new NBIISNET.ListViewBase();
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader6 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader7 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader17 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader18 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader19 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader20 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader21 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader22 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader23 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader24 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader25 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader26 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.lblCountRemessasEstornos = new System.Windows.Forms.Label();
            this.listViewDocumentoEstorno = new NBIISNET.ListViewBase();
            this.colEstDocId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstZIB = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstNConta = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstNCheque = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstMontante = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstTpDoc = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstEstDoc = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstNIB = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstRefarq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstNSeq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstChvH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstIndex = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstMaquina = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstBalcaoTom = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstChvHext = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstTipo = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstZRemessa = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstRemID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstTranId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstBalcaoDesb = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstRemNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstEstTran = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstTranNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstDocErro = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colEstDep = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.lblCountDocumentosEstornos = new System.Windows.Forms.Label();
            this.columnHeader8 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.toolStrip1.SuspendLayout();
            this.contextMenuStripRemessasResumo.SuspendLayout();
            this.contextMenuStripRemessa.SuspendLayout();
            this.contextMenuStripTranche.SuspendLayout();
            this.contextMenuStripDocumento.SuspendLayout();
            this.contextMenuStripResumoEstornos.SuspendLayout();
            this.contextMenuStripRemessaEstorno.SuspendLayout();
            this.contextMenuStripDocumentoEstorno.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContainer)).BeginInit();
            this.spContainer.Panel1.SuspendLayout();
            this.spContainer.Panel2.SuspendLayout();
            this.spContainer.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContRemessas)).BeginInit();
            this.spContRemessas.Panel1.SuspendLayout();
            this.spContRemessas.Panel2.SuspendLayout();
            this.spContRemessas.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContAgrRemessas)).BeginInit();
            this.spContAgrRemessas.Panel1.SuspendLayout();
            this.spContAgrRemessas.Panel2.SuspendLayout();
            this.spContAgrRemessas.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContTranDoc)).BeginInit();
            this.spContTranDoc.Panel1.SuspendLayout();
            this.spContTranDoc.Panel2.SuspendLayout();
            this.spContTranDoc.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContEstorno)).BeginInit();
            this.spContEstorno.Panel1.SuspendLayout();
            this.spContEstorno.Panel2.SuspendLayout();
            this.spContEstorno.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContEstRemDoc)).BeginInit();
            this.spContEstRemDoc.Panel1.SuspendLayout();
            this.spContEstRemDoc.Panel2.SuspendLayout();
            this.spContEstRemDoc.SuspendLayout();
            this.SuspendLayout();
            // 
            // toolStrip1
            // 
            this.toolStrip1.ImageScalingSize = new System.Drawing.Size(32, 32);
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButtonFechados,
            this.toolStripButtonEspMaquinas,
            this.toolStripButtonProcessamento,
            this.toolStripButtonProcessado,
            this.toolStripButtonEnviada,
            this.toolStripButtonENVM,
            this.toolStripSeparator5,
            this.toolStripButtonErro,
            this.toolStripSeparator1,
            this.toolStripButtonRefresh,
            this.toolStripSeparator3,
            this.toolStripButtonExitJanela,
            this.toolStripSeparator2,
            this.tsBtnRemessa,
            this.tsBtnEstorno});
            this.toolStrip1.Location = new System.Drawing.Point(0, 0);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Padding = new System.Windows.Forms.Padding(0);
            this.toolStrip1.Size = new System.Drawing.Size(940, 39);
            this.toolStrip1.TabIndex = 79;
            this.toolStrip1.Text = "toolStripActividades";
            // 
            // toolStripButtonFechados
            // 
            this.toolStripButtonFechados.CheckOnClick = true;
            this.toolStripButtonFechados.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonFechados.Image = global::CIActividades.Properties.Resources.LOCKUP;
            this.toolStripButtonFechados.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonFechados.Margin = new System.Windows.Forms.Padding(10, 1, 10, 2);
            this.toolStripButtonFechados.Name = "toolStripButtonFechados";
            this.toolStripButtonFechados.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonFechados.Text = "toolStripButton2";
            this.toolStripButtonFechados.ToolTipText = "Fechados";
            // 
            // toolStripButtonEspMaquinas
            // 
            this.toolStripButtonEspMaquinas.CheckOnClick = true;
            this.toolStripButtonEspMaquinas.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonEspMaquinas.Image = global::CIActividades.Properties.Resources.Maquina;
            this.toolStripButtonEspMaquinas.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonEspMaquinas.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonEspMaquinas.Name = "toolStripButtonEspMaquinas";
            this.toolStripButtonEspMaquinas.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonEspMaquinas.Text = "toolStripButton3";
            this.toolStripButtonEspMaquinas.ToolTipText = "Espera de Maquinas";
            // 
            // toolStripButtonProcessamento
            // 
            this.toolStripButtonProcessamento.CheckOnClick = true;
            this.toolStripButtonProcessamento.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonProcessamento.Image = global::CIActividades.Properties.Resources.Par;
            this.toolStripButtonProcessamento.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonProcessamento.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonProcessamento.Name = "toolStripButtonProcessamento";
            this.toolStripButtonProcessamento.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonProcessamento.Text = "toolStripButton4";
            this.toolStripButtonProcessamento.ToolTipText = "Em Processamento";
            // 
            // toolStripButtonProcessado
            // 
            this.toolStripButtonProcessado.CheckOnClick = true;
            this.toolStripButtonProcessado.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonProcessado.Image = global::CIActividades.Properties.Resources.OK;
            this.toolStripButtonProcessado.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonProcessado.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonProcessado.Name = "toolStripButtonProcessado";
            this.toolStripButtonProcessado.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonProcessado.Text = "toolStripButton5";
            this.toolStripButtonProcessado.ToolTipText = "Processado";
            // 
            // toolStripButtonEnviada
            // 
            this.toolStripButtonEnviada.CheckOnClick = true;
            this.toolStripButtonEnviada.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonEnviada.Image = global::CIActividades.Properties.Resources.Transmissao;
            this.toolStripButtonEnviada.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonEnviada.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonEnviada.Name = "toolStripButtonEnviada";
            this.toolStripButtonEnviada.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonEnviada.Text = "toolStripButton8";
            this.toolStripButtonEnviada.ToolTipText = "Enviada";
            // 
            // toolStripButtonENVM
            // 
            this.toolStripButtonENVM.CheckOnClick = true;
            this.toolStripButtonENVM.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonENVM.Image = global::CIActividades.Properties.Resources.ENVM_Status;
            this.toolStripButtonENVM.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonENVM.Name = "toolStripButtonENVM";
            this.toolStripButtonENVM.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonENVM.Text = "Ficheiro ENVM";
            // 
            // toolStripSeparator5
            // 
            this.toolStripSeparator5.Name = "toolStripSeparator5";
            this.toolStripSeparator5.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonErro
            // 
            this.toolStripButtonErro.CheckOnClick = true;
            this.toolStripButtonErro.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonErro.Image = global::CIActividades.Properties.Resources.Erro;
            this.toolStripButtonErro.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonErro.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonErro.Name = "toolStripButtonErro";
            this.toolStripButtonErro.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonErro.Text = "toolStripButton6";
            this.toolStripButtonErro.ToolTipText = "Erro";
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonRefresh
            // 
            this.toolStripButtonRefresh.AutoSize = false;
            this.toolStripButtonRefresh.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonRefresh.Image = global::CIActividades.Properties.Resources.Refresh;
            this.toolStripButtonRefresh.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
            this.toolStripButtonRefresh.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonRefresh.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonRefresh.Name = "toolStripButtonRefresh";
            this.toolStripButtonRefresh.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonRefresh.Text = "toolStripButton7";
            this.toolStripButtonRefresh.ToolTipText = "Refresh";
            this.toolStripButtonRefresh.Click += new System.EventHandler(this.toolStripButtonRefresh_Click);
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonExitJanela
            // 
            this.toolStripButtonExitJanela.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonExitJanela.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonExitJanela.Image")));
            this.toolStripButtonExitJanela.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonExitJanela.Name = "toolStripButtonExitJanela";
            this.toolStripButtonExitJanela.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonExitJanela.Click += new System.EventHandler(this.toolStripButtonExitJanela_Click);
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Name = "toolStripSeparator2";
            this.toolStripSeparator2.Size = new System.Drawing.Size(6, 39);
            // 
            // tsBtnRemessa
            // 
            this.tsBtnRemessa.BackColor = System.Drawing.SystemColors.Info;
            this.tsBtnRemessa.Checked = true;
            this.tsBtnRemessa.CheckOnClick = true;
            this.tsBtnRemessa.CheckState = System.Windows.Forms.CheckState.Checked;
            this.tsBtnRemessa.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.tsBtnRemessa.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tsBtnRemessa.Image = ((System.Drawing.Image)(resources.GetObject("tsBtnRemessa.Image")));
            this.tsBtnRemessa.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.tsBtnRemessa.Name = "tsBtnRemessa";
            this.tsBtnRemessa.Size = new System.Drawing.Size(40, 36);
            this.tsBtnRemessa.Text = "Rem.";
            this.tsBtnRemessa.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            this.tsBtnRemessa.Click += new System.EventHandler(this.tsBtnRemessa_Click);
            // 
            // tsBtnEstorno
            // 
            this.tsBtnEstorno.BackColor = System.Drawing.SystemColors.Info;
            this.tsBtnEstorno.Checked = true;
            this.tsBtnEstorno.CheckOnClick = true;
            this.tsBtnEstorno.CheckState = System.Windows.Forms.CheckState.Checked;
            this.tsBtnEstorno.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.tsBtnEstorno.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.tsBtnEstorno.Image = ((System.Drawing.Image)(resources.GetObject("tsBtnEstorno.Image")));
            this.tsBtnEstorno.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.tsBtnEstorno.Name = "tsBtnEstorno";
            this.tsBtnEstorno.Size = new System.Drawing.Size(31, 36);
            this.tsBtnEstorno.Text = "Est.";
            this.tsBtnEstorno.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            this.tsBtnEstorno.Click += new System.EventHandler(this.tsBtnEstorno_Click);
            // 
            // contextMenuStripRemessasResumo
            // 
            this.contextMenuStripRemessasResumo.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.verRemessasDetalheToolStripMenuItem});
            this.contextMenuStripRemessasResumo.Name = "contextMenuStripRemessas";
            this.contextMenuStripRemessasResumo.Size = new System.Drawing.Size(155, 26);
            this.contextMenuStripRemessasResumo.Text = "Remessas";
            this.contextMenuStripRemessasResumo.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripRemessasResumo_Opening);
            this.contextMenuStripRemessasResumo.Opened += new System.EventHandler(this.contextMenuStripRemessasResumo_Opened);
            // 
            // verRemessasDetalheToolStripMenuItem
            // 
            this.verRemessasDetalheToolStripMenuItem.Enabled = false;
            this.verRemessasDetalheToolStripMenuItem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.verRemessasDetalheToolStripMenuItem.Name = "verRemessasDetalheToolStripMenuItem";
            this.verRemessasDetalheToolStripMenuItem.Size = new System.Drawing.Size(154, 22);
            this.verRemessasDetalheToolStripMenuItem.Text = "Ver Remessas";
            this.verRemessasDetalheToolStripMenuItem.Click += new System.EventHandler(this.verRemessasDetalheToolStripMenuItem_Click);
            // 
            // contextMenuStripRemessa
            // 
            this.contextMenuStripRemessa.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuRemessaMudarEstado,
            this.verTranchesToolStripMenuItem,
            this.verDocumentosToolStripMenuItem});
            this.contextMenuStripRemessa.Name = "contextMenuStripRemTrans";
            this.contextMenuStripRemessa.Size = new System.Drawing.Size(168, 70);
            this.contextMenuStripRemessa.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripRemessa_Opening);
            this.contextMenuStripRemessa.Opened += new System.EventHandler(this.contextMenuStripRemessa_Opened);
            // 
            // toolStripMenuRemessaMudarEstado
            // 
            this.toolStripMenuRemessaMudarEstado.Enabled = false;
            this.toolStripMenuRemessaMudarEstado.Name = "toolStripMenuRemessaMudarEstado";
            this.toolStripMenuRemessaMudarEstado.Size = new System.Drawing.Size(167, 22);
            this.toolStripMenuRemessaMudarEstado.Text = "Mudar Estado";
            this.toolStripMenuRemessaMudarEstado.Click += new System.EventHandler(this.toolStripMenuRemessaMudarEstado_Click);
            // 
            // verTranchesToolStripMenuItem
            // 
            this.verTranchesToolStripMenuItem.Enabled = false;
            this.verTranchesToolStripMenuItem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.verTranchesToolStripMenuItem.Name = "verTranchesToolStripMenuItem";
            this.verTranchesToolStripMenuItem.Size = new System.Drawing.Size(167, 22);
            this.verTranchesToolStripMenuItem.Text = "Ver Tranches";
            this.verTranchesToolStripMenuItem.Click += new System.EventHandler(this.verTranchesToolStripMenuItem_Click);
            // 
            // verDocumentosToolStripMenuItem
            // 
            this.verDocumentosToolStripMenuItem.Enabled = false;
            this.verDocumentosToolStripMenuItem.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Bold);
            this.verDocumentosToolStripMenuItem.Name = "verDocumentosToolStripMenuItem";
            this.verDocumentosToolStripMenuItem.Size = new System.Drawing.Size(167, 22);
            this.verDocumentosToolStripMenuItem.Text = "Ver Documentos";
            this.verDocumentosToolStripMenuItem.Click += new System.EventHandler(this.verDocumentosToolStripMenuItem_Click);
            // 
            // contextMenuStripTranche
            // 
            this.contextMenuStripTranche.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contextMenuStripTrancheMudaEstado,
            this.contextMenuStripTrancheVerDocs});
            this.contextMenuStripTranche.Name = "contextMenuStripRemTrans";
            this.contextMenuStripTranche.Size = new System.Drawing.Size(168, 48);
            this.contextMenuStripTranche.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripTranche_Opening);
            this.contextMenuStripTranche.Opened += new System.EventHandler(this.contextMenuStripTranche_Opened);
            // 
            // contextMenuStripTrancheMudaEstado
            // 
            this.contextMenuStripTrancheMudaEstado.Enabled = false;
            this.contextMenuStripTrancheMudaEstado.Name = "contextMenuStripTrancheMudaEstado";
            this.contextMenuStripTrancheMudaEstado.Size = new System.Drawing.Size(167, 22);
            this.contextMenuStripTrancheMudaEstado.Text = "Mudar Estado";
            this.contextMenuStripTrancheMudaEstado.Click += new System.EventHandler(this.contextMenuStripTrancheMudaEstado_Click);
            // 
            // contextMenuStripTrancheVerDocs
            // 
            this.contextMenuStripTrancheVerDocs.Enabled = false;
            this.contextMenuStripTrancheVerDocs.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.contextMenuStripTrancheVerDocs.Name = "contextMenuStripTrancheVerDocs";
            this.contextMenuStripTrancheVerDocs.Size = new System.Drawing.Size(167, 22);
            this.contextMenuStripTrancheVerDocs.Text = "Ver Documentos";
            this.contextMenuStripTrancheVerDocs.Click += new System.EventHandler(this.contextMenuStripTrancheVerDocs_Click);
            // 
            // contextMenuStripDocumento
            // 
            this.contextMenuStripDocumento.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuDocumentosVerImagem});
            this.contextMenuStripDocumento.Name = "contextMenuStripRemessas";
            this.contextMenuStripDocumento.Size = new System.Drawing.Size(227, 26);
            this.contextMenuStripDocumento.Text = "Ver imagem do documento";
            this.contextMenuStripDocumento.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripDocumento_Opening);
            this.contextMenuStripDocumento.Opened += new System.EventHandler(this.contextMenuStripDocumento_Opened);
            // 
            // toolStripMenuDocumentosVerImagem
            // 
            this.toolStripMenuDocumentosVerImagem.Enabled = false;
            this.toolStripMenuDocumentosVerImagem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toolStripMenuDocumentosVerImagem.Name = "toolStripMenuDocumentosVerImagem";
            this.toolStripMenuDocumentosVerImagem.Size = new System.Drawing.Size(226, 22);
            this.toolStripMenuDocumentosVerImagem.Text = "Ver imagem do documento";
            this.toolStripMenuDocumentosVerImagem.Click += new System.EventHandler(this.toolStripMenuItem2_Click);
            // 
            // contextMenuStripResumoEstornos
            // 
            this.contextMenuStripResumoEstornos.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItemResumoEstornos});
            this.contextMenuStripResumoEstornos.Name = "contextMenuStripRemessas";
            this.contextMenuStripResumoEstornos.Size = new System.Drawing.Size(146, 26);
            this.contextMenuStripResumoEstornos.Text = "Remessas";
            this.contextMenuStripResumoEstornos.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripResumoEstornos_Opening);
            this.contextMenuStripResumoEstornos.Opened += new System.EventHandler(this.contextMenuStripResumoEstornos_Opened);
            // 
            // toolStripMenuItemResumoEstornos
            // 
            this.toolStripMenuItemResumoEstornos.Enabled = false;
            this.toolStripMenuItemResumoEstornos.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toolStripMenuItemResumoEstornos.Name = "toolStripMenuItemResumoEstornos";
            this.toolStripMenuItemResumoEstornos.Size = new System.Drawing.Size(145, 22);
            this.toolStripMenuItemResumoEstornos.Text = "Ver Estornos";
            this.toolStripMenuItemResumoEstornos.Click += new System.EventHandler(this.toolStripMenuItemResumoEstornos_Click);
            // 
            // contextMenuStripRemessaEstorno
            // 
            this.contextMenuStripRemessaEstorno.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItemRemessaEstorno,
            this.mudarEstadoToolStripMenuItem});
            this.contextMenuStripRemessaEstorno.Name = "contextMenuStripRemTrans";
            this.contextMenuStripRemessaEstorno.Size = new System.Drawing.Size(168, 48);
            this.contextMenuStripRemessaEstorno.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripRemessaEstorno_Opening);
            this.contextMenuStripRemessaEstorno.Opened += new System.EventHandler(this.contextMenuStripRemessaEstorno_Opened);
            // 
            // toolStripMenuItemRemessaEstorno
            // 
            this.toolStripMenuItemRemessaEstorno.Enabled = false;
            this.toolStripMenuItemRemessaEstorno.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toolStripMenuItemRemessaEstorno.Name = "toolStripMenuItemRemessaEstorno";
            this.toolStripMenuItemRemessaEstorno.Size = new System.Drawing.Size(167, 22);
            this.toolStripMenuItemRemessaEstorno.Text = "Ver Documentos";
            this.toolStripMenuItemRemessaEstorno.Click += new System.EventHandler(this.toolStripMenuItemRemessaEstorno_Click);
            // 
            // mudarEstadoToolStripMenuItem
            // 
            this.mudarEstadoToolStripMenuItem.Enabled = false;
            this.mudarEstadoToolStripMenuItem.Name = "mudarEstadoToolStripMenuItem";
            this.mudarEstadoToolStripMenuItem.Size = new System.Drawing.Size(167, 22);
            this.mudarEstadoToolStripMenuItem.Text = "Mudar Estado";
            this.mudarEstadoToolStripMenuItem.Click += new System.EventHandler(this.mudarEstadoToolStripMenuItem_Click);
            // 
            // contextMenuStripDocumentoEstorno
            // 
            this.contextMenuStripDocumentoEstorno.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuDocumentosEstornosVerImagem});
            this.contextMenuStripDocumentoEstorno.Name = "contextMenuStripRemessas";
            this.contextMenuStripDocumentoEstorno.Size = new System.Drawing.Size(227, 26);
            this.contextMenuStripDocumentoEstorno.Text = "Ver imagem do documento";
            this.contextMenuStripDocumentoEstorno.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripDocumentoEstorno_Opening);
            this.contextMenuStripDocumentoEstorno.Opened += new System.EventHandler(this.contextMenuStripDocumentoEstorno_Opened);
            // 
            // toolStripMenuDocumentosEstornosVerImagem
            // 
            this.toolStripMenuDocumentosEstornosVerImagem.Enabled = false;
            this.toolStripMenuDocumentosEstornosVerImagem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toolStripMenuDocumentosEstornosVerImagem.Name = "toolStripMenuDocumentosEstornosVerImagem";
            this.toolStripMenuDocumentosEstornosVerImagem.Size = new System.Drawing.Size(226, 22);
            this.toolStripMenuDocumentosEstornosVerImagem.Text = "Ver imagem do documento";
            this.toolStripMenuDocumentosEstornosVerImagem.Click += new System.EventHandler(this.toolStripMenuItem1_Click);
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label5.Location = new System.Drawing.Point(9, 64);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(27, 13);
            this.label5.TabIndex = 106;
            this.label5.Text = "De:";
            // 
            // lbBalcao
            // 
            this.lbBalcao.AutoSize = true;
            this.lbBalcao.Location = new System.Drawing.Point(432, 45);
            this.lbBalcao.Name = "lbBalcao";
            this.lbBalcao.Size = new System.Drawing.Size(40, 13);
            this.lbBalcao.TabIndex = 98;
            this.lbBalcao.Text = "Balcão";
            // 
            // lbRemessaCI
            // 
            this.lbRemessaCI.AutoSize = true;
            this.lbRemessaCI.Location = new System.Drawing.Point(482, 45);
            this.lbRemessaCI.Name = "lbRemessaCI";
            this.lbRemessaCI.Size = new System.Drawing.Size(64, 13);
            this.lbRemessaCI.TabIndex = 99;
            this.lbRemessaCI.Text = "Remessa CI";
            // 
            // lbTipoRemessa
            // 
            this.lbTipoRemessa.AutoSize = true;
            this.lbTipoRemessa.Location = new System.Drawing.Point(610, 44);
            this.lbTipoRemessa.Name = "lbTipoRemessa";
            this.lbTipoRemessa.Size = new System.Drawing.Size(75, 13);
            this.lbTipoRemessa.TabIndex = 100;
            this.lbTipoRemessa.Text = "Tipo Remessa";
            // 
            // lbDeposito
            // 
            this.lbDeposito.AutoSize = true;
            this.lbDeposito.Location = new System.Drawing.Point(549, 45);
            this.lbDeposito.Name = "lbDeposito";
            this.lbDeposito.Size = new System.Drawing.Size(49, 13);
            this.lbDeposito.TabIndex = 101;
            this.lbDeposito.Text = "Depósito";
            // 
            // txBalcao
            // 
            this.txBalcao.Location = new System.Drawing.Point(435, 61);
            this.txBalcao.MaxLength = 4;
            this.txBalcao.Name = "txBalcao";
            this.txBalcao.Size = new System.Drawing.Size(44, 20);
            this.txBalcao.TabIndex = 102;
            // 
            // txRemessaCI
            // 
            this.txRemessaCI.Location = new System.Drawing.Point(485, 61);
            this.txRemessaCI.MaxLength = 6;
            this.txRemessaCI.Name = "txRemessaCI";
            this.txRemessaCI.Size = new System.Drawing.Size(61, 20);
            this.txRemessaCI.TabIndex = 103;
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(257, 61);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(172, 20);
            this.m_ctrldtFim.TabIndex = 109;
            // 
            // txDeposito
            // 
            this.txDeposito.Location = new System.Drawing.Point(552, 61);
            this.txDeposito.MaxLength = 7;
            this.txDeposito.Name = "txDeposito";
            this.txDeposito.Size = new System.Drawing.Size(55, 20);
            this.txDeposito.TabIndex = 104;
            // 
            // m_ctrldtInicio
            // 
            this.m_ctrldtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtInicio.Location = new System.Drawing.Point(42, 61);
            this.m_ctrldtInicio.Name = "m_ctrldtInicio";
            this.m_ctrldtInicio.Size = new System.Drawing.Size(185, 20);
            this.m_ctrldtInicio.TabIndex = 108;
            // 
            // cbTRemessa
            // 
            this.cbTRemessa.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbTRemessa.FormattingEnabled = true;
            this.cbTRemessa.Location = new System.Drawing.Point(613, 61);
            this.cbTRemessa.Name = "cbTRemessa";
            this.cbTRemessa.Size = new System.Drawing.Size(208, 21);
            this.cbTRemessa.TabIndex = 105;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label6.Location = new System.Drawing.Point(233, 64);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(18, 13);
            this.label6.TabIndex = 107;
            this.label6.Text = "a:";
            // 
            // spContainer
            // 
            this.spContainer.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.spContainer.Location = new System.Drawing.Point(0, 87);
            this.spContainer.Name = "spContainer";
            // 
            // spContainer.Panel1
            // 
            this.spContainer.Panel1.Controls.Add(this.spContRemessas);
            // 
            // spContainer.Panel2
            // 
            this.spContainer.Panel2.Controls.Add(this.spContEstorno);
            this.spContainer.Size = new System.Drawing.Size(940, 511);
            this.spContainer.SplitterDistance = 470;
            this.spContainer.TabIndex = 110;
            // 
            // spContRemessas
            // 
            this.spContRemessas.Dock = System.Windows.Forms.DockStyle.Fill;
            this.spContRemessas.Location = new System.Drawing.Point(0, 0);
            this.spContRemessas.Name = "spContRemessas";
            this.spContRemessas.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // spContRemessas.Panel1
            // 
            this.spContRemessas.Panel1.Controls.Add(this.spContAgrRemessas);
            // 
            // spContRemessas.Panel2
            // 
            this.spContRemessas.Panel2.Controls.Add(this.spContTranDoc);
            this.spContRemessas.Size = new System.Drawing.Size(470, 511);
            this.spContRemessas.SplitterDistance = 274;
            this.spContRemessas.TabIndex = 0;
            // 
            // spContAgrRemessas
            // 
            this.spContAgrRemessas.Dock = System.Windows.Forms.DockStyle.Fill;
            this.spContAgrRemessas.Location = new System.Drawing.Point(0, 0);
            this.spContAgrRemessas.Name = "spContAgrRemessas";
            this.spContAgrRemessas.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // spContAgrRemessas.Panel1
            // 
            this.spContAgrRemessas.Panel1.Controls.Add(this.listViewResumoRemessas);
            this.spContAgrRemessas.Panel1.Controls.Add(this.label1);
            this.spContAgrRemessas.Panel1.Controls.Add(this.m_btRefreshRemessas);
            this.spContAgrRemessas.Panel1.Controls.Add(this.btnRemessasErro);
            // 
            // spContAgrRemessas.Panel2
            // 
            this.spContAgrRemessas.Panel2.Controls.Add(this.listViewDetalhesRemessa);
            this.spContAgrRemessas.Panel2.Controls.Add(this.labelCountRemessas);
            this.spContAgrRemessas.Size = new System.Drawing.Size(470, 274);
            this.spContAgrRemessas.SplitterDistance = 154;
            this.spContAgrRemessas.TabIndex = 0;
            // 
            // listViewResumoRemessas
            // 
            this.listViewResumoRemessas.AllowColumnReorder = true;
            this.listViewResumoRemessas.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewResumoRemessas.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.Process,
            this.Remessa,
            this.EstadoRemessas,
            this.tpRemessa,
            this.Rems,
            this.Docs,
            this.Montante,
            this.ENVM});
            this.listViewResumoRemessas.ContextMenuStrip = this.contextMenuStripRemessasResumo;
            this.listViewResumoRemessas.EnableExportar = true;
            this.listViewResumoRemessas.FullRowSelect = true;
            this.listViewResumoRemessas.GridLines = true;
            this.listViewResumoRemessas.HideSelection = false;
            this.listViewResumoRemessas.Location = new System.Drawing.Point(10, 42);
            this.listViewResumoRemessas.Margin = new System.Windows.Forms.Padding(10, 3, 3, 3);
            this.listViewResumoRemessas.Name = "listViewResumoRemessas";
            this.listViewResumoRemessas.Size = new System.Drawing.Size(457, 109);
            this.listViewResumoRemessas.TabIndex = 92;
            this.listViewResumoRemessas.TabStop = false;
            this.listViewResumoRemessas.UseCompatibleStateImageBehavior = false;
            this.listViewResumoRemessas.View = System.Windows.Forms.View.Details;
            this.listViewResumoRemessas.DoubleClick += new System.EventHandler(this.listViewResumoRemessas_DoubleClick);
            // 
            // Process
            // 
            this.Process.Text = "Dt. Processamento";
            this.Process.Width = 105;
            // 
            // Remessa
            // 
            this.Remessa.Text = "Dt. Remessa";
            this.Remessa.Width = 76;
            // 
            // EstadoRemessas
            // 
            this.EstadoRemessas.Text = "Estado";
            this.EstadoRemessas.Width = 130;
            // 
            // tpRemessa
            // 
            this.tpRemessa.Text = "Tipo Remessa";
            this.tpRemessa.Width = 115;
            // 
            // Rems
            // 
            this.Rems.Text = "#Rems";
            this.Rems.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.Rems.Width = 45;
            // 
            // Docs
            // 
            this.Docs.Text = "#Docs";
            this.Docs.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.Docs.Width = 45;
            // 
            // Montante
            // 
            this.Montante.Text = "Montante";
            this.Montante.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.Montante.Width = 85;
            // 
            // ENVM
            // 
            this.ENVM.Text = "ENVM";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(7, 26);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(106, 13);
            this.label1.TabIndex = 91;
            this.label1.Text = "Depósito-Resumo";
            // 
            // m_btRefreshRemessas
            // 
            this.m_btRefreshRemessas.Location = new System.Drawing.Point(12, 0);
            this.m_btRefreshRemessas.Name = "m_btRefreshRemessas";
            this.m_btRefreshRemessas.Size = new System.Drawing.Size(86, 23);
            this.m_btRefreshRemessas.TabIndex = 89;
            this.m_btRefreshRemessas.Text = "Remessas";
            this.m_btRefreshRemessas.UseVisualStyleBackColor = true;
            this.m_btRefreshRemessas.Click += new System.EventHandler(this.m_btRefreshRemessas_Click);
            // 
            // btnRemessasErro
            // 
            this.btnRemessasErro.Location = new System.Drawing.Point(104, 0);
            this.btnRemessasErro.Name = "btnRemessasErro";
            this.btnRemessasErro.Size = new System.Drawing.Size(157, 23);
            this.btnRemessasErro.TabIndex = 90;
            this.btnRemessasErro.Text = "Reenviar remessas em erro";
            this.btnRemessasErro.UseVisualStyleBackColor = true;
            this.btnRemessasErro.Click += new System.EventHandler(this.btnRemessasErro_Click);
            // 
            // listViewDetalhesRemessa
            // 
            this.listViewDetalhesRemessa.AllowColumnReorder = true;
            this.listViewDetalhesRemessa.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDetalhesRemessa.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colRemID,
            this.colRemData,
            this.colRemTimer,
            this.colTimerEnviada,
            this.colRemnum,
            this.colRem,
            this.colRemTP,
            this.colRemDeposito,
            this.colRemStat,
            this.colRemTrans,
            this.colRemChaveH,
            this.colRemCGDError,
            this.colRemQT,
            this.colRemMT,
            this.colRemErro,
            this.colRemMaquina});
            this.listViewDetalhesRemessa.ContextMenuStrip = this.contextMenuStripRemessa;
            this.listViewDetalhesRemessa.EnableExportar = true;
            this.listViewDetalhesRemessa.FullRowSelect = true;
            this.listViewDetalhesRemessa.GridLines = true;
            this.listViewDetalhesRemessa.HideSelection = false;
            this.listViewDetalhesRemessa.Location = new System.Drawing.Point(10, 19);
            this.listViewDetalhesRemessa.Name = "listViewDetalhesRemessa";
            this.listViewDetalhesRemessa.Size = new System.Drawing.Size(457, 97);
            this.listViewDetalhesRemessa.TabIndex = 91;
            this.listViewDetalhesRemessa.TabStop = false;
            this.listViewDetalhesRemessa.UseCompatibleStateImageBehavior = false;
            this.listViewDetalhesRemessa.View = System.Windows.Forms.View.Details;
            this.listViewDetalhesRemessa.DoubleClick += new System.EventHandler(this.listViewDetalhesRemessa_DoubleClick);
            // 
            // colRemID
            // 
            this.colRemID.Text = "Rem ID";
            this.colRemID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemID.Width = 54;
            // 
            // colRemData
            // 
            this.colRemData.Text = "Dt. Remessa";
            this.colRemData.Width = 76;
            // 
            // colRemTimer
            // 
            this.colRemTimer.Text = "Timer";
            this.colRemTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemTimer.Width = 115;
            // 
            // colTimerEnviada
            // 
            this.colTimerEnviada.Text = "Dt. Envio";
            this.colTimerEnviada.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTimerEnviada.Width = 115;
            // 
            // colRemnum
            // 
            this.colRemnum.Text = "Banco";
            this.colRemnum.Width = 0;
            // 
            // colRem
            // 
            this.colRem.Text = "Balcão";
            this.colRem.Width = 120;
            // 
            // colRemTP
            // 
            this.colRemTP.Text = "Tipo Remessa";
            this.colRemTP.Width = 185;
            // 
            // colRemDeposito
            // 
            this.colRemDeposito.Text = "#Depósito";
            this.colRemDeposito.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemDeposito.Width = 70;
            // 
            // colRemStat
            // 
            this.colRemStat.Text = "Estado";
            this.colRemStat.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemStat.Width = 130;
            // 
            // colRemTrans
            // 
            this.colRemTrans.Text = "#Tranches";
            this.colRemTrans.Width = 70;
            // 
            // colRemChaveH
            // 
            this.colRemChaveH.Text = "ChaveH";
            this.colRemChaveH.Width = 0;
            // 
            // colRemCGDError
            // 
            this.colRemCGDError.Text = "CGD Error";
            // 
            // colRemQT
            // 
            this.colRemQT.Text = "Quant.";
            this.colRemQT.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // colRemMT
            // 
            this.colRemMT.Text = "Montante";
            this.colRemMT.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colRemMT.Width = 94;
            // 
            // colRemErro
            // 
            this.colRemErro.Text = "Erro";
            this.colRemErro.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemErro.Width = 283;
            // 
            // colRemMaquina
            // 
            this.colRemMaquina.Text = "Maquina";
            // 
            // labelCountRemessas
            // 
            this.labelCountRemessas.AutoSize = true;
            this.labelCountRemessas.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelCountRemessas.Location = new System.Drawing.Point(9, 3);
            this.labelCountRemessas.Name = "labelCountRemessas";
            this.labelCountRemessas.Size = new System.Drawing.Size(64, 13);
            this.labelCountRemessas.TabIndex = 74;
            this.labelCountRemessas.Text = "Remessas";
            // 
            // spContTranDoc
            // 
            this.spContTranDoc.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.spContTranDoc.Location = new System.Drawing.Point(0, 0);
            this.spContTranDoc.Name = "spContTranDoc";
            this.spContTranDoc.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // spContTranDoc.Panel1
            // 
            this.spContTranDoc.Panel1.Controls.Add(this.listViewDetalhesTranche);
            this.spContTranDoc.Panel1.Controls.Add(this.labelCountTranches);
            // 
            // spContTranDoc.Panel2
            // 
            this.spContTranDoc.Panel2.Controls.Add(this.lblCountDocumentos);
            this.spContTranDoc.Panel2.Controls.Add(this.listViewDetalhesDocumentos);
            this.spContTranDoc.Size = new System.Drawing.Size(470, 233);
            this.spContTranDoc.SplitterDistance = 104;
            this.spContTranDoc.TabIndex = 0;
            // 
            // listViewDetalhesTranche
            // 
            this.listViewDetalhesTranche.AllowColumnReorder = true;
            this.listViewDetalhesTranche.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDetalhesTranche.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colTransRemID,
            this.colTransID,
            this.colTransTimer,
            this.colTransNumero,
            this.colTransEstado,
            this.colTransQt,
            this.colTransMt,
            this.colTransErro,
            this.colTransChaveWS,
            this.colTIBCOEstado});
            this.listViewDetalhesTranche.ContextMenuStrip = this.contextMenuStripTranche;
            this.listViewDetalhesTranche.EnableExportar = true;
            this.listViewDetalhesTranche.FullRowSelect = true;
            this.listViewDetalhesTranche.GridLines = true;
            this.listViewDetalhesTranche.HideSelection = false;
            this.listViewDetalhesTranche.Location = new System.Drawing.Point(10, 22);
            this.listViewDetalhesTranche.Name = "listViewDetalhesTranche";
            this.listViewDetalhesTranche.Size = new System.Drawing.Size(457, 82);
            this.listViewDetalhesTranche.TabIndex = 92;
            this.listViewDetalhesTranche.TabStop = false;
            this.listViewDetalhesTranche.UseCompatibleStateImageBehavior = false;
            this.listViewDetalhesTranche.View = System.Windows.Forms.View.Details;
            this.listViewDetalhesTranche.DoubleClick += new System.EventHandler(this.listViewDetalhesTranche_DoubleClick);
            // 
            // colTransRemID
            // 
            this.colTransRemID.Text = "Rem ID";
            this.colTransRemID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransRemID.Width = 54;
            // 
            // colTransID
            // 
            this.colTransID.Text = "Trans ID";
            this.colTransID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransID.Width = 131;
            // 
            // colTransTimer
            // 
            this.colTransTimer.Text = "Timer";
            this.colTransTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransTimer.Width = 145;
            // 
            // colTransNumero
            // 
            this.colTransNumero.Text = "Número";
            this.colTransNumero.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransNumero.Width = 107;
            // 
            // colTransEstado
            // 
            this.colTransEstado.Text = "Estado";
            this.colTransEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colTransEstado.Width = 90;
            // 
            // colTransQt
            // 
            this.colTransQt.Text = "Quantidade";
            this.colTransQt.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colTransQt.Width = 94;
            // 
            // colTransMt
            // 
            this.colTransMt.Text = "Montante";
            this.colTransMt.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colTransMt.Width = 100;
            // 
            // colTransErro
            // 
            this.colTransErro.Text = "Erro";
            // 
            // colTransChaveWS
            // 
            this.colTransChaveWS.Text = "ChaveWS";
            this.colTransChaveWS.Width = 70;
            // 
            // colTIBCOEstado
            // 
            this.colTIBCOEstado.Text = "TIBCO Estado";
            this.colTIBCOEstado.Width = 90;
            // 
            // labelCountTranches
            // 
            this.labelCountTranches.AutoSize = true;
            this.labelCountTranches.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelCountTranches.Location = new System.Drawing.Point(9, 6);
            this.labelCountTranches.Name = "labelCountTranches";
            this.labelCountTranches.Size = new System.Drawing.Size(60, 13);
            this.labelCountTranches.TabIndex = 75;
            this.labelCountTranches.Text = "Tranches";
            // 
            // lblCountDocumentos
            // 
            this.lblCountDocumentos.AutoSize = true;
            this.lblCountDocumentos.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblCountDocumentos.Location = new System.Drawing.Point(12, 6);
            this.lblCountDocumentos.Name = "lblCountDocumentos";
            this.lblCountDocumentos.Size = new System.Drawing.Size(77, 13);
            this.lblCountDocumentos.TabIndex = 93;
            this.lblCountDocumentos.Text = "Documentos";
            // 
            // listViewDetalhesDocumentos
            // 
            this.listViewDetalhesDocumentos.AllowColumnReorder = true;
            this.listViewDetalhesDocumentos.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDetalhesDocumentos.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.detDocColDocId,
            this.detDocColDocZona5,
            this.detDocColDocZona4,
            this.detDocColDocZona3,
            this.detDocColDocZona2,
            this.detDocColDocZona1,
            this.detDocColDocStat,
            this.detDocColDocNIB,
            this.detDocColDocRefarq,
            this.detDocColDocNSeq,
            this.detDocColChaveH,
            this.detDocColDocIndex,
            this.detDocColDocMaquina,
            this.detDocColDocBaltom,
            this.detDocColChaveHext,
            this.detDocColDocTipo,
            this.detDocColDocTimer,
            this.detDocColReminData,
            this.detDocColReminID,
            this.detDocColTranoutID,
            this.detDocColBalcao,
            this.detDocColRemNum,
            this.detDocColTranoutStatId,
            this.detDocColTranNum,
            this.columnDocColErro,
            this.detDocDeposito});
            this.listViewDetalhesDocumentos.ContextMenuStrip = this.contextMenuStripDocumento;
            this.listViewDetalhesDocumentos.EnableExportar = true;
            this.listViewDetalhesDocumentos.FullRowSelect = true;
            this.listViewDetalhesDocumentos.GridLines = true;
            this.listViewDetalhesDocumentos.HideSelection = false;
            this.listViewDetalhesDocumentos.Location = new System.Drawing.Point(10, 22);
            this.listViewDetalhesDocumentos.MultiSelect = false;
            this.listViewDetalhesDocumentos.Name = "listViewDetalhesDocumentos";
            this.listViewDetalhesDocumentos.Size = new System.Drawing.Size(457, 100);
            this.listViewDetalhesDocumentos.TabIndex = 94;
            this.listViewDetalhesDocumentos.TabStop = false;
            this.listViewDetalhesDocumentos.UseCompatibleStateImageBehavior = false;
            this.listViewDetalhesDocumentos.View = System.Windows.Forms.View.Details;
            this.listViewDetalhesDocumentos.DoubleClick += new System.EventHandler(this.listViewDetalhesDocumentos_DoubleClick);
            // 
            // detDocColDocId
            // 
            this.detDocColDocId.Text = "Doc ID";
            this.detDocColDocId.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.detDocColDocId.Width = 62;
            // 
            // detDocColDocZona5
            // 
            this.detDocColDocZona5.Text = "ZIB";
            this.detDocColDocZona5.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona5.Width = 100;
            // 
            // detDocColDocZona4
            // 
            this.detDocColDocZona4.Text = "N. Conta";
            this.detDocColDocZona4.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona4.Width = 100;
            // 
            // detDocColDocZona3
            // 
            this.detDocColDocZona3.Text = "N.Cheque";
            this.detDocColDocZona3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona3.Width = 100;
            // 
            // detDocColDocZona2
            // 
            this.detDocColDocZona2.Text = "Montante";
            this.detDocColDocZona2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.detDocColDocZona2.Width = 100;
            // 
            // detDocColDocZona1
            // 
            this.detDocColDocZona1.Text = "Tp";
            this.detDocColDocZona1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona1.Width = 90;
            // 
            // detDocColDocStat
            // 
            this.detDocColDocStat.Text = "Estado";
            this.detDocColDocStat.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocStat.Width = 90;
            // 
            // detDocColDocNIB
            // 
            this.detDocColDocNIB.Text = "Conta/NIB";
            this.detDocColDocNIB.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocNIB.Width = 150;
            // 
            // detDocColDocRefarq
            // 
            this.detDocColDocRefarq.Text = "Refarq";
            this.detDocColDocRefarq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocRefarq.Width = 150;
            // 
            // detDocColDocNSeq
            // 
            this.detDocColDocNSeq.Text = "N Seq";
            this.detDocColDocNSeq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColChaveH
            // 
            this.detDocColChaveH.Text = "ChaveH";
            this.detDocColChaveH.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColChaveH.Width = 350;
            // 
            // detDocColDocIndex
            // 
            this.detDocColDocIndex.Text = "Index";
            this.detDocColDocIndex.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocIndex.Width = 100;
            // 
            // detDocColDocMaquina
            // 
            this.detDocColDocMaquina.Text = "Maquina";
            this.detDocColDocMaquina.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColDocBaltom
            // 
            this.detDocColDocBaltom.Text = "Balcão Tom";
            this.detDocColDocBaltom.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocBaltom.Width = 150;
            // 
            // detDocColChaveHext
            // 
            this.detDocColChaveHext.Text = "ChaveH ext";
            this.detDocColChaveHext.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColChaveHext.Width = 200;
            // 
            // detDocColDocTipo
            // 
            this.detDocColDocTipo.Text = "Tipo";
            this.detDocColDocTipo.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocTipo.Width = 185;
            // 
            // detDocColDocTimer
            // 
            this.detDocColDocTimer.Text = "Timer";
            this.detDocColDocTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocTimer.Width = 120;
            // 
            // detDocColReminData
            // 
            this.detDocColReminData.Text = "Data Remessa";
            this.detDocColReminData.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColReminData.Width = 100;
            // 
            // detDocColReminID
            // 
            this.detDocColReminID.Text = "Rem ID";
            this.detDocColReminID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColTranoutID
            // 
            this.detDocColTranoutID.Text = "Tran ID";
            this.detDocColTranoutID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColBalcao
            // 
            this.detDocColBalcao.Text = "Balcão";
            this.detDocColBalcao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColBalcao.Width = 150;
            // 
            // detDocColRemNum
            // 
            this.detDocColRemNum.Text = "Rem Num";
            this.detDocColRemNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColRemNum.Width = 80;
            // 
            // detDocColTranoutStatId
            // 
            this.detDocColTranoutStatId.Text = "Tran Estado";
            this.detDocColTranoutStatId.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColTranoutStatId.Width = 80;
            // 
            // detDocColTranNum
            // 
            this.detDocColTranNum.Text = "Tran Num";
            this.detDocColTranNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // columnDocColErro
            // 
            this.columnDocColErro.Text = "Erro";
            this.columnDocColErro.Width = 256;
            // 
            // detDocDeposito
            // 
            this.detDocDeposito.Text = "Depósito";
            // 
            // spContEstorno
            // 
            this.spContEstorno.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.spContEstorno.Location = new System.Drawing.Point(3, 1);
            this.spContEstorno.Name = "spContEstorno";
            this.spContEstorno.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // spContEstorno.Panel1
            // 
            this.spContEstorno.Panel1.Controls.Add(this.listViewEstornoResumo);
            this.spContEstorno.Panel1.Controls.Add(this.btEstorno);
            this.spContEstorno.Panel1.Controls.Add(this.btnEstonoErro);
            this.spContEstorno.Panel1.Controls.Add(this.label7);
            // 
            // spContEstorno.Panel2
            // 
            this.spContEstorno.Panel2.Controls.Add(this.spContEstRemDoc);
            this.spContEstorno.Size = new System.Drawing.Size(470, 510);
            this.spContEstorno.SplitterDistance = 228;
            this.spContEstorno.TabIndex = 0;
            // 
            // listViewEstornoResumo
            // 
            this.listViewEstornoResumo.AllowColumnReorder = true;
            this.listViewEstornoResumo.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewEstornoResumo.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colZProcess,
            this.colZEstorno,
            this.colEstadoEstr,
            this.colTpRemessa,
            this.colQtEstorno,
            this.colQtDocs,
            this.colMontante,
            this.colENVM});
            this.listViewEstornoResumo.ContextMenuStrip = this.contextMenuStripResumoEstornos;
            this.listViewEstornoResumo.EnableExportar = true;
            this.listViewEstornoResumo.FullRowSelect = true;
            this.listViewEstornoResumo.GridLines = true;
            this.listViewEstornoResumo.HideSelection = false;
            this.listViewEstornoResumo.Location = new System.Drawing.Point(6, 42);
            this.listViewEstornoResumo.Name = "listViewEstornoResumo";
            this.listViewEstornoResumo.Size = new System.Drawing.Size(461, 183);
            this.listViewEstornoResumo.TabIndex = 94;
            this.listViewEstornoResumo.TabStop = false;
            this.listViewEstornoResumo.UseCompatibleStateImageBehavior = false;
            this.listViewEstornoResumo.View = System.Windows.Forms.View.Details;
            this.listViewEstornoResumo.DoubleClick += new System.EventHandler(this.listViewEstornoResumo_DoubleClick);
            // 
            // colZProcess
            // 
            this.colZProcess.Text = "Dt. Processamento";
            this.colZProcess.Width = 105;
            // 
            // colZEstorno
            // 
            this.colZEstorno.Text = "Dt. Estorno";
            this.colZEstorno.Width = 66;
            // 
            // colEstadoEstr
            // 
            this.colEstadoEstr.Text = "Estado Estorno";
            this.colEstadoEstr.Width = 130;
            // 
            // colTpRemessa
            // 
            this.colTpRemessa.Text = "Tipo Remessa";
            this.colTpRemessa.Width = 115;
            // 
            // colQtEstorno
            // 
            this.colQtEstorno.Text = "#Est";
            this.colQtEstorno.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colQtEstorno.Width = 45;
            // 
            // colQtDocs
            // 
            this.colQtDocs.Text = "#Docs";
            this.colQtDocs.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colQtDocs.Width = 45;
            // 
            // colMontante
            // 
            this.colMontante.Text = "Montante";
            this.colMontante.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colMontante.Width = 85;
            // 
            // colENVM
            // 
            this.colENVM.Text = "ENVM";
            // 
            // btEstorno
            // 
            this.btEstorno.Location = new System.Drawing.Point(6, -1);
            this.btEstorno.Name = "btEstorno";
            this.btEstorno.Size = new System.Drawing.Size(86, 23);
            this.btEstorno.TabIndex = 85;
            this.btEstorno.Text = "Estornos";
            this.btEstorno.UseVisualStyleBackColor = true;
            this.btEstorno.Click += new System.EventHandler(this.btEstorno_Click);
            // 
            // btnEstonoErro
            // 
            this.btnEstonoErro.Location = new System.Drawing.Point(98, -1);
            this.btnEstonoErro.Name = "btnEstonoErro";
            this.btnEstonoErro.Size = new System.Drawing.Size(151, 23);
            this.btnEstonoErro.TabIndex = 86;
            this.btnEstonoErro.Text = "Reenviar estorno em erro";
            this.btnEstonoErro.UseVisualStyleBackColor = true;
            this.btnEstonoErro.Click += new System.EventHandler(this.btnEstonoErro_Click);
            // 
            // label7
            // 
            this.label7.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.label7.AutoSize = true;
            this.label7.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label7.Location = new System.Drawing.Point(3, 25);
            this.label7.MaximumSize = new System.Drawing.Size(111, 13);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(111, 13);
            this.label7.TabIndex = 87;
            this.label7.Text = "Estornos-Resumos";
            // 
            // spContEstRemDoc
            // 
            this.spContEstRemDoc.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.spContEstRemDoc.Location = new System.Drawing.Point(4, 4);
            this.spContEstRemDoc.Name = "spContEstRemDoc";
            this.spContEstRemDoc.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // spContEstRemDoc.Panel1
            // 
            this.spContEstRemDoc.Panel1.Controls.Add(this.listViewRemessaEstorno);
            this.spContEstRemDoc.Panel1.Controls.Add(this.lblCountRemessasEstornos);
            // 
            // spContEstRemDoc.Panel2
            // 
            this.spContEstRemDoc.Panel2.Controls.Add(this.listViewDocumentoEstorno);
            this.spContEstRemDoc.Panel2.Controls.Add(this.lblCountDocumentosEstornos);
            this.spContEstRemDoc.Size = new System.Drawing.Size(466, 274);
            this.spContEstRemDoc.SplitterDistance = 151;
            this.spContEstRemDoc.TabIndex = 0;
            // 
            // listViewRemessaEstorno
            // 
            this.listViewRemessaEstorno.AllowColumnReorder = true;
            this.listViewRemessaEstorno.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewRemessaEstorno.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader1,
            this.columnHeader2,
            this.columnHeader3,
            this.columnHeader8,
            this.columnHeader4,
            this.columnHeader5,
            this.columnHeader6,
            this.columnHeader7,
            this.columnHeader17,
            this.columnHeader18,
            this.columnHeader19,
            this.columnHeader20,
            this.columnHeader21,
            this.columnHeader22,
            this.columnHeader23,
            this.columnHeader24,
            this.columnHeader25,
            this.columnHeader26});
            this.listViewRemessaEstorno.ContextMenuStrip = this.contextMenuStripRemessaEstorno;
            this.listViewRemessaEstorno.EnableExportar = true;
            this.listViewRemessaEstorno.FullRowSelect = true;
            this.listViewRemessaEstorno.GridLines = true;
            this.listViewRemessaEstorno.HideSelection = false;
            this.listViewRemessaEstorno.Location = new System.Drawing.Point(2, 20);
            this.listViewRemessaEstorno.Name = "listViewRemessaEstorno";
            this.listViewRemessaEstorno.Size = new System.Drawing.Size(461, 128);
            this.listViewRemessaEstorno.TabIndex = 95;
            this.listViewRemessaEstorno.TabStop = false;
            this.listViewRemessaEstorno.UseCompatibleStateImageBehavior = false;
            this.listViewRemessaEstorno.View = System.Windows.Forms.View.Details;
            this.listViewRemessaEstorno.DoubleClick += new System.EventHandler(this.listViewRemessaEstorno_DoubleClick);
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Rem ID";
            this.columnHeader1.Width = 66;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Rem Data";
            this.columnHeader2.Width = 66;
            // 
            // columnHeader3
            // 
            this.columnHeader3.Text = "Rem Timer";
            this.columnHeader3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader3.Width = 100;
            // 
            // columnHeader4
            // 
            this.columnHeader4.Text = "Enviada";
            this.columnHeader4.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader4.Width = 100;
            // 
            // columnHeader5
            // 
            this.columnHeader5.Text = "Est Rem";
            this.columnHeader5.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader5.Width = 90;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "Est Doc";
            this.columnHeader6.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader6.Width = 50;
            // 
            // columnHeader7
            // 
            this.columnHeader7.Text = "Balcão Tom";
            this.columnHeader7.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader7.Width = 100;
            // 
            // columnHeader17
            // 
            this.columnHeader17.Text = "Número";
            // 
            // columnHeader18
            // 
            this.columnHeader18.Text = "Tipo Remessa";
            this.columnHeader18.Width = 185;
            // 
            // columnHeader19
            // 
            this.columnHeader19.Text = "Depósito";
            // 
            // columnHeader20
            // 
            this.columnHeader20.Text = "Estado";
            // 
            // columnHeader21
            // 
            this.columnHeader21.Text = "ChaveH";
            // 
            // columnHeader22
            // 
            this.columnHeader22.Text = "CGD Error";
            // 
            // columnHeader23
            // 
            this.columnHeader23.Text = "Quant.";
            // 
            // columnHeader24
            // 
            this.columnHeader24.Text = "Montante";
            this.columnHeader24.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader24.Width = 100;
            // 
            // columnHeader25
            // 
            this.columnHeader25.Text = "Erro";
            // 
            // columnHeader26
            // 
            this.columnHeader26.Text = "Máquina";
            // 
            // lblCountRemessasEstornos
            // 
            this.lblCountRemessasEstornos.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.lblCountRemessasEstornos.AutoSize = true;
            this.lblCountRemessasEstornos.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblCountRemessasEstornos.Location = new System.Drawing.Point(-1, 4);
            this.lblCountRemessasEstornos.Name = "lblCountRemessasEstornos";
            this.lblCountRemessasEstornos.Size = new System.Drawing.Size(117, 13);
            this.lblCountRemessasEstornos.TabIndex = 86;
            this.lblCountRemessasEstornos.Text = "Remessas-Estornos";
            // 
            // listViewDocumentoEstorno
            // 
            this.listViewDocumentoEstorno.AllowColumnReorder = true;
            this.listViewDocumentoEstorno.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDocumentoEstorno.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colEstDocId,
            this.colEstZIB,
            this.colEstNConta,
            this.colEstNCheque,
            this.colEstMontante,
            this.colEstTpDoc,
            this.colEstEstDoc,
            this.colEstNIB,
            this.colEstRefarq,
            this.colEstNSeq,
            this.colEstChvH,
            this.colEstIndex,
            this.colEstMaquina,
            this.colEstBalcaoTom,
            this.colEstChvHext,
            this.colEstTipo,
            this.colEstTimer,
            this.colEstZRemessa,
            this.colEstRemID,
            this.colEstTranId,
            this.colEstBalcaoDesb,
            this.colEstRemNum,
            this.colEstEstTran,
            this.colEstTranNum,
            this.colEstDocErro,
            this.colEstDep});
            this.listViewDocumentoEstorno.ContextMenuStrip = this.contextMenuStripDocumentoEstorno;
            this.listViewDocumentoEstorno.EnableExportar = true;
            this.listViewDocumentoEstorno.FullRowSelect = true;
            this.listViewDocumentoEstorno.GridLines = true;
            this.listViewDocumentoEstorno.HideSelection = false;
            this.listViewDocumentoEstorno.Location = new System.Drawing.Point(2, 16);
            this.listViewDocumentoEstorno.MultiSelect = false;
            this.listViewDocumentoEstorno.Name = "listViewDocumentoEstorno";
            this.listViewDocumentoEstorno.Size = new System.Drawing.Size(461, 100);
            this.listViewDocumentoEstorno.TabIndex = 96;
            this.listViewDocumentoEstorno.TabStop = false;
            this.listViewDocumentoEstorno.UseCompatibleStateImageBehavior = false;
            this.listViewDocumentoEstorno.View = System.Windows.Forms.View.Details;
            this.listViewDocumentoEstorno.DoubleClick += new System.EventHandler(this.listViewDocumentoEstorno_DoubleClick);
            // 
            // colEstDocId
            // 
            this.colEstDocId.Text = "Doc ID";
            // 
            // colEstZIB
            // 
            this.colEstZIB.Text = "ZIB";
            this.colEstZIB.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstZIB.Width = 100;
            // 
            // colEstNConta
            // 
            this.colEstNConta.Text = "N. Conta";
            this.colEstNConta.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstNConta.Width = 100;
            // 
            // colEstNCheque
            // 
            this.colEstNCheque.Text = "N.Cheque";
            this.colEstNCheque.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstNCheque.Width = 100;
            // 
            // colEstMontante
            // 
            this.colEstMontante.Text = "Montante";
            this.colEstMontante.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colEstMontante.Width = 100;
            // 
            // colEstTpDoc
            // 
            this.colEstTpDoc.Text = "Tp";
            this.colEstTpDoc.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstTpDoc.Width = 90;
            // 
            // colEstEstDoc
            // 
            this.colEstEstDoc.Text = "Estado";
            this.colEstEstDoc.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstEstDoc.Width = 80;
            // 
            // colEstNIB
            // 
            this.colEstNIB.Text = "Conta/NIB";
            this.colEstNIB.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstNIB.Width = 150;
            // 
            // colEstRefarq
            // 
            this.colEstRefarq.Text = "Refarq";
            this.colEstRefarq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstRefarq.Width = 150;
            // 
            // colEstNSeq
            // 
            this.colEstNSeq.Text = "N Seq";
            this.colEstNSeq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colEstChvH
            // 
            this.colEstChvH.Text = "ChaveH";
            this.colEstChvH.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstChvH.Width = 350;
            // 
            // colEstIndex
            // 
            this.colEstIndex.Text = "Index";
            this.colEstIndex.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstIndex.Width = 100;
            // 
            // colEstMaquina
            // 
            this.colEstMaquina.Text = "Maquina";
            this.colEstMaquina.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colEstBalcaoTom
            // 
            this.colEstBalcaoTom.Text = "Balcao Tom";
            this.colEstBalcaoTom.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstBalcaoTom.Width = 150;
            // 
            // colEstChvHext
            // 
            this.colEstChvHext.Text = "ChaveH ext";
            this.colEstChvHext.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstChvHext.Width = 200;
            // 
            // colEstTipo
            // 
            this.colEstTipo.Text = "Tipo";
            this.colEstTipo.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstTipo.Width = 120;
            // 
            // colEstTimer
            // 
            this.colEstTimer.Text = "Timer";
            this.colEstTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstTimer.Width = 120;
            // 
            // colEstZRemessa
            // 
            this.colEstZRemessa.Text = "Data Remessa";
            this.colEstZRemessa.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstZRemessa.Width = 100;
            // 
            // colEstRemID
            // 
            this.colEstRemID.Text = "Rem ID";
            this.colEstRemID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colEstTranId
            // 
            this.colEstTranId.Text = "Tran ID";
            this.colEstTranId.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colEstBalcaoDesb
            // 
            this.colEstBalcaoDesb.Text = "Balcão";
            this.colEstBalcaoDesb.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstBalcaoDesb.Width = 150;
            // 
            // colEstRemNum
            // 
            this.colEstRemNum.Text = "Rem Num";
            this.colEstRemNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstRemNum.Width = 80;
            // 
            // colEstEstTran
            // 
            this.colEstEstTran.Text = "Tran Estado";
            this.colEstEstTran.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colEstEstTran.Width = 80;
            // 
            // colEstTranNum
            // 
            this.colEstTranNum.Text = "Tran Num";
            this.colEstTranNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colEstDocErro
            // 
            this.colEstDocErro.Text = "Erro";
            this.colEstDocErro.Width = 256;
            // 
            // colEstDep
            // 
            this.colEstDep.Text = "Depósito";
            // 
            // lblCountDocumentosEstornos
            // 
            this.lblCountDocumentosEstornos.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.lblCountDocumentosEstornos.AutoSize = true;
            this.lblCountDocumentosEstornos.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblCountDocumentosEstornos.Location = new System.Drawing.Point(-3, 0);
            this.lblCountDocumentosEstornos.Name = "lblCountDocumentosEstornos";
            this.lblCountDocumentosEstornos.Size = new System.Drawing.Size(130, 13);
            this.lblCountDocumentosEstornos.TabIndex = 87;
            this.lblCountDocumentosEstornos.Text = "Documentos-Estornos";
            // 
            // columnHeader8
            // 
            this.columnHeader8.Text = "Est Timer";
            this.columnHeader8.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader8.Width = 100;
            // 
            // ActividadeBalcaoForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(940, 602);
            this.Controls.Add(this.spContainer);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.lbBalcao);
            this.Controls.Add(this.lbRemessaCI);
            this.Controls.Add(this.lbTipoRemessa);
            this.Controls.Add(this.lbDeposito);
            this.Controls.Add(this.txBalcao);
            this.Controls.Add(this.txRemessaCI);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.txDeposito);
            this.Controls.Add(this.m_ctrldtInicio);
            this.Controls.Add(this.cbTRemessa);
            this.Controls.Add(this.label6);
            this.Controls.Add(this.toolStrip1);
            this.Name = "ActividadeBalcaoForm";
            this.Text = "Actividades Balcão";
            this.Load += new System.EventHandler(this.ActvBalcaoForm_Load);
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.contextMenuStripRemessasResumo.ResumeLayout(false);
            this.contextMenuStripRemessa.ResumeLayout(false);
            this.contextMenuStripTranche.ResumeLayout(false);
            this.contextMenuStripDocumento.ResumeLayout(false);
            this.contextMenuStripResumoEstornos.ResumeLayout(false);
            this.contextMenuStripRemessaEstorno.ResumeLayout(false);
            this.contextMenuStripDocumentoEstorno.ResumeLayout(false);
            this.spContainer.Panel1.ResumeLayout(false);
            this.spContainer.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.spContainer)).EndInit();
            this.spContainer.ResumeLayout(false);
            this.spContRemessas.Panel1.ResumeLayout(false);
            this.spContRemessas.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.spContRemessas)).EndInit();
            this.spContRemessas.ResumeLayout(false);
            this.spContAgrRemessas.Panel1.ResumeLayout(false);
            this.spContAgrRemessas.Panel1.PerformLayout();
            this.spContAgrRemessas.Panel2.ResumeLayout(false);
            this.spContAgrRemessas.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContAgrRemessas)).EndInit();
            this.spContAgrRemessas.ResumeLayout(false);
            this.spContTranDoc.Panel1.ResumeLayout(false);
            this.spContTranDoc.Panel1.PerformLayout();
            this.spContTranDoc.Panel2.ResumeLayout(false);
            this.spContTranDoc.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContTranDoc)).EndInit();
            this.spContTranDoc.ResumeLayout(false);
            this.spContEstorno.Panel1.ResumeLayout(false);
            this.spContEstorno.Panel1.PerformLayout();
            this.spContEstorno.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.spContEstorno)).EndInit();
            this.spContEstorno.ResumeLayout(false);
            this.spContEstRemDoc.Panel1.ResumeLayout(false);
            this.spContEstRemDoc.Panel1.PerformLayout();
            this.spContEstRemDoc.Panel2.ResumeLayout(false);
            this.spContEstRemDoc.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContEstRemDoc)).EndInit();
            this.spContEstRemDoc.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.ToolStripButton toolStripButtonEspMaquinas;
        private System.Windows.Forms.ToolStripButton toolStripButtonProcessamento;
        private System.Windows.Forms.ToolStripButton toolStripButtonProcessado;
        private System.Windows.Forms.ToolStripButton toolStripButtonEnviada;
        private System.Windows.Forms.ToolStripButton toolStripButtonENVM;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator5;
        private System.Windows.Forms.ToolStripButton toolStripButtonErro;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripButton toolStripButtonRefresh;
        private System.Windows.Forms.ToolStripButton toolStripButtonFechados;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripRemessa;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuRemessaMudarEstado;
        private System.Windows.Forms.ToolStripMenuItem verTranchesToolStripMenuItem;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripRemessasResumo;
        private System.Windows.Forms.ToolStripMenuItem verRemessasDetalheToolStripMenuItem;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripTranche;
        private System.Windows.Forms.ToolStripMenuItem contextMenuStripTrancheMudaEstado;
        private System.Windows.Forms.ToolStripMenuItem contextMenuStripTrancheVerDocs;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripResumoEstornos;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemResumoEstornos;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripRemessaEstorno;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemRemessaEstorno;
        private System.Windows.Forms.ToolStripMenuItem mudarEstadoToolStripMenuItem;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripDocumentoEstorno;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuDocumentosEstornosVerImagem;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripDocumento;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuDocumentosVerImagem;
        private System.Windows.Forms.ToolStripButton toolStripButtonExitJanela;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripButton tsBtnRemessa;
        private System.Windows.Forms.ToolStripButton tsBtnEstorno;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.Label lbBalcao;
        private System.Windows.Forms.Label lbRemessaCI;
        private System.Windows.Forms.Label lbTipoRemessa;
        private System.Windows.Forms.Label lbDeposito;
        private System.Windows.Forms.TextBox txBalcao;
        private System.Windows.Forms.TextBox txRemessaCI;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.TextBox txDeposito;
        private System.Windows.Forms.DateTimePicker m_ctrldtInicio;
        private System.Windows.Forms.ComboBox cbTRemessa;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.SplitContainer spContainer;
        private System.Windows.Forms.ToolStripMenuItem verDocumentosToolStripMenuItem;
        private System.Windows.Forms.SplitContainer spContRemessas;
        private System.Windows.Forms.SplitContainer spContAgrRemessas;
        private System.Windows.Forms.Button m_btRefreshRemessas;
        private System.Windows.Forms.Button btnRemessasErro;
        private System.Windows.Forms.Label label1;
        private NBIISNET.ListViewBase listViewResumoRemessas;
        private System.Windows.Forms.ColumnHeader Process;
        private System.Windows.Forms.ColumnHeader Remessa;
        private System.Windows.Forms.ColumnHeader EstadoRemessas;
        private System.Windows.Forms.ColumnHeader Rems;
        private System.Windows.Forms.ColumnHeader Docs;
        private System.Windows.Forms.ColumnHeader Montante;
        private System.Windows.Forms.ColumnHeader ENVM;
        private System.Windows.Forms.ColumnHeader tpRemessa;
        private System.Windows.Forms.Label labelCountRemessas;
        private NBIISNET.ListViewBase listViewDetalhesRemessa;
        private System.Windows.Forms.ColumnHeader colRemID;
        private System.Windows.Forms.ColumnHeader colRemData;
        private System.Windows.Forms.ColumnHeader colRemTimer;
        private System.Windows.Forms.ColumnHeader colTimerEnviada;
        private System.Windows.Forms.ColumnHeader colRemnum;
        private System.Windows.Forms.ColumnHeader colRem;
        private System.Windows.Forms.ColumnHeader colRemTP;
        private System.Windows.Forms.ColumnHeader colRemDeposito;
        private System.Windows.Forms.ColumnHeader colRemStat;
        private System.Windows.Forms.ColumnHeader colRemTrans;
        private System.Windows.Forms.ColumnHeader colRemChaveH;
        private System.Windows.Forms.ColumnHeader colRemCGDError;
        private System.Windows.Forms.ColumnHeader colRemQT;
        private System.Windows.Forms.ColumnHeader colRemMT;
        private System.Windows.Forms.ColumnHeader colRemErro;
        private System.Windows.Forms.ColumnHeader colRemMaquina;
        private System.Windows.Forms.SplitContainer spContTranDoc;
        private System.Windows.Forms.Label labelCountTranches;
        private NBIISNET.ListViewBase listViewDetalhesTranche;
        private System.Windows.Forms.ColumnHeader colTransRemID;
        private System.Windows.Forms.ColumnHeader colTransID;
        private System.Windows.Forms.ColumnHeader colTransTimer;
        private System.Windows.Forms.ColumnHeader colTransNumero;
        private System.Windows.Forms.ColumnHeader colTransEstado;
        private System.Windows.Forms.ColumnHeader colTransQt;
        private System.Windows.Forms.ColumnHeader colTransMt;
        private System.Windows.Forms.ColumnHeader colTransErro;
        private System.Windows.Forms.ColumnHeader colTransChaveWS;
        private System.Windows.Forms.ColumnHeader colTIBCOEstado;
        private System.Windows.Forms.Label lblCountDocumentos;
        private NBIISNET.ListViewBase listViewDetalhesDocumentos;
        private System.Windows.Forms.ColumnHeader detDocColDocId;
        private System.Windows.Forms.ColumnHeader detDocColDocZona5;
        private System.Windows.Forms.ColumnHeader detDocColDocZona4;
        private System.Windows.Forms.ColumnHeader detDocColDocZona3;
        private System.Windows.Forms.ColumnHeader detDocColDocZona2;
        private System.Windows.Forms.ColumnHeader detDocColDocZona1;
        private System.Windows.Forms.ColumnHeader detDocColDocStat;
        private System.Windows.Forms.ColumnHeader detDocColDocNIB;
        private System.Windows.Forms.ColumnHeader detDocColDocRefarq;
        private System.Windows.Forms.ColumnHeader detDocColDocNSeq;
        private System.Windows.Forms.ColumnHeader detDocColChaveH;
        private System.Windows.Forms.ColumnHeader detDocColDocIndex;
        private System.Windows.Forms.ColumnHeader detDocColDocMaquina;
        private System.Windows.Forms.ColumnHeader detDocColDocBaltom;
        private System.Windows.Forms.ColumnHeader detDocColChaveHext;
        private System.Windows.Forms.ColumnHeader detDocColDocTipo;
        private System.Windows.Forms.ColumnHeader detDocColDocTimer;
        private System.Windows.Forms.ColumnHeader detDocColReminData;
        private System.Windows.Forms.ColumnHeader detDocColReminID;
        private System.Windows.Forms.ColumnHeader detDocColTranoutID;
        private System.Windows.Forms.ColumnHeader detDocColBalcao;
        private System.Windows.Forms.ColumnHeader detDocColRemNum;
        private System.Windows.Forms.ColumnHeader detDocColTranoutStatId;
        private System.Windows.Forms.ColumnHeader detDocColTranNum;
        private System.Windows.Forms.ColumnHeader columnDocColErro;
        private System.Windows.Forms.ColumnHeader detDocDeposito;
        private System.Windows.Forms.SplitContainer spContEstorno;
        private System.Windows.Forms.SplitContainer spContEstRemDoc;
        private System.Windows.Forms.Button btEstorno;
        private System.Windows.Forms.Button btnEstonoErro;
        private System.Windows.Forms.Label label7;
        private NBIISNET.ListViewBase listViewEstornoResumo;
        private System.Windows.Forms.ColumnHeader colZProcess;
        private System.Windows.Forms.ColumnHeader colZEstorno;
        private System.Windows.Forms.ColumnHeader colEstadoEstr;
        private System.Windows.Forms.ColumnHeader colTpRemessa;
        private System.Windows.Forms.ColumnHeader colQtEstorno;
        private System.Windows.Forms.ColumnHeader colQtDocs;
        private System.Windows.Forms.ColumnHeader colMontante;
        private System.Windows.Forms.ColumnHeader colENVM;
        private System.Windows.Forms.Label lblCountRemessasEstornos;
        private NBIISNET.ListViewBase listViewRemessaEstorno;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.ColumnHeader columnHeader3;
        private System.Windows.Forms.ColumnHeader columnHeader4;
        private System.Windows.Forms.ColumnHeader columnHeader5;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.ColumnHeader columnHeader7;
        private System.Windows.Forms.ColumnHeader columnHeader17;
        private System.Windows.Forms.ColumnHeader columnHeader18;
        private System.Windows.Forms.ColumnHeader columnHeader19;
        private System.Windows.Forms.ColumnHeader columnHeader20;
        private System.Windows.Forms.ColumnHeader columnHeader21;
        private System.Windows.Forms.ColumnHeader columnHeader22;
        private System.Windows.Forms.ColumnHeader columnHeader23;
        private System.Windows.Forms.ColumnHeader columnHeader24;
        private System.Windows.Forms.ColumnHeader columnHeader25;
        private System.Windows.Forms.ColumnHeader columnHeader26;
        private System.Windows.Forms.Label lblCountDocumentosEstornos;
        private NBIISNET.ListViewBase listViewDocumentoEstorno;
        private System.Windows.Forms.ColumnHeader colEstDocId;
        private System.Windows.Forms.ColumnHeader colEstZIB;
        private System.Windows.Forms.ColumnHeader colEstNConta;
        private System.Windows.Forms.ColumnHeader colEstNCheque;
        private System.Windows.Forms.ColumnHeader colEstMontante;
        private System.Windows.Forms.ColumnHeader colEstTpDoc;
        private System.Windows.Forms.ColumnHeader colEstEstDoc;
        private System.Windows.Forms.ColumnHeader colEstNIB;
        private System.Windows.Forms.ColumnHeader colEstRefarq;
        private System.Windows.Forms.ColumnHeader colEstNSeq;
        private System.Windows.Forms.ColumnHeader colEstChvH;
        private System.Windows.Forms.ColumnHeader colEstIndex;
        private System.Windows.Forms.ColumnHeader colEstMaquina;
        private System.Windows.Forms.ColumnHeader colEstBalcaoTom;
        private System.Windows.Forms.ColumnHeader colEstChvHext;
        private System.Windows.Forms.ColumnHeader colEstTipo;
        private System.Windows.Forms.ColumnHeader colEstTimer;
        private System.Windows.Forms.ColumnHeader colEstZRemessa;
        private System.Windows.Forms.ColumnHeader colEstRemID;
        private System.Windows.Forms.ColumnHeader colEstTranId;
        private System.Windows.Forms.ColumnHeader colEstBalcaoDesb;
        private System.Windows.Forms.ColumnHeader colEstRemNum;
        private System.Windows.Forms.ColumnHeader colEstEstTran;
        private System.Windows.Forms.ColumnHeader colEstTranNum;
        private System.Windows.Forms.ColumnHeader colEstDocErro;
        private System.Windows.Forms.ColumnHeader colEstDep;
        private System.Windows.Forms.ColumnHeader columnHeader8;
        
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ActividadeBalcaoForm.cs
﻿using System;
using System.Data;
using System.Text;
using System.Windows.Forms;
using CIConfigGlobalParameters;
using System.Data.SqlClient;
using NBiis;

namespace CIActividades
{
    public partial class ActividadeBalcaoForm : Form
    {
        public CIMenuInterface m_oMenuInterface;
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        DetalheDocumento m_oCurrDoc;
        public int m_iNewEstado;
        public string m_sSPProcessa;
        public string m_sSPValida;

        public ActividadeBalcaoForm(CIConfigGP.CIGlobalParameters oParameters, CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            preenheComboBox();
            m_oMenuInterface = oMenuInterface;
        }
        private void ActvBalcaoForm_Load(object sender, EventArgs e)
        {
            this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            m_oMenuInterface.actividadeBalcaoEnable(false);
            this.DefinirDatas();
            refresh();
        }
        
        protected void DefinirDatas()
        {
            //SUPFBKOFF 20 intervalo de dados por defeito passou a ser 1 dia.
            this.m_ctrldtFim.Value = DateTime.Now.Date;
            this.m_ctrldtInicio.Value = DateTime.Now.Date;
        }

        #region contextMenuStrip Right_Click EventsAndMethods

        private void contextMenuStripRemessasResumo_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (listViewResumoRemessas.Items.Count > 0)
            {
                EnabledMenuStripRemessasResumo(true);
            }
        }

        private void EnabledMenuStripRemessasResumo(Boolean enable)
        {
            verRemessasDetalheToolStripMenuItem.Enabled = enable;
        }

        private void contextMenuStripRemessaEstorno_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (listViewRemessaEstorno.Items.Count > 0)
            {
                EnabledMenuStripRemessaEstorno(true);
            }
        }

        private void EnabledMenuStripRemessaEstorno(Boolean enable)
        {
            toolStripMenuItemRemessaEstorno.Enabled = enable;
            mudarEstadoToolStripMenuItem.Enabled = enable;
        }

        private void contextMenuStripRemessa_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (listViewDetalhesRemessa.Items.Count > 0)
            {
                EnabledMenuStripRemessa(true);
            }
        }

        private void EnabledMenuStripRemessa(Boolean enable)
        {
            toolStripMenuRemessaMudarEstado.Enabled = enable;
            verTranchesToolStripMenuItem.Enabled = enable;
            verDocumentosToolStripMenuItem.Enabled = enable;
        }

        private void contextMenuStripTranche_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (listViewDetalhesTranche.Items.Count > 0)
            {
                EnabledMenuStripTranche(true);
            }
        }

        private void EnabledMenuStripTranche(Boolean enable)
        {
            contextMenuStripTrancheMudaEstado.Enabled = enable;
            contextMenuStripTrancheVerDocs.Enabled = enable;
        }

        private void contextMenuStripDocumento_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (listViewDetalhesDocumentos.Items.Count > 0)
            {
                EnabledMenuStripDocumento(true);
            }
        }

        private void EnabledMenuStripDocumento(Boolean enable)
        {
            toolStripMenuDocumentosVerImagem.Enabled = enable;
        }

        private void contextMenuStripResumoEstornos_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (listViewEstornoResumo.Items.Count > 0)
            {
                EnabledMenuStripResumoEstornos(true);
            }
        }

        private void EnabledMenuStripResumoEstornos(Boolean enable)
        {
            toolStripMenuItemResumoEstornos.Enabled = enable;
        }

        private void contextMenuStripDocumentoEstorno_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (listViewDocumentoEstorno.Items.Count > 0)
            {
                EnabledMenuStripDocumentoEstorno(true);
            }
        }

        private void EnabledMenuStripDocumentoEstorno(Boolean enable)
        {
            toolStripMenuDocumentosEstornosVerImagem.Enabled = enable;
        }

        private void contextMenuStripRemessa_Opened(object sender, EventArgs e)
        {
            if (listViewDetalhesRemessa.SelectedItems.Count == 0)
            {
                EnabledMenuStripRemessa(false);
            }
        }

        private void contextMenuStripDocumento_Opened(object sender, EventArgs e)
        {
            if (listViewDetalhesDocumentos.SelectedItems.Count == 0)
            {
                EnabledMenuStripDocumento(false);
            }
        }

        private void contextMenuStripDocumentoEstorno_Opened(object sender, EventArgs e)
        {
            if (listViewDocumentoEstorno.SelectedItems.Count == 0)
            {
                EnabledMenuStripDocumentoEstorno(false);
            }
        }

        private void contextMenuStripRemessaEstorno_Opened(object sender, EventArgs e)
        {
            if (listViewRemessaEstorno.SelectedItems.Count == 0)
            {
                EnabledMenuStripRemessaEstorno(false);
            }
        }

        private void contextMenuStripRemessasResumo_Opened(object sender, EventArgs e)
        {
            if (listViewResumoRemessas.SelectedItems.Count == 0)
            {
                EnabledMenuStripRemessasResumo(false);
            }
        }

        private void contextMenuStripResumoEstornos_Opened(object sender, EventArgs e)
        {
            if (listViewEstornoResumo.SelectedItems.Count == 0)
            {
                EnabledMenuStripResumoEstornos(false);
            }
        }

        private void contextMenuStripTranche_Opened(object sender, EventArgs e)
        {
            if (listViewDetalhesTranche.SelectedItems.Count == 0)
            {
                EnabledMenuStripTranche(false);
            }
        }

        #endregion contextMenuStrip Right_Click EventsAndMethods

        //Documento Estorno 
        private void AddDocumentoEstornoListView(SqlDataReader dr)
        {
            DetalheDocumento oRr = new DetalheDocumento(dr);
            ListViewItem olvItem = oRr.MakeListViewItemDocumento(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewDocumentoEstorno.Items.Add(olvItem);
        }

        //Documento Estorno 
        private void refreshDocumentoEstorno(string sWhereClause)
        {
            listViewDocumentoEstorno.BeginUpdate();
            listViewDocumentoEstorno.MyClear();
            SqlDataReader dr = null;
            string sQuery = " Select * from VW_DETALHE_DOCUMENTOS_BALCAO";
            sQuery += sWhereClause; //vem sempre com WHERE e falta o AND
            sQuery += " AND ((LOTEENV_ANOMAL IS NULL) OR (LOTEENV_ANOMAL = 6) OR (LOTEENV_ANOMAL = 1 AND DOCENV_ANOMAL = 6)) ";
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                /*
                 * se não retornar dados na primeira query
                 * deverá ser pesquisado pelo documentos da remessa pois ainda não chegou no ENVM o estorno
                 */
                if (!dr.HasRows)
                {
                    dr.Close();
                    sQuery = " Select * from VW_DETALHE_DOCUMENTOS_BALCAO";
                    sQuery += sWhereClause;
                    dr = m_oParameters.DirectSqlDataReader(sQuery);
                }
                while (dr.Read())
                {
                    AddDocumentoEstornoListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                lblCountDocumentosEstornos.Text = listViewDocumentoEstorno.Items.Count.ToString() + " Documentos-Estornos.";
                listViewDocumentoEstorno.EndUpdate();
            }
        }

        //Documento
        private void AddDocumentoListView(SqlDataReader dr)
        {
            DetalheDocumento oRr = new DetalheDocumento(dr);
            ListViewItem olvItem = oRr.MakeListViewItemDocumento(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewDetalhesDocumentos.Items.Add(olvItem);
        }

        private void refreshDocumento(string sWhereClause)
        {

            listViewDetalhesDocumentos.BeginUpdate();
            listViewDetalhesDocumentos.MyClear();
            EnabledMenuStripDocumento(false);
            SqlDataReader dr = null;
            string sQuery = " Select * from VW_DETALHE_DOCUMENTOS_BALCAO";
            sQuery += sWhereClause;  // vem sempre com WHERE e falta o AND
            sQuery += " AND ((LOTEENV_ANOMAL IS NULL) OR (LOTEENV_ANOMAL != 6) OR (LOTEENV_ANOMAL = 1 AND DOCENV_ANOMAL != 6)) ";
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddDocumentoListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                lblCountDocumentos.Text = listViewDetalhesDocumentos.Items.Count.ToString() + " Documentos.";
                listViewDetalhesDocumentos.EndUpdate();
            }
        }

        private void ClearListsEstorno()
        {
            this.listViewEstornoResumo.MyClear();
            this.listViewDocumentoEstorno.MyClear();
            this.listViewRemessaEstorno.MyClear();
            EnabledMenuStripRemessaEstorno(false);
        }

        //Remessa Estorno
        private void AddRemessaEstornoListView(SqlDataReader dr)
        {
            DetalheRemessasEstorno oRr = new DetalheRemessasEstorno(dr, m_oParameters);
            ListViewItem olvItem = oRr.MakeListViewItemRemessasEstorno(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewRemessaEstorno.Items.Add(olvItem);
        }

        private void refreshRemessaEstorno(string sWhereClause)
        {
            listViewRemessaEstorno.BeginUpdate();
            SqlDataReader dr = null;
            string sQuery = String.Format("SELECT {0} FROM dbo.VW_ESTRN_REMESSA_BALCAO_DETALHE {1} ORDER BY [ID] ASC",
                "ID,REMBALCAO_DATA,REMBALCAOPROC_TIMER,REMBALCAO_TM_ENVIADA,REMBALCAO_TM_ENVIADA,I_ESTRN_REMESSA,I_ESTRN_DOC,REMBALCAO_BALCAO," +
                "BALCAO_DESC,REMBALCAO_NUMERO,REMTIPO,REMTIPOID,REMSEQ,D_ESTRN_STATUS,ESTRN_STATUS_ID,REMBALCAOPROC_CHAVEH,LOTEENV_CGDERROR," +
                "ESTRN_QT_DOCS,REMBALCAOPROC_MAQUINA,ESTRN_ERRO,ESTRN_MT_DOCS,DOC_ID, ESTRN_ENVIADO, ESTRN_TIMER, ESTRN_ID",
                sWhereClause);
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddRemessaEstornoListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                lblCountRemessasEstornos.Text = listViewRemessaEstorno.Items.Count.ToString() + " Remessas-Estornos.";
                lblCountDocumentosEstornos.Text = "Documentos-Estornos";
                listViewRemessaEstorno.EndUpdate();
            }
        }
        //Tranche
        private void AddTrancheListView(SqlDataReader dr)
        {
            DetalheTranche oRr = new DetalheTranche(dr, m_oParameters);
            ListViewItem olvItem = oRr.MakeListViewItemTranche(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewDetalhesTranche.Items.Add(olvItem);
        }

        private void refreshTranche(string sWhereClause)
        {
            listViewDetalhesTranche.BeginUpdate();
            listViewDetalhesTranche.MyClear();
            EnabledMenuStripTranche(false);
            SqlDataReader dr = null;
            string sQuery = " select * from VW_TRANCHE_BALCAO_DETALHE";
            sQuery += sWhereClause;
            sQuery += " ";
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddTrancheListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                labelCountTranches.Text = listViewDetalhesTranche.Items.Count.ToString() + " Tranches.";
                listViewDetalhesTranche.EndUpdate();
            }
        }

        //Remessa
        private void AddRemessaListView(SqlDataReader dr)
        {
            DetalheRemessa oRr = new DetalheRemessa(dr, m_oParameters);
            ListViewItem olvItem = oRr.MakeListViewItemRemessas(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewDetalhesRemessa.Items.Add(olvItem);
        }

        private void refreshRemessa(string sWhereClause)
        {
            listViewDetalhesRemessa.BeginUpdate();
            listViewDetalhesRemessa.MyClear();
            EnabledMenuStripRemessa(false);
            SqlDataReader dr = null;
            string sQuery = "select * from dbo.VW_REMESSA_BALCAO_DETALHE";
            sQuery += sWhereClause;
            sQuery += " order by LOTEENV_CGDERROR,REMBALCAO_DATA, REMBALCAO_STAT_ID, ID";
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddRemessaListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                labelCountRemessas.Text = listViewDetalhesRemessa.Items.Count.ToString() + " Remessas.";
                labelCountTranches.Text = "Tranches";
                lblCountDocumentos.Text = "Documentos";
                listViewDetalhesRemessa.EndUpdate();
            }
        }

        // Estorno Resumo 
        private void AddEstornoResumoListView(SqlDataReader dr)
        {
            DetalhesEstornosResumo oRr = new DetalhesEstornosResumo(dr);
            ListViewItem olvItem = oRr.MakeListViewItemEstornoResumos(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewEstornoResumo.Items.Add(olvItem);
        }

        private void refreshEstornoResumo(string sWhereClause)
        {
            listViewEstornoResumo.BeginUpdate();
            listViewEstornoResumo.MyClear();
            SqlDataReader dr = null;
            string sQuery = String.Format("SELECT {0} FROM dbo.GetResumoEstornosBalcaoEstado {1} order by Z_PROCESS ASC, Z_ESTRN ASC, ESTRN_STATUS_ID ASC",
                                             "Z_PROCESS, Z_ESTRN, ESTRN_STATUS_ID, D_ESTRN_STATUS, REMBALCAO_TIPO_BALCAO_ID, " +
                                             "REMTIPOBALCAO_DESC, QT_ESTRN, ESTRN_QT_DOCS, ESTRN_MT_DOCS, LOTEENV_CGDERROR ",
                                             sWhereClause);
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddEstornoResumoListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                lblCountRemessasEstornos.Text = "Remessas-Estornos";
                lblCountDocumentosEstornos.Text = "Documentos-Estornos";
                listViewEstornoResumo.EndUpdate();
            }
        }

        // Deposito Resumo
        private void AddDepositoResumoListView(SqlDataReader dr)
        {
            //SDCIM 7 apesar dos campos serem REMIN, aí trata-se coisas de Remessas_Balcao 
            RemessasResumoBalcao oRr = new RemessasResumoBalcao(dr);
            ListViewItem olvItem = oRr.MakeListViewItemResumoRemessasBalcao(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewResumoRemessas.Items.Add(olvItem);
        }

        private void refreshDepositoResumo(string sWhereClause)
        {
            listViewResumoRemessas.BeginUpdate();
            listViewResumoRemessas.MyClear();
            EnabledMenuStripRemessasResumo(false);
            SqlDataReader dr = null;
            string sQuery = "select * from dbo.GetResumoRemessasBalcaoEstado";
            sQuery += sWhereClause;
            // sQuery += " order by REMPROC_DATA desc, REMIN_DATA desc, REMINSTAT_ID desc";

            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddDepositoResumoListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                labelCountRemessas.Text = "Remessas";
                labelCountTranches.Text = "Tranches";
                lblCountDocumentos.Text = "Documentos";
                listViewResumoRemessas.EndUpdate();
            }
        }

        private void m_btRefreshRemessas_Click(object sender, EventArgs e)
        {
            this.SetPadLeftBalcao();
            this.ClearListsRemessas();
            this.FillListRemessas();
        }

        private void refresh()
        {
            this.SetPadLeftBalcao();
            this.ClearListsRemessas();
            this.FillListRemessas();
            this.ClearListsEstorno();
            this.FillListEstornoResumo();
        }

        private void SetPadLeftBalcao()
        {
            string padleft = "";
            if (txBalcao.Text.Length > 0 && txBalcao.Text.Length < 4)
            {
                padleft = txBalcao.Text.PadLeft(4, '0');
                txBalcao.Text = padleft;
            }
        }

        private void ClearListsRemessas()
        {
            listViewResumoRemessas.MyClear();
            listViewDetalhesRemessa.MyClear();
            listViewDetalhesTranche.MyClear();
            listViewDetalhesDocumentos.MyClear();
            EnabledMenuStripRemessasResumo(false);
            EnabledMenuStripRemessa(false);
            EnabledMenuStripTranche(false);
            EnabledMenuStripDocumento(false);
        }

        private void FillListRemessas()
        {
            this.ClearListsRemessas();
            this.refreshDepositoResumo(this.GetClauseWhereToResumos(true));
        }

        private String GetClauseWhereToResumos(Boolean iRemessa)
        {
            String filtroRem = this.filtrosRemessas(iRemessa);
            if (!String.IsNullOrWhiteSpace(filtroRem))
            {
                return String.Format("('{0}', '{1}', {2}) WHERE {3}",
                    m_ctrldtInicio.Value.ToString(m_oParameters.DateTimeSysFmt),
                    m_ctrldtFim.Value.ToString(m_oParameters.DateTimeSysFmt),
                    this.filtro(),
                    filtroRem
                    );
            }
            else
            {
                return String.Format("('{0}', '{1}', {2})",
                    m_ctrldtInicio.Value.ToString(m_oParameters.DateTimeSysFmt),
                    m_ctrldtFim.Value.ToString(m_oParameters.DateTimeSysFmt),
                    this.filtro()
                    );
            }
        }

        private void btEstorno_Click(object sender, EventArgs e)
        {
            this.SetPadLeftBalcao();
            this.ClearListsEstorno();
            this.FillListEstornoResumo();
        }

        private void FillListEstornoResumo()
        {
            this.ClearListsEstorno();
            this.refreshEstornoResumo(this.GetClauseWhereToResumos(false));
        }

        private String GetFiltroEstornoRemessasDetalhe()
        {
            StringBuilder sWhereClause = new StringBuilder();
            if (this.txBalcao.Text.Length > 0)
            {
                sWhereClause.Append(String.Format(" AND REMBALCAO_BALCAO = {0} ", this.txBalcao.Text));
            }
            if (txRemessaCI.Text.Length > 0)
            {
                sWhereClause.Append(String.Format(" AND ID = {0} ", txRemessaCI.Text));
            }
            if (txDeposito.Text.Length > 0)
            {
                sWhereClause.Append(String.Format(" AND REMSEQ = {0} ", txDeposito.Text));
            }
            return sWhereClause.ToString();
        }

        private string filtro()
        {
            StringBuilder sWhereClause = new StringBuilder();
            if (this.txBalcao.Text.Length > 0)
            {
                sWhereClause.Append(this.txBalcao.Text + " , ");
            }
            else
            {
                sWhereClause.Append("DEFAULT, ");
            }
            if (cbTRemessa.Text != "Todos")
            {
                sWhereClause.Append(cbTRemessa.SelectedValue + " , ");
            }
            else
            {
                sWhereClause.Append("DEFAULT, ");
            }
            if (txRemessaCI.Text.Length > 0)
            {
                sWhereClause.Append(txRemessaCI.Text + " , ");
            }
            else
            {
                sWhereClause.Append("DEFAULT, ");
            }
            if (txDeposito.Text.Length > 0)
            {
                sWhereClause.Append(txDeposito.Text);
            }
            else
            {
                sWhereClause.Append("DEFAULT");
            }
            return sWhereClause.ToString();
        }

        private void listViewResumoRemessas_DoubleClick(object sender, EventArgs e)
        {
            listViewDetalhesTranche.MyClear();
            listViewDetalhesDocumentos.MyClear();
            EnabledMenuStripTranche(false);
            EnabledMenuStripDocumento(false);

            string sWhereClause = "";
            RemessasResumoBalcao oRr = null;
            for (int i = 0; i < listViewResumoRemessas.SelectedItems.Count; i++)
            {
                oRr = (RemessasResumoBalcao)listViewResumoRemessas.SelectedItems[i].Tag;
                sWhereClause = " where REMBALCAO_DATA= '" + oRr.m_dtREMIN_DATA.ToString(m_oParameters.DateFormat) + "' and ";
                sWhereClause += " REMBALCAO_STAT_ID=" + oRr.m_iREMINSTAT_ID;
                sWhereClause += " and REMBALCAOPROC_TIMER between '" + oRr.m_dtREMPROC_DATA.ToString(m_oParameters.DateFormat) + "'";
                sWhereClause += " and '" + oRr.m_dtREMPROC_DATA.AddDays(+1).ToString(m_oParameters.DateFormat) + "'";
                sWhereClause += " and LOTEENV_CGDERROR =" + oRr.m_iLOTEENV_CGDERROR;
                sWhereClause += " and REMBALCAO_TIPO_BALCAO_ID =" + oRr.tpRemessaID;
                sWhereClause += this.GetFiltroEstornoRemessasDetalhe();
                this.refreshRemessa(sWhereClause);
            }
        }

        /// <summary>
        /// Get Filtro por estado de remessa.
        /// DEverá ser colocado WHERE ou AND de acordo com a query
        /// </summary>
        /// <returns></returns>
        private string filtrosRemessas(Boolean iRemessa)
        {
            StringBuilder filtro = new StringBuilder();
            if (toolStripButtonFechados.Checked)
                filtro.Append(" 20,"); //sFiltros += " 20,";
            if (toolStripButtonEspMaquinas.Checked)
                filtro.Append(" 25,"); //sFiltros += " 25,";
            if (toolStripButtonProcessamento.Checked)
                filtro.Append(" 30,"); //sFiltros += " 30,";
            if (toolStripButtonProcessado.Checked)
                filtro.Append(" 40,"); //sFiltros += " 40,";
            if (toolStripButtonEnviada.Checked)
                filtro.Append(" 50,"); //sFiltros += " 50,";
            if (toolStripButtonENVM.Checked)
                filtro.Append(" 60, 70, 80,"); //sFiltros += " 60, 70, 80,";
            if (toolStripButtonErro.Checked)
                filtro.Append(" -20, -40, -50, -60,"); //sFiltros += " -20, -40, -50, -60,";
            if (filtro.ToString().Length == 0)
            {
                return String.Empty;
            }
            if (iRemessa)
                return String.Format(" REMINSTAT_ID in ({0})", filtro.ToString().Substring(0, filtro.ToString().Length - 1));
            else
                return String.Format(" ESTRN_STATUS_ID in ({0})", filtro.ToString().Substring(0, filtro.ToString().Length - 1));
        }

        private void listViewDetalhesRemessa_DoubleClick(object sender, EventArgs e)
        {
            listViewDetalhesTranche.MyClear();
            listViewDetalhesDocumentos.MyClear();
            EnabledMenuStripTranche(false);
            EnabledMenuStripDocumento(false);

            string sWhereClause = "";
            DetalheRemessa oRr = null;
            for (int i = 0; i < listViewDetalhesRemessa.SelectedItems.Count; i++)
            {
                oRr = (DetalheRemessa)listViewDetalhesRemessa.SelectedItems[i].Tag;
                sWhereClause = " where ID = " + oRr.remId;
                sWhereClause += filtrosTranches();
                refreshTranche(sWhereClause);
            }

            ShowDocumentsAndTranchesOfRemessas();
        }

        private void ShowDocumentsAndTranchesOfRemessas()
        {
            listViewDetalhesDocumentos.MyClear();
            EnabledMenuStripDocumento(false);

            string sWhereClause = String.Empty;
            DetalheTranche oRr = null;

            for (int i = 0; i < listViewDetalhesTranche.Items.Count; i++)
            {
                oRr = (DetalheTranche)listViewDetalhesTranche.Items[i].Tag;              
                sWhereClause = " WHERE REMIN_ID = " + oRr.remId;
                refreshDocumento(sWhereClause);
            }
        }

        private void listViewDetalhesTranche_DoubleClick(object sender, EventArgs e)
        {
            listViewDetalhesDocumentos.MyClear();
            EnabledMenuStripDocumento(false);

            string sWhereClause = String.Empty;
            DetalheTranche oRr = null;

            for (int i = 0; i < listViewDetalhesTranche.SelectedItems.Count; i++)
            {
                oRr = (DetalheTranche)listViewDetalhesTranche.SelectedItems[i].Tag;
                if (oRr.transId.Equals(0))
                {
                    sWhereClause = " WHERE REMIN_ID = " + oRr.remId;
                }
                else
                {
                    sWhereClause = " WHERE TRANOUT_ID = " + oRr.transId;
                }
                refreshDocumento(sWhereClause);
            }
        }

        private void listViewEstornoResumo_DoubleClick(object sender, EventArgs e)
        {
            this.listViewDocumentoEstorno.MyClear();
            this.listViewRemessaEstorno.MyClear();
            EnabledMenuStripRemessaEstorno(false);
            for (int i = 0; i < listViewEstornoResumo.SelectedItems.Count; i++)
            {
                DetalhesEstornosResumo oRr = null;
                oRr = (DetalhesEstornosResumo)listViewEstornoResumo.SelectedItems[i].Tag;
                StringBuilder strBuilder = new StringBuilder();
                strBuilder.Append(String.Format(" WHERE Z_ESTRN = '{0}' AND ", oRr.ZEstorno.ToString(m_oParameters.DateFormat)));
                strBuilder.Append(String.Format(" ESTRN_STATUS_ID = {0} AND ", oRr.EstadoEstornoID));
                strBuilder.Append(String.Format(" Z_PROCESS_ESTRN BETWEEN '{0}' AND '{1}' AND ",
                                                oRr.ZProcessamento.ToString(m_oParameters.DateFormat),
                                                oRr.ZProcessamento.AddDays(1).ToString(m_oParameters.DateFormat)));
                strBuilder.Append(String.Format(" LOTEENV_CGDERROR = {0} AND ", oRr.ENVM));
                strBuilder.Append(String.Format(" REMTIPOID = {0} ", oRr.RemessaTipoID));
                strBuilder.Append(this.GetFiltroEstornoRemessasDetalhe());
                refreshRemessaEstorno(strBuilder.ToString());
            }
        }

        private void listViewRemessaEstorno_DoubleClick(object sender, EventArgs e)
        {
            listViewDocumentoEstorno.MyClear();
            string sWhereClause = "";
            for (int i = 0; i < listViewRemessaEstorno.SelectedItems.Count; i++)
            {
                DetalheRemessasEstorno oRr = null;
                oRr = (DetalheRemessasEstorno)listViewRemessaEstorno.SelectedItems[i].Tag;
                sWhereClause = " WHERE REMIN_ID = " + oRr.remId;
                if (oRr.Doc_ID.HasValue)
                {
                    sWhereClause += " AND DOC_ID = " + oRr.Doc_ID.Value;
                }
                refreshDocumentoEstorno(sWhereClause);
            }
        }

        private void listViewDetalhesDocumentos_DoubleClick(object sender, EventArgs e)
        {
            if (listViewDetalhesDocumentos.SelectedItems.Count > 0)
            {
                m_oCurrDoc = (DetalheDocumento)listViewDetalhesDocumentos.SelectedItems[0].Tag;
                int id = m_oCurrDoc.docID;
                ImagemBalcaoForm fMostraImg = new ImagemBalcaoForm(m_oParameters, id);
                fMostraImg.ShowDialog();
            }
        }

        private void listViewDocumentoEstorno_DoubleClick(object sender, EventArgs e)
        {
            if (listViewDocumentoEstorno.SelectedItems.Count > 0)
            {
                m_oCurrDoc = (DetalheDocumento)listViewDocumentoEstorno.SelectedItems[0].Tag;
                int id = m_oCurrDoc.docID;
                ImagemBalcaoForm fMostraImg = new ImagemBalcaoForm(m_oParameters, id);
                fMostraImg.ShowDialog();
            }
        }

        private string filtrosTranches()
        {
            string sFiltroStart = "And TRANOUTSTAT_ID in (";
            string sFiltros = "";

            if (toolStripButtonProcessamento.Checked)
                sFiltros += " 10,";
            if (toolStripButtonProcessado.Checked)
                sFiltros += " 20,";
            if (toolStripButtonEnviada.Checked)
                sFiltros += " 30,";
            if (toolStripButtonErro.Checked)
                sFiltros += " -30, 99,";
            if (sFiltros.Length == 0)
            {
                return "";
            }
            sFiltros = sFiltroStart + sFiltros.Substring(0, sFiltros.Length - 1) + ")";
            return sFiltros;
        }

        private void btnRemessasErro_Click(object sender, EventArgs e)
        {
            try
            {
                //ConfirmaPrivilegios();
                if (MessageBox.Show("Confirma o reenvio de todas as remessas em erro?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    return;
                }
                string sSmg = "Reenvio manual de todas as remessas em erro";
                GenericLog.GenLogRegistarAlerta(sSmg, "Balcão - btnRemessasErro_Click()", 110);
                m_oParameters.EnviarAlertaSituacao(110, sSmg);

                string sQuery = "exec dbo.Update_ReenviarTodasRemessasBalcaoEmErro";
                m_oParameters.DirectSqlNonQuery(sQuery);

                this.FillListRemessas();
                MessageBox.Show(this, "Efectuado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "btnRemessasErro_Click", -2);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnEstonoErro_Click(object sender, EventArgs e)
        {
            try
            {
                //ConfirmaPrivilegios();
                if (MessageBox.Show("Confirma o reenvio de todas os estornos em erro?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    return;
                }
                string sSmg = "Reenvio manual de todos os estornos em erro";
                GenericLog.GenLogRegistarAlerta(sSmg, "btnEstonoErro_Click()", 110);
                m_oParameters.EnviarAlertaSituacao(110, sSmg);

                string sQuery = "exec dbo.Update_ReenviarTodosEstornosBalcaoEmErro";
                m_oParameters.DirectSqlNonQuery(sQuery);

                this.FillListEstornoResumo();
                MessageBox.Show(this, "Efectuado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "btnEstonoErro_Click", -2);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void preenheComboBox()
        {
            DataSet ds = null;
            if (cbTRemessa.Items.Count > 0)
            {
                return;
            }
            try
            {
                string sComm = "SELECT [REMTIPOBALCAO_ID], CAST([REMTIPOBALCAO_ID] AS VARCHAR(2)) + ' - ' + [REMTIPOBALCAO_ABR] AS 'REMTIPOBALCAO_ABR' FROM [dbo].[REMESSA_TIPO_BALCAO]";
                ds = m_oParameters.DirectSqlDataSet(sComm, "REMESSA_TIPO_BALCAO");
                DataTable dt = ds.Tables[0];
                DataRow dr = dt.NewRow();
                dr["REMTIPOBALCAO_ID"] = "0";
                dr["REMTIPOBALCAO_ABR"] = "Todos";
                dt.Rows.InsertAt(dr, 0);
                cbTRemessa.DataSource = dt;
                cbTRemessa.DisplayMember = "REMTIPOBALCAO_ABR";
                cbTRemessa.ValueMember = "REMTIPOBALCAO_ID";
            }
            finally
            {
                if (ds != null)
                {
                    ds.Dispose();
                    ds = null;
                }
            }
        }

        private void txBalcao_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txBalcao.Text.Remove(txBalcao.Text.Length - 1);
                txBalcao.Text = "";
            }
            if (txBalcao.Text.Length >= 4)
            {
                txBalcao.MaxLength = 4;
            }
        }

        private void txRemessaCI_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txRemessaCI.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txRemessaCI.Text.Remove(txRemessaCI.Text.Length - 1);
                txRemessaCI.Text = "";
            }
            if (txRemessaCI.Text.Length >= 6)
            {
                txRemessaCI.MaxLength = 6;
            }
        }

        private void txDeposito_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txDeposito.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txDeposito.Text.Remove(txDeposito.Text.Length - 1);
                txDeposito.Text = "";
            }
            if (txDeposito.Text.Length >= 7)
            {
                txDeposito.MaxLength = 7;
            }
        }

        private void toolStripMenuRemessaMudarEstado_Click(object sender, EventArgs e)
        {
            int iDebug = -1;

            if (listViewDetalhesRemessa.SelectedItems.Count == 0)
                return;

            try
            {
                ConfirmaPrivilegios();
                DetalheRemessa oDetalheRemessa = null;
                oDetalheRemessa = (DetalheRemessa)listViewDetalhesRemessa.SelectedItems[0].Tag;

                //VerificaEstadosIguaisRemessa();

                MudarEstadoForm mudarEstado;
                mudarEstado = new MudarEstadoForm(m_oParameters, oDetalheRemessa.estadoId, oDetalheRemessa.GetTableName(), oDetalheRemessa.estadoRemessa);


                if (mudarEstado.ShowDialog() == DialogResult.Cancel)
                {
                    throw new Exception("Operação cancelada pelo utilizador");
                }

                try
                {
                    m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);
                    while (listViewDetalhesRemessa.SelectedItems.Count > 0)
                    {
                        m_iNewEstado = mudarEstado.m_iNewEstado;
                        m_sSPProcessa = mudarEstado.m_sSPProcessa;
                        m_sSPValida = mudarEstado.m_sSPValida;
                        oDetalheRemessa = (DetalheRemessa)listViewDetalhesRemessa.SelectedItems[0].Tag;

                        oDetalheRemessa.ChangeEstado(m_iNewEstado, m_sSPProcessa, m_sSPValida);

                        listViewDetalhesRemessa.SelectedItems[0].Remove();
                    }

                    m_oParameters.Commit();
                }
                catch
                {
                    iDebug = Convert.ToInt32(oDetalheRemessa.remId);
                    m_oParameters.RollBack();
                    throw;
                }

                listViewResumoRemessas_DoubleClick(sender, e);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "toolStripMenuRemessaMudarEstado_Click", iDebug);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }

        private void verDocumentosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            listViewDetalhesRemessa_DoubleClick(sender, e);
        }

        private void verTranchesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            listViewDetalhesTranche.MyClear();
            listViewDetalhesDocumentos.MyClear();
            EnabledMenuStripTranche(false);
            EnabledMenuStripDocumento(false);

            string sWhereClause = "";
            DetalheRemessa oRr = null;
            for (int i = 0; i < listViewDetalhesRemessa.SelectedItems.Count; i++)
            {
                oRr = (DetalheRemessa)listViewDetalhesRemessa.SelectedItems[i].Tag;
                sWhereClause = " where ID = " + oRr.remId;
                sWhereClause += filtrosTranches();
                refreshTranche(sWhereClause);
            }
        }

        private void verRemessasDetalheToolStripMenuItem_Click(object sender, EventArgs e)
        {
            listViewResumoRemessas_DoubleClick(sender, e);
        }

        private void contextMenuStripTrancheMudaEstado_Click(object sender, EventArgs e)
        {
            int iDebug = -1;

            try
            {
                ConfirmaPrivilegios();

                DetalheTranche oDetalheTranche = null;
                oDetalheTranche = (DetalheTranche)listViewDetalhesTranche.SelectedItems[0].Tag;
                MudarEstadoForm mudarEstado;
                mudarEstado = new MudarEstadoForm(m_oParameters, oDetalheTranche.estadoId, oDetalheTranche.GetTableName(), oDetalheTranche.estado);


                if (mudarEstado.ShowDialog() == DialogResult.Cancel)
                {
                    throw new Exception("Operação cancelada pelo utilizador");
                }

                try
                {
                    m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);
                    while (listViewDetalhesTranche.SelectedItems.Count > 0)
                    {
                        m_iNewEstado = mudarEstado.m_iNewEstado;
                        m_sSPProcessa = mudarEstado.m_sSPProcessa;
                        m_sSPValida = mudarEstado.m_sSPValida;
                        oDetalheTranche = (DetalheTranche)listViewDetalhesTranche.SelectedItems[0].Tag;

                        oDetalheTranche.ChangeEstado(m_iNewEstado, m_sSPProcessa, m_sSPValida);

                        listViewDetalhesTranche.SelectedItems[0].Remove();
                    }

                    m_oParameters.Commit();
                }
                catch
                {
                    iDebug = Convert.ToInt32(oDetalheTranche.remId);
                    m_oParameters.RollBack();
                    throw;
                }

                verTranchesToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "contextMenuStripTrancheMudaEstado_Click", iDebug);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void contextMenuStripTrancheVerDocs_Click(object sender, EventArgs e)
        {
            ShowDocumentsAndTranchesOfRemessas();
        }

        private void toolStripMenuItemResumoEstornos_Click(object sender, EventArgs e)
        {
            listViewEstornoResumo_DoubleClick(sender, e);

        }

        private void toolStripMenuItemRemessaEstorno_Click(object sender, EventArgs e)
        {
            listViewRemessaEstorno_DoubleClick(sender, e);
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            listViewDocumentoEstorno_DoubleClick(sender, e);
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            listViewDetalhesDocumentos_DoubleClick(sender, e);
        }

        private void mudarEstadoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int iDebug = -1;

            try
            {
                ConfirmaPrivilegios();

                DetalheRemessasEstorno oDetalheRemessaEstorno = null;
                oDetalheRemessaEstorno = (DetalheRemessasEstorno)listViewRemessaEstorno.SelectedItems[0].Tag;

                MudarEstadoForm mudarEstado;
                mudarEstado = new MudarEstadoForm(m_oParameters, oDetalheRemessaEstorno.estadoId, oDetalheRemessaEstorno.GetTableName(), oDetalheRemessaEstorno.estadoEstorno);


                if (mudarEstado.ShowDialog() == DialogResult.Cancel)
                {
                    throw new Exception("Operação cancelada pelo utilizador");
                }

                try
                {
                    m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);
                    while (listViewRemessaEstorno.SelectedItems.Count > 0)
                    {
                        m_iNewEstado = mudarEstado.m_iNewEstado;
                        m_sSPProcessa = mudarEstado.m_sSPProcessa;
                        m_sSPValida = mudarEstado.m_sSPValida;
                        oDetalheRemessaEstorno = (DetalheRemessasEstorno)listViewRemessaEstorno.SelectedItems[0].Tag;

                        oDetalheRemessaEstorno.ChangeEstado(m_iNewEstado, m_sSPProcessa, m_sSPValida);

                        listViewRemessaEstorno.SelectedItems[0].Remove();
                    }

                    m_oParameters.Commit();
                }
                catch
                {
                    iDebug = Convert.ToInt32(oDetalheRemessaEstorno.remId);
                    m_oParameters.RollBack();
                    throw;
                }

                listViewEstornoResumo_DoubleClick(sender, e);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "mudarEstadoToolStripMenuItem_Click", iDebug);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }

        private void toolStripButtonExitJanela_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void toolStripButtonRefresh_Click(object sender, EventArgs e)
        {
            refresh();
        }

        private void tsBtnRemessa_Click(object sender, EventArgs e)
        {
            this.BotoesJanelasEnabled();
        }

        private void tsBtnEstorno_Click(object sender, EventArgs e)
        {
            this.BotoesJanelasEnabled();
        }

        private void BotoesJanelasEnabled()
        {
            if (this.tsBtnEstorno.Checked && this.tsBtnRemessa.Checked)
            {
                spContainer.Panel1Collapsed = false;
                spContainer.Panel2Collapsed = false;
                return;
            }
            spContainer.Panel1Collapsed = this.tsBtnEstorno.Checked;
            spContainer.Panel2Collapsed = this.tsBtnRemessa.Checked;
        }

        private void ConfirmaPrivilegios()
        {
            if (m_oParameters.UserLogged.m_iUserGroup > 1)
            {
                throw new Exception("Utilizador sem privilegios para alterar estados");
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ActividadeBalcaoForm.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButtonExitJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFYSURBVFhH1ZGLrgMhCET76fvnW0fBIi+1tr25JGdRQGaS
        fWzGfchx3Nd1LYN5BL78tm45CCMSgdkuTneqH4UR8sDcIE416m1HfdyOcwOYMeJUp/529AVAC0rQd8Wp
        RzPbYf6jB3qhOPVpbjvaUl4cmDBzmo8YSEwMc7hrEgPtcUZZishM8Nx7BuTyBES/i6UfM7Aag9Br8VjX
        rBjYwi62PUlqQA9rpLAUoKXnBmZMxF0D/BZnukcGZjEVNwbKGVFr6FH/zIBapOlzJNxryHSm2nZMxUGd
        YwN8d96WvB3DQi3M1L40oDky0EAYYQa9bxrgMMIMet8yIKMJRfzEAIto/rOB9ngVKSqRPS3ehCPwwYKE
        KjDLZQ8ycMVpdmDFgCvm5PKpZ7AkDmYGIjE3OwZQQz8kM+CKJLl86hksiYPIQCSSZmEAZ9SneAbc5Qu5
        fF5wbUY38Fc87icdVRQJ1bFuoAAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="tsBtnRemessa.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4gonkDpg4hG
        YKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gXbl54nuf63dd9
        0OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z1zg8OoY/cITdn4fw
        bf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDXsYbrWfUKwJrPE9M2M1Oc
        VzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgWcx+PSzg166yZZ8xM8XvXDix9
        c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusHwtNNCsA5U1zS4BLxzJIfg299qO32
        Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/1S1NjL3diRat7qrO7wLRP3HjWsojBeCo
        mDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzPEee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+
        kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLvKQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8D
        TgDQASA1MVpwzwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="tsBtnEstorno.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4gonkDpg4hG
        YKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gXbl54nuf63dd9
        0OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z1zg8OoY/cITdn4fw
        bf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDXsYbrWfUKwJrPE9M2M1Oc
        VzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgWcx+PSzg166yZZ8xM8XvXDix9
        c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusHwtNNCsA5U1zS4BLxzJIfg299qO32
        Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/1S1NjL3diRat7qrO7wLRP3HjWsojBeCo
        mDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzPEee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+
        kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLvKQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8D
        TgDQASA1MVpwzwAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="contextMenuStripRemessasResumo.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>294, 22</value>
  </metadata>
  <metadata name="contextMenuStripRemessa.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>115, 20</value>
  </metadata>
  <metadata name="contextMenuStripTranche.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>526, 24</value>
  </metadata>
  <metadata name="contextMenuStripDocumento.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>509, 63</value>
  </metadata>
  <metadata name="contextMenuStripResumoEstornos.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>718, 24</value>
  </metadata>
  <metadata name="contextMenuStripRemessaEstorno.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 63</value>
  </metadata>
  <metadata name="contextMenuStripDocumentoEstorno.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>255, 63</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>63</value>
  </metadata>
</root>

// FILE: SDCIM/ModusCI/CIActividades/Actividades.cs
﻿
namespace CIActividades
{
    public class Actividades
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        //protected Form m_oMainForm;

        CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public Actividades(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            m_oParameters = oParameters;
            //m_oMainForm = oMainForm;
            m_oMenuInterface = oMenuInterface;

        }

        public void ControloActividades()
        {
            ActividadesForm oRes = new ActividadesForm(m_oParameters, m_oMenuInterface);
            oRes.MdiParent = m_oMenuInterface.GetMainForm();

            if (oRes.MdiParent == null)
            {
                oRes.ShowDialog();
            }
            else
            {
                oRes.Show();
            }
        }

      
        public void ControloPesquisas()
        {
            PesquisasForm oRes = new PesquisasForm(m_oParameters, m_oMenuInterface);
            oRes.MdiParent = m_oMenuInterface.GetMainForm();

            if (oRes.MdiParent == null)
            {
                oRes.ShowDialog();
            }
            else
            {
                oRes.Show();
            }
        }

        public void Alertas()
        {
            AlertasForm oAl = new AlertasForm(m_oParameters, m_oMenuInterface);
            oAl.MdiParent = m_oMenuInterface.GetMainForm();
            if (oAl.MdiParent == null)
            {
                oAl.ShowDialog();
            }
            else
            {
                oAl.Show();
            }
        }

        //SDCIM 7
        public void ControloSaco()
        {
            SacoForm oRes = new SacoForm(m_oParameters, m_oMenuInterface);
            oRes.MdiParent = m_oMenuInterface.GetMainForm();

            if (oRes.MdiParent == null)
            {
                oRes.ShowDialog();
            }
            else
            {
                oRes.Show();
            }
        }
        //SDCIM 7
        public void ControloBalcao()
        {
            ActividadeBalcaoForm oRes = new ActividadeBalcaoForm(m_oParameters, m_oMenuInterface);
            oRes.MdiParent = m_oMenuInterface.GetMainForm();

            if (oRes.MdiParent == null)
            {
                oRes.ShowDialog();
            }
            else
            {
                oRes.Show();
            }
        }
        //SDCIM 7
        public void ControloBalcaoAcoes()
        {
            ControloBalcaoAcoes oRes = new ControloBalcaoAcoes(m_oParameters, m_oMenuInterface);
            oRes.MdiParent = m_oMenuInterface.GetMainForm();

            if (oRes.MdiParent == null)
            {
                oRes.ShowDialog();
            }
            else
            {
                oRes.Show();
            }
        }
     
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ActividadesForm.Designer.cs
﻿namespace CIActividades
{
    partial class ActividadesForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.actividadesEnable(true);

        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ActividadesForm));
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrldtInicio = new System.Windows.Forms.DateTimePicker();
            this.m_btRefreshRemessas = new System.Windows.Forms.Button();
            this.contextMenuStripRemessa = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuMudarEstado = new System.Windows.Forms.ToolStripMenuItem();
            this.verDocumentosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.verTranchesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.consultaRemessasToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripDetalheDoc = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuItemMudar = new System.Windows.Forms.ToolStripMenuItem();
            this.verImagemToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.consultaDocumentosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripRemessasResumo = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.verRemessasDetalheToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.btTranches = new System.Windows.Forms.Button();
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.toolStripButtonAbertas = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonFechados = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonEspMaquinas = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonProcessamento = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonProcessado = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonEnviada = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonENVM = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonErro = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonRefresh = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.m_toolStripButtonShowResumo = new System.Windows.Forms.ToolStripButton();
            this.m_toolStripButtonShowDocs = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonExitJanela = new System.Windows.Forms.ToolStripButton();
            this.textBoxFiltroNRemessa = new System.Windows.Forms.TextBox();
            this.textBoxFiltroBalcao = new System.Windows.Forms.TextBox();
            this.textBoxFiltroReminID = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.button1 = new System.Windows.Forms.Button();
            this.m_groupBoxRemessas = new System.Windows.Forms.GroupBox();
            this.labelCountRem = new System.Windows.Forms.Label();
            this.labelCountDocs = new System.Windows.Forms.Label();
            this.m_splitContainerMain = new System.Windows.Forms.SplitContainer();
            this.listViewResumoTranches = new NBIISNET.ListViewBase();
            this.resTranColDataProc = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.resTranColData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.resTranColRemEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.resTranColTranEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.resTranColTranches = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.resTranColTranQtDocs = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.resTranColTranMTDocs = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewResumoRemessas = new NBIISNET.ListViewBase();
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader15 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader21 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader18 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader20 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader16 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.m_splitContainerRemDocs = new System.Windows.Forms.SplitContainer();
            this.m_splitContainerRemessaTranche = new System.Windows.Forms.SplitContainer();
            this.listViewDetalhesRemessa = new NBIISNET.ListViewBase();
            this.colRemID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTimerEnviada = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemPais = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemBanco = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemBalcao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemNumero = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemStat = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemChaveH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemChaveHExt = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemCGDError = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemQT = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemMT = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemErro = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colRemMaquina = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewDetalhesTranche = new NBIISNET.ListViewBase();
            this.colTransRemID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransNumero = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransQt = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransMt = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransErro = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTransChaveWS = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colTIBCOEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripTranche = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.contextMenuStripTrancheMudaEstado = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripTrancheVerDocs = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripTrancheVerRemessas = new System.Windows.Forms.ToolStripMenuItem();
            this.labelCountTran = new System.Windows.Forms.Label();
            this.listViewDetalhesDocumentos = new NBIISNET.ListViewBase();
            this.detDocColDocId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocStat = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocNIB = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocRefarq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocNSeq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColChaveH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocIndex = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocMaquina = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocBaltom = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColChaveHext = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocTipo = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColReminData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColReminID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColTranoutID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColPais = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColBanco = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColBalcao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColRemNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColTranoutStatId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColTranNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnDocColErro = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.label4 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.buttonReenviarRemessas = new System.Windows.Forms.Button();
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.contextMenuStripRemessa.SuspendLayout();
            this.contextMenuStripDetalheDoc.SuspendLayout();
            this.contextMenuStripRemessasResumo.SuspendLayout();
            this.toolStrip1.SuspendLayout();
            this.m_groupBoxRemessas.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.m_splitContainerMain)).BeginInit();
            this.m_splitContainerMain.Panel1.SuspendLayout();
            this.m_splitContainerMain.Panel2.SuspendLayout();
            this.m_splitContainerMain.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.m_splitContainerRemDocs)).BeginInit();
            this.m_splitContainerRemDocs.Panel1.SuspendLayout();
            this.m_splitContainerRemDocs.Panel2.SuspendLayout();
            this.m_splitContainerRemDocs.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.m_splitContainerRemessaTranche)).BeginInit();
            this.m_splitContainerRemessaTranche.Panel1.SuspendLayout();
            this.m_splitContainerRemessaTranche.Panel2.SuspendLayout();
            this.m_splitContainerRemessaTranche.SuspendLayout();
            this.contextMenuStripTranche.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.SuspendLayout();
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(257, 54);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(172, 20);
            this.m_ctrldtFim.TabIndex = 2;
            // 
            // m_ctrldtInicio
            // 
            this.m_ctrldtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtInicio.Location = new System.Drawing.Point(41, 53);
            this.m_ctrldtInicio.Name = "m_ctrldtInicio";
            this.m_ctrldtInicio.Size = new System.Drawing.Size(174, 20);
            this.m_ctrldtInicio.TabIndex = 1;
            // 
            // m_btRefreshRemessas
            // 
            this.m_btRefreshRemessas.Location = new System.Drawing.Point(12, 84);
            this.m_btRefreshRemessas.Name = "m_btRefreshRemessas";
            this.m_btRefreshRemessas.Size = new System.Drawing.Size(75, 23);
            this.m_btRefreshRemessas.TabIndex = 4;
            this.m_btRefreshRemessas.Text = "&Remessas";
            this.m_btRefreshRemessas.UseVisualStyleBackColor = true;
            this.m_btRefreshRemessas.Click += new System.EventHandler(this.m_btRefreshRemessas_Click);
            // 
            // contextMenuStripRemessa
            // 
            this.contextMenuStripRemessa.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuMudarEstado,
            this.verDocumentosToolStripMenuItem,
            this.verTranchesToolStripMenuItem,
            this.consultaRemessasToolStripMenuItem});
            this.contextMenuStripRemessa.Name = "contextMenuStripRemTrans";
            this.contextMenuStripRemessa.Size = new System.Drawing.Size(201, 92);
            this.contextMenuStripRemessa.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripRemTrans_Opening);
            // 
            // toolStripMenuMudarEstado
            // 
            this.toolStripMenuMudarEstado.Name = "toolStripMenuMudarEstado";
            this.toolStripMenuMudarEstado.Size = new System.Drawing.Size(200, 22);
            this.toolStripMenuMudarEstado.Text = "Mudar Estado";
            this.toolStripMenuMudarEstado.Click += new System.EventHandler(this.toolStripMenuMudarEstado_Click);
            // 
            // verDocumentosToolStripMenuItem
            // 
            this.verDocumentosToolStripMenuItem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.verDocumentosToolStripMenuItem.Name = "verDocumentosToolStripMenuItem";
            this.verDocumentosToolStripMenuItem.Size = new System.Drawing.Size(200, 22);
            this.verDocumentosToolStripMenuItem.Text = "Ver Documentos";
            this.verDocumentosToolStripMenuItem.Click += new System.EventHandler(this.verDocumentosToolStripMenuItem_Click);
            // 
            // verTranchesToolStripMenuItem
            // 
            this.verTranchesToolStripMenuItem.Name = "verTranchesToolStripMenuItem";
            this.verTranchesToolStripMenuItem.Size = new System.Drawing.Size(200, 22);
            this.verTranchesToolStripMenuItem.Text = "Ver Tranches";
            this.verTranchesToolStripMenuItem.Click += new System.EventHandler(this.verTranchesToolStripMenuItem_Click);
            // 
            // consultaRemessasToolStripMenuItem
            // 
            this.consultaRemessasToolStripMenuItem.Name = "consultaRemessasToolStripMenuItem";
            this.consultaRemessasToolStripMenuItem.Size = new System.Drawing.Size(200, 22);
            this.consultaRemessasToolStripMenuItem.Text = "Consulta Remessas SIBS";
            this.consultaRemessasToolStripMenuItem.Click += new System.EventHandler(this.consultaRemessasToolStripMenuItem_Click);
            // 
            // contextMenuStripDetalheDoc
            // 
            this.contextMenuStripDetalheDoc.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItemMudar,
            this.verImagemToolStripMenuItem,
            this.consultaDocumentosToolStripMenuItem});
            this.contextMenuStripDetalheDoc.Name = "contextMenuStripDetalheDoc";
            this.contextMenuStripDetalheDoc.Size = new System.Drawing.Size(216, 70);
            this.contextMenuStripDetalheDoc.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripDetalheDoc_Opening);
            // 
            // toolStripMenuItemMudar
            // 
            this.toolStripMenuItemMudar.Name = "toolStripMenuItemMudar";
            this.toolStripMenuItemMudar.Size = new System.Drawing.Size(215, 22);
            this.toolStripMenuItemMudar.Text = "Mudar Estado";
            this.toolStripMenuItemMudar.Click += new System.EventHandler(this.toolStripMenuItemMudar_Click);
            // 
            // verImagemToolStripMenuItem
            // 
            this.verImagemToolStripMenuItem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.verImagemToolStripMenuItem.Name = "verImagemToolStripMenuItem";
            this.verImagemToolStripMenuItem.Size = new System.Drawing.Size(215, 22);
            this.verImagemToolStripMenuItem.Text = "Ver Imagem";
            this.verImagemToolStripMenuItem.Click += new System.EventHandler(this.verImagemToolStripMenuItem_Click);
            // 
            // consultaDocumentosToolStripMenuItem
            // 
            this.consultaDocumentosToolStripMenuItem.Name = "consultaDocumentosToolStripMenuItem";
            this.consultaDocumentosToolStripMenuItem.Size = new System.Drawing.Size(215, 22);
            this.consultaDocumentosToolStripMenuItem.Text = "consulta Documentos SIBS";
            this.consultaDocumentosToolStripMenuItem.Click += new System.EventHandler(this.consultaDocumentosToolStripMenuItem_Click);
            // 
            // contextMenuStripRemessasResumo
            // 
            this.contextMenuStripRemessasResumo.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.verRemessasDetalheToolStripMenuItem});
            this.contextMenuStripRemessasResumo.Name = "contextMenuStripRemessas";
            this.contextMenuStripRemessasResumo.Size = new System.Drawing.Size(155, 26);
            this.contextMenuStripRemessasResumo.Text = "Remessas";
            this.contextMenuStripRemessasResumo.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripRemessas_Opening);
            // 
            // verRemessasDetalheToolStripMenuItem
            // 
            this.verRemessasDetalheToolStripMenuItem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.verRemessasDetalheToolStripMenuItem.Name = "verRemessasDetalheToolStripMenuItem";
            this.verRemessasDetalheToolStripMenuItem.Size = new System.Drawing.Size(154, 22);
            this.verRemessasDetalheToolStripMenuItem.Text = "Ver Remessas";
            this.verRemessasDetalheToolStripMenuItem.Click += new System.EventHandler(this.verRemessasDetalheToolStripMenuItem_Click_1);
            // 
            // btTranches
            // 
            this.btTranches.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.btTranches.Location = new System.Drawing.Point(482, 84);
            this.btTranches.Name = "btTranches";
            this.btTranches.Size = new System.Drawing.Size(75, 23);
            this.btTranches.TabIndex = 15;
            this.btTranches.Text = "&Tranches";
            this.btTranches.UseVisualStyleBackColor = true;
            this.btTranches.Click += new System.EventHandler(this.btTranches_Click);
            // 
            // toolStrip1
            // 
            this.toolStrip1.ImageScalingSize = new System.Drawing.Size(32, 32);
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButtonAbertas,
            this.toolStripButtonFechados,
            this.toolStripButtonEspMaquinas,
            this.toolStripButtonProcessamento,
            this.toolStripButtonProcessado,
            this.toolStripButtonEnviada,
            this.toolStripButtonENVM,
            this.toolStripSeparator5,
            this.toolStripButtonErro,
            this.toolStripSeparator1,
            this.toolStripButtonRefresh,
            this.toolStripSeparator2,
            this.m_toolStripButtonShowResumo,
            this.m_toolStripButtonShowDocs,
            this.toolStripSeparator3,
            this.toolStripButtonExitJanela});
            this.toolStrip1.Location = new System.Drawing.Point(0, 0);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Padding = new System.Windows.Forms.Padding(0);
            this.toolStrip1.Size = new System.Drawing.Size(940, 39);
            this.toolStrip1.TabIndex = 23;
            this.toolStrip1.Text = "toolStripActividades";
            // 
            // toolStripButtonAbertas
            // 
            this.toolStripButtonAbertas.CheckOnClick = true;
            this.toolStripButtonAbertas.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonAbertas.Image = global::CIActividades.Properties.Resources.Abrir;
            this.toolStripButtonAbertas.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonAbertas.Name = "toolStripButtonAbertas";
            this.toolStripButtonAbertas.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonAbertas.ToolTipText = "Abertas";
            // 
            // toolStripButtonFechados
            // 
            this.toolStripButtonFechados.CheckOnClick = true;
            this.toolStripButtonFechados.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonFechados.Image = global::CIActividades.Properties.Resources.LOCKUP;
            this.toolStripButtonFechados.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonFechados.Margin = new System.Windows.Forms.Padding(10, 1, 10, 2);
            this.toolStripButtonFechados.Name = "toolStripButtonFechados";
            this.toolStripButtonFechados.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonFechados.Text = "toolStripButton2";
            this.toolStripButtonFechados.ToolTipText = "Fechados";
            // 
            // toolStripButtonEspMaquinas
            // 
            this.toolStripButtonEspMaquinas.CheckOnClick = true;
            this.toolStripButtonEspMaquinas.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonEspMaquinas.Image = global::CIActividades.Properties.Resources.Maquina;
            this.toolStripButtonEspMaquinas.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonEspMaquinas.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonEspMaquinas.Name = "toolStripButtonEspMaquinas";
            this.toolStripButtonEspMaquinas.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonEspMaquinas.Text = "toolStripButton3";
            this.toolStripButtonEspMaquinas.ToolTipText = "Espera de Maquinas";
            // 
            // toolStripButtonProcessamento
            // 
            this.toolStripButtonProcessamento.CheckOnClick = true;
            this.toolStripButtonProcessamento.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonProcessamento.Image = global::CIActividades.Properties.Resources.Par;
            this.toolStripButtonProcessamento.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonProcessamento.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonProcessamento.Name = "toolStripButtonProcessamento";
            this.toolStripButtonProcessamento.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonProcessamento.Text = "toolStripButton4";
            this.toolStripButtonProcessamento.ToolTipText = "Em Processamento";
            // 
            // toolStripButtonProcessado
            // 
            this.toolStripButtonProcessado.CheckOnClick = true;
            this.toolStripButtonProcessado.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonProcessado.Image = global::CIActividades.Properties.Resources.OK;
            this.toolStripButtonProcessado.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonProcessado.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonProcessado.Name = "toolStripButtonProcessado";
            this.toolStripButtonProcessado.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonProcessado.Text = "toolStripButton5";
            this.toolStripButtonProcessado.ToolTipText = "Processado";
            // 
            // toolStripButtonEnviada
            // 
            this.toolStripButtonEnviada.CheckOnClick = true;
            this.toolStripButtonEnviada.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonEnviada.Image = global::CIActividades.Properties.Resources.Transmissao;
            this.toolStripButtonEnviada.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonEnviada.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonEnviada.Name = "toolStripButtonEnviada";
            this.toolStripButtonEnviada.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonEnviada.Text = "toolStripButton8";
            this.toolStripButtonEnviada.ToolTipText = "Enviada";
            // 
            // toolStripButtonENVM
            // 
            this.toolStripButtonENVM.CheckOnClick = true;
            this.toolStripButtonENVM.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonENVM.Image = global::CIActividades.Properties.Resources.ENVM_Status;
            this.toolStripButtonENVM.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonENVM.Name = "toolStripButtonENVM";
            this.toolStripButtonENVM.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonENVM.Text = "Ficheiro ENVM";
            // 
            // toolStripSeparator5
            // 
            this.toolStripSeparator5.Name = "toolStripSeparator5";
            this.toolStripSeparator5.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonErro
            // 
            this.toolStripButtonErro.CheckOnClick = true;
            this.toolStripButtonErro.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonErro.Image = global::CIActividades.Properties.Resources.Erro;
            this.toolStripButtonErro.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonErro.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonErro.Name = "toolStripButtonErro";
            this.toolStripButtonErro.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonErro.Text = "toolStripButton6";
            this.toolStripButtonErro.ToolTipText = "Erro";
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonRefresh
            // 
            this.toolStripButtonRefresh.AutoSize = false;
            this.toolStripButtonRefresh.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonRefresh.Image = global::CIActividades.Properties.Resources.Refresh;
            this.toolStripButtonRefresh.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
            this.toolStripButtonRefresh.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonRefresh.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonRefresh.Name = "toolStripButtonRefresh";
            this.toolStripButtonRefresh.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonRefresh.Text = "toolStripButton7";
            this.toolStripButtonRefresh.ToolTipText = "Refresh";
            this.toolStripButtonRefresh.Click += new System.EventHandler(this.toolStripButtonRefresh_Click);
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Name = "toolStripSeparator2";
            this.toolStripSeparator2.Size = new System.Drawing.Size(6, 39);
            // 
            // m_toolStripButtonShowResumo
            // 
            this.m_toolStripButtonShowResumo.Checked = true;
            this.m_toolStripButtonShowResumo.CheckOnClick = true;
            this.m_toolStripButtonShowResumo.CheckState = System.Windows.Forms.CheckState.Checked;
            this.m_toolStripButtonShowResumo.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.m_toolStripButtonShowResumo.Image = ((System.Drawing.Image)(resources.GetObject("m_toolStripButtonShowResumo.Image")));
            this.m_toolStripButtonShowResumo.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.m_toolStripButtonShowResumo.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.m_toolStripButtonShowResumo.Name = "m_toolStripButtonShowResumo";
            this.m_toolStripButtonShowResumo.Size = new System.Drawing.Size(36, 36);
            this.m_toolStripButtonShowResumo.ToolTipText = "Mostra\\Esconder Resumos";
            this.m_toolStripButtonShowResumo.Click += new System.EventHandler(this.m_toolStripButtonShowResumo_Click);
            // 
            // m_toolStripButtonShowDocs
            // 
            this.m_toolStripButtonShowDocs.CheckOnClick = true;
            this.m_toolStripButtonShowDocs.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.m_toolStripButtonShowDocs.Image = ((System.Drawing.Image)(resources.GetObject("m_toolStripButtonShowDocs.Image")));
            this.m_toolStripButtonShowDocs.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.m_toolStripButtonShowDocs.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.m_toolStripButtonShowDocs.Name = "m_toolStripButtonShowDocs";
            this.m_toolStripButtonShowDocs.Size = new System.Drawing.Size(36, 36);
            this.m_toolStripButtonShowDocs.ToolTipText = "Mostrar\\Esconde Documentos";
            this.m_toolStripButtonShowDocs.Click += new System.EventHandler(this.m_toolStripButtonShowDocs_Click);
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonExitJanela
            // 
            this.toolStripButtonExitJanela.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonExitJanela.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonExitJanela.Image")));
            this.toolStripButtonExitJanela.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonExitJanela.Name = "toolStripButtonExitJanela";
            this.toolStripButtonExitJanela.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonExitJanela.Click += new System.EventHandler(this.toolStripButton1_Click);
            // 
            // textBoxFiltroNRemessa
            // 
            this.textBoxFiltroNRemessa.Location = new System.Drawing.Point(79, 33);
            this.textBoxFiltroNRemessa.MaxLength = 7;
            this.textBoxFiltroNRemessa.Name = "textBoxFiltroNRemessa";
            this.textBoxFiltroNRemessa.Size = new System.Drawing.Size(53, 20);
            this.textBoxFiltroNRemessa.TabIndex = 4;
            // 
            // textBoxFiltroBalcao
            // 
            this.textBoxFiltroBalcao.Location = new System.Drawing.Point(36, 33);
            this.textBoxFiltroBalcao.MaxLength = 4;
            this.textBoxFiltroBalcao.Name = "textBoxFiltroBalcao";
            this.textBoxFiltroBalcao.Size = new System.Drawing.Size(37, 20);
            this.textBoxFiltroBalcao.TabIndex = 3;
            // 
            // textBoxFiltroReminID
            // 
            this.textBoxFiltroReminID.BackColor = System.Drawing.Color.Yellow;
            this.textBoxFiltroReminID.ForeColor = System.Drawing.SystemColors.WindowText;
            this.textBoxFiltroReminID.Location = new System.Drawing.Point(138, 33);
            this.textBoxFiltroReminID.Name = "textBoxFiltroReminID";
            this.textBoxFiltroReminID.Size = new System.Drawing.Size(62, 20);
            this.textBoxFiltroReminID.TabIndex = 5;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(33, 19);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(40, 13);
            this.label1.TabIndex = 27;
            this.label1.Text = "Balcão";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(76, 19);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(44, 13);
            this.label2.TabIndex = 28;
            this.label2.Text = "Numero";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(135, 17);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(18, 13);
            this.label3.TabIndex = 29;
            this.label3.Text = "ID";
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(219, 30);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 23);
            this.button1.TabIndex = 30;
            this.button1.Text = "Pesquisa";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // m_groupBoxRemessas
            // 
            this.m_groupBoxRemessas.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.m_groupBoxRemessas.Controls.Add(this.textBoxFiltroNRemessa);
            this.m_groupBoxRemessas.Controls.Add(this.textBoxFiltroReminID);
            this.m_groupBoxRemessas.Controls.Add(this.label3);
            this.m_groupBoxRemessas.Controls.Add(this.button1);
            this.m_groupBoxRemessas.Controls.Add(this.textBoxFiltroBalcao);
            this.m_groupBoxRemessas.Controls.Add(this.label1);
            this.m_groupBoxRemessas.Controls.Add(this.label2);
            this.m_groupBoxRemessas.Location = new System.Drawing.Point(612, 42);
            this.m_groupBoxRemessas.Name = "m_groupBoxRemessas";
            this.m_groupBoxRemessas.Size = new System.Drawing.Size(316, 65);
            this.m_groupBoxRemessas.TabIndex = 31;
            this.m_groupBoxRemessas.TabStop = false;
            this.m_groupBoxRemessas.Text = "Pesquisa de Remessas";
            // 
            // labelCountRem
            // 
            this.labelCountRem.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
            this.labelCountRem.AutoSize = true;
            this.labelCountRem.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelCountRem.Location = new System.Drawing.Point(3, 0);
            this.labelCountRem.Name = "labelCountRem";
            this.labelCountRem.Size = new System.Drawing.Size(64, 13);
            this.labelCountRem.TabIndex = 32;
            this.labelCountRem.Text = "Remessas";
            // 
            // labelCountDocs
            // 
            this.labelCountDocs.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
            this.labelCountDocs.AutoSize = true;
            this.labelCountDocs.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelCountDocs.Location = new System.Drawing.Point(3, 0);
            this.labelCountDocs.Name = "labelCountDocs";
            this.labelCountDocs.Size = new System.Drawing.Size(77, 13);
            this.labelCountDocs.TabIndex = 33;
            this.labelCountDocs.Text = "Documentos";
            // 
            // m_splitContainerMain
            // 
            this.m_splitContainerMain.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.m_splitContainerMain.Location = new System.Drawing.Point(12, 113);
            this.m_splitContainerMain.Name = "m_splitContainerMain";
            this.m_splitContainerMain.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // m_splitContainerMain.Panel1
            // 
            this.m_splitContainerMain.Panel1.Controls.Add(this.listViewResumoTranches);
            this.m_splitContainerMain.Panel1.Controls.Add(this.listViewResumoRemessas);
            // 
            // m_splitContainerMain.Panel2
            // 
            this.m_splitContainerMain.Panel2.Controls.Add(this.m_splitContainerRemDocs);
            this.m_splitContainerMain.Size = new System.Drawing.Size(919, 487);
            this.m_splitContainerMain.SplitterDistance = 191;
            this.m_splitContainerMain.TabIndex = 34;
            // 
            // listViewResumoTranches
            // 
            this.listViewResumoTranches.AllowColumnReorder = true;
            this.listViewResumoTranches.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewResumoTranches.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.resTranColDataProc,
            this.resTranColData,
            this.resTranColRemEstado,
            this.resTranColTranEstado,
            this.resTranColTranches,
            this.resTranColTranQtDocs,
            this.resTranColTranMTDocs});
            this.listViewResumoTranches.EnableExportar = true;
            this.listViewResumoTranches.FullRowSelect = true;
            this.listViewResumoTranches.GridLines = true;
            this.listViewResumoTranches.HideSelection = false;
            this.listViewResumoTranches.Location = new System.Drawing.Point(470, 3);
            this.listViewResumoTranches.Name = "listViewResumoTranches";
            this.listViewResumoTranches.Size = new System.Drawing.Size(446, 187);
            this.listViewResumoTranches.TabIndex = 5;
            this.listViewResumoTranches.TabStop = false;
            this.listViewResumoTranches.UseCompatibleStateImageBehavior = false;
            this.listViewResumoTranches.View = System.Windows.Forms.View.Details;
            this.listViewResumoTranches.SelectedIndexChanged += new System.EventHandler(this.listViewResumoTranches_SelectedIndexChanged);
            // 
            // resTranColDataProc
            // 
            this.resTranColDataProc.Text = "Process.";
            this.resTranColDataProc.Width = 66;
            // 
            // resTranColData
            // 
            this.resTranColData.Text = "Remessa";
            this.resTranColData.Width = 66;
            // 
            // resTranColRemEstado
            // 
            this.resTranColRemEstado.Text = "Estado Remessas";
            this.resTranColRemEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.resTranColRemEstado.Width = 100;
            // 
            // resTranColTranEstado
            // 
            this.resTranColTranEstado.Text = "Estado Tranches";
            this.resTranColTranEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.resTranColTranEstado.Width = 100;
            // 
            // resTranColTranches
            // 
            this.resTranColTranches.Text = "#Trans";
            this.resTranColTranches.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.resTranColTranches.Width = 50;
            // 
            // resTranColTranQtDocs
            // 
            this.resTranColTranQtDocs.Text = "#Docs";
            this.resTranColTranQtDocs.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.resTranColTranQtDocs.Width = 50;
            // 
            // resTranColTranMTDocs
            // 
            this.resTranColTranMTDocs.Text = "Montante";
            this.resTranColTranMTDocs.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.resTranColTranMTDocs.Width = 100;
            // 
            // listViewResumoRemessas
            // 
            this.listViewResumoRemessas.AllowColumnReorder = true;
            this.listViewResumoRemessas.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewResumoRemessas.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader1,
            this.columnHeader15,
            this.columnHeader21,
            this.columnHeader18,
            this.columnHeader20,
            this.columnHeader16,
            this.columnHeader2});
            this.listViewResumoRemessas.ContextMenuStrip = this.contextMenuStripRemessasResumo;
            this.listViewResumoRemessas.EnableExportar = true;
            this.listViewResumoRemessas.FullRowSelect = true;
            this.listViewResumoRemessas.GridLines = true;
            this.listViewResumoRemessas.HideSelection = false;
            this.listViewResumoRemessas.Location = new System.Drawing.Point(3, 3);
            this.listViewResumoRemessas.Name = "listViewResumoRemessas";
            this.listViewResumoRemessas.Size = new System.Drawing.Size(461, 187);
            this.listViewResumoRemessas.TabIndex = 8;
            this.listViewResumoRemessas.TabStop = false;
            this.listViewResumoRemessas.UseCompatibleStateImageBehavior = false;
            this.listViewResumoRemessas.View = System.Windows.Forms.View.Details;
            this.listViewResumoRemessas.SelectedIndexChanged += new System.EventHandler(this.listViewRemessaResumo1_SelectedIndexChanged);
            this.listViewResumoRemessas.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewResumoRemessas_MouseDoubleClick);
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Process.";
            this.columnHeader1.Width = 66;
            // 
            // columnHeader15
            // 
            this.columnHeader15.Text = "Remessa";
            this.columnHeader15.Width = 66;
            // 
            // columnHeader21
            // 
            this.columnHeader21.Text = "Estado Remessas";
            this.columnHeader21.Width = 130;
            // 
            // columnHeader18
            // 
            this.columnHeader18.Text = "#Rems";
            this.columnHeader18.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader18.Width = 50;
            // 
            // columnHeader20
            // 
            this.columnHeader20.Text = "#Docs";
            this.columnHeader20.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader20.Width = 50;
            // 
            // columnHeader16
            // 
            this.columnHeader16.Text = "Montante";
            this.columnHeader16.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader16.Width = 93;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "ENVM";
            // 
            // m_splitContainerRemDocs
            // 
            this.m_splitContainerRemDocs.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.m_splitContainerRemDocs.Location = new System.Drawing.Point(0, 3);
            this.m_splitContainerRemDocs.Name = "m_splitContainerRemDocs";
            this.m_splitContainerRemDocs.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // m_splitContainerRemDocs.Panel1
            // 
            this.m_splitContainerRemDocs.Panel1.Controls.Add(this.m_splitContainerRemessaTranche);
            // 
            // m_splitContainerRemDocs.Panel2
            // 
            this.m_splitContainerRemDocs.Panel2.Controls.Add(this.listViewDetalhesDocumentos);
            this.m_splitContainerRemDocs.Panel2.Controls.Add(this.labelCountDocs);
            this.m_splitContainerRemDocs.Size = new System.Drawing.Size(916, 289);
            this.m_splitContainerRemDocs.SplitterDistance = 162;
            this.m_splitContainerRemDocs.TabIndex = 34;
            // 
            // m_splitContainerRemessaTranche
            // 
            this.m_splitContainerRemessaTranche.Dock = System.Windows.Forms.DockStyle.Fill;
            this.m_splitContainerRemessaTranche.Location = new System.Drawing.Point(0, 0);
            this.m_splitContainerRemessaTranche.Name = "m_splitContainerRemessaTranche";
            // 
            // m_splitContainerRemessaTranche.Panel1
            // 
            this.m_splitContainerRemessaTranche.Panel1.Controls.Add(this.labelCountRem);
            this.m_splitContainerRemessaTranche.Panel1.Controls.Add(this.listViewDetalhesRemessa);
            // 
            // m_splitContainerRemessaTranche.Panel2
            // 
            this.m_splitContainerRemessaTranche.Panel2.Controls.Add(this.listViewDetalhesTranche);
            this.m_splitContainerRemessaTranche.Panel2.Controls.Add(this.labelCountTran);
            this.m_splitContainerRemessaTranche.Size = new System.Drawing.Size(916, 162);
            this.m_splitContainerRemessaTranche.SplitterDistance = 467;
            this.m_splitContainerRemessaTranche.TabIndex = 33;
            // 
            // listViewDetalhesRemessa
            // 
            this.listViewDetalhesRemessa.AllowColumnReorder = true;
            this.listViewDetalhesRemessa.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDetalhesRemessa.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colRemID,
            this.colRemData,
            this.colRemTimer,
            this.colTimerEnviada,
            this.colRemPais,
            this.colRemBanco,
            this.colRemBalcao,
            this.colRemNumero,
            this.colRemStat,
            this.colRemChaveH,
            this.colRemChaveHExt,
            this.colRemCGDError,
            this.colRemQT,
            this.colRemMT,
            this.colRemErro,
            this.colRemMaquina});
            this.listViewDetalhesRemessa.ContextMenuStrip = this.contextMenuStripRemessa;
            this.listViewDetalhesRemessa.EnableExportar = true;
            this.listViewDetalhesRemessa.FullRowSelect = true;
            this.listViewDetalhesRemessa.GridLines = true;
            this.listViewDetalhesRemessa.HideSelection = false;
            this.listViewDetalhesRemessa.Location = new System.Drawing.Point(3, 16);
            this.listViewDetalhesRemessa.Name = "listViewDetalhesRemessa";
            this.listViewDetalhesRemessa.Size = new System.Drawing.Size(461, 143);
            this.listViewDetalhesRemessa.TabIndex = 6;
            this.listViewDetalhesRemessa.TabStop = false;
            this.listViewDetalhesRemessa.UseCompatibleStateImageBehavior = false;
            this.listViewDetalhesRemessa.View = System.Windows.Forms.View.Details;
            this.listViewDetalhesRemessa.DoubleClick += new System.EventHandler(this.listViewDetalhesRemessas_DoubleClick);
            // 
            // colRemID
            // 
            this.colRemID.Text = "Rem ID";
            this.colRemID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemID.Width = 54;
            // 
            // colRemData
            // 
            this.colRemData.Text = "RemData";
            this.colRemData.Width = 70;
            // 
            // colRemTimer
            // 
            this.colRemTimer.Text = "Timer";
            this.colRemTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemTimer.Width = 120;
            // 
            // colTimerEnviada
            // 
            this.colTimerEnviada.Text = "Enviada";
            this.colTimerEnviada.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTimerEnviada.Width = 120;
            // 
            // colRemPais
            // 
            this.colRemPais.Text = "Pais";
            this.colRemPais.Width = 0;
            // 
            // colRemBanco
            // 
            this.colRemBanco.Text = "Banco";
            this.colRemBanco.Width = 0;
            // 
            // colRemBalcao
            // 
            this.colRemBalcao.Text = "Balcao";
            this.colRemBalcao.Width = 120;
            // 
            // colRemNumero
            // 
            this.colRemNumero.Text = "Numero";
            this.colRemNumero.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colRemStat
            // 
            this.colRemStat.Text = "Estado";
            this.colRemStat.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemStat.Width = 107;
            // 
            // colRemChaveH
            // 
            this.colRemChaveH.Text = "ChaveH";
            // 
            // colRemChaveHExt
            // 
            this.colRemChaveHExt.Text = "Chave H Ext";
            this.colRemChaveHExt.Width = 0;
            // 
            // colRemCGDError
            // 
            this.colRemCGDError.Text = "CGD Error";
            // 
            // colRemQT
            // 
            this.colRemQT.Text = "Quant.";
            this.colRemQT.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // colRemMT
            // 
            this.colRemMT.Text = "Montante";
            this.colRemMT.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colRemMT.Width = 94;
            // 
            // colRemErro
            // 
            this.colRemErro.Text = "Erro";
            this.colRemErro.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colRemErro.Width = 283;
            // 
            // colRemMaquina
            // 
            this.colRemMaquina.Text = "Maquina";
            // 
            // listViewDetalhesTranche
            // 
            this.listViewDetalhesTranche.AllowColumnReorder = true;
            this.listViewDetalhesTranche.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDetalhesTranche.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colTransRemID,
            this.colTransID,
            this.colTransTimer,
            this.colTransNumero,
            this.colTransEstado,
            this.colTransQt,
            this.colTransMt,
            this.colTransErro,
            this.colTransChaveWS,
            this.colTIBCOEstado});
            this.listViewDetalhesTranche.ContextMenuStrip = this.contextMenuStripTranche;
            this.listViewDetalhesTranche.EnableExportar = true;
            this.listViewDetalhesTranche.FullRowSelect = true;
            this.listViewDetalhesTranche.GridLines = true;
            this.listViewDetalhesTranche.HideSelection = false;
            this.listViewDetalhesTranche.Location = new System.Drawing.Point(6, 16);
            this.listViewDetalhesTranche.Name = "listViewDetalhesTranche";
            this.listViewDetalhesTranche.Size = new System.Drawing.Size(439, 143);
            this.listViewDetalhesTranche.TabIndex = 33;
            this.listViewDetalhesTranche.TabStop = false;
            this.listViewDetalhesTranche.UseCompatibleStateImageBehavior = false;
            this.listViewDetalhesTranche.View = System.Windows.Forms.View.Details;
            this.listViewDetalhesTranche.DoubleClick += new System.EventHandler(this.listViewDetalhesTranche_DoubleClick);
            // 
            // colTransRemID
            // 
            this.colTransRemID.Text = "Rem ID";
            this.colTransRemID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransRemID.Width = 54;
            // 
            // colTransID
            // 
            this.colTransID.Text = "Trans ID";
            this.colTransID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransID.Width = 131;
            // 
            // colTransTimer
            // 
            this.colTransTimer.Text = "Timer";
            this.colTransTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colTransNumero
            // 
            this.colTransNumero.Text = "Numero";
            this.colTransNumero.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransNumero.Width = 107;
            // 
            // colTransEstado
            // 
            this.colTransEstado.Text = "Estado";
            this.colTransEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // colTransQt
            // 
            this.colTransQt.Text = "Quantidade";
            this.colTransQt.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colTransQt.Width = 94;
            // 
            // colTransMt
            // 
            this.colTransMt.Text = "Montante";
            this.colTransMt.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colTransMt.Width = 283;
            // 
            // colTransErro
            // 
            this.colTransErro.Text = "Erro";
            // 
            // colTransChaveWS
            // 
            this.colTransChaveWS.Text = "ChaveWS";
            // 
            // colTIBCOEstado
            // 
            this.colTIBCOEstado.Text = "TIBCO Estado";
            // 
            // contextMenuStripTranche
            // 
            this.contextMenuStripTranche.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contextMenuStripTrancheMudaEstado,
            this.contextMenuStripTrancheVerDocs,
            this.contextMenuStripTrancheVerRemessas});
            this.contextMenuStripTranche.Name = "contextMenuStripRemTrans";
            this.contextMenuStripTranche.Size = new System.Drawing.Size(168, 70);
            // 
            // contextMenuStripTrancheMudaEstado
            // 
            this.contextMenuStripTrancheMudaEstado.Name = "contextMenuStripTrancheMudaEstado";
            this.contextMenuStripTrancheMudaEstado.Size = new System.Drawing.Size(167, 22);
            this.contextMenuStripTrancheMudaEstado.Text = "Mudar Estado";
            this.contextMenuStripTrancheMudaEstado.Click += new System.EventHandler(this.contextMenuStripTrancheMudaEstado_Click);
            // 
            // contextMenuStripTrancheVerDocs
            // 
            this.contextMenuStripTrancheVerDocs.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.contextMenuStripTrancheVerDocs.Name = "contextMenuStripTrancheVerDocs";
            this.contextMenuStripTrancheVerDocs.Size = new System.Drawing.Size(167, 22);
            this.contextMenuStripTrancheVerDocs.Text = "Ver Documentos";
            this.contextMenuStripTrancheVerDocs.Click += new System.EventHandler(this.contextMenuStripTrancheVerDocs_Click);
            // 
            // contextMenuStripTrancheVerRemessas
            // 
            this.contextMenuStripTrancheVerRemessas.Name = "contextMenuStripTrancheVerRemessas";
            this.contextMenuStripTrancheVerRemessas.Size = new System.Drawing.Size(167, 22);
            this.contextMenuStripTrancheVerRemessas.Text = "Ver Remessas";
            this.contextMenuStripTrancheVerRemessas.Click += new System.EventHandler(this.contextMenuStripTrancheVerRemessas_Click);
            // 
            // labelCountTran
            // 
            this.labelCountTran.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
            this.labelCountTran.AutoSize = true;
            this.labelCountTran.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelCountTran.Location = new System.Drawing.Point(3, 0);
            this.labelCountTran.Name = "labelCountTran";
            this.labelCountTran.Size = new System.Drawing.Size(60, 13);
            this.labelCountTran.TabIndex = 33;
            this.labelCountTran.Text = "Tranches";
            // 
            // listViewDetalhesDocumentos
            // 
            this.listViewDetalhesDocumentos.AllowColumnReorder = true;
            this.listViewDetalhesDocumentos.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDetalhesDocumentos.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.detDocColDocId,
            this.detDocColDocZona5,
            this.detDocColDocZona4,
            this.detDocColDocZona3,
            this.detDocColDocZona2,
            this.detDocColDocZona1,
            this.detDocColDocStat,
            this.detDocColDocNIB,
            this.detDocColDocRefarq,
            this.detDocColDocNSeq,
            this.detDocColChaveH,
            this.detDocColDocIndex,
            this.detDocColDocMaquina,
            this.detDocColDocBaltom,
            this.detDocColChaveHext,
            this.detDocColDocTipo,
            this.detDocColDocTimer,
            this.detDocColReminData,
            this.detDocColReminID,
            this.detDocColTranoutID,
            this.detDocColPais,
            this.detDocColBanco,
            this.detDocColBalcao,
            this.detDocColRemNum,
            this.detDocColTranoutStatId,
            this.detDocColTranNum,
            this.columnDocColErro});
            this.listViewDetalhesDocumentos.ContextMenuStrip = this.contextMenuStripDetalheDoc;
            this.listViewDetalhesDocumentos.EnableExportar = true;
            this.listViewDetalhesDocumentos.FullRowSelect = true;
            this.listViewDetalhesDocumentos.GridLines = true;
            this.listViewDetalhesDocumentos.HideSelection = false;
            this.listViewDetalhesDocumentos.Location = new System.Drawing.Point(3, 14);
            this.listViewDetalhesDocumentos.MultiSelect = false;
            this.listViewDetalhesDocumentos.Name = "listViewDetalhesDocumentos";
            this.listViewDetalhesDocumentos.Size = new System.Drawing.Size(913, 106);
            this.listViewDetalhesDocumentos.TabIndex = 7;
            this.listViewDetalhesDocumentos.TabStop = false;
            this.listViewDetalhesDocumentos.UseCompatibleStateImageBehavior = false;
            this.listViewDetalhesDocumentos.View = System.Windows.Forms.View.Details;
            this.listViewDetalhesDocumentos.DoubleClick += new System.EventHandler(this.listViewDetalhesDocumentos_DoubleClick);
            // 
            // detDocColDocId
            // 
            this.detDocColDocId.Text = "Doc ID";
            this.detDocColDocId.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // detDocColDocZona5
            // 
            this.detDocColDocZona5.Text = "ZIB";
            this.detDocColDocZona5.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona5.Width = 100;
            // 
            // detDocColDocZona4
            // 
            this.detDocColDocZona4.Text = "N. Conta";
            this.detDocColDocZona4.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona4.Width = 100;
            // 
            // detDocColDocZona3
            // 
            this.detDocColDocZona3.Text = "N.Cheque";
            this.detDocColDocZona3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona3.Width = 100;
            // 
            // detDocColDocZona2
            // 
            this.detDocColDocZona2.Text = "Montante";
            this.detDocColDocZona2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.detDocColDocZona2.Width = 100;
            // 
            // detDocColDocZona1
            // 
            this.detDocColDocZona1.Text = "Tp";
            this.detDocColDocZona1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona1.Width = 90;
            // 
            // detDocColDocStat
            // 
            this.detDocColDocStat.Text = "Estado";
            this.detDocColDocStat.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocStat.Width = 80;
            // 
            // detDocColDocNIB
            // 
            this.detDocColDocNIB.Text = "Conta/NIB";
            this.detDocColDocNIB.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocNIB.Width = 150;
            // 
            // detDocColDocRefarq
            // 
            this.detDocColDocRefarq.Text = "Refarq";
            this.detDocColDocRefarq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocRefarq.Width = 150;
            // 
            // detDocColDocNSeq
            // 
            this.detDocColDocNSeq.Text = "N Seq";
            this.detDocColDocNSeq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColChaveH
            // 
            this.detDocColChaveH.Text = "ChaveH";
            this.detDocColChaveH.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColChaveH.Width = 350;
            // 
            // detDocColDocIndex
            // 
            this.detDocColDocIndex.Text = "Index";
            this.detDocColDocIndex.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocIndex.Width = 100;
            // 
            // detDocColDocMaquina
            // 
            this.detDocColDocMaquina.Text = "Maquina";
            this.detDocColDocMaquina.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColDocBaltom
            // 
            this.detDocColDocBaltom.Text = "Balcao Tom";
            this.detDocColDocBaltom.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocBaltom.Width = 75;
            // 
            // detDocColChaveHext
            // 
            this.detDocColChaveHext.Text = "ChaveH ext";
            this.detDocColChaveHext.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColChaveHext.Width = 200;
            // 
            // detDocColDocTipo
            // 
            this.detDocColDocTipo.Text = "Tipo";
            this.detDocColDocTipo.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocTipo.Width = 50;
            // 
            // detDocColDocTimer
            // 
            this.detDocColDocTimer.Text = "Timer";
            this.detDocColDocTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocTimer.Width = 120;
            // 
            // detDocColReminData
            // 
            this.detDocColReminData.Text = "Data Remessa";
            this.detDocColReminData.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColReminData.Width = 100;
            // 
            // detDocColReminID
            // 
            this.detDocColReminID.Text = "Rem ID";
            this.detDocColReminID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColTranoutID
            // 
            this.detDocColTranoutID.Text = "Tran ID";
            this.detDocColTranoutID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColPais
            // 
            this.detDocColPais.Text = "País";
            this.detDocColPais.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColPais.Width = 0;
            // 
            // detDocColBanco
            // 
            this.detDocColBanco.Text = "Banco";
            this.detDocColBanco.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColBanco.Width = 0;
            // 
            // detDocColBalcao
            // 
            this.detDocColBalcao.Text = "Balcão";
            this.detDocColBalcao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColRemNum
            // 
            this.detDocColRemNum.Text = "Rem Num";
            this.detDocColRemNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColRemNum.Width = 80;
            // 
            // detDocColTranoutStatId
            // 
            this.detDocColTranoutStatId.Text = "Tran Estado";
            this.detDocColTranoutStatId.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColTranoutStatId.Width = 80;
            // 
            // detDocColTranNum
            // 
            this.detDocColTranNum.Text = "Tran Num";
            this.detDocColTranNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // columnDocColErro
            // 
            this.columnDocColErro.Text = "Erro";
            this.columnDocColErro.Width = 256;
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label4.Location = new System.Drawing.Point(12, 57);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(25, 13);
            this.label4.TabIndex = 35;
            this.label4.Text = "de:";
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label5.Location = new System.Drawing.Point(237, 57);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(18, 13);
            this.label5.TabIndex = 36;
            this.label5.Text = "a:";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = "toolStripSeparator4";
            this.toolStripSeparator4.Size = new System.Drawing.Size(6, 39);
            // 
            // buttonReenviarRemessas
            // 
            this.buttonReenviarRemessas.Location = new System.Drawing.Point(257, 84);
            this.buttonReenviarRemessas.Name = "buttonReenviarRemessas";
            this.buttonReenviarRemessas.Size = new System.Drawing.Size(172, 23);
            this.buttonReenviarRemessas.TabIndex = 37;
            this.buttonReenviarRemessas.Text = "Reen&viar remessas em erro";
            this.buttonReenviarRemessas.UseVisualStyleBackColor = true;
            this.buttonReenviarRemessas.Click += new System.EventHandler(this.buttonReenviarRemessas_Click);
            // 
            // pictureBox1
            // 
            this.pictureBox1.Location = new System.Drawing.Point(631, 12);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(100, 50);
            this.pictureBox1.TabIndex = 38;
            this.pictureBox1.TabStop = false;
            // 
            // ActividadesForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(940, 602);
            this.Controls.Add(this.pictureBox1);
            this.Controls.Add(this.buttonReenviarRemessas);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.m_btRefreshRemessas);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrldtInicio);
            this.Controls.Add(this.toolStrip1);
            this.Controls.Add(this.btTranches);
            this.Controls.Add(this.m_groupBoxRemessas);
            this.Controls.Add(this.m_splitContainerMain);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "ActividadesForm";
            this.ShowInTaskbar = false;
            this.Text = "Actividades";
            this.Load += new System.EventHandler(this.ResumoForm_Load);
            this.contextMenuStripRemessa.ResumeLayout(false);
            this.contextMenuStripDetalheDoc.ResumeLayout(false);
            this.contextMenuStripRemessasResumo.ResumeLayout(false);
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.m_groupBoxRemessas.ResumeLayout(false);
            this.m_groupBoxRemessas.PerformLayout();
            this.m_splitContainerMain.Panel1.ResumeLayout(false);
            this.m_splitContainerMain.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.m_splitContainerMain)).EndInit();
            this.m_splitContainerMain.ResumeLayout(false);
            this.m_splitContainerRemDocs.Panel1.ResumeLayout(false);
            this.m_splitContainerRemDocs.Panel2.ResumeLayout(false);
            this.m_splitContainerRemDocs.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.m_splitContainerRemDocs)).EndInit();
            this.m_splitContainerRemDocs.ResumeLayout(false);
            this.m_splitContainerRemessaTranche.Panel1.ResumeLayout(false);
            this.m_splitContainerRemessaTranche.Panel1.PerformLayout();
            this.m_splitContainerRemessaTranche.Panel2.ResumeLayout(false);
            this.m_splitContainerRemessaTranche.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.m_splitContainerRemessaTranche)).EndInit();
            this.m_splitContainerRemessaTranche.ResumeLayout(false);
            this.contextMenuStripTranche.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrldtInicio;
        private System.Windows.Forms.Button m_btRefreshRemessas;
        private NBIISNET.ListViewBase listViewResumoTranches;
        private System.Windows.Forms.ColumnHeader resTranColTranQtDocs;
        private System.Windows.Forms.ColumnHeader resTranColTranEstado;
        private System.Windows.Forms.ColumnHeader resTranColTranches;
        private System.Windows.Forms.ColumnHeader resTranColData;
        private NBIISNET.ListViewBase listViewDetalhesRemessa;
        private NBIISNET.ListViewBase listViewDetalhesDocumentos;
        private System.Windows.Forms.ColumnHeader detDocColDocId;
        private System.Windows.Forms.ColumnHeader detDocColDocBaltom;
        private System.Windows.Forms.ColumnHeader detDocColDocTipo;
        private System.Windows.Forms.ColumnHeader detDocColDocZona5;
        private System.Windows.Forms.ColumnHeader detDocColDocNSeq;
        private System.Windows.Forms.ColumnHeader detDocColDocRefarq;
        private System.Windows.Forms.ColumnHeader detDocColDocIndex;
        private NBIISNET.ListViewBase listViewResumoRemessas;
        private System.Windows.Forms.ColumnHeader columnHeader15;
        private System.Windows.Forms.ColumnHeader columnHeader18;
        private System.Windows.Forms.ColumnHeader columnHeader20;
        private System.Windows.Forms.ColumnHeader columnHeader21;
        private System.Windows.Forms.ColumnHeader columnHeader16;
        private System.Windows.Forms.ColumnHeader resTranColTranMTDocs;
        private System.Windows.Forms.Button btTranches;
        private System.Windows.Forms.ColumnHeader detDocColDocZona4;
        private System.Windows.Forms.ColumnHeader detDocColDocZona3;
        private System.Windows.Forms.ColumnHeader detDocColDocZona2;
        private System.Windows.Forms.ColumnHeader detDocColDocZona1;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripRemessasResumo;
        private System.Windows.Forms.ToolStripMenuItem verRemessasDetalheToolStripMenuItem;
        private System.Windows.Forms.ColumnHeader colRemID;
        private System.Windows.Forms.ColumnHeader resTranColRemEstado;
        private System.Windows.Forms.ColumnHeader detDocColDocMaquina;
        private System.Windows.Forms.ColumnHeader detDocColChaveH;
        private System.Windows.Forms.ColumnHeader detDocColChaveHext;
        private System.Windows.Forms.ColumnHeader detDocColDocNIB;
        private System.Windows.Forms.ColumnHeader detDocColDocStat;
        private System.Windows.Forms.ColumnHeader detDocColDocTimer;
        private System.Windows.Forms.ColumnHeader detDocColReminData;
        private System.Windows.Forms.ColumnHeader detDocColReminID;
        private System.Windows.Forms.ColumnHeader detDocColTranoutID;
        private System.Windows.Forms.ColumnHeader detDocColPais;
        private System.Windows.Forms.ColumnHeader detDocColBanco;
        private System.Windows.Forms.ColumnHeader detDocColBalcao;
        private System.Windows.Forms.ColumnHeader detDocColRemNum;
        private System.Windows.Forms.ColumnHeader detDocColTranoutStatId;
        private System.Windows.Forms.ColumnHeader detDocColTranNum;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripRemessa;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuMudarEstado;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripDetalheDoc;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemMudar;
        private System.Windows.Forms.ToolStripMenuItem verDocumentosToolStripMenuItem;
        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.ToolStripButton toolStripButtonAbertas;
        private System.Windows.Forms.ToolStripButton toolStripButtonFechados;
        private System.Windows.Forms.ToolStripButton toolStripButtonEspMaquinas;
        private System.Windows.Forms.ToolStripButton toolStripButtonProcessamento;
        private System.Windows.Forms.ToolStripButton toolStripButtonProcessado;
        private System.Windows.Forms.ToolStripButton toolStripButtonErro;
        private System.Windows.Forms.ToolStripButton toolStripButtonEnviada;
        private System.Windows.Forms.ToolStripButton toolStripButtonRefresh;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader resTranColDataProc;
        private System.Windows.Forms.ColumnHeader colRemNumero;
        private System.Windows.Forms.ColumnHeader colRemTimer;
        private System.Windows.Forms.ColumnHeader colRemStat;
        private System.Windows.Forms.ColumnHeader colRemQT;
        private System.Windows.Forms.ColumnHeader colRemMT;
        private System.Windows.Forms.ColumnHeader colRemErro;
        private System.Windows.Forms.ColumnHeader columnDocColErro;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.TextBox textBoxFiltroNRemessa;
        private System.Windows.Forms.TextBox textBoxFiltroBalcao;
        private System.Windows.Forms.TextBox textBoxFiltroReminID;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.ToolStripMenuItem verTranchesToolStripMenuItem;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.GroupBox m_groupBoxRemessas;
        private System.Windows.Forms.Label labelCountRem;
        private System.Windows.Forms.Label labelCountDocs;
        private System.Windows.Forms.ToolStripMenuItem consultaRemessasToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem consultaDocumentosToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem verImagemToolStripMenuItem;
        private System.Windows.Forms.SplitContainer m_splitContainerMain;
        private System.Windows.Forms.SplitContainer m_splitContainerRemDocs;
        private System.Windows.Forms.ToolStripButton m_toolStripButtonShowDocs;
        private System.Windows.Forms.ToolStripButton m_toolStripButtonShowResumo;
        private System.Windows.Forms.ToolStripButton toolStripButtonExitJanela;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.ToolStripButton toolStripButtonENVM;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator5;
        private System.Windows.Forms.ColumnHeader colRemMaquina;
        private System.Windows.Forms.SplitContainer m_splitContainerRemessaTranche;
        private System.Windows.Forms.Label labelCountTran;
        private NBIISNET.ListViewBase listViewDetalhesTranche;
        private System.Windows.Forms.ColumnHeader colTransRemID;
        private System.Windows.Forms.ColumnHeader colTransID;
        private System.Windows.Forms.ColumnHeader colTransTimer;
        private System.Windows.Forms.ColumnHeader colTransNumero;
        private System.Windows.Forms.ColumnHeader colTransEstado;
        private System.Windows.Forms.ColumnHeader colTransQt;
        private System.Windows.Forms.ColumnHeader colTransMt;
        private System.Windows.Forms.ColumnHeader colTransErro;
        private System.Windows.Forms.ColumnHeader colRemPais;
        private System.Windows.Forms.ColumnHeader colRemBanco;
        private System.Windows.Forms.ColumnHeader colRemBalcao;
        private System.Windows.Forms.ColumnHeader colRemChaveH;
        private System.Windows.Forms.ColumnHeader colRemChaveHExt;
        private System.Windows.Forms.ColumnHeader colRemCGDError;
        private System.Windows.Forms.ColumnHeader colTransChaveWS;
        private System.Windows.Forms.ColumnHeader colTIBCOEstado;
        private System.Windows.Forms.ColumnHeader colRemData;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripTranche;
        private System.Windows.Forms.ToolStripMenuItem contextMenuStripTrancheMudaEstado;
        private System.Windows.Forms.ToolStripMenuItem contextMenuStripTrancheVerDocs;
        private System.Windows.Forms.ToolStripMenuItem contextMenuStripTrancheVerRemessas;
        private System.Windows.Forms.ColumnHeader colTimerEnviada;
        private System.Windows.Forms.Button buttonReenviarRemessas;
        private System.Windows.Forms.PictureBox pictureBox1;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ActividadesForm.cs
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using System.IO;


namespace CIActividades
{
    public partial class ActividadesForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
       // TranchesDetalhe m_oCurrTran;
        DetalhesDocumento m_oCurrDoc;
        public int m_iNewEstado;
        public string m_sSPProcessa;
        public string m_sSPValida;
        //public bool m_bIsRemessas;

        public CIMenuInterface m_oMenuInterface;

        public ActividadesForm(CIConfigGP.CIGlobalParameters oParameters, CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;

            m_oMenuInterface = oMenuInterface;
        }

        private void ResumoForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

                definirNivelUtilizacao(); 

                DefinirDatas();

                m_splitContainerRemessaTranche.Panel1Collapsed = false;
                m_splitContainerRemessaTranche.Panel2Collapsed = true;

                RefreshRemessasAndTranches();

                m_oMenuInterface.actividadesEnable(false);

                ShowListViews();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        protected void definirNivelUtilizacao()
        {
            contextMenuStripRemessa.Items["consultaRemessasToolStripMenuItem"].Enabled = (m_oParameters.UserLogged.m_iUserGroup == 0);
            contextMenuStripDetalheDoc.Items[1].Enabled = (m_oParameters.UserLogged.m_iUserGroup == 0);
        }

        protected void DefinirDatas()
        {
            //SUPFBKOFF 20 intervalo de dados por defeito passou a ser 1 dia.
            m_ctrldtFim.Value = DateTime.Now.Date;
            m_ctrldtInicio.Value = DateTime.Now.Date;
        }

        private void AddRemessaResumo2ListView(SqlDataReader dr)
        {
            RemessasResumo oRr = new RemessasResumo(dr);

            ListViewItem olvItem = oRr.MakeListViewItemResumoRemessas(m_oParameters.DateFormat);

            olvItem.Tag = oRr;

            listViewResumoRemessas.Items.Add(olvItem);
        }

        private void RefreshResumoRemessas(string sWhereClause)
        {
            listViewResumoRemessas.BeginUpdate();
            listViewResumoRemessas.MyClear();
            listViewDetalhesDocumentos.MyClear();

            SqlDataReader dr = null;
            //string sQuery = "select * from VW_REMESSAS_ESTADO_RESUMO ";
            string sQuery = "select * from dbo.GetResumoRemessasEstado  ";
            sQuery += sWhereClause;
            sQuery += " order by REMPROC_DATA desc, REMIN_DATA desc, REMINSTAT_ID desc";

            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddRemessaResumo2ListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                listViewResumoRemessas.EndUpdate();
            }
        }

        private void AddTrancheResumo2ListView(SqlDataReader dr)
        {
            TranchesResumo oTr = new TranchesResumo(dr);

            ListViewItem olvItem = oTr.MakeListViewItemResumoTranches(m_oParameters.DateFormat);

            olvItem.Tag = oTr;

            listViewResumoTranches.Items.Add(olvItem);
        }

        private void RefreshResumoTranches(string sWhereClause, bool bInicializa)
        {
            listViewResumoTranches.BeginUpdate();
            if (bInicializa)
            {
                listViewResumoTranches.MyClear();
                listViewDetalhesDocumentos.MyClear();
            }

            SqlDataReader dr = null;
            string sQuery = "select * from dbo.GetResumoTranchesEstado ";
            sQuery += sWhereClause;
            sQuery += " order by TRANOUT_DATA desc, REMIN_DATA desc, TRANOUTSTAT_ID desc";

            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddTrancheResumo2ListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 2);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                listViewResumoTranches.EndUpdate();
            }

        }

        private void DisplayTranche()
        {
            string sWhereClause="";
            RemessasResumo oRr = null;

            for (int i = 0; i < listViewResumoRemessas.SelectedItems.Count; i++)
            {
                oRr = (RemessasResumo)listViewResumoRemessas.SelectedItems[i].Tag;
                sWhereClause = " ('" + oRr.m_dtREMIN_DATA.ToString(m_oParameters.DateFormat) + "' , ";
                sWhereClause += " '" + oRr.m_dtREMIN_DATA.ToString(m_oParameters.DateFormat) + "' , ";
                sWhereClause += " '" + oRr.m_dtREMPROC_DATA.ToString(m_oParameters.DateFormat) + "' , ";
                sWhereClause += " '" + oRr.m_dtREMPROC_DATA.ToString(m_oParameters.DateFormat) + "') ";
                sWhereClause += " Where REMINSTAT_ID=" + oRr.m_iREMINSTAT_ID;
                sWhereClause += " and LOTEENV_CGDERROR =" + oRr.m_iLOTEENV_CGDERROR;
                RefreshResumoTranches(sWhereClause, i == 0);
            }
        }

        private void DisplaySelectedRemessas_ResumoAndDetalhe()
        { 
            string sWhereClause="";
            RemessasResumo oRr = null;

            for (int i = 0; i < listViewResumoRemessas.SelectedItems.Count; i++)
            {
                oRr = (RemessasResumo)listViewResumoRemessas.SelectedItems[i].Tag;

                sWhereClause = " where  REMIN_DATA= '" + oRr.m_dtREMIN_DATA.ToString(m_oParameters.DateFormat) + "' and ";
                sWhereClause += " REMINSTAT_ID=" + oRr.m_iREMINSTAT_ID;
                sWhereClause += " and REMPROC_TIMER between '" + oRr.m_dtREMPROC_DATA.ToString(m_oParameters.DateFormat) + "'";
                sWhereClause += " and '" + oRr.m_dtREMPROC_DATA.AddDays(+1).ToString(m_oParameters.DateFormat) + "'";
                sWhereClause += " and LOTEENV_CGDERROR =" + oRr.m_iLOTEENV_CGDERROR;
                RefreshDetalheRemessas(sWhereClause, i == 0);
            }
        }

        private void listViewRemessaResumo1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listViewResumoRemessas.SelectedItems.Count != 1)
                return;
            DisplayTranche();
        }

        private void RefreshDetalheTranches(string sWhereClause, bool bInicializa)
        {
            listViewDetalhesTranche.BeginUpdate();
            listViewDetalhesTranche.Items.Clear();
            CriaListTranche();

            SqlDataReader dr = null;
            string sQuery = "select * from dbo.VW_TRANCHE_DETALHE ";
            sQuery += sWhereClause;
            sQuery += " and TRANOUT_ID is not null order by REMIN_DATA, REMIN_BALCAO, REMIN_ID, TRANOUT_NUMERO";

            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    ListViewTrancheDetalhe oTd = new ListViewTrancheDetalhe(dr, m_oParameters);
                    ListViewItem olvItem = oTd.MakeListViewItem(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt);

                    olvItem.Tag = oTd;

                    listViewDetalhesTranche.Items.Add(olvItem);
                    //AddTrancheDetalhe2ListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 3);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                labelCountTran.Text = listViewDetalhesTranche.Items.Count.ToString() + " Tranches.";
                listViewDetalhesTranche.EndUpdate();
            }
        }

        private void CriaListRemessa()
        {
            m_splitContainerRemessaTranche.Panel1Collapsed = false;
            m_splitContainerRemessaTranche.Panel2Collapsed = true;

        }

        private void CriaListTranche()
        {
            m_splitContainerRemessaTranche.Panel1Collapsed = true;
            m_splitContainerRemessaTranche.Panel2Collapsed = false;
        }


        private void RefreshDetalheRemessas(string sWhereClause, bool bInicializa)
        {
            SqlDataReader dr = null;
            string sQuery = "select * from VW_REMESSA_DETALHE ";

            sQuery += sWhereClause;
            
            sQuery += " order by LOTEENV_CGDERROR, REMIN_DATA, REMIN_BALCAO, REMIN_ID";

            try
            {
                listViewDetalhesRemessa.BeginUpdate();
                listViewDetalhesRemessa.MyClear();
                listViewDetalhesDocumentos.MyClear();
                CriaListRemessa();

                dr = m_oParameters.DirectSqlDataReader(sQuery);

                if (!dr.HasRows)
                {
                    MessageBox.Show("A Pesquisa não retornou resultados", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                while (dr.Read())
                {
                    ListViewRemessaDetalhe oTd = new ListViewRemessaDetalhe(dr, m_oParameters);
                    ListViewItem olvItem = oTd.MakeListViewItem(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt);

                    olvItem.Tag = oTd;

                    listViewDetalhesRemessa.Items.Add(olvItem);
                    
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 4);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    if (!dr.IsClosed)
                    {
                        dr.Close();
                    }
                    dr = null;
                }
                labelCountRem.Text = listViewDetalhesRemessa.Items.Count.ToString() + " Remessas.";
                listViewDetalhesRemessa.EndUpdate();
            }
        }

        private void listViewResumoTranches_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listViewResumoTranches.SelectedItems.Count == 0)
                return;
            string sWhereClause = "";
            TranchesResumo oTr = null;

            for (int i = 0; i < listViewResumoTranches.SelectedItems.Count; i++)
            {
                oTr = (TranchesResumo)listViewResumoTranches.SelectedItems[i].Tag;
                sWhereClause = " where REMIN_DATA='" + oTr.m_dtREMIN_DATA.ToString(m_oParameters.DateFormat) + "'";
                sWhereClause += " and TRANOUTSTAT_ID=" + oTr.m_iTRANOUTSTAT_ID.ToString();
                sWhereClause += " and REMINSTAT_ID=" + oTr.m_iREMINSTAT_ID.ToString();
                sWhereClause += " and TRANOUT_TIMER between '" + oTr.m_dtTRANOUT_DATA.ToString(m_oParameters.DateFormat) + "'";
                sWhereClause += " and '" + oTr.m_dtTRANOUT_DATA.AddDays(+1).ToString(m_oParameters.DateFormat) + "'";
                RefreshDetalheTranches(sWhereClause, i == 0);
            }
        }

        private void RefreshRemessasAndTranches()
        {
            RefreshRemessas();
            RefreshTranches();
        }

       
        private void btTranches_Click(object sender, EventArgs e)
        {
            RefreshTranches();
        }
        private void RefreshTranches()
        {
            listViewDetalhesTranche.MyClear();
            listViewDetalhesRemessa.MyClear();
            listViewDetalhesDocumentos.MyClear();

            string sWhereClause;
            sWhereClause = "( '" + m_ctrldtInicio.Value.ToString(m_oParameters.DateTimeSysFmt) + "' , ";
            sWhereClause += "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateTimeSysFmt) + "' , ";
            sWhereClause += "'" + m_ctrldtInicio.Value.ToString(m_oParameters.DateTimeSysFmt) + "' , ";
            sWhereClause += "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateTimeSysFmt) + "') ";
            sWhereClause += filtrosTranches();
            RefreshResumoTranches(sWhereClause, true);
        }

        private string filtrosTranches()
        {
            string sFiltroStart = "where TRANOUTSTAT_ID in (";
            string sFiltros = "";

            if (toolStripButtonProcessamento.Checked)
                sFiltros += " 10,";
            if (toolStripButtonProcessado.Checked)
                sFiltros += " 20,";
            if (toolStripButtonEnviada.Checked)
                sFiltros += " 30,";
            if (toolStripButtonErro.Checked)
                sFiltros += " -30, 99,";

            if (sFiltros.Length == 0)
            {
                return "";
            }
            sFiltros = sFiltroStart + sFiltros.Substring(0, sFiltros.Length - 1) + ")";

            return sFiltros;
        }


        private void RefreshRemessas()
        {
            listViewDetalhesTranche.MyClear();
            listViewDetalhesRemessa.MyClear();
            listViewDetalhesDocumentos.MyClear();

            string sWhereClause;
            sWhereClause = " ('" + m_ctrldtInicio.Value.ToString(m_oParameters.DateTimeSysFmt) + "' ,";
            sWhereClause += "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateTimeSysFmt) + "' ) ";
            sWhereClause += filtrosRemessas();
            RefreshResumoRemessas(sWhereClause);
        }

        private string filtrosRemessas()
        {
            string sFiltroStart = "where REMINSTAT_ID in (";
            string sFiltros = "";
            if (toolStripButtonAbertas.Checked)
                sFiltros += "10,";
            if (toolStripButtonFechados.Checked)
                sFiltros += " 20,";
            if (toolStripButtonEspMaquinas.Checked)
                sFiltros += " 25,";
            if (toolStripButtonProcessamento.Checked)
                sFiltros += " 30,";
            if (toolStripButtonProcessado.Checked)
                sFiltros += " 40,";
            if (toolStripButtonEnviada.Checked)
                sFiltros += " 50,";
            if (toolStripButtonENVM.Checked)
                sFiltros += " 60, 70, 80,";
            if (toolStripButtonErro.Checked)
                sFiltros += " -20, -40, -50, -60,";

            if (sFiltros.Length == 0)
            {
                return "";
            }
            sFiltros = sFiltroStart + sFiltros.Substring(0, sFiltros.Length - 1) + ")";

            return sFiltros;
        }

        private void m_btRefreshRemessas_Click(object sender, EventArgs e)
        {
            RefreshRemessas();
        }

        private void AddDetalhesDocumento2ListView(SqlDataReader dr)
        {
            DetalhesDocumento oDd = new DetalhesDocumento(dr);
           
            ListViewItem olvItem = oDd.MakeListViewItemDetalhesDocumento(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt );

            olvItem.Tag = oDd;

            listViewDetalhesDocumentos.Items.Add(olvItem);
        }
 
        private void RefreshDetalheDocumentos(string sWhereClause)
        {
            

            listViewDetalhesDocumentos.BeginUpdate();
            listViewDetalhesDocumentos.MyClear();

            SqlDataReader dr = null;
            string sQuery = "select * from VW_DETALHE_DOCUMENTOS ";
            sQuery += sWhereClause;
            sQuery += " order by REMIN_ID, TRANOUT_ID, DOC_REFARQ";

            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddDetalhesDocumento2ListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ResumoForm.cs", 5);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                labelCountDocs.Text = listViewDetalhesDocumentos.Items.Count.ToString()+ " Documentos.";
                listViewDetalhesDocumentos.EndUpdate();
            }
        }

        //private void mostraContainerDocumentos()
        //{
        //    m_splitContainerRemDocs.Panel2Collapsed = false;
        //    m_splitContainerMain.Panel1Collapsed = true;
  
        //}

        private void ConfirmaPrivilegios()
        {
            if (m_oParameters.UserLogged.m_iUserGroup > 1)
            {
                throw new Exception("Utilizador sem privilegios para alterar estados");
            }
        }

        private void VerificaEstadosIguaisRemessa()
        {
            ListViewRemessaDetalhe oDetalhe;

            int iCurrStat = -99999;

            for (int i = 0; i < listViewDetalhesRemessa.SelectedItems.Count; i++)
            {
                oDetalhe = (ListViewRemessaDetalhe)listViewDetalhesRemessa.SelectedItems[i].Tag;

                if (iCurrStat != -99999 && iCurrStat != oDetalhe.m_iStatus)
                {
                    throw new Exception("Remessas em Estados Diferentes");
                }
                iCurrStat = oDetalhe.m_iStatus;
            }

        }
        private void VerificaEstadosIguaisTranche()
        {
            ListViewTrancheDetalhe oDetalhe;
            int iCurrStat = -99999;

            for (int i = 0; i < listViewDetalhesTranche.SelectedItems.Count; i++)
            {
                oDetalhe = (ListViewTrancheDetalhe)listViewDetalhesTranche.SelectedItems[i].Tag;

                if (iCurrStat != -99999 && iCurrStat != oDetalhe.m_iStatus)
                {
                    throw new Exception("Tranches em Estados Diferentes");
                }
                iCurrStat = oDetalhe.m_iStatus;
            }

        }

        private void toolStripMenuMudarEstado_Click(object sender, EventArgs e)
        {

            int iDebug = -1;


            if (listViewDetalhesRemessa.SelectedItems.Count == 0)
                return;

            
            try
            {
                ConfirmaPrivilegios();

                ListViewRemessaDetalhe oDetalhe = (ListViewRemessaDetalhe)listViewDetalhesRemessa.SelectedItems[0].Tag;

                VerificaEstadosIguaisRemessa();

                MudarEstadoForm mudarEstado;
                mudarEstado = new MudarEstadoForm(m_oParameters, oDetalhe.m_iStatus, oDetalhe.GetTableName(), oDetalhe.m_sStatusAbr);
            

                if (mudarEstado.ShowDialog() == DialogResult.Cancel)
                {
                    throw new Exception("Operação cancelada pelo utilizador");
                }

                try
                {
                    m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);
                    while (listViewDetalhesRemessa.SelectedItems.Count > 0)
                    {
                        m_iNewEstado = mudarEstado.m_iNewEstado;
                        m_sSPProcessa = mudarEstado.m_sSPProcessa;
                        m_sSPValida = mudarEstado.m_sSPValida;
                        oDetalhe = (ListViewRemessaDetalhe)listViewDetalhesRemessa.SelectedItems[0].Tag;

                        oDetalhe.ChangeEstado(m_iNewEstado, m_sSPProcessa, m_sSPValida);

                        listViewDetalhesRemessa.SelectedItems[0].Remove();
                    }
                    
                    m_oParameters.Commit();
                }
                catch
                {
                    iDebug = Convert.ToInt32(oDetalhe.m_sRemessaID);
                    m_oParameters.RollBack();
                    throw;
                }

                RefreshRemessas();
                //RefreshTranches();
            }
            catch(Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "toolStripMenuMudarEstado_Click", iDebug);
                MessageBox.Show(this, ex.Message,Application.ProductName,MessageBoxButtons.OK,MessageBoxIcon.Error);
            }

        }

        private void toolStripMenuItemMudar_Click(object sender, EventArgs e)
        {
            if (listViewDetalhesDocumentos.SelectedItems.Count == 0)
                return;

            try
            {
                if (m_oParameters.UserLogged.m_iUserGroup > 1)
                {
                    MessageBox.Show("Utilizador sem privilegios para alterar estados", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                int iCurrStatDoc = -1;
                
                for (int i = 0; i < listViewDetalhesDocumentos.SelectedItems.Count; i++)
                {
                    m_oCurrDoc = (DetalhesDocumento)listViewDetalhesDocumentos.SelectedItems[i].Tag;
                    if (i == 0)
                    {
                        iCurrStatDoc = m_oCurrDoc.m_iDOCSTAT_ID;
                        
                    }
                    if (m_oCurrDoc.m_iDOCSTAT_ID != iCurrStatDoc)
                    {
                        MessageBox.Show("Documentos em Estados Diferentes", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }


                MudarEstadoForm mudarEstado;

                mudarEstado = new MudarEstadoForm(m_oParameters, m_oCurrDoc.m_iDOCSTAT_ID, "DOCUMENTO", m_oCurrDoc.m_sDOCSTAT_ABR);
                mudarEstado.ShowDialog();

                if (mudarEstado.m_bCancelPressed || mudarEstado.m_iNewEstado == -999)
                {
                    return;
                }
                m_iNewEstado = mudarEstado.m_iNewEstado;
                m_sSPProcessa = mudarEstado.m_sSPProcessa;
                m_sSPValida = mudarEstado.m_sSPValida;
                
                SqlTransaction oTrans = (SqlTransaction)m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);

                for (int i = 0; i < listViewDetalhesDocumentos.SelectedItems.Count; i++)
                {

                    m_oCurrDoc = (DetalhesDocumento)listViewDetalhesDocumentos.SelectedItems[i].Tag;

                    ChangeEstadoDocumento(m_iNewEstado, m_sSPProcessa, m_sSPValida);
                }
               
                for (int i = 0; i < listViewDetalhesDocumentos.SelectedItems.Count; i++)
                {
                    listViewDetalhesDocumentos.SelectedItems[i].SubItems[6].Text = mudarEstado.m_sNewEstado;
                    ((DetalhesDocumento)listViewDetalhesDocumentos.SelectedItems[i].Tag).m_iDOCSTAT_ID = mudarEstado.m_iNewEstado;
                 }
               
                m_oParameters.Commit();  

            }
            catch(Exception ex)
            {
                m_oParameters.RollBack();
                GenericLog.GenLogRegistarErro(ref ex, "ChangeEstadoDocumento", int.Parse(m_oCurrDoc.m_sDOC_ID));
                MessageBox.Show(ex.Message,Application.ProductName,MessageBoxButtons.OK,MessageBoxIcon.Error);
            }

        }

        private void ChangeEstadoDocumento(int iNewEstado, string m_sSPProcessa, string m_sSPValida)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@NewEstado", iNewEstado));
            oParams.Add(new GeneralDBParameters("@DocID", m_oCurrDoc.m_sDOC_ID));
            if (m_sSPValida.Length > 0)
            {
                m_oParameters.DirectStoredProcedureNonQuery(m_sSPValida, ref oParams);
            }
            m_oParameters.DirectStoredProcedureNonQuery(m_sSPProcessa, ref oParams);


            string sSmg = "Mudou estado do DOCUMENTO: " + m_oCurrDoc.m_sDOC_ID + " para " + iNewEstado.ToString();
            GenericLog.GenLogRegistarAlerta(sSmg, "ChangeEstadoDocumento()", 110);
            m_oParameters.EnviarAlertaSituacao(110, sSmg);

        }

        private void verDocumentosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            listViewDetalhesRemessas_DoubleClick (sender, e);
        }

        private void toolStripButtonRefresh_Click(object sender, EventArgs e)
        {
            if (!m_toolStripButtonShowResumo.Checked)
            {
                m_toolStripButtonShowResumo.Checked = true;
                m_toolStripButtonShowDocs.Checked = false;
            }
            ShowListViews();

            RefreshRemessasAndTranches();
        }

        private void contextMenuStripRemTrans_Opening(object sender, CancelEventArgs e)
        {
            if (listViewDetalhesRemessa.SelectedItems.Count == 0)
            {
                contextMenuStripRemessa.Enabled = false;
            }
            else
            {
                contextMenuStripRemessa.Enabled = true;
            }
            //contextMenuStripRemessa.Enabled = true;
            
            //enbaleSeRemessa();
            //enabledSeAberta(); 
        }

        private void enabledSeAberta()
        {
            if (listViewResumoRemessas.SelectedItems.Count != 1)
            {
                return;
            }

            RemessasResumo oRr = null;
            oRr = (RemessasResumo)listViewResumoRemessas.SelectedItems[0].Tag;
            
            if (oRr.m_iREMINSTAT_ID == 10)
            {
                verTranchesToolStripMenuItem.Enabled = false;
            }
            else
            {
                verTranchesToolStripMenuItem.Enabled = true;
            }
        }

        //private void enbaleSeRemessa()
        //{
        //    if (!m_splitContainerRemessaTranche.Panel1Collapsed)
        //    {
        //        verRemessasToolStripMenuItem.Visible = false;
        //        verTranchesToolStripMenuItem.Visible = true;
        //        consultaRemessasToolStripMenuItem.Visible = true;
        //    }
        //    else
        //    {
        //        verRemessasToolStripMenuItem.Visible = true;
        //        verTranchesToolStripMenuItem.Visible = false;
        //        consultaRemessasToolStripMenuItem.Visible = false;
        //    }

        //}

        private void verTranchesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewDetalhesRemessa.SelectedItems.Count != 1)
                return;
            
            try
            {
                string sWhereClause = "";
                ListViewDetalhes oTd = null;

                oTd = (ListViewDetalhes)listViewDetalhesRemessa.SelectedItems[0].Tag;
                sWhereClause = "where REMIN_ID = " + oTd.m_sRemessaID;

                RefreshDetalheTranches(sWhereClause, true);
                
            }
            catch { }

        }

        private void verRemessasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewDetalhesTranche.SelectedItems.Count != 1)
                return;
            try
            {
                string sWhereClause = "";
                ListViewDetalhes oTd = null;

                oTd = (ListViewDetalhes)listViewDetalhesTranche.SelectedItems[0].Tag;
                sWhereClause = "where REMIN_ID = " + oTd.m_sRemessaID;

                RefreshDetalheRemessas(sWhereClause, true);

            }
            catch { }
        }

        private void button1_Click(object sender, EventArgs e)
        {
           
                string sFiltro = filtros();
                RefreshDetalheRemessas(sFiltro, true);
           
        }

        private string filtros()
        {
            string sWhereClause;
            sWhereClause = "";

            

            if (textBoxFiltroReminID.Text.Length > 0)
            {
                sWhereClause = " where REMIN_ID = " + textBoxFiltroReminID.Text;
                return sWhereClause;
            }

            if (textBoxFiltroBalcao.Text.Length > 0)
            {
                sWhereClause += " REMIN_BALCAO = " + textBoxFiltroBalcao.Text;
            }

            if (textBoxFiltroNRemessa.Text.Length > 0)
            {
                if (sWhereClause.Length > 0) sWhereClause += " and ";
                sWhereClause += " REMIN_NUMERO = " + textBoxFiltroNRemessa.Text;
            }

            if (sWhereClause.Length > 0)
            {
                sWhereClause = " and " + sWhereClause;
                //filtroData();
            }

            

            string sFiltroRem = filtrosRemessas();

            if (sFiltroRem.Length > 0)
            {
                return filtrosRemessas() + " and " + filtroData() +sWhereClause;
            }
            else if (sWhereClause == "")
            {
                return " where " + filtroData();
            }
            else
            {
                return " where " + filtroData() +sWhereClause;
            }
        }

        private string filtroData()
        {

            string sWhereDate = "";
            sWhereDate = " REMPROC_TIMER between '" + m_ctrldtInicio.Value.ToString(m_oParameters.DateTimeSysFmt) + "' and ";
            sWhereDate += "'" + m_ctrldtFim.Value.AddDays(+1).ToString(m_oParameters.DateTimeSysFmt) + "' ";
            return sWhereDate;
        }

        private void listViewDetalhesDocumentos_DoubleClick(object sender, EventArgs e)
        {

            m_oCurrDoc = (DetalhesDocumento)listViewDetalhesDocumentos.SelectedItems[0].Tag;
            MostraImagem fMostraImg = new MostraImagem(m_oParameters, m_oCurrDoc, Convert.ToInt32(m_oCurrDoc.m_iDOC_TIPO));
            fMostraImg.ShowDialog();    
        }

 
        private void consultaRemessasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewDetalhesRemessa.SelectedItems.Count != 1)
                return;

            ListViewRemessaDetalhe oTd = null;
            oTd = (ListViewRemessaDetalhe)listViewDetalhesRemessa.SelectedItems[0].Tag;
            DialogResult oResult = DialogResult.No;
            if (pesquisaReminConsulta(oTd))
            {

                oResult = MessageBox.Show("A Consulta já foi efectuada deseja repetir?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (oResult == DialogResult.Yes)
                {
                    insereConsultaRemessaTibco(oTd);
                }
            }
            else 
            {
                insereConsultaRemessaTibco(oTd);
            }

            MessageBox.Show("Consulta efectuada!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);   
        }
        
        private void insereConsultaRemessaTibco(ListViewRemessaDetalhe oTd)
        {
            try
            {
                ArrayList oParams = new ArrayList();
                oParams.Add(new GeneralDBParameters("@Operativa", oTd.m_iOperativa));
                oParams.Add(new GeneralDBParameters("@Filtro", xmlFiltroRemessas(oTd)));
                oParams.Add(new GeneralDBParameters("@Remin_id", oTd.m_sRemessaID));

                m_oParameters.DirectStoredProcedureNonQuery("dbo.Insert_TibcoConsultaRemessas", ref oParams);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "consultaRemessasToolStripMenuItem_Click", int.Parse(oTd.m_sRemessaID.ToString()));
            }
        }

        private string xmlFiltroRemessas(ListViewRemessaDetalhe oTd)
        {
            ArrayList oNome = new ArrayList();
            ArrayList oValor = new ArrayList();

            oNome.Add("BALCAO");
            oValor.Add(oTd.m_iREMIN_BALCAO.ToString("0000"));
            

            oNome.Add("DATAREM");
            //oValor.Add(oTd.m_dtTimer.ToString("yyyy/MM/dd"));
            oValor.Add(oTd.m_dtREMIN_DATA.ToString("yyyy/MM/dd"));

            //oNome.Add("NUM_PROPOSTA_LOGICA");
            oNome.Add("NUM_REMESSA");
            oValor.Add(oTd.m_sNumero.PadLeft(11, '0'));

            string sFiltro = CriaXML.Filtro(oNome, oValor);

            return sFiltro;

        }

        private void consultaDocumentosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewDetalhesDocumentos.SelectedItems.Count != 1)
                return;

            DetalhesDocumento oTd = null;
            oTd = (DetalhesDocumento)listViewDetalhesDocumentos.SelectedItems[0].Tag;

            
            DialogResult oResult;
            if (pesquisaDocConsulta(oTd))
            {
                oResult = MessageBox.Show("A Consulta já foi efectuada deseja repetir?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (oResult == DialogResult.Yes)
                {
                    insereConsultaDocTibco(oTd);
                    //MessageBox.Show("Consulta efectuada!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }    
            }
            else
            { 
                 insereConsultaDocTibco(oTd);
                 //MessageBox.Show("Consulta efectuada!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);   
            }
            MessageBox.Show("Consulta efectuada!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);   
            
        }

        private void insereConsultaDocTibco(DetalhesDocumento oTd)
        {
            string sFiltro = xmlFiltroDocumentos(oTd);
            ArrayList oParams = new ArrayList();
            try
            {
                oParams.Add(new GeneralDBParameters("@Operativa", oTd.m_iOperativa));
                oParams.Add(new GeneralDBParameters("@Filtro", sFiltro));
                oParams.Add(new GeneralDBParameters("@Doc_id", oTd.m_sDOC_ID));

                m_oParameters.DirectStoredProcedureNonQuery("dbo.Insert_TibcoConsultaDocumentos", ref oParams);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "consultaDocumentosToolStripMenuItem_Click", int.Parse(oTd.m_sREMIN_ID.ToString()));
            }
        }


        private bool pesquisaDocConsulta(DetalhesDocumento oTd)
        {
            long lConsulta = 0;
            lConsulta = long.Parse(m_oParameters.DirectSqlScalar("select count(*) from vw_consulta_docs where Doc_ID =" + oTd.m_sDOC_ID).ToString());

            if (lConsulta > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool pesquisaReminConsulta(ListViewRemessaDetalhe oTd)
        {
            long lConsulta = 0;
            lConsulta = long.Parse(m_oParameters.DirectSqlScalar("select count(*) from vw_consulta_Remessa where Remin_id =" + oTd.m_sRemessaID).ToString());

            if (lConsulta > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        private string xmlFiltroDocumentos(DetalhesDocumento oTd)
        {
            ArrayList oNome = new ArrayList();
            ArrayList oValor = new ArrayList();

            oNome.Add("BALCAO");
            oValor.Add(oTd.m_iREMIN_BALCAO.ToString("0000"));

            oNome.Add("ZIB");
            oValor.Add(oTd.m_sDOC_ZONA5.PadLeft(8, '0'));

            oNome.Add("NUM_CONTA");
            oValor.Add(oTd.m_sDOC_ZONA4.PadLeft(11, '0'));

            oNome.Add("NUM_CHEQUE");
            oValor.Add(oTd.m_sDOC_ZONA3.PadLeft(10, '0'));

            oNome.Add("MONTANTE");
            oValor.Add(oTd.m_dDOC_ZONA2.ToString("0000000000.00"));

            oNome.Add("TIPOCHEQUE");
            oValor.Add(oTd.m_sDOC_ZONA1);

            string sFiltro = CriaXML.Filtro(oNome, oValor);

            return sFiltro;

            
        }

        private void contextMenuStripRemessas_Opening(object sender, CancelEventArgs e)
        {
            if (listViewResumoRemessas.SelectedItems.Count == 0)
            {
                contextMenuStripRemessasResumo.Enabled = false;
            }
            else
            {
                contextMenuStripRemessasResumo.Enabled = true;
            }
        }

        private void contextMenuStripDetalheDoc_Opening(object sender, CancelEventArgs e)
        {
            if (listViewDetalhesDocumentos.SelectedItems.Count == 0)
            {
                contextMenuStripDetalheDoc.Enabled = false;
            }
            else
            {
                contextMenuStripDetalheDoc.Enabled = true;
            }
        }

        private void verRemessasDetalheToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            if (listViewResumoRemessas.SelectedItems.Count == 0)
                return;

            DisplayRemessas();
            
        }

        private void listViewResumoRemessas_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            DisplayRemessas();
        }

        private void DisplayRemessas()
        {
            //### aqui
            m_splitContainerRemessaTranche.Panel1Collapsed = false;
            m_splitContainerRemessaTranche.Panel2Collapsed = true;

            if (listViewResumoRemessas.SelectedItems.Count != 1)
                return;
            DisplaySelectedRemessas_ResumoAndDetalhe();
        }

        private void verImagemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewDetalhesDocumentos.SelectedItems.Count == 0)
                return;
            listViewDetalhesDocumentos_DoubleClick(sender, e);
        }

        private void m_toolStripButtonShowDocs_Click(object sender, EventArgs e)
        {
            ShowListViews();
        }

        private void m_toolStripButtonShowResumo_Click(object sender, EventArgs e)
        {
            ShowListViews();
        }

        protected void ShowListViews()
        {
            m_splitContainerRemDocs.Panel2Collapsed = !m_toolStripButtonShowDocs.Checked;
            m_splitContainerMain.Panel1Collapsed = !m_toolStripButtonShowResumo.Checked;

            btTranches.Visible = m_toolStripButtonShowResumo.Checked;
            m_btRefreshRemessas.Visible = m_toolStripButtonShowResumo.Checked;
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void listViewDetalhesRemessas_DoubleClick(object sender, EventArgs e)
        {
            if (listViewDetalhesRemessa.SelectedItems.Count != 1)
            {
                return;
            }

            if (!m_toolStripButtonShowDocs.Checked)
            {
                m_toolStripButtonShowDocs.Checked = true;
                m_toolStripButtonShowResumo.Checked = false;
            }
            ShowListViews();

            listViewDetalhesRemessa.EnsureVisible(listViewDetalhesRemessa.SelectedItems[0].Index);

            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                string sWhereClause = "";
                ListViewDetalhes oTd = null;

                oTd = (ListViewDetalhes)listViewDetalhesRemessa.SelectedItems[0].Tag;
                sWhereClause = oTd.GetWhereClause2ViewDetails();
                RefreshDetalheDocumentos(sWhereClause);

            }
            catch { }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private void listViewDetalhesTranche_DoubleClick(object sender, EventArgs e)
        {
            if (listViewDetalhesTranche.SelectedItems.Count != 1)
            {
                return;
            }

            if (!m_toolStripButtonShowDocs.Checked)
            {
                m_toolStripButtonShowDocs.Checked = true;
                m_toolStripButtonShowResumo.Checked = false;
            }
            ShowListViews();

            listViewDetalhesTranche.EnsureVisible(listViewDetalhesTranche.SelectedItems[0].Index);

            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                string sWhereClause = "";
                ListViewDetalhes oTd = null;

                oTd = (ListViewDetalhes)listViewDetalhesTranche.SelectedItems[0].Tag;
                sWhereClause = oTd.GetWhereClause2ViewDetails();
                RefreshDetalheDocumentos(sWhereClause);

            }
            catch { }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private void contextMenuStripTrancheMudaEstado_Click(object sender, EventArgs e)
        {
            int iDebug = -1;


            if (listViewDetalhesTranche.SelectedItems.Count == 0)
                return;


            try
            {
                ConfirmaPrivilegios();

                ListViewTrancheDetalhe oDetalhe = (ListViewTrancheDetalhe)listViewDetalhesTranche.SelectedItems[0].Tag;

                //VerificaEstadosIguaisTranche(listViewDetalhesTranche, ref oDetalhe);
                VerificaEstadosIguaisTranche();

                MudarEstadoForm mudarEstado;
                mudarEstado = new MudarEstadoForm(m_oParameters, oDetalhe.m_iStatus, oDetalhe.GetTableName(), oDetalhe.m_sStatusAbr);


                if (mudarEstado.ShowDialog() == DialogResult.Cancel)
                {
                    throw new Exception("Operação cancelada pelo utilizador");
                }

                try
                {
                    m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);
                    while (listViewDetalhesTranche.SelectedItems.Count > 0)
                    {
                        m_iNewEstado = mudarEstado.m_iNewEstado;
                        m_sSPProcessa = mudarEstado.m_sSPProcessa;
                        m_sSPValida = mudarEstado.m_sSPValida;
                        oDetalhe = (ListViewTrancheDetalhe)listViewDetalhesTranche.SelectedItems[0].Tag;

                        oDetalhe.ChangeEstado(m_iNewEstado, m_sSPProcessa, m_sSPValida);

                        listViewDetalhesTranche.SelectedItems[0].Remove();
                    }

                    m_oParameters.Commit();
                }
                catch
                {
                    iDebug = Convert.ToInt32(oDetalhe.m_sTrancheID);
                    m_oParameters.RollBack();
                    throw;
                }

                //RefreshRemessas();
                RefreshTranches();
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "toolStripMenuMudarEstado_Click", iDebug);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void contextMenuStripTrancheVerDocs_Click(object sender, EventArgs e)
        {
            listViewDetalhesTranche_DoubleClick(sender, e);
        }

        private void contextMenuStripTrancheVerRemessas_Click(object sender, EventArgs e)
        {
            if (listViewDetalhesTranche.SelectedItems.Count != 1)
                return;
            try
            {
                string sWhereClause = "";
                ListViewDetalhes oTd = null;

                oTd = (ListViewDetalhes)listViewDetalhesTranche.SelectedItems[0].Tag;
                sWhereClause = "where REMIN_ID = " + oTd.m_sRemessaID;

                RefreshDetalheRemessas(sWhereClause, true);

            }
            catch { }
        }
        private void buttonReenviarRemessas_Click(object sender, EventArgs e)
        {
            try
            {
                //ConfirmaPrivilegios();

                if (MessageBox.Show("Confirma o reenvio de todas as remessas em erro?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    return;
                }
                string sSmg = "Reenvio manual de todas as remessas em erro";
                GenericLog.GenLogRegistarAlerta(sSmg, "buttonReenviarRemessas_Click()", 110);
                m_oParameters.EnviarAlertaSituacao(110, sSmg);

                string sQuery = "exec dbo.Update_ReenviarTodasRemessasEmErro";
                m_oParameters.DirectSqlNonQuery(sQuery);

                RefreshRemessasAndTranches();

                MessageBox.Show(this, "Efectuado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "buttonReenviarRemessas_Click", -2);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

       
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ActividadesForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="contextMenuStripRemessa.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>205, 17</value>
  </metadata>
  <metadata name="contextMenuStripDetalheDoc.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>394, 17</value>
  </metadata>
  <metadata name="contextMenuStripRemessasResumo.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>590, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="m_toolStripButtonShowResumo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB8SURBVDhPvY1RDsAgCEM5ukfzZm7FNAJrdD/bS15mVgr2
        giFtbXpg9N6lyE4L1jXDoA8P4v83C+RViOy04P65LlLCd8gT8ipENouPA+R5FRK+11xe4KGCGb65/OeC
        6aa8txZzGZSwWvNcJmUoGjNdBmFI6UW4JQ4qv8DsAivyUoXaKwpRAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="m_toolStripButtonShowDocs.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABQSURBVDhPzY5BCgAgCAT36T7NnxVCRWJ22IIamENZg/iC
        cigKiwuoaupqboSAiAT74/lzvwuBzNXccAGGEQCEdGzA6QLtsHUbYLwXOPQpQAVWWtkDToDnYwAAAABJ
        RU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonExitJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFYSURBVFhH1ZGLrgMhCET76fvnW0fBIi+1tr25JGdRQGaS
        fWzGfchx3Nd1LYN5BL78tm45CCMSgdkuTneqH4UR8sDcIE416m1HfdyOcwOYMeJUp/529AVAC0rQd8Wp
        RzPbYf6jB3qhOPVpbjvaUl4cmDBzmo8YSEwMc7hrEgPtcUZZishM8Nx7BuTyBES/i6UfM7Aag9Br8VjX
        rBjYwi62PUlqQA9rpLAUoKXnBmZMxF0D/BZnukcGZjEVNwbKGVFr6FH/zIBapOlzJNxryHSm2nZMxUGd
        YwN8d96WvB3DQi3M1L40oDky0EAYYQa9bxrgMMIMet8yIKMJRfzEAIto/rOB9ngVKSqRPS3ehCPwwYKE
        KjDLZQ8ycMVpdmDFgCvm5PKpZ7AkDmYGIjE3OwZQQz8kM+CKJLl86hksiYPIQCSSZmEAZ9SneAbc5Qu5
        fF5wbUY38Fc87icdVRQJ1bFuoAAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="contextMenuStripTranche.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>691, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>59</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIActividades/AlertasForm.Designer.cs
﻿namespace CIActividades
{
    partial class AlertasForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.alertasToolStripMenuItemEnable(true);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AlertasForm));
            this.listViewAlertas = new NBIISNET.ListViewBase();
            this.columnHeader15 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader21 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader18 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader20 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader6 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader7 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader8 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.m_btRefresh = new System.Windows.Forms.Button();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrldtInicio = new System.Windows.Forms.DateTimePicker();
            this.cbAlertasFiltro = new System.Windows.Forms.ComboBox();
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.buttonSairJanela = new System.Windows.Forms.Button();
            this.labelCount = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // listViewAlertas
            // 
            this.listViewAlertas.AllowColumnReorder = true;
            this.listViewAlertas.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
                        | System.Windows.Forms.AnchorStyles.Left) 
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewAlertas.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader15,
            this.columnHeader21,
            this.columnHeader18,
            this.columnHeader6,
            this.columnHeader20,
            this.columnHeader1,
            this.columnHeader2,
            this.columnHeader3,
            this.columnHeader4,
            this.columnHeader5,
            this.columnHeader7,
            this.columnHeader8});
            this.listViewAlertas.EnableExportar = true;
            this.listViewAlertas.FullRowSelect = true;
            this.listViewAlertas.GridLines = true;
            this.listViewAlertas.HideSelection = false;
            this.listViewAlertas.Location = new System.Drawing.Point(23, 94);
            this.listViewAlertas.MultiSelect = false;
            this.listViewAlertas.Name = "listViewAlertas";
            this.listViewAlertas.Size = new System.Drawing.Size(984, 172);
            this.listViewAlertas.TabIndex = 12;
            this.listViewAlertas.TabStop = false;
            this.listViewAlertas.UseCompatibleStateImageBehavior = false;
            this.listViewAlertas.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader15
            // 
            this.columnHeader15.Text = "Alerta ID";
            // 
            // columnHeader21
            // 
            this.columnHeader21.Text = "Alerta Timer";
            this.columnHeader21.Width = 95;
            // 
            // columnHeader18
            // 
            this.columnHeader18.Text = "Alerta Text";
            this.columnHeader18.Width = 390;
            // 
            // columnHeader20
            // 
            this.columnHeader20.Text = "Situação ID";
            this.columnHeader20.Width = 77;
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Situação Desc";
            this.columnHeader1.Width = 133;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Tipo Acção ID";
            this.columnHeader2.Width = 88;
            // 
            // columnHeader3
            // 
            this.columnHeader3.Text = "Tipo Acção Desc";
            this.columnHeader3.Width = 100;
            // 
            // columnHeader4
            // 
            this.columnHeader4.Text = "Acção ID";
            this.columnHeader4.Width = 61;
            // 
            // columnHeader5
            // 
            this.columnHeader5.Text = "Acção Desc";
            this.columnHeader5.Width = 111;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "Alerta Desc";
            this.columnHeader6.Width = 113;
            // 
            // columnHeader7
            // 
            this.columnHeader7.Text = "Acção Status";
            this.columnHeader7.Width = 98;
            // 
            // columnHeader8
            // 
            this.columnHeader8.Text = "Acção Timer";
            this.columnHeader8.Width = 91;
            // 
            // m_btRefresh
            // 
            this.m_btRefresh.Image = global::CIActividades.Properties.Resources.Refresh;
            this.m_btRefresh.Location = new System.Drawing.Point(580, 18);
            this.m_btRefresh.Name = "m_btRefresh";
            this.m_btRefresh.Size = new System.Drawing.Size(53, 42);
            this.m_btRefresh.TabIndex = 4;
            this.toolTip1.SetToolTip(this.m_btRefresh, "Refresh");
            this.m_btRefresh.UseVisualStyleBackColor = true;
            this.m_btRefresh.Click += new System.EventHandler(this.m_btRefresh_Click);
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(335, 12);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(202, 20);
            this.m_ctrldtFim.TabIndex = 2;
            // 
            // m_ctrldtInicio
            // 
            this.m_ctrldtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtInicio.Location = new System.Drawing.Point(85, 12);
            this.m_ctrldtInicio.Name = "m_ctrldtInicio";
            this.m_ctrldtInicio.Size = new System.Drawing.Size(202, 20);
            this.m_ctrldtInicio.TabIndex = 1;
            // 
            // cbAlertasFiltro
            // 
            this.cbAlertasFiltro.DropDownHeight = 300;
            this.cbAlertasFiltro.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbAlertasFiltro.DropDownWidth = 476;
            this.cbAlertasFiltro.FormattingEnabled = true;
            this.cbAlertasFiltro.IntegralHeight = false;
            this.cbAlertasFiltro.ItemHeight = 13;
            this.cbAlertasFiltro.Location = new System.Drawing.Point(61, 50);
            this.cbAlertasFiltro.Name = "cbAlertasFiltro";
            this.cbAlertasFiltro.Size = new System.Drawing.Size(476, 21);
            this.cbAlertasFiltro.TabIndex = 3;
            this.cbAlertasFiltro.SelectedIndexChanged += new System.EventHandler(this.cbAlertasFiltro_SelectedIndexChanged);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(58, 18);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(21, 13);
            this.label1.TabIndex = 16;
            this.label1.Text = "De";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(304, 18);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(16, 13);
            this.label2.TabIndex = 17;
            this.label2.Text = "a ";
            // 
            // buttonSairJanela
            // 
            this.buttonSairJanela.Image = ((System.Drawing.Image)(resources.GetObject("buttonSairJanela.Image")));
            this.buttonSairJanela.Location = new System.Drawing.Point(660, 18);
            this.buttonSairJanela.Name = "buttonSairJanela";
            this.buttonSairJanela.Size = new System.Drawing.Size(46, 42);
            this.buttonSairJanela.TabIndex = 5;
            this.buttonSairJanela.UseVisualStyleBackColor = true;
            this.buttonSairJanela.Click += new System.EventHandler(this.buttonSairJanela_Click);
            // 
            // labelCount
            // 
            this.labelCount.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.labelCount.AutoSize = true;
            this.labelCount.Location = new System.Drawing.Point(921, 68);
            this.labelCount.Name = "labelCount";
            this.labelCount.Size = new System.Drawing.Size(57, 13);
            this.labelCount.TabIndex = 18;
            this.labelCount.Text = "0 Registos";
            // 
            // AlertasForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1028, 278);
            this.Controls.Add(this.labelCount);
            this.Controls.Add(this.buttonSairJanela);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.cbAlertasFiltro);
            this.Controls.Add(this.listViewAlertas);
            this.Controls.Add(this.m_btRefresh);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrldtInicio);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "AlertasForm";
            this.ShowInTaskbar = false;
            this.Text = "Alertas";
            this.Load += new System.EventHandler(this.AlertasForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private NBIISNET.ListViewBase listViewAlertas;
        private System.Windows.Forms.ColumnHeader columnHeader15;
        private System.Windows.Forms.ColumnHeader columnHeader21;
        private System.Windows.Forms.ColumnHeader columnHeader18;
        private System.Windows.Forms.ColumnHeader columnHeader20;
        private System.Windows.Forms.Button m_btRefresh;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrldtInicio;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.ColumnHeader columnHeader3;
        private System.Windows.Forms.ColumnHeader columnHeader4;
        private System.Windows.Forms.ColumnHeader columnHeader5;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.ColumnHeader columnHeader7;
        private System.Windows.Forms.ColumnHeader columnHeader8;
        private System.Windows.Forms.ComboBox cbAlertasFiltro;
        private System.Windows.Forms.ToolTip toolTip1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Button buttonSairJanela;
        private System.Windows.Forms.Label labelCount;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/AlertasForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using Alerta;
using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIActividades
{
    public partial class AlertasForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        string m_sAlertaFiltro;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public AlertasForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_sAlertaFiltro = "";
            m_oMenuInterface = oMenuInterface;
        }

        private void AlertasForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

                DefinirDatas();

                RefreshAlertas();
                //RefreshParametros();

                m_oMenuInterface.alertasToolStripMenuItemEnable(false);


                string sComm;
                DataSet ds;

                sComm = "select cast(situacao_id as varchar(40)) +' - '+ situacao_desc  as combobox, situacao_id from vw_alerta_situacao";
                ds = m_oParameters.DirectSqlDataSet(sComm, "Alerta Situacao");
                cbAlertasFiltro.Items.Clear();

                cbAlertasFiltro.DataSource = ds.Tables[0];
                cbAlertasFiltro.DisplayMember = "combobox";
          
                ds.Dispose();

                DataTable oTable = (DataTable)cbAlertasFiltro.DataSource;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        protected void DefinirDatas()
        {
            m_ctrldtFim.Value = DateTime.Now.Date;
            m_ctrldtInicio.Value = DateTime.Now.Date;
        }

        private void m_btRefresh_Click(object sender, EventArgs e)
        {
            RefreshAlertas();
        }

        //private void AddParam2ListView1(SqlDataReader dr)
        //{
        //    AccaoParam oAccP = new AccaoParam(dr);

        //    ListViewItem olvItem = oAccP.MakeListViewItemParam1();

        //    olvItem.Tag = oAccP;

        //    listViewAccaoParam1.Items.Add(olvItem);
          
        //}

        //private void AddParam2ListView2(SqlDataReader dr)
        //{
        //    AccaoParam oAccP = new AccaoParam(dr);

        //    ListViewItem olvItem = oAccP.MakeListViewItemParam2();

        //    olvItem.Tag = oAccP;

        //    listViewAccaoParam2.Items.Add(olvItem);
        //}

        private void AddAlerta2ListView(SqlDataReader dr)
        {
            AlertaSituacaoAccao oAl = new AlertaSituacaoAccao(dr);

            ListViewItem olvItem = oAl.MakeListViewItemAlerta(m_oParameters.DateTimeSysFmt);

            olvItem.Tag = oAl;

            listViewAlertas.Items.Add(olvItem);

            DisplayCount();

        }

        private void RefreshAlertas()
        {

            string sQuery = "select top 10000 * from VW_AL_ALERTA_SITUACAO_ACCAO where Al_TIMER between ";
            sQuery += "'" + m_ctrldtInicio.Value.ToString(m_oParameters.DateTimeSysFmt) + "' and ";
            sQuery += "'" + m_ctrldtFim.Value.AddDays(1).ToString(m_oParameters.DateTimeSysFmt) + "' ";
            if (m_sAlertaFiltro != "")
            {
                sQuery += "and SITUACAO_ID = " + m_sAlertaFiltro;
            }
            sQuery += " order by AL_TIMER desc, ACC_ID";

            SqlDataReader drA = null;

            

            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                listViewAlertas.MyClear();

                drA = m_oParameters.DirectSqlDataReader(sQuery);
                while (drA.Read())
                {
                    AddAlerta2ListView(drA);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "AlertasForm.cs", 7);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drA != null)
                {
                    drA.Close();
                }
               
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();

                DisplayCount();
            }
        }

        private void DisplayCount()
        {
            labelCount.Text = listViewAlertas.Items.Count.ToString() + " Registos";
        }

        private void cbAlertasFiltro_SelectedIndexChanged(object sender, EventArgs e)
        {
            DataRowView oRow;

            oRow = (DataRowView)cbAlertasFiltro.SelectedValue;

            int iAlertaFiltro = int.Parse(oRow["situacao_id"].ToString());
            if (iAlertaFiltro == 0)
            {
                m_sAlertaFiltro = "";
            }
            else
            {
                m_sAlertaFiltro = iAlertaFiltro.ToString();
            }
        }

        private void buttonSairJanela_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/AlertasForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="buttonSairJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAVFJREFUWEe9l4sS
        hCAIRevP+/N2UTBUHhpaM63NVtwjItB5zB333OPd02fw/eO+rmv4/IvdcMAvXMO7nwFU4ln4O4BOPAiQ
        6NF1rvtF8TAAGiA3anGgiocBIIiYEQnAFF8C4ECkZaKIB8H2DAThY9iAiABQkOlj2s24nxWIGAA3blxb
        EEsAcKLuUK31s7avY6Be40FvlCBbAiBFLf+vhaJ7KI45PuCBnOnMIOy2GBMXAcheA/umGPUza8Q7AKqC
        ALEMQHA7z4jVLuBxsQTAEd+/BAPFKJIHvLgYKse7AQhS7Qd2AnAPjW3XxdWwBtAy5cZyvB3AL8c8SwY8
        oGRbSMHQtxtn6uupv9dGoyNKE5Ds52Z3gXj+8BBbMtO+BzA08+fLRypYtnctgClxwQOeZ9OSaACz4vjt
        VzwwJK4BvBIvxnBWTlCXgCwecBoSr2EJ3P8B7HIFGlBzdMgAAAAASUVORK5CYII=
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>88</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIActividades/CIActividades.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6FFF83BB-F585-43A4-B446-46F0EE79D42E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIActividades</RootNamespace>
    <AssemblyName>CIActividades</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>
    </DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>none</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="CrystalDecisions.CrystalReports.Engine, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304, processorArchitecture=MSIL" />
    <Reference Include="CrystalDecisions.ReportSource, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304, processorArchitecture=MSIL" />
    <Reference Include="CrystalDecisions.Shared, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304, processorArchitecture=MSIL" />
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Web.Services" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Actividades.cs" />
    <Compile Include="ActividadeBalcaoForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ActividadeBalcaoForm.Designer.cs">
      <DependentUpon>ActividadeBalcaoForm.cs</DependentUpon>
    </Compile>
    <Compile Include="AlertasForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AlertasForm.Designer.cs">
      <DependentUpon>AlertasForm.cs</DependentUpon>
    </Compile>
    <Compile Include="ConsultaDocumentosDetalhe.cs" />
    <Compile Include="ConsultaRemessaDetalhe.cs" />
    <Compile Include="ConsultasForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ConsultasForm.Designer.cs">
      <DependentUpon>ConsultasForm.cs</DependentUpon>
    </Compile>
    <Compile Include="ControloBalcaoAcoes.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ControloBalcaoAcoes.Designer.cs">
      <DependentUpon>ControloBalcaoAcoes.cs</DependentUpon>
    </Compile>
    <Compile Include="ListViewBalcaoAcoes.cs" />
    <Compile Include="ListViewAgregacaoBalcaoAcoes.cs" />
    <Compile Include="PesqFicheiroACOM.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="PesqFicheiroACOM.Designer.cs">
      <DependentUpon>PesqFicheiroACOM.cs</DependentUpon>
    </Compile>
    <Compile Include="RemessasResumoBalcao.cs" />
    <Compile Include="CriaXML.cs" />
    <Compile Include="DetalheDocumento.cs" />
    <Compile Include="DetalhesDocumentoBalcao.cs" />
    <Compile Include="DetalheRemessa.cs" />
    <Compile Include="DetalhesDocumento.cs" />
    <Compile Include="DetalheTranche.cs" />
    <Compile Include="ImagemBalcaoForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ImagemBalcaoForm.Designer.cs">
      <DependentUpon>ImagemBalcaoForm.cs</DependentUpon>
    </Compile>
    <Compile Include="InterfaceDocs.cs" />
    <Compile Include="DetalhesEstornosResumo.cs" />
    <Compile Include="ListViewDetalhes.cs" />
    <Compile Include="ListViewDetalhesImagem.cs" />
    <Compile Include="ListViewEstornoDeposito.cs" />
    <Compile Include="ListViewEstornoDocumento.cs" />
    <Compile Include="ListViewTrancheDetalhe.cs" />
    <Compile Include="MostraImagem.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MostraImagem.Designer.cs">
      <DependentUpon>MostraImagem.cs</DependentUpon>
    </Compile>
    <Compile Include="MudarEstadoEstorno.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MudarEstadoEstorno.Designer.cs">
      <DependentUpon>MudarEstadoEstorno.cs</DependentUpon>
    </Compile>
    <Compile Include="MudarEstadoForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MudarEstadoForm.Designer.cs">
      <DependentUpon>MudarEstadoForm.cs</DependentUpon>
    </Compile>
    <Compile Include="MudarEstadoRemessa.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MudarEstadoRemessa.Designer.cs">
      <DependentUpon>MudarEstadoRemessa.cs</DependentUpon>
    </Compile>
    <Compile Include="MudarEstadoTranches.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MudarEstadoTranches.Designer.cs">
      <DependentUpon>MudarEstadoTranches.cs</DependentUpon>
    </Compile>
    <Compile Include="PesquisaDocumento.cs" />
    <Compile Include="PesquisaDocumentoACOM.cs" />
    <Compile Include="PesquisaDocumentoENVM.cs" />
    <Compile Include="PesquisasForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="PesquisasForm.designer.cs">
      <DependentUpon>PesquisasForm.cs</DependentUpon>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="ListViewRemessaDetalhe.cs" />
    <Compile Include="DetalheRemessasEstorno.cs" />
    <Compile Include="RemessasResumo.cs" />
    <Compile Include="ActividadesForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ActividadesForm.Designer.cs">
      <DependentUpon>ActividadesForm.cs</DependentUpon>
    </Compile>
    <Compile Include="ListViewSacoDetalhe.cs" />
    <Compile Include="SacoForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="SacoForm.Designer.cs">
      <DependentUpon>SacoForm.cs</DependentUpon>
    </Compile>
    <Compile Include="Tibco.cs" />
    <Compile Include="TranchesDetalhe.cs" />
    <Compile Include="TranchesResumo.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Alerta\Alerta.csproj">
      <Project>{763022EF-042B-4160-AFFF-9E59EF4B02A5}</Project>
      <Name>Alerta</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="ActividadeBalcaoForm.resx">
      <DependentUpon>ActividadeBalcaoForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="AlertasForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>AlertasForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ActividadesForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>ActividadesForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ConsultasForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>ConsultasForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ControloBalcaoAcoes.resx">
      <DependentUpon>ControloBalcaoAcoes.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ImagemBalcaoForm.resx">
      <DependentUpon>ImagemBalcaoForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="MostraImagem.resx">
      <SubType>Designer</SubType>
      <DependentUpon>MostraImagem.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="MudarEstadoEstorno.resx">
      <DependentUpon>MudarEstadoEstorno.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="MudarEstadoForm.resx">
      <DependentUpon>MudarEstadoForm.cs</DependentUpon>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <EmbeddedResource Include="MudarEstadoRemessa.resx">
      <DependentUpon>MudarEstadoRemessa.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="MudarEstadoTranches.resx">
      <DependentUpon>MudarEstadoTranches.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="PesqFicheiroACOM.resx">
      <DependentUpon>PesqFicheiroACOM.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="PesquisasForm.resx">
      <DependentUpon>PesquisasForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <SubType>Designer</SubType>
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="SacoForm.resx">
      <DependentUpon>SacoForm.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Open.ICO" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Abrir.ico" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\ENVLOPE.ICO" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Erro.ico" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\OK.ico" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Refresh.ico" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\LOCKUP.ICO" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Maquina.ico" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Transmissao.ico" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Resources\ACOM Status.ICO" />
    <None Include="Resources\ENVM Status1.ICO" />
    <Content Include="Resources\PAR.ICO" />
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIActividades/ConsultaDocumentosDetalhe.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Windows.Forms;
using System.IO;

using System.Data.SqlClient;

namespace CIActividades
{
    class ConsultaDocumentosDetalhe : InterfaceDocs
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public long m_lConsultaId;
        public int m_iOperativa;
        public string m_sDoc_id;
        public int m_iAguardaRedig;
        public int m_iAnomaliaDadosIleg;
        public string m_sBalcao;
        public string m_sChaveHost;
        public string m_sZIB;
        public string m_sNumConta;
        public string m_sNumCheque;
        public decimal m_dMontante;
        public string m_sTipoCheque;
        public int m_iValidaRequisitosDoc;
        public int m_iEstado;
        public string m_sEstado;
        public int m_iFsl;
        public string m_sIdDocumento;
        public string m_sIdRemessa;
        public long m_lLote;
        public int m_iMaquina;
        public string m_sNomeImagem;
        public int m_iNumPaginas;
        public string m_sOrigem;
        public string m_sRefarqCaptura;
        public int m_iSequencia;
        public string m_sSubProduto;
        public string m_sFiltro;
        public int m_iEstadoTibco;
        public int m_iMaisResultados;
        public string m_sErro;
        public DateTime m_dTimerCriacao;
        public DateTime m_dTimerActualizacao;

        //imagem
        //public int m_iEstadoImagemF;
        //public int m_iEstadoImagemB;
        //public string m_sEstadoImagemF;
        //public string m_sEstadoImagemB;

       

        public ConsultaDocumentosDetalhe()
        {
            InicializaVariaveis();
            m_oParameters = null;
        }

        protected void InicializaVariaveis()
        {

            m_lConsultaId = 0;
            m_iOperativa = 0;
            m_sDoc_id = "";
            m_sChaveHost = "";

            //m_iEstadoImagemF = 0;
            //m_iEstadoImagemB = 0;
            //m_sEstadoImagemF = "";
            //m_sEstadoImagemB = "";

            m_sFiltro = "";
            m_iEstadoTibco = 0;
            m_sErro = "";
            m_dTimerCriacao = DateTime.MinValue;
            m_dTimerActualizacao = DateTime.MinValue;

            m_sErro = "";
            m_iAguardaRedig = 0;
            m_iAnomaliaDadosIleg = 0;
            m_sBalcao = "";
            m_sChaveHost = "";
            m_sZIB = "";
            m_sNumConta = "";
            m_sNumCheque = "";
            m_dMontante = 0;
            m_sTipoCheque = "";
            m_iValidaRequisitosDoc = 0;
            m_iEstado = 0;
            m_sEstado = "";
            m_iFsl = 0;
            m_sIdDocumento = "";
            m_sIdRemessa = "";
            m_lLote = 0;
            m_iMaquina = 0;
            m_sNomeImagem = "";
            m_iNumPaginas = 0;
            m_sOrigem = "";
            m_sRefarqCaptura = "";
            m_iSequencia = 0;
            m_sSubProduto = "";
            m_iMaisResultados=0;
        }

        public ConsultaDocumentosDetalhe(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
        {
            //try
            //{
                m_oParameters = oParameters;
                InicializaVariaveis();

                m_lConsultaId = Convert.ToInt64(oRow["CONSULTA_ID"].ToString());
                m_iOperativa = Convert.ToInt32(oRow["OPERATIVA"].ToString());
                m_sDoc_id = oRow["DOC_ID"].ToString();
                m_sFiltro = oRow["FILTRO"].ToString();
                m_dTimerCriacao = Convert.ToDateTime(oRow["TIMER_CRIACAO"].ToString());
                m_dTimerActualizacao = Convert.ToDateTime(oRow["TIMER_ACTUALIZACAO"].ToString());
                m_iEstadoTibco = Convert.ToInt32(oRow["ESTADO_TIBCO"].ToString());

                //try
                //{
                if (oRow["LAST_ERRO_DESC"] == DBNull.Value) {

                    m_sErro = String.Empty;
                    m_sErro = string.Empty;
                } else {
                    m_sErro = oRow["LAST_ERRO_DESC"].ToString();
                }
                    //try
                    //{
                    //    m_sErro = oRow["LAST_ERRO_DESC"].ToString();
                    //}
                    //catch { }
                    m_iAguardaRedig = Convert.ToInt32(oRow["aguarda_redig"].ToString());

                    m_iAnomaliaDadosIleg = Convert.ToInt32(oRow["anomalia_dados_ileg"].ToString());
                    m_sBalcao = oRow["balcao"].ToString();
                    m_sChaveHost = oRow["chavehost"].ToString();
                    m_sZIB = oRow["ZIB"].ToString();
                    m_sNumConta = oRow["NUM_CONTA"].ToString();
                    m_sNumCheque = oRow["NUM_CHEQUE"].ToString();
                    m_dMontante = Convert.ToDecimal(oRow["MONTANTE"].ToString());
                    m_sTipoCheque = oRow["TIPOCHEQUE"].ToString();
                    m_iValidaRequisitosDoc = Convert.ToInt32(oRow["VALIDA_REQUiSITOS_DOC"].ToString());
                    m_iEstado = Convert.ToInt32(oRow["estado"]);
                    m_sEstado = oRow["estado"].ToString() + " - " + oRow["estado_desc"].ToString();
                    m_iFsl = Convert.ToInt32(oRow["fsl"].ToString());
                    m_sIdDocumento = oRow["id_documento"].ToString();
                    m_sIdRemessa = oRow["id_remessa"].ToString();
                    m_lLote = Convert.ToInt64(oRow["lote"].ToString());
                    m_iMaquina = Convert.ToInt32(oRow["maquina"].ToString());
                    m_sNomeImagem = oRow["nome_imagem"].ToString();
                    m_iNumPaginas = Convert.ToInt32(oRow["num_paginas"].ToString());
                    m_sOrigem = oRow["origem"].ToString();
                    m_sRefarqCaptura = oRow["refarq_captura"].ToString();
                    m_iSequencia = Convert.ToInt32(oRow["sequencia"].ToString());
                    m_sSubProduto = oRow["subproduto"].ToString();


                    //m_iEstadoImagemF = Convert.ToInt32(oRow["ESTADO_IMAGEMF"].ToString());
                    //m_iEstadoImagemB = Convert.ToInt32(oRow["ESTADO_IMAGEMB"].ToString());
                    //m_sEstadoImagemF = converte2stringF();
                    //m_sEstadoImagemB = converte2stringB();



                    m_iMaisResultados = Convert.ToInt32(oRow["MAIS_RESULTADOS"].ToString());
                //}
                //catch { }
            //}
            //catch {}

            
        }

        //private string converte2stringF()
        //{
        //    if (m_iEstadoImagemF == 2)
        //        return "Imagem Disponivel";
        //    else
        //        return "Sem Imagem Disponivel";
        //}

        //private string converte2stringB()
        //{
        //    if (m_iEstadoImagemB == 2)
        //        return "Imagem Disponivel";
        //    else
        //        return "Sem Imagem Disponivel";

        //}

        public ListViewItem MakeListViewItem(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lConsultaId.ToString();
            olvItem.SubItems.Add(m_iOperativa.ToString());
            olvItem.SubItems.Add(m_sDoc_id);
            olvItem.SubItems.Add(m_dTimerCriacao.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(m_dTimerActualizacao.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(m_iEstadoTibco.ToString());
            olvItem.SubItems.Add(m_sFiltro);
            olvItem.SubItems.Add(m_iAguardaRedig.ToString());
            olvItem.SubItems.Add(m_iAnomaliaDadosIleg.ToString());
            olvItem.SubItems.Add(m_sBalcao);
            olvItem.SubItems.Add(m_sChaveHost);
            olvItem.SubItems.Add(m_sZIB);
            olvItem.SubItems.Add(m_sNumConta);
            olvItem.SubItems.Add(m_sNumCheque);
            olvItem.SubItems.Add(m_dMontante.ToString("0.00"));
            olvItem.SubItems.Add(m_sTipoCheque);
            olvItem.SubItems.Add(m_iValidaRequisitosDoc.ToString());
            //olvItem.SubItems.Add(m_iEstado.ToString());
            olvItem.SubItems.Add(m_sEstado.ToString());
            olvItem.SubItems.Add(m_iFsl.ToString());
            olvItem.SubItems.Add(m_sIdDocumento);
            olvItem.SubItems.Add(m_sIdRemessa);
            olvItem.SubItems.Add(m_lLote.ToString());
            olvItem.SubItems.Add(m_iMaquina.ToString());
            olvItem.SubItems.Add(m_sNomeImagem);
            olvItem.SubItems.Add(m_iNumPaginas.ToString());
            olvItem.SubItems.Add(m_sOrigem);
            olvItem.SubItems.Add(m_sRefarqCaptura);
            olvItem.SubItems.Add(m_iSequencia.ToString());
            olvItem.SubItems.Add(m_sSubProduto);
            //olvItem.SubItems.Add(m_sEstadoImagemF);
            //olvItem.SubItems.Add(m_sEstadoImagemB);
            olvItem.SubItems.Add(m_iMaisResultados.ToString());
            olvItem.SubItems.Add(m_sErro);

            return olvItem;
        }

        public string getImgFrente(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where NOME_IMAGEM= " + m_sNomeImagem + " and NUM_PAGINA = 1 and TIPO= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select IMAGEM from dbo.VW_CONSULTA_DOCS" + sWhereClauseFront);

            sFileNameFrente = m_oParameters.GetTempFileName("IMGFront") + ".jpg";
            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        public string getImgBack(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null)
        {
            string sFileNameBack, sWhereClauseBack;
            sWhereClauseBack = " where NOME_IMAGEM= " + m_sNomeImagem + " and NUM_PAGINA = 2 and TIPO= 'JPG'";
            byte[] aImgB = (byte[])oParameters.DirectSqlScalar("select IMAGEM from dbo.VW_CONSULTA_DOCS" + sWhereClauseBack);

            sFileNameBack = m_oParameters.GetTempFileName("IMGBack") + ".jpg";

            WriteImage(aImgB, sFileNameBack);

            return sFileNameBack;
        }

        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }

        public virtual SqlDataReader GetConsultaImagens()
        {
            string sQuery = "";

            sQuery += "select * from VW_TIBCO_OBTEM_IMAGEM ";
            sQuery += " where  ID_DADOS_DOCUMENTO_CONSULTA = " + m_lConsultaId.ToString();

            return m_oParameters.DirectSqlDataReader(sQuery);
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ConsultaRemessaDetalhe.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Windows.Forms;
using NBiis;

namespace CIActividades
{
    class ConsultaRemessaDetalhe
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public long m_lConsultaId;
        public string m_sReminId;
        public int m_iAguardaRedig;
        public string m_sBalcao;
        public string m_sChaveHost;
        public decimal m_dMontante;
        public string m_sNumContaDep;
        public string m_sNIB;
        public DateTime m_dDataRem;
        public int m_iEstadoLote;
        public string m_sEstadoLote;
        public DateTime m_dHoraChegada;
        public string m_sIdRemessa;
        public string m_sNomeImagemCabLote;
        public string m_sNumCabecaLote;
        public int m_iNumDocs;
        public int m_iNumPaginaCabLote;
        public string m_sNumPropostaLogica;
        public string m_sOrigem;
        public string m_sSubProduto;
        public string m_sTipoRemessa;
        public string m_sFiltro;
        public int m_iEstado;
        public int m_iMaisResultados;
        public DateTime m_dTimerCriacao;
        public DateTime m_dTimerActualizacao;
        public string m_sErro;

        public ConsultaRemessaDetalhe()
        {
            m_lConsultaId = 0;
            m_sReminId = "";
            m_iAguardaRedig = 0;
            m_sBalcao = "";
            m_sChaveHost = "";
            m_dMontante = 0;
            m_sNumContaDep = "";
            m_sNIB = "";
            m_dDataRem = DateTime.MinValue;
            m_iEstadoLote = 0;
            m_sEstadoLote = "";
            m_dHoraChegada = DateTime.MinValue;
            m_sIdRemessa = "";
            m_sNomeImagemCabLote = "";
            m_sNumCabecaLote = "";
            m_iNumDocs = 0;
            m_iNumPaginaCabLote = 0;
            m_sNumPropostaLogica = "";
            m_sOrigem = "";
            m_sSubProduto = "";
            m_sTipoRemessa = "";
            m_sFiltro="";
            m_iEstado=0;
            m_iMaisResultados=0;
            m_dTimerCriacao= DateTime.MinValue;
            m_dTimerActualizacao= DateTime.MinValue;
            m_sErro="";
            m_oParameters = null;
        }

        public ConsultaRemessaDetalhe(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
        {
            try
            {
                m_lConsultaId = long.Parse(oRow["CONSULTA_ID"].ToString());
                m_sReminId = oRow["REMIN_ID"].ToString();
                m_sFiltro = oRow["filtro"].ToString();
                m_iEstado = int.Parse(oRow["ESTADO"].ToString());
                 m_dTimerCriacao = DateTime.Parse(oRow["TIMER_CRIACAO"].ToString());
                m_dTimerActualizacao = DateTime.Parse(oRow["TIMER_ACTUALIZACAO"].ToString());
                 m_oParameters = oParameters;

                //try
                //{
                 if (oRow["LAST_ERRO_DESC"] == DBNull.Value)
                 {
                     this.m_sErro = string.Empty;
                }
                else{

                    m_sErro = oRow["LAST_ERRO_DESC"].ToString();
                }
                    //try
                    //{
                    //    m_sErro = oRow["LAST_ERRO_DESC"].ToString();
                    //}
                    //catch { }                    
                    m_iAguardaRedig = int.Parse(oRow["aguarda_redig"].ToString());                
                    m_sBalcao = oRow["BALCAO"].ToString();
                    m_sChaveHost = oRow["CHAVEHOST"].ToString();
                    m_dMontante = decimal.Parse(oRow["MONTANTE"].ToString());
                    m_sNumContaDep = oRow["NUM_CONTA_DEP"].ToString();
                    m_sNIB = oRow["NIB"].ToString();
                    m_dDataRem = DateTime.Parse(oRow["DATAREM"].ToString());
                    m_iEstadoLote = int.Parse(oRow["ESTADO_LOTE"].ToString());
                    m_sEstadoLote = oRow["ESTADO_LOTE"].ToString() + " - " + oRow["ESTADO_DESC"].ToString();
                    m_dHoraChegada = DateTime.Parse(oRow["hora_chegada"].ToString());
                    m_sIdRemessa = oRow["id_remessa"].ToString();
                    m_sNomeImagemCabLote = oRow["nome_imagem_cablote"].ToString();
                    m_sNumCabecaLote = oRow["num_cabeca_lote"].ToString();
                    m_iNumDocs = int.Parse(oRow["num_docs"].ToString());
                    m_iNumPaginaCabLote = int.Parse(oRow["num_paginas_cab_lote"].ToString());
                    m_sNumPropostaLogica = oRow["num_proposta_logica"].ToString();
                    m_sOrigem = oRow["origem"].ToString();
                    m_sSubProduto = oRow["subproduto"].ToString();
                    m_sTipoRemessa = oRow["tipo_remessa"].ToString();
                    m_iMaisResultados = int.Parse(oRow["mais_resultados"].ToString());
                              
                //}
                //catch{}
            }
            catch(Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ConsultaRemessaDetalhe", int.Parse(m_lConsultaId.ToString()));
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public ListViewItem MakeListViewItem(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lConsultaId.ToString();
            olvItem.SubItems.Add(m_sReminId);
            olvItem.SubItems.Add(m_dTimerCriacao.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(m_dTimerActualizacao.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(m_iEstado.ToString());
            olvItem.SubItems.Add(m_sFiltro);
            olvItem.SubItems.Add(m_iAguardaRedig.ToString());
            olvItem.SubItems.Add(m_sBalcao);
            olvItem.SubItems.Add(m_sChaveHost);
            olvItem.SubItems.Add(m_dMontante.ToString("0.00"));
            olvItem.SubItems.Add(m_sNumContaDep);
            olvItem.SubItems.Add(m_sNIB);
            if (m_dDataRem.ToString().Equals(DateTime.MinValue.ToString()))
            {
                olvItem.SubItems.Add("");
            }
            else
            {
                olvItem.SubItems.Add(m_dDataRem.ToString(sDateTimeFormat));
            }
            //olvItem.SubItems.Add(m_iEstadoLote.ToString());
            olvItem.SubItems.Add(m_sEstadoLote);
            if (m_dHoraChegada.ToString().Equals(DateTime.MinValue.ToString()))
            {
                olvItem.SubItems.Add("");
            }
            else
            {
                olvItem.SubItems.Add(m_dHoraChegada.ToString(sDateTimeFormat));
            }
            olvItem.SubItems.Add(m_sIdRemessa);
            olvItem.SubItems.Add(m_sNomeImagemCabLote);
            olvItem.SubItems.Add(m_sNumCabecaLote);
            olvItem.SubItems.Add(m_iNumDocs.ToString());
            olvItem.SubItems.Add(m_iNumPaginaCabLote.ToString());
            olvItem.SubItems.Add(m_sNumPropostaLogica);
            olvItem.SubItems.Add(m_sOrigem);
            olvItem.SubItems.Add(m_sSubProduto);
            olvItem.SubItems.Add(m_sTipoRemessa);
            olvItem.SubItems.Add(m_iMaisResultados.ToString());
            olvItem.SubItems.Add(m_sErro);

            return olvItem;
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ConsultasForm.Designer.cs
﻿namespace CIActividades
{
    partial class ConsultasForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.consultasEnable(true);
        }


        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConsultasForm));
            this.contextMenuStripConsultaDocs = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.consultarImagensToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.dataInicio = new System.Windows.Forms.DateTimePicker();
            this.dataFim = new System.Windows.Forms.DateTimePicker();
            this.buttonRefresh = new System.Windows.Forms.Button();
            this.m_splitContainerMain = new System.Windows.Forms.SplitContainer();
            this.listViewConsultaRemessas = new NBIISNET.ListViewBase();
            this.colunaRemessaConsultaID = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaReminID = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaTimerCriacao = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaTimerActualizacao = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaEstado = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaFiltro = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaAguardaRedig = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaBalcao = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaChaveHost = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaMontante = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaNumContaDep = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaNIB = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaDataRem = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaEstadoLote = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaHoraChegada = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaIdRemessa = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaNomeImgCabLote = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaNumCabLote = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaNumDocs = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaNumPaginaCabLote = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaNumPropostaLogica = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaOrigem = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaSubProduto = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaTipoRemessa = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaMaisResultados = new System.Windows.Forms.ColumnHeader();
            this.colunaRemessaErro = new System.Windows.Forms.ColumnHeader();
            this.m_splitContainerDocs = new System.Windows.Forms.SplitContainer();
            this.listViewConsultaDocs = new NBIISNET.ListViewBase();
            this.colunaDocConsultaId = new System.Windows.Forms.ColumnHeader();
            this.colunaOperativa = new System.Windows.Forms.ColumnHeader();
            this.coluaDocDOCID = new System.Windows.Forms.ColumnHeader();
            this.colunaDocTimerCriacao = new System.Windows.Forms.ColumnHeader();
            this.colunaDocTimerActualizacao = new System.Windows.Forms.ColumnHeader();
            this.colunaDocEstadoTibco = new System.Windows.Forms.ColumnHeader();
            this.colunaDocFiltro = new System.Windows.Forms.ColumnHeader();
            this.colunaDocAguardaRedig = new System.Windows.Forms.ColumnHeader();
            this.colunaDocAnomaliaDadosIlegais = new System.Windows.Forms.ColumnHeader();
            this.colunaDocBalcao = new System.Windows.Forms.ColumnHeader();
            this.colunaDocChaveHost = new System.Windows.Forms.ColumnHeader();
            this.colunaDocZib = new System.Windows.Forms.ColumnHeader();
            this.colunaDocNumConta = new System.Windows.Forms.ColumnHeader();
            this.colunaDocNumCheque = new System.Windows.Forms.ColumnHeader();
            this.colunaDocMontante = new System.Windows.Forms.ColumnHeader();
            this.colunaDocTipoCheque = new System.Windows.Forms.ColumnHeader();
            this.colunaDocValidaRequisitosDoc = new System.Windows.Forms.ColumnHeader();
            this.colunaDocEstado = new System.Windows.Forms.ColumnHeader();
            this.colunaDocFsl = new System.Windows.Forms.ColumnHeader();
            this.colunaDocIdDocumento = new System.Windows.Forms.ColumnHeader();
            this.colunaDocIdRemessa = new System.Windows.Forms.ColumnHeader();
            this.colunaDocLote = new System.Windows.Forms.ColumnHeader();
            this.colunaDocMaquina = new System.Windows.Forms.ColumnHeader();
            this.colunaDocNomeImagem = new System.Windows.Forms.ColumnHeader();
            this.colunaDocNumPaginas = new System.Windows.Forms.ColumnHeader();
            this.colunaDocOrigem = new System.Windows.Forms.ColumnHeader();
            this.colunaDocRefarqCaptura = new System.Windows.Forms.ColumnHeader();
            this.colunaDocSequencia = new System.Windows.Forms.ColumnHeader();
            this.colunaDocSubProduto = new System.Windows.Forms.ColumnHeader();
            this.colunaDocMaisResultados = new System.Windows.Forms.ColumnHeader();
            this.colunaDocErro = new System.Windows.Forms.ColumnHeader();
            this.m_pictureBox = new System.Windows.Forms.PictureBox();
            this.lbImagem = new System.Windows.Forms.Label();
            this.listViewImagens = new NBIISNET.ListViewBase();
            this.colImgConsultaID = new System.Windows.Forms.ColumnHeader();
            this.colImgTimer = new System.Windows.Forms.ColumnHeader();
            this.colImgSide = new System.Windows.Forms.ColumnHeader();
            this.colImgEstado = new System.Windows.Forms.ColumnHeader();
            this.colImgErro = new System.Windows.Forms.ColumnHeader();
            this.contextMenuStripConsultaDocs.SuspendLayout();
            this.m_splitContainerMain.Panel1.SuspendLayout();
            this.m_splitContainerMain.Panel2.SuspendLayout();
            this.m_splitContainerMain.SuspendLayout();
            this.m_splitContainerDocs.Panel1.SuspendLayout();
            this.m_splitContainerDocs.Panel2.SuspendLayout();
            this.m_splitContainerDocs.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.m_pictureBox)).BeginInit();
            this.SuspendLayout();
            // 
            // contextMenuStripConsultaDocs
            // 
            this.contextMenuStripConsultaDocs.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.consultarImagensToolStripMenuItem});
            this.contextMenuStripConsultaDocs.Name = "contextMenuStripConsultaDocs";
            this.contextMenuStripConsultaDocs.Size = new System.Drawing.Size(201, 26);
            this.contextMenuStripConsultaDocs.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripConsultaDocs_Opening);
            // 
            // consultarImagensToolStripMenuItem
            // 
            this.consultarImagensToolStripMenuItem.Name = "consultarImagensToolStripMenuItem";
            this.consultarImagensToolStripMenuItem.Size = new System.Drawing.Size(200, 22);
            this.consultarImagensToolStripMenuItem.Text = "Consultar Imagens SIBS";
            this.consultarImagensToolStripMenuItem.Click += new System.EventHandler(this.consultarImagensToolStripMenuItem_Click);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(3, 0);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(66, 13);
            this.label1.TabIndex = 2;
            this.label1.Text = "REMESSAS";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(3, 0);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(84, 13);
            this.label2.TabIndex = 3;
            this.label2.Text = "DOCUMENTOS";
            // 
            // dataInicio
            // 
            this.dataInicio.CustomFormat = "yyyy-MM-dd";
            this.dataInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dataInicio.Location = new System.Drawing.Point(66, 12);
            this.dataInicio.Name = "dataInicio";
            this.dataInicio.Size = new System.Drawing.Size(88, 20);
            this.dataInicio.TabIndex = 4;
            // 
            // dataFim
            // 
            this.dataFim.CustomFormat = "yyyy-MM-dd";
            this.dataFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dataFim.Location = new System.Drawing.Point(160, 12);
            this.dataFim.Name = "dataFim";
            this.dataFim.Size = new System.Drawing.Size(88, 20);
            this.dataFim.TabIndex = 5;
            // 
            // buttonRefresh
            // 
            this.buttonRefresh.Location = new System.Drawing.Point(268, 9);
            this.buttonRefresh.Name = "buttonRefresh";
            this.buttonRefresh.Size = new System.Drawing.Size(103, 23);
            this.buttonRefresh.TabIndex = 6;
            this.buttonRefresh.Text = "Refresh";
            this.buttonRefresh.UseVisualStyleBackColor = true;
            this.buttonRefresh.Click += new System.EventHandler(this.buttonRefresh_Click);
            // 
            // m_splitContainerMain
            // 
            this.m_splitContainerMain.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.m_splitContainerMain.Location = new System.Drawing.Point(12, 54);
            this.m_splitContainerMain.Name = "m_splitContainerMain";
            this.m_splitContainerMain.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // m_splitContainerMain.Panel1
            // 
            this.m_splitContainerMain.Panel1.Controls.Add(this.label1);
            this.m_splitContainerMain.Panel1.Controls.Add(this.listViewConsultaRemessas);
            // 
            // m_splitContainerMain.Panel2
            // 
            this.m_splitContainerMain.Panel2.Controls.Add(this.m_splitContainerDocs);
            this.m_splitContainerMain.Size = new System.Drawing.Size(917, 460);
            this.m_splitContainerMain.SplitterDistance = 145;
            this.m_splitContainerMain.TabIndex = 7;
            // 
            // listViewConsultaRemessas
            // 
            this.listViewConsultaRemessas.AllowColumnReorder = true;
            this.listViewConsultaRemessas.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewConsultaRemessas.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colunaRemessaConsultaID,
            this.colunaRemessaReminID,
            this.colunaRemessaTimerCriacao,
            this.colunaRemessaTimerActualizacao,
            this.colunaRemessaEstado,
            this.colunaRemessaFiltro,
            this.colunaRemessaAguardaRedig,
            this.colunaRemessaBalcao,
            this.colunaRemessaChaveHost,
            this.colunaRemessaMontante,
            this.colunaRemessaNumContaDep,
            this.colunaRemessaNIB,
            this.colunaRemessaDataRem,
            this.colunaRemessaEstadoLote,
            this.colunaRemessaHoraChegada,
            this.colunaRemessaIdRemessa,
            this.colunaRemessaNomeImgCabLote,
            this.colunaRemessaNumCabLote,
            this.colunaRemessaNumDocs,
            this.colunaRemessaNumPaginaCabLote,
            this.colunaRemessaNumPropostaLogica,
            this.colunaRemessaOrigem,
            this.colunaRemessaSubProduto,
            this.colunaRemessaTipoRemessa,
            this.colunaRemessaMaisResultados,
            this.colunaRemessaErro});
            this.listViewConsultaRemessas.EnableExportar = true;
            this.listViewConsultaRemessas.FullRowSelect = true;
            this.listViewConsultaRemessas.GridLines = true;
            this.listViewConsultaRemessas.HideSelection = false;
            this.listViewConsultaRemessas.Location = new System.Drawing.Point(6, 16);
            this.listViewConsultaRemessas.Name = "listViewConsultaRemessas";
            this.listViewConsultaRemessas.Size = new System.Drawing.Size(911, 126);
            this.listViewConsultaRemessas.TabIndex = 0;
            this.listViewConsultaRemessas.UseCompatibleStateImageBehavior = false;
            this.listViewConsultaRemessas.View = System.Windows.Forms.View.Details;
            // 
            // colunaRemessaConsultaID
            // 
            this.colunaRemessaConsultaID.Text = "Consulta ID";
            this.colunaRemessaConsultaID.Width = 72;
            // 
            // colunaRemessaReminID
            // 
            this.colunaRemessaReminID.Text = "Remin Id";
            // 
            // colunaRemessaTimerCriacao
            // 
            this.colunaRemessaTimerCriacao.Text = "Timer Criacao";
            this.colunaRemessaTimerCriacao.Width = 100;
            // 
            // colunaRemessaTimerActualizacao
            // 
            this.colunaRemessaTimerActualizacao.Text = "Timer Actualizacao";
            this.colunaRemessaTimerActualizacao.Width = 114;
            // 
            // colunaRemessaEstado
            // 
            this.colunaRemessaEstado.Text = "Estado tibco";
            this.colunaRemessaEstado.Width = 77;
            // 
            // colunaRemessaFiltro
            // 
            this.colunaRemessaFiltro.Text = "Filtro";
            this.colunaRemessaFiltro.Width = 372;
            // 
            // colunaRemessaAguardaRedig
            // 
            this.colunaRemessaAguardaRedig.Text = "Aguarda Redig";
            this.colunaRemessaAguardaRedig.Width = 90;
            // 
            // colunaRemessaBalcao
            // 
            this.colunaRemessaBalcao.Text = "Balcao";
            this.colunaRemessaBalcao.Width = 48;
            // 
            // colunaRemessaChaveHost
            // 
            this.colunaRemessaChaveHost.Text = "Chave host";
            this.colunaRemessaChaveHost.Width = 100;
            // 
            // colunaRemessaMontante
            // 
            this.colunaRemessaMontante.Text = "Montante";
            this.colunaRemessaMontante.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colunaRemessaMontante.Width = 63;
            // 
            // colunaRemessaNumContaDep
            // 
            this.colunaRemessaNumContaDep.Text = "Num Conta Dep";
            this.colunaRemessaNumContaDep.Width = 98;
            // 
            // colunaRemessaNIB
            // 
            this.colunaRemessaNIB.Text = "NIB";
            // 
            // colunaRemessaDataRem
            // 
            this.colunaRemessaDataRem.Text = "Data Rem";
            this.colunaRemessaDataRem.Width = 80;
            // 
            // colunaRemessaEstadoLote
            // 
            this.colunaRemessaEstadoLote.Text = "Estado Lote";
            this.colunaRemessaEstadoLote.Width = 80;
            // 
            // colunaRemessaHoraChegada
            // 
            this.colunaRemessaHoraChegada.Text = "Hora chegada";
            this.colunaRemessaHoraChegada.Width = 88;
            // 
            // colunaRemessaIdRemessa
            // 
            this.colunaRemessaIdRemessa.Text = "Id Remessa";
            this.colunaRemessaIdRemessa.Width = 80;
            // 
            // colunaRemessaNomeImgCabLote
            // 
            this.colunaRemessaNomeImgCabLote.Text = "Nome Img Cab Lote";
            this.colunaRemessaNomeImgCabLote.Width = 80;
            // 
            // colunaRemessaNumCabLote
            // 
            this.colunaRemessaNumCabLote.Text = "Num Cabeca Lote";
            this.colunaRemessaNumCabLote.Width = 80;
            // 
            // colunaRemessaNumDocs
            // 
            this.colunaRemessaNumDocs.Text = "Num Docs";
            this.colunaRemessaNumDocs.Width = 80;
            // 
            // colunaRemessaNumPaginaCabLote
            // 
            this.colunaRemessaNumPaginaCabLote.Text = "Num Paginas Cab Lote";
            this.colunaRemessaNumPaginaCabLote.Width = 80;
            // 
            // colunaRemessaNumPropostaLogica
            // 
            this.colunaRemessaNumPropostaLogica.Text = "Num Proposta Logica";
            this.colunaRemessaNumPropostaLogica.Width = 80;
            // 
            // colunaRemessaOrigem
            // 
            this.colunaRemessaOrigem.Text = "Origem";
            this.colunaRemessaOrigem.Width = 80;
            // 
            // colunaRemessaSubProduto
            // 
            this.colunaRemessaSubProduto.Text = "Sub Produto";
            this.colunaRemessaSubProduto.Width = 80;
            // 
            // colunaRemessaTipoRemessa
            // 
            this.colunaRemessaTipoRemessa.Text = "Tipo Remessa";
            this.colunaRemessaTipoRemessa.Width = 80;
            // 
            // colunaRemessaMaisResultados
            // 
            this.colunaRemessaMaisResultados.Text = "Mais Resultados";
            this.colunaRemessaMaisResultados.Width = 90;
            // 
            // colunaRemessaErro
            // 
            this.colunaRemessaErro.Text = "Erro";
            this.colunaRemessaErro.Width = 100;
            // 
            // m_splitContainerDocs
            // 
            this.m_splitContainerDocs.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.m_splitContainerDocs.Location = new System.Drawing.Point(0, 3);
            this.m_splitContainerDocs.Name = "m_splitContainerDocs";
            this.m_splitContainerDocs.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // m_splitContainerDocs.Panel1
            // 
            this.m_splitContainerDocs.Panel1.Controls.Add(this.label2);
            this.m_splitContainerDocs.Panel1.Controls.Add(this.listViewConsultaDocs);
            // 
            // m_splitContainerDocs.Panel2
            // 
            this.m_splitContainerDocs.Panel2.Controls.Add(this.m_pictureBox);
            this.m_splitContainerDocs.Panel2.Controls.Add(this.lbImagem);
            this.m_splitContainerDocs.Panel2.Controls.Add(this.listViewImagens);
            this.m_splitContainerDocs.Size = new System.Drawing.Size(914, 305);
            this.m_splitContainerDocs.SplitterDistance = 152;
            this.m_splitContainerDocs.TabIndex = 4;
            // 
            // listViewConsultaDocs
            // 
            this.listViewConsultaDocs.AllowColumnReorder = true;
            this.listViewConsultaDocs.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewConsultaDocs.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colunaDocConsultaId,
            this.colunaOperativa,
            this.coluaDocDOCID,
            this.colunaDocTimerCriacao,
            this.colunaDocTimerActualizacao,
            this.colunaDocEstadoTibco,
            this.colunaDocFiltro,
            this.colunaDocAguardaRedig,
            this.colunaDocAnomaliaDadosIlegais,
            this.colunaDocBalcao,
            this.colunaDocChaveHost,
            this.colunaDocZib,
            this.colunaDocNumConta,
            this.colunaDocNumCheque,
            this.colunaDocMontante,
            this.colunaDocTipoCheque,
            this.colunaDocValidaRequisitosDoc,
            this.colunaDocEstado,
            this.colunaDocFsl,
            this.colunaDocIdDocumento,
            this.colunaDocIdRemessa,
            this.colunaDocLote,
            this.colunaDocMaquina,
            this.colunaDocNomeImagem,
            this.colunaDocNumPaginas,
            this.colunaDocOrigem,
            this.colunaDocRefarqCaptura,
            this.colunaDocSequencia,
            this.colunaDocSubProduto,
            this.colunaDocMaisResultados,
            this.colunaDocErro});
            this.listViewConsultaDocs.ContextMenuStrip = this.contextMenuStripConsultaDocs;
            this.listViewConsultaDocs.EnableExportar = true;
            this.listViewConsultaDocs.FullRowSelect = true;
            this.listViewConsultaDocs.GridLines = true;
            this.listViewConsultaDocs.HideSelection = false;
            this.listViewConsultaDocs.Location = new System.Drawing.Point(0, 16);
            this.listViewConsultaDocs.Name = "listViewConsultaDocs";
            this.listViewConsultaDocs.Size = new System.Drawing.Size(911, 133);
            this.listViewConsultaDocs.TabIndex = 1;
            this.listViewConsultaDocs.UseCompatibleStateImageBehavior = false;
            this.listViewConsultaDocs.View = System.Windows.Forms.View.Details;
            this.listViewConsultaDocs.DoubleClick += new System.EventHandler(this.listViewConsultaDocs_DoubleClick);
            // 
            // colunaDocConsultaId
            // 
            this.colunaDocConsultaId.Text = "Consulta ID";
            this.colunaDocConsultaId.Width = 73;
            // 
            // colunaOperativa
            // 
            this.colunaOperativa.Text = "Operativa";
            this.colunaOperativa.Width = 62;
            // 
            // coluaDocDOCID
            // 
            this.coluaDocDOCID.Text = "Doc Id";
            // 
            // colunaDocTimerCriacao
            // 
            this.colunaDocTimerCriacao.Text = "Timer Criacao";
            this.colunaDocTimerCriacao.Width = 101;
            // 
            // colunaDocTimerActualizacao
            // 
            this.colunaDocTimerActualizacao.Text = "Timer Actualizacao";
            this.colunaDocTimerActualizacao.Width = 116;
            // 
            // colunaDocEstadoTibco
            // 
            this.colunaDocEstadoTibco.Text = "Estado Tibco";
            this.colunaDocEstadoTibco.Width = 80;
            // 
            // colunaDocFiltro
            // 
            this.colunaDocFiltro.Text = "Filtro";
            this.colunaDocFiltro.Width = 368;
            // 
            // colunaDocAguardaRedig
            // 
            this.colunaDocAguardaRedig.Text = "Aguarda Redig";
            this.colunaDocAguardaRedig.Width = 90;
            // 
            // colunaDocAnomaliaDadosIlegais
            // 
            this.colunaDocAnomaliaDadosIlegais.Text = "Anomalia Dados Ileg";
            this.colunaDocAnomaliaDadosIlegais.Width = 117;
            // 
            // colunaDocBalcao
            // 
            this.colunaDocBalcao.Text = "Balcao";
            this.colunaDocBalcao.Width = 50;
            // 
            // colunaDocChaveHost
            // 
            this.colunaDocChaveHost.Text = "ChaveHost";
            this.colunaDocChaveHost.Width = 90;
            // 
            // colunaDocZib
            // 
            this.colunaDocZib.Text = "Zib";
            this.colunaDocZib.Width = 70;
            // 
            // colunaDocNumConta
            // 
            this.colunaDocNumConta.Text = "Num Conta";
            this.colunaDocNumConta.Width = 70;
            // 
            // colunaDocNumCheque
            // 
            this.colunaDocNumCheque.Text = "Num Cheque";
            this.colunaDocNumCheque.Width = 70;
            // 
            // colunaDocMontante
            // 
            this.colunaDocMontante.Text = "Montante";
            this.colunaDocMontante.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colunaDocMontante.Width = 70;
            // 
            // colunaDocTipoCheque
            // 
            this.colunaDocTipoCheque.Text = "Tipo Cheque";
            this.colunaDocTipoCheque.Width = 70;
            // 
            // colunaDocValidaRequisitosDoc
            // 
            this.colunaDocValidaRequisitosDoc.Text = "Valida Requisitos Doc";
            this.colunaDocValidaRequisitosDoc.Width = 100;
            // 
            // colunaDocEstado
            // 
            this.colunaDocEstado.Text = "Estado";
            this.colunaDocEstado.Width = 48;
            // 
            // colunaDocFsl
            // 
            this.colunaDocFsl.Text = "Fsl";
            this.colunaDocFsl.Width = 35;
            // 
            // colunaDocIdDocumento
            // 
            this.colunaDocIdDocumento.Text = "Id Documento";
            this.colunaDocIdDocumento.Width = 70;
            // 
            // colunaDocIdRemessa
            // 
            this.colunaDocIdRemessa.Text = "Id Remessa";
            this.colunaDocIdRemessa.Width = 70;
            // 
            // colunaDocLote
            // 
            this.colunaDocLote.Text = "Lote";
            this.colunaDocLote.Width = 70;
            // 
            // colunaDocMaquina
            // 
            this.colunaDocMaquina.Text = "Maquina";
            this.colunaDocMaquina.Width = 70;
            // 
            // colunaDocNomeImagem
            // 
            this.colunaDocNomeImagem.Text = "Nome Imagem";
            this.colunaDocNomeImagem.Width = 100;
            // 
            // colunaDocNumPaginas
            // 
            this.colunaDocNumPaginas.Text = "Num Paginas";
            this.colunaDocNumPaginas.Width = 70;
            // 
            // colunaDocOrigem
            // 
            this.colunaDocOrigem.Text = "Origem";
            this.colunaDocOrigem.Width = 70;
            // 
            // colunaDocRefarqCaptura
            // 
            this.colunaDocRefarqCaptura.Text = "Refarq Captura";
            this.colunaDocRefarqCaptura.Width = 70;
            // 
            // colunaDocSequencia
            // 
            this.colunaDocSequencia.Text = "Sequencia";
            this.colunaDocSequencia.Width = 70;
            // 
            // colunaDocSubProduto
            // 
            this.colunaDocSubProduto.Text = "SubProduto";
            this.colunaDocSubProduto.Width = 70;
            // 
            // colunaDocMaisResultados
            // 
            this.colunaDocMaisResultados.Text = "Mais Resultados";
            this.colunaDocMaisResultados.Width = 100;
            // 
            // colunaDocErro
            // 
            this.colunaDocErro.Text = "Erro";
            this.colunaDocErro.Width = 100;
            // 
            // m_pictureBox
            // 
            this.m_pictureBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.m_pictureBox.Location = new System.Drawing.Point(464, 16);
            this.m_pictureBox.Name = "m_pictureBox";
            this.m_pictureBox.Size = new System.Drawing.Size(447, 130);
            this.m_pictureBox.TabIndex = 5;
            this.m_pictureBox.TabStop = false;
            // 
            // lbImagem
            // 
            this.lbImagem.AutoSize = true;
            this.lbImagem.Location = new System.Drawing.Point(3, 0);
            this.lbImagem.Name = "lbImagem";
            this.lbImagem.Size = new System.Drawing.Size(56, 13);
            this.lbImagem.TabIndex = 4;
            this.lbImagem.Text = "IMAGENS";
            // 
            // listViewImagens
            // 
            this.listViewImagens.AllowColumnReorder = true;
            this.listViewImagens.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)));
            this.listViewImagens.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colImgConsultaID,
            this.colImgTimer,
            this.colImgSide,
            this.colImgEstado,
            this.colImgErro});
            this.listViewImagens.FullRowSelect = true;
            this.listViewImagens.GridLines = true;
            this.listViewImagens.HideSelection = false;
            this.listViewImagens.Location = new System.Drawing.Point(0, 16);
            this.listViewImagens.MultiSelect = false;
            this.listViewImagens.Name = "listViewImagens";
            this.listViewImagens.Size = new System.Drawing.Size(458, 130);
            this.listViewImagens.TabIndex = 0;
            this.listViewImagens.UseCompatibleStateImageBehavior = false;
            this.listViewImagens.View = System.Windows.Forms.View.Details;
            this.listViewImagens.DoubleClick += new System.EventHandler(this.listViewImagens_DoubleClick);
            // 
            // colImgConsultaID
            // 
            this.colImgConsultaID.Text = "ConsultaID";
            this.colImgConsultaID.Width = 73;
            // 
            // colImgTimer
            // 
            this.colImgTimer.Text = "Timer";
            this.colImgTimer.Width = 116;
            // 
            // colImgSide
            // 
            this.colImgSide.Text = "Lado";
            // 
            // colImgEstado
            // 
            this.colImgEstado.Text = "Estado";
            this.colImgEstado.Width = 80;
            // 
            // colImgErro
            // 
            this.colImgErro.Text = "Erro";
            this.colImgErro.Width = 100;
            // 
            // ConsultasForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(941, 536);
            this.Controls.Add(this.m_splitContainerMain);
            this.Controls.Add(this.dataInicio);
            this.Controls.Add(this.dataFim);
            this.Controls.Add(this.buttonRefresh);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "ConsultasForm";
            this.ShowInTaskbar = false;
            this.Text = "Consultas SIBS";
            this.Load += new System.EventHandler(this.Consultas_Load);
            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.ConsultasForm_FormClosed);
            this.contextMenuStripConsultaDocs.ResumeLayout(false);
            this.m_splitContainerMain.Panel1.ResumeLayout(false);
            this.m_splitContainerMain.Panel1.PerformLayout();
            this.m_splitContainerMain.Panel2.ResumeLayout(false);
            this.m_splitContainerMain.ResumeLayout(false);
            this.m_splitContainerDocs.Panel1.ResumeLayout(false);
            this.m_splitContainerDocs.Panel1.PerformLayout();
            this.m_splitContainerDocs.Panel2.ResumeLayout(false);
            this.m_splitContainerDocs.Panel2.PerformLayout();
            this.m_splitContainerDocs.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.m_pictureBox)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion


        private NBIISNET.ListViewBase listViewConsultaRemessas;
        private NBIISNET.ListViewBase listViewConsultaDocs;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.ColumnHeader colunaRemessaConsultaID;
        private System.Windows.Forms.ColumnHeader colunaRemessaAguardaRedig;
        private System.Windows.Forms.ColumnHeader colunaRemessaBalcao;
        private System.Windows.Forms.ColumnHeader colunaRemessaChaveHost;
        private System.Windows.Forms.ColumnHeader colunaRemessaMontante;
        private System.Windows.Forms.ColumnHeader colunaRemessaNumContaDep;
        private System.Windows.Forms.ColumnHeader colunaRemessaNIB;
        private System.Windows.Forms.ColumnHeader colunaRemessaDataRem;
        private System.Windows.Forms.ColumnHeader colunaRemessaEstadoLote;
        private System.Windows.Forms.ColumnHeader colunaRemessaHoraChegada;
        private System.Windows.Forms.ColumnHeader colunaRemessaIdRemessa;
        private System.Windows.Forms.ColumnHeader colunaRemessaNomeImgCabLote;
        private System.Windows.Forms.ColumnHeader colunaRemessaNumCabLote;
        private System.Windows.Forms.ColumnHeader colunaRemessaNumDocs;
        private System.Windows.Forms.ColumnHeader colunaRemessaNumPaginaCabLote;
        private System.Windows.Forms.ColumnHeader colunaRemessaNumPropostaLogica;
        private System.Windows.Forms.ColumnHeader colunaRemessaOrigem;
        private System.Windows.Forms.ColumnHeader colunaRemessaSubProduto;
        private System.Windows.Forms.ColumnHeader colunaRemessaTipoRemessa;
        private System.Windows.Forms.ColumnHeader colunaDocConsultaId;
        private System.Windows.Forms.ColumnHeader colunaDocAguardaRedig;
        private System.Windows.Forms.ColumnHeader colunaDocAnomaliaDadosIlegais;
        private System.Windows.Forms.ColumnHeader colunaDocBalcao;
        private System.Windows.Forms.ColumnHeader colunaDocChaveHost;
        private System.Windows.Forms.ColumnHeader colunaDocZib;
        private System.Windows.Forms.ColumnHeader colunaDocNumConta;
        private System.Windows.Forms.ColumnHeader colunaDocNumCheque;
        private System.Windows.Forms.ColumnHeader colunaDocMontante;
        private System.Windows.Forms.ColumnHeader colunaDocTipoCheque;
        private System.Windows.Forms.ColumnHeader colunaDocValidaRequisitosDoc;
        private System.Windows.Forms.ColumnHeader colunaDocEstado;
        private System.Windows.Forms.ColumnHeader colunaDocFsl;
        private System.Windows.Forms.ColumnHeader colunaDocIdDocumento;
        private System.Windows.Forms.ColumnHeader colunaDocIdRemessa;
        private System.Windows.Forms.ColumnHeader colunaDocLote;
        private System.Windows.Forms.ColumnHeader colunaDocMaquina;
        private System.Windows.Forms.ColumnHeader colunaDocNomeImagem;
        private System.Windows.Forms.ColumnHeader colunaDocNumPaginas;
        private System.Windows.Forms.ColumnHeader colunaDocOrigem;
        private System.Windows.Forms.ColumnHeader colunaDocRefarqCaptura;
        private System.Windows.Forms.ColumnHeader colunaDocSequencia;
        private System.Windows.Forms.ColumnHeader colunaDocSubProduto;
        private System.Windows.Forms.DateTimePicker dataInicio;
        private System.Windows.Forms.DateTimePicker dataFim;
        private System.Windows.Forms.Button buttonRefresh;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripConsultaDocs;
        private System.Windows.Forms.ToolStripMenuItem consultarImagensToolStripMenuItem;
        private System.Windows.Forms.ColumnHeader colunaRemessaMaisResultados;
        private System.Windows.Forms.ColumnHeader colunaRemessaTimerCriacao;
        private System.Windows.Forms.ColumnHeader colunaRemessaErro;
        private System.Windows.Forms.ColumnHeader colunaRemessaEstado;
        private System.Windows.Forms.ColumnHeader colunaRemessaFiltro;
        private System.Windows.Forms.ColumnHeader colunaRemessaTimerActualizacao;
        private System.Windows.Forms.ColumnHeader colunaDocTimerCriacao;
        private System.Windows.Forms.ColumnHeader colunaDocTimerActualizacao;
        private System.Windows.Forms.ColumnHeader colunaDocMaisResultados;
        private System.Windows.Forms.ColumnHeader colunaDocErro;
        private System.Windows.Forms.ColumnHeader colunaDocEstadoTibco;
        private System.Windows.Forms.ColumnHeader colunaDocFiltro;
        private System.Windows.Forms.ColumnHeader coluaDocDOCID;
        private System.Windows.Forms.ColumnHeader colunaRemessaReminID;
        private System.Windows.Forms.ColumnHeader colunaOperativa;
        private System.Windows.Forms.SplitContainer m_splitContainerMain;
        private System.Windows.Forms.SplitContainer m_splitContainerDocs;
        private System.Windows.Forms.Label lbImagem;
        private NBIISNET.ListViewBase listViewImagens;
        private System.Windows.Forms.ColumnHeader colImgConsultaID;
        private System.Windows.Forms.ColumnHeader colImgTimer;
        private System.Windows.Forms.ColumnHeader colImgEstado;
        private System.Windows.Forms.ColumnHeader colImgErro;
        private System.Windows.Forms.PictureBox m_pictureBox;
        private System.Windows.Forms.ColumnHeader colImgSide; 
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ConsultasForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using System.Collections;
using NBiis.Generic;

namespace CIActividades
{
    public partial class ConsultasForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected Form m_oMainForm;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public ConsultasForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        private void Consultas_Load(object sender, EventArgs e)
        {
            this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

            dataInicio.Value = DateTime.Now.AddDays(-7);

            refreshConsultaRemessas();
            refreshConsultaDocs();

            m_oMenuInterface.consultasEnable(false);
        }

        public void refreshConsultaRemessas()
        {
            DataSet ds = null;
            string sQuery = "select * from VW_CONSULTA_REMESSA ";
            sQuery += whereClauseData();
            sQuery += " order by TIMER_CRIACAO DESC, mais_resultados";

            try
            {
                ds = m_oParameters.DirectSqlDataSet(sQuery, "Consulta Remessas");
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    AddConsultaRemessa2ListView(oRow);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Consultas.cs", 8);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            
            
        }

        private void AddConsultaRemessa2ListView(DataRow oRow)
        {
            ConsultaRemessaDetalhe oCr = new ConsultaRemessaDetalhe(oRow, m_oParameters);

            ListViewItem olvItem = oCr.MakeListViewItem(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt);

            olvItem.Tag = oCr;

            listViewConsultaRemessas.Items.Add(olvItem);

        }

        private string whereClauseData()
        {
            string sWhereClause;
            sWhereClause = " where TIMER_CRIACAO between '" + dataInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and ";
            sWhereClause += "'" + dataFim.Value.AddDays(+1).ToString(m_oParameters.DateSysFmt) + "' ";

            return sWhereClause;
        }

        public void refreshConsultaDocs()
        {
            DataSet ds = null;

            string sQuery = "select * from VW_CONSULTA_DOCS ";
            sQuery += whereClauseData();
            sQuery += " order by TIMER_CRIACAO DESC, MAIS_RESULTADOS";

            try
            {
                ds = m_oParameters.DirectSqlDataSet(sQuery, "Consulta Documentos");
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    AddConsultaDocs2ListView(oRow);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Consultas.cs", 9);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            
        }
        private void AddConsultaDocs2ListView(DataRow oRow)
        {
            ConsultaDocumentosDetalhe oCd = new ConsultaDocumentosDetalhe(oRow, m_oParameters);

            ListViewItem olvItem = oCd.MakeListViewItem(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt);

            olvItem.Tag = oCd;

            listViewConsultaDocs.Items.Add(olvItem);

        }

        private void buttonRefresh_Click(object sender, EventArgs e)
        {
            listViewConsultaRemessas.Items.Clear();
            listViewConsultaDocs.Items.Clear();
            listViewImagens.Items.Clear();

            refreshConsultaRemessas();
            refreshConsultaDocs();
        }

        private void consultarImagensToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewConsultaDocs.SelectedItems.Count != 1)
            {
                return;
            }

            ConsultaDocumentosDetalhe oCd = null;
            ArrayList oParams = new ArrayList();
           
            try
            { 
                oCd = (ConsultaDocumentosDetalhe)listViewConsultaDocs.SelectedItems[0].Tag;

                //if (!verificaDisponibilidade(oCd))
                //{
                //    MessageBox.Show("Imagem não disponivel", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //    return;
                //}   
               
                oParams.Add(new GeneralDBParameters("@ConsultaId", oCd.m_lConsultaId));
                oParams.Add(new GeneralDBParameters("@Operativa", oCd.m_iOperativa));
                oParams.Add(new GeneralDBParameters("@NomeImagem", oCd.m_sNomeImagem));
                oParams.Add(new GeneralDBParameters("@NumPagina", 1));

                m_oParameters.DirectStoredProcedureNonQuery("dbo.Insert_TibcoObtemImagem", ref oParams);

                oParams.Clear();
                oParams.Add(new GeneralDBParameters("@ConsultaId", oCd.m_lConsultaId));
                oParams.Add(new GeneralDBParameters("@Operativa", oCd.m_iOperativa));
                oParams.Add(new GeneralDBParameters("@NomeImagem", oCd.m_sNomeImagem));
                oParams.Add(new GeneralDBParameters("@NumPagina", 2));

                m_oParameters.DirectStoredProcedureNonQuery("dbo.Insert_TibcoObtemImagem", ref oParams);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                GenericLog.GenLogRegistarErro(ref ex, "consultarImagensToolStripMenuItem_Click", 10); 
            }
        }

        //private bool verificaDisponibilidade(ConsultaDocumentosDetalhe oCd)
        //{
        //    if (oCd.m_sNomeImagem == null || oCd.m_sNomeImagem== "")
        //        return false;
        //    else
        //        return true;

        //}

        private void listViewConsultaDocs_DoubleClick(object sender, EventArgs e)
        {
            SqlDataReader oReader = null;

            try
            {
                listViewImagens.MyClear();

                ConsultaDocumentosDetalhe oCurrDoc = null;

                if (listViewConsultaDocs.SelectedItems.Count == 0)
                {
                    return;
                }

                oCurrDoc = (ConsultaDocumentosDetalhe)listViewConsultaDocs.SelectedItems[0].Tag;


                oReader = oCurrDoc.GetConsultaImagens();

                if (oReader == null)
                {
                    return;
                }

                if ( !oReader.HasRows )
                {
                    return;
                }

                while (oReader.Read())
                {
                    ListViewDetalhesImagem oTag = new ListViewDetalhesImagem(oReader, m_oParameters);
                    ListViewItem oItem = oTag.BuildListViewItem();

                    listViewImagens.Items.Add(oItem);
                }
            }
            catch (Exception ex)
            {
                NBiis.GenericLog.GenLogRegistarErro(ref ex, this.Name, 0);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oReader != null)
                {
                    if (!oReader.IsClosed)
                    {
                        oReader.Close();
                    }

                    oReader.Dispose();
                    oReader = null;
                }
            }

            //ConsultaDocumentosDetalhe oCurrDoc = null;
            //oCurrDoc = (ConsultaDocumentosDetalhe)listViewConsultaDocs.SelectedItems[0].Tag;
            //if (oCurrDoc.m_iEstadoImagemB == 2 && oCurrDoc.m_iEstadoImagemF == 2)
            //{
            //    MostraImagem fMostraImg = new MostraImagem(m_oParameters, oCurrDoc);
            //    fMostraImg.ShowDialog();
            //}
            //else 
            //{
            //    MessageBox.Show("A imagem não está disponivel!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //}
        }

        private void contextMenuStripConsultaDocs_Opening(object sender, CancelEventArgs e)
        {
            if (listViewConsultaDocs.SelectedItems.Count == 0)
            {
                contextMenuStripConsultaDocs.Enabled = false;
            }
            else
            {
                contextMenuStripConsultaDocs.Enabled = true;
            }
        }

        private void listViewImagens_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                string sFileName;
                ListViewDetalhesImagem oItem = null; 

                if (m_pictureBox.Image != null)
                {
                    m_pictureBox.Image.Dispose();
                    m_pictureBox.Image = null;
                }

                if (listViewImagens.SelectedItems.Count == 0)
                {
                    return;
                }

                oItem = (ListViewDetalhesImagem)listViewImagens.SelectedItems[0].Tag;

                sFileName = oItem.GetImage();

                m_pictureBox.Image = System.Drawing.Image.FromFile(sFileName);
                m_pictureBox.SizeMode = PictureBoxSizeMode.StretchImage;
            }
            catch (Exception ex)
            {
                NBiis.GenericLog.GenLogRegistarErro(ref ex, this.Name, 0);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ConsultasForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (m_pictureBox.Image != null)
            {
                m_pictureBox.Image.Dispose();
                m_pictureBox.Image = null;
            }
        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ConsultasForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="contextMenuStripConsultaDocs.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>39</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIActividades/ControloBalcaoAcoes.Designer.cs
﻿namespace CIActividades
{
    partial class ControloBalcaoAcoes
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.controloBalcaoAcoesEnable(true);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.listViewRegistosCompensacao = new NBIISNET.ListViewBase();
            this.colCompRemData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompProcTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompRemBalcao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompRemNumero = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompDepNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompRemEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompDocId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompZib = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompNumeroConta = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompNumeroCheque = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompMontante = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompTipoCheque = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompContaNib = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompRefArq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompRefarqOri = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompCodAna = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompCancelamento = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompCancelamentoID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompNotificacao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompNotifID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colCompChaveH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.labelDataDe = new System.Windows.Forms.Label();
            this.labelDataAte = new System.Windows.Forms.Label();
            this.labelBalcao = new System.Windows.Forms.Label();
            this.labelTipoRemessa = new System.Windows.Forms.Label();
            this.labelRemessa = new System.Windows.Forms.Label();
            this.labelDeposito = new System.Windows.Forms.Label();
            this.textBoxBalcao = new System.Windows.Forms.TextBox();
            this.textBoxRemessa = new System.Windows.Forms.TextBox();
            this.textBoxDeposito = new System.Windows.Forms.TextBox();
            this.comboBoxTipoRemessa = new System.Windows.Forms.ComboBox();
            this.dateTimePickerDe = new System.Windows.Forms.DateTimePicker();
            this.dateTimePickerAte = new System.Windows.Forms.DateTimePicker();
            this.buttonRefreshCompensacao = new System.Windows.Forms.Button();
            this.buttonCancelamentoAcolhimento = new System.Windows.Forms.Button();
            this.buttonNotificaAcolhimentoForaPrazo = new System.Windows.Forms.Button();
            this.lblRegEnviados = new System.Windows.Forms.Label();
            this.labelRegistoEmAnalise = new System.Windows.Forms.Label();
            this.listViewRegistosAnalise = new NBIISNET.ListViewBase();
            this.colAnaRemData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colAnaProcTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colAnaRemBalcao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colAnaRemNumero = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colAnaDepNum = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colAnaRemEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.clmTpRemessa = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.clmTipo = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripAnalise = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.anulaCancelamentoDeAcolhimentoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.buttonRefreshAnalise = new System.Windows.Forms.Button();
            this.btnClear = new System.Windows.Forms.Button();
            this.spContAccoes = new System.Windows.Forms.SplitContainer();
            this.contextMenuStripAnalise.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContAccoes)).BeginInit();
            this.spContAccoes.Panel1.SuspendLayout();
            this.spContAccoes.Panel2.SuspendLayout();
            this.spContAccoes.SuspendLayout();
            this.SuspendLayout();
            // 
            // listViewRegistosCompensacao
            // 
            this.listViewRegistosCompensacao.AllowColumnReorder = true;
            this.listViewRegistosCompensacao.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewRegistosCompensacao.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colCompRemData,
            this.colCompProcTimer,
            this.colCompRemBalcao,
            this.colCompRemNumero,
            this.colCompDepNum,
            this.colCompRemEstado,
            this.colCompDocId,
            this.colCompZib,
            this.colCompNumeroConta,
            this.colCompNumeroCheque,
            this.colCompMontante,
            this.colCompTipoCheque,
            this.colCompContaNib,
            this.colCompRefArq,
            this.colCompRefarqOri,
            this.colCompCodAna,
            this.colCompCancelamento,
            this.colCompCancelamentoID,
            this.colCompNotificacao,
            this.colCompNotifID,
            this.colCompChaveH});
            this.listViewRegistosCompensacao.EnableExportar = true;
            this.listViewRegistosCompensacao.FullRowSelect = true;
            this.listViewRegistosCompensacao.GridLines = true;
            this.listViewRegistosCompensacao.HideSelection = false;
            this.listViewRegistosCompensacao.Location = new System.Drawing.Point(0, 16);
            this.listViewRegistosCompensacao.Name = "listViewRegistosCompensacao";
            this.listViewRegistosCompensacao.Size = new System.Drawing.Size(922, 273);
            this.listViewRegistosCompensacao.TabIndex = 6;
            this.listViewRegistosCompensacao.TabStop = false;
            this.listViewRegistosCompensacao.UseCompatibleStateImageBehavior = false;
            this.listViewRegistosCompensacao.View = System.Windows.Forms.View.Details;
            // 
            // colCompRemData
            // 
            this.colCompRemData.Text = "Rem. Data";
            this.colCompRemData.Width = 66;
            // 
            // colCompProcTimer
            // 
            this.colCompProcTimer.Text = "Proc. Timer";
            this.colCompProcTimer.Width = 66;
            // 
            // colCompRemBalcao
            // 
            this.colCompRemBalcao.Text = "Rem. Balcão";
            this.colCompRemBalcao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompRemBalcao.Width = 73;
            // 
            // colCompRemNumero
            // 
            this.colCompRemNumero.Text = "Rem. Número";
            this.colCompRemNumero.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompRemNumero.Width = 80;
            // 
            // colCompDepNum
            // 
            this.colCompDepNum.Text = "Dep. Número";
            this.colCompDepNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompDepNum.Width = 77;
            // 
            // colCompRemEstado
            // 
            this.colCompRemEstado.Text = "Rem. Estado";
            this.colCompRemEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompRemEstado.Width = 74;
            // 
            // colCompDocId
            // 
            this.colCompDocId.Text = "Doc Id";
            this.colCompDocId.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompDocId.Width = 50;
            // 
            // colCompZib
            // 
            this.colCompZib.Text = "ZIB";
            this.colCompZib.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompZib.Width = 50;
            // 
            // colCompNumeroConta
            // 
            this.colCompNumeroConta.Text = "N. Conta";
            this.colCompNumeroConta.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colCompNumeroCheque
            // 
            this.colCompNumeroCheque.Text = "N. Cheque";
            this.colCompNumeroCheque.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompNumeroCheque.Width = 100;
            // 
            // colCompMontante
            // 
            this.colCompMontante.Text = "Montante";
            this.colCompMontante.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.colCompMontante.Width = 100;
            // 
            // colCompTipoCheque
            // 
            this.colCompTipoCheque.Text = "Tp";
            this.colCompTipoCheque.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompTipoCheque.Width = 40;
            // 
            // colCompContaNib
            // 
            this.colCompContaNib.Text = "Conta/NIB";
            this.colCompContaNib.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colCompRefArq
            // 
            this.colCompRefArq.Text = "RefArq";
            this.colCompRefArq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colCompRefarqOri
            // 
            this.colCompRefarqOri.Text = "RefarqOri";
            this.colCompRefarqOri.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colCompCodAna
            // 
            this.colCompCodAna.Text = "CodAna";
            this.colCompCodAna.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colCompCancelamento
            // 
            this.colCompCancelamento.Text = "Cancelamento";
            this.colCompCancelamento.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompCancelamento.Width = 70;
            // 
            // colCompCancelamentoID
            // 
            this.colCompCancelamentoID.Text = "Cancelamento ID";
            this.colCompCancelamentoID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colCompCancelamentoID.Width = 70;
            // 
            // colCompNotificacao
            // 
            this.colCompNotificacao.Text = "Notificação";
            this.colCompNotificacao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colCompNotifID
            // 
            this.colCompNotifID.Text = "Notif ID";
            this.colCompNotifID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // colCompChaveH
            // 
            this.colCompChaveH.Text = "ChaveH";
            this.colCompChaveH.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // labelDataDe
            // 
            this.labelDataDe.AutoSize = true;
            this.labelDataDe.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelDataDe.Location = new System.Drawing.Point(12, 29);
            this.labelDataDe.Name = "labelDataDe";
            this.labelDataDe.Size = new System.Drawing.Size(27, 13);
            this.labelDataDe.TabIndex = 7;
            this.labelDataDe.Text = "De:";
            // 
            // labelDataAte
            // 
            this.labelDataAte.AutoSize = true;
            this.labelDataAte.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelDataAte.Location = new System.Drawing.Point(222, 30);
            this.labelDataAte.Name = "labelDataAte";
            this.labelDataAte.Size = new System.Drawing.Size(18, 13);
            this.labelDataAte.TabIndex = 8;
            this.labelDataAte.Text = "a:";
            // 
            // labelBalcao
            // 
            this.labelBalcao.AutoSize = true;
            this.labelBalcao.Location = new System.Drawing.Point(626, 11);
            this.labelBalcao.Name = "labelBalcao";
            this.labelBalcao.Size = new System.Drawing.Size(40, 13);
            this.labelBalcao.TabIndex = 9;
            this.labelBalcao.Text = "Balcão";
            // 
            // labelTipoRemessa
            // 
            this.labelTipoRemessa.AutoSize = true;
            this.labelTipoRemessa.Location = new System.Drawing.Point(423, 10);
            this.labelTipoRemessa.Name = "labelTipoRemessa";
            this.labelTipoRemessa.Size = new System.Drawing.Size(75, 13);
            this.labelTipoRemessa.TabIndex = 10;
            this.labelTipoRemessa.Text = "Tipo Remessa";
            // 
            // labelRemessa
            // 
            this.labelRemessa.AutoSize = true;
            this.labelRemessa.Location = new System.Drawing.Point(672, 11);
            this.labelRemessa.Name = "labelRemessa";
            this.labelRemessa.Size = new System.Drawing.Size(51, 13);
            this.labelRemessa.TabIndex = 11;
            this.labelRemessa.Text = "Remessa";
            // 
            // labelDeposito
            // 
            this.labelDeposito.AutoSize = true;
            this.labelDeposito.Location = new System.Drawing.Point(740, 11);
            this.labelDeposito.Name = "labelDeposito";
            this.labelDeposito.Size = new System.Drawing.Size(49, 13);
            this.labelDeposito.TabIndex = 12;
            this.labelDeposito.Text = "Depósito";
            // 
            // textBoxBalcao
            // 
            this.textBoxBalcao.Location = new System.Drawing.Point(629, 27);
            this.textBoxBalcao.MaxLength = 4;
            this.textBoxBalcao.Name = "textBoxBalcao";
            this.textBoxBalcao.Size = new System.Drawing.Size(37, 20);
            this.textBoxBalcao.TabIndex = 4;
            this.textBoxBalcao.TextChanged += new System.EventHandler(this.textBoxBalcao_TextChanged);
            this.textBoxBalcao.Leave += new System.EventHandler(this.textBoxBalcao_Leave);
            // 
            // textBoxRemessa
            // 
            this.textBoxRemessa.Enabled = false;
            this.textBoxRemessa.Location = new System.Drawing.Point(672, 27);
            this.textBoxRemessa.MaxLength = 7;
            this.textBoxRemessa.Name = "textBoxRemessa";
            this.textBoxRemessa.Size = new System.Drawing.Size(65, 20);
            this.textBoxRemessa.TabIndex = 5;
            this.textBoxRemessa.TextChanged += new System.EventHandler(this.textBoxRemessa_TextChanged);
            this.textBoxRemessa.Leave += new System.EventHandler(this.textBoxRemessa_Leave);
            // 
            // textBoxDeposito
            // 
            this.textBoxDeposito.Enabled = false;
            this.textBoxDeposito.Location = new System.Drawing.Point(743, 27);
            this.textBoxDeposito.MaxLength = 7;
            this.textBoxDeposito.Name = "textBoxDeposito";
            this.textBoxDeposito.Size = new System.Drawing.Size(65, 20);
            this.textBoxDeposito.TabIndex = 6;
            this.textBoxDeposito.TextChanged += new System.EventHandler(this.textBoxDeposito_TextChanged);
            this.textBoxDeposito.Leave += new System.EventHandler(this.textBoxDeposito_Leave);
            // 
            // comboBoxTipoRemessa
            // 
            this.comboBoxTipoRemessa.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboBoxTipoRemessa.Location = new System.Drawing.Point(426, 26);
            this.comboBoxTipoRemessa.Name = "comboBoxTipoRemessa";
            this.comboBoxTipoRemessa.Size = new System.Drawing.Size(197, 21);
            this.comboBoxTipoRemessa.TabIndex = 3;
            this.comboBoxTipoRemessa.SelectedIndexChanged += new System.EventHandler(this.comboBoxTipoRemessa_SelectedIndexChanged);
            // 
            // dateTimePickerDe
            // 
            this.dateTimePickerDe.CustomFormat = " dddd - yyyy-MM-dd";
            this.dateTimePickerDe.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dateTimePickerDe.Location = new System.Drawing.Point(40, 27);
            this.dateTimePickerDe.Name = "dateTimePickerDe";
            this.dateTimePickerDe.Size = new System.Drawing.Size(176, 20);
            this.dateTimePickerDe.TabIndex = 1;
            this.dateTimePickerDe.ValueChanged += new System.EventHandler(this.dateTimePickerDe_ValueChanged);
            // 
            // dateTimePickerAte
            // 
            this.dateTimePickerAte.CustomFormat = " dddd - yyyy-MM-dd";
            this.dateTimePickerAte.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dateTimePickerAte.Location = new System.Drawing.Point(246, 26);
            this.dateTimePickerAte.Name = "dateTimePickerAte";
            this.dateTimePickerAte.Size = new System.Drawing.Size(174, 20);
            this.dateTimePickerAte.TabIndex = 2;
            this.dateTimePickerAte.ValueChanged += new System.EventHandler(this.dateTimePickerAte_ValueChanged);
            // 
            // buttonRefreshCompensacao
            // 
            this.buttonRefreshCompensacao.Location = new System.Drawing.Point(426, 52);
            this.buttonRefreshCompensacao.Name = "buttonRefreshCompensacao";
            this.buttonRefreshCompensacao.Size = new System.Drawing.Size(75, 23);
            this.buttonRefreshCompensacao.TabIndex = 7;
            this.buttonRefreshCompensacao.Text = "Refresh";
            this.buttonRefreshCompensacao.UseVisualStyleBackColor = true;
            this.buttonRefreshCompensacao.Click += new System.EventHandler(this.buttonRefreshCompensacao_Click);
            // 
            // buttonCancelamentoAcolhimento
            // 
            this.buttonCancelamentoAcolhimento.Enabled = false;
            this.buttonCancelamentoAcolhimento.Location = new System.Drawing.Point(40, 52);
            this.buttonCancelamentoAcolhimento.Name = "buttonCancelamentoAcolhimento";
            this.buttonCancelamentoAcolhimento.Size = new System.Drawing.Size(176, 23);
            this.buttonCancelamentoAcolhimento.TabIndex = 9;
            this.buttonCancelamentoAcolhimento.Text = "Cancelamento Acolhimento";
            this.buttonCancelamentoAcolhimento.UseVisualStyleBackColor = true;
            this.buttonCancelamentoAcolhimento.Click += new System.EventHandler(this.buttonCancelamentoAcolhimento_Click);
            // 
            // buttonNotificaAcolhimentoForaPrazo
            // 
            this.buttonNotificaAcolhimentoForaPrazo.Enabled = false;
            this.buttonNotificaAcolhimentoForaPrazo.Location = new System.Drawing.Point(246, 52);
            this.buttonNotificaAcolhimentoForaPrazo.Name = "buttonNotificaAcolhimentoForaPrazo";
            this.buttonNotificaAcolhimentoForaPrazo.Size = new System.Drawing.Size(174, 23);
            this.buttonNotificaAcolhimentoForaPrazo.TabIndex = 10;
            this.buttonNotificaAcolhimentoForaPrazo.Text = "Notifica Acolh. Fora Prazo";
            this.buttonNotificaAcolhimentoForaPrazo.UseVisualStyleBackColor = true;
            this.buttonNotificaAcolhimentoForaPrazo.Click += new System.EventHandler(this.buttonNotificaAcolhimentoForaPrazo_Click);
            // 
            // lblRegEnviados
            // 
            this.lblRegEnviados.AutoSize = true;
            this.lblRegEnviados.Location = new System.Drawing.Point(0, 0);
            this.lblRegEnviados.Name = "lblRegEnviados";
            this.lblRegEnviados.Size = new System.Drawing.Size(176, 13);
            this.lblRegEnviados.TabIndex = 24;
            this.lblRegEnviados.Text = "Registos enviados à compensação ";
            // 
            // labelRegistoEmAnalise
            // 
            this.labelRegistoEmAnalise.AutoSize = true;
            this.labelRegistoEmAnalise.Location = new System.Drawing.Point(3, 8);
            this.labelRegistoEmAnalise.Name = "labelRegistoEmAnalise";
            this.labelRegistoEmAnalise.Size = new System.Drawing.Size(101, 13);
            this.labelRegistoEmAnalise.TabIndex = 25;
            this.labelRegistoEmAnalise.Text = "Registos em análise";
            // 
            // listViewRegistosAnalise
            // 
            this.listViewRegistosAnalise.AllowColumnReorder = true;
            this.listViewRegistosAnalise.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewRegistosAnalise.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.colAnaRemData,
            this.colAnaProcTimer,
            this.colAnaRemBalcao,
            this.colAnaRemNumero,
            this.colAnaDepNum,
            this.colAnaRemEstado,
            this.clmTpRemessa,
            this.clmTipo});
            this.listViewRegistosAnalise.ContextMenuStrip = this.contextMenuStripAnalise;
            this.listViewRegistosAnalise.EnableExportar = true;
            this.listViewRegistosAnalise.FullRowSelect = true;
            this.listViewRegistosAnalise.GridLines = true;
            this.listViewRegistosAnalise.HideSelection = false;
            this.listViewRegistosAnalise.Location = new System.Drawing.Point(0, 32);
            this.listViewRegistosAnalise.Name = "listViewRegistosAnalise";
            this.listViewRegistosAnalise.Size = new System.Drawing.Size(922, 182);
            this.listViewRegistosAnalise.TabIndex = 26;
            this.listViewRegistosAnalise.TabStop = false;
            this.listViewRegistosAnalise.UseCompatibleStateImageBehavior = false;
            this.listViewRegistosAnalise.View = System.Windows.Forms.View.Details;
            // 
            // colAnaRemData
            // 
            this.colAnaRemData.Text = "Rem. Data";
            this.colAnaRemData.Width = 72;
            // 
            // colAnaProcTimer
            // 
            this.colAnaProcTimer.Text = "Proc. Timer";
            this.colAnaProcTimer.Width = 72;
            // 
            // colAnaRemBalcao
            // 
            this.colAnaRemBalcao.Text = "Rem. Balcão";
            this.colAnaRemBalcao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colAnaRemBalcao.Width = 74;
            // 
            // colAnaRemNumero
            // 
            this.colAnaRemNumero.Text = "Rem. Número";
            this.colAnaRemNumero.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colAnaRemNumero.Width = 88;
            // 
            // colAnaDepNum
            // 
            this.colAnaDepNum.Text = "Dep. Número";
            this.colAnaDepNum.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colAnaDepNum.Width = 79;
            // 
            // colAnaRemEstado
            // 
            this.colAnaRemEstado.Text = "Rem. Estado";
            this.colAnaRemEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.colAnaRemEstado.Width = 150;
            // 
            // clmTpRemessa
            // 
            this.clmTpRemessa.Text = "Tipo Remessa";
            this.clmTpRemessa.Width = 150;
            // 
            // clmTipo
            // 
            this.clmTipo.Text = "Ação";
            this.clmTipo.Width = 135;
            // 
            // contextMenuStripAnalise
            // 
            this.contextMenuStripAnalise.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem,
            this.anulaCancelamentoDeAcolhimentoToolStripMenuItem,
            this.toolStripSeparator1,
            this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem,
            this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem});
            this.contextMenuStripAnalise.Name = "contextMenuStripAnalise";
            this.contextMenuStripAnalise.Size = new System.Drawing.Size(335, 98);
            this.contextMenuStripAnalise.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripAnalise_Opening);
            // 
            // confirmaCancelamentoDeAcolhimentoToolStripMenuItem
            // 
            this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem.Name = "confirmaCancelamentoDeAcolhimentoToolStripMenuItem";
            this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem.Size = new System.Drawing.Size(334, 22);
            this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem.Text = "Confirma Cancelamento de Acolhimento";
            this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem.Click += new System.EventHandler(this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem_Click);
            // 
            // anulaCancelamentoDeAcolhimentoToolStripMenuItem
            // 
            this.anulaCancelamentoDeAcolhimentoToolStripMenuItem.Name = "anulaCancelamentoDeAcolhimentoToolStripMenuItem";
            this.anulaCancelamentoDeAcolhimentoToolStripMenuItem.Size = new System.Drawing.Size(334, 22);
            this.anulaCancelamentoDeAcolhimentoToolStripMenuItem.Text = "Anula Cancelamento de Acolhimento";
            this.anulaCancelamentoDeAcolhimentoToolStripMenuItem.Click += new System.EventHandler(this.anulaCancelamentoDeAcolhimentoToolStripMenuItem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(331, 6);
            // 
            // confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem
            // 
            this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Name = "confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem";
            this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Size = new System.Drawing.Size(334, 22);
            this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Text = "Confirma Notificação de Acolhimento Fora Prazo";
            this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Click += new System.EventHandler(this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click);
            // 
            // anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem
            // 
            this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Name = "anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem";
            this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Size = new System.Drawing.Size(334, 22);
            this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Text = "Anula Notificação de Acolhimento Fora Prazo";
            this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Click += new System.EventHandler(this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click);
            // 
            // buttonRefreshAnalise
            // 
            this.buttonRefreshAnalise.Location = new System.Drawing.Point(120, 3);
            this.buttonRefreshAnalise.Name = "buttonRefreshAnalise";
            this.buttonRefreshAnalise.Size = new System.Drawing.Size(75, 23);
            this.buttonRefreshAnalise.TabIndex = 8;
            this.buttonRefreshAnalise.Text = "Refresh";
            this.buttonRefreshAnalise.UseVisualStyleBackColor = true;
            this.buttonRefreshAnalise.Click += new System.EventHandler(this.buttonRefreshAnalise_Click);
            // 
            // btnClear
            // 
            this.btnClear.Location = new System.Drawing.Point(507, 52);
            this.btnClear.Name = "btnClear";
            this.btnClear.Size = new System.Drawing.Size(78, 23);
            this.btnClear.TabIndex = 27;
            this.btnClear.Text = "Limpar Filtros";
            this.btnClear.UseVisualStyleBackColor = true;
            this.btnClear.Click += new System.EventHandler(this.btnClear_Click);
            // 
            // spContAccoes
            // 
            this.spContAccoes.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.spContAccoes.Location = new System.Drawing.Point(12, 81);
            this.spContAccoes.Name = "spContAccoes";
            this.spContAccoes.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // spContAccoes.Panel1
            // 
            this.spContAccoes.Panel1.Controls.Add(this.lblRegEnviados);
            this.spContAccoes.Panel1.Controls.Add(this.listViewRegistosCompensacao);
            // 
            // spContAccoes.Panel2
            // 
            this.spContAccoes.Panel2.Controls.Add(this.labelRegistoEmAnalise);
            this.spContAccoes.Panel2.Controls.Add(this.buttonRefreshAnalise);
            this.spContAccoes.Panel2.Controls.Add(this.listViewRegistosAnalise);
            this.spContAccoes.Size = new System.Drawing.Size(922, 509);
            this.spContAccoes.SplitterDistance = 288;
            this.spContAccoes.TabIndex = 28;
            // 
            // ControloBalcaoAcoes
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(940, 602);
            this.Controls.Add(this.spContAccoes);
            this.Controls.Add(this.btnClear);
            this.Controls.Add(this.buttonNotificaAcolhimentoForaPrazo);
            this.Controls.Add(this.buttonCancelamentoAcolhimento);
            this.Controls.Add(this.buttonRefreshCompensacao);
            this.Controls.Add(this.dateTimePickerAte);
            this.Controls.Add(this.dateTimePickerDe);
            this.Controls.Add(this.comboBoxTipoRemessa);
            this.Controls.Add(this.textBoxDeposito);
            this.Controls.Add(this.textBoxRemessa);
            this.Controls.Add(this.textBoxBalcao);
            this.Controls.Add(this.labelDeposito);
            this.Controls.Add(this.labelRemessa);
            this.Controls.Add(this.labelTipoRemessa);
            this.Controls.Add(this.labelBalcao);
            this.Controls.Add(this.labelDataAte);
            this.Controls.Add(this.labelDataDe);
            this.Name = "ControloBalcaoAcoes";
            this.Text = "Controlo Balcão - Ações";
            this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            this.Load += new System.EventHandler(this.ControloBalcaoAcoes_Load);
            this.Click += new System.EventHandler(this.ControloBalcaoAcoes_Click);
            this.contextMenuStripAnalise.ResumeLayout(false);
            this.spContAccoes.Panel1.ResumeLayout(false);
            this.spContAccoes.Panel1.PerformLayout();
            this.spContAccoes.Panel2.ResumeLayout(false);
            this.spContAccoes.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.spContAccoes)).EndInit();
            this.spContAccoes.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private NBIISNET.ListViewBase listViewRegistosCompensacao;
        private System.Windows.Forms.ColumnHeader colCompRemData;
        private System.Windows.Forms.ColumnHeader colCompProcTimer;
        private System.Windows.Forms.ColumnHeader colCompRemBalcao;
        private System.Windows.Forms.ColumnHeader colCompRemNumero;
        private System.Windows.Forms.ColumnHeader colCompDepNum;
        private System.Windows.Forms.ColumnHeader colCompRemEstado;
        private System.Windows.Forms.ColumnHeader colCompDocId;
        private System.Windows.Forms.Label labelDataDe;
        private System.Windows.Forms.Label labelDataAte;
        private System.Windows.Forms.Label labelBalcao;
        private System.Windows.Forms.Label labelTipoRemessa;
        private System.Windows.Forms.Label labelRemessa;
        private System.Windows.Forms.Label labelDeposito;
        private System.Windows.Forms.TextBox textBoxBalcao;
        private System.Windows.Forms.TextBox textBoxRemessa;
        private System.Windows.Forms.TextBox textBoxDeposito;
        private System.Windows.Forms.ComboBox comboBoxTipoRemessa;
        private System.Windows.Forms.DateTimePicker dateTimePickerDe;
        private System.Windows.Forms.DateTimePicker dateTimePickerAte;
        private System.Windows.Forms.Button buttonRefreshCompensacao;
        private System.Windows.Forms.Button buttonCancelamentoAcolhimento;
        private System.Windows.Forms.Button buttonNotificaAcolhimentoForaPrazo;
        private System.Windows.Forms.Label lblRegEnviados;
        private System.Windows.Forms.ColumnHeader colCompZib;
        private System.Windows.Forms.ColumnHeader colCompNumeroConta;
        private System.Windows.Forms.ColumnHeader colCompNumeroCheque;
        private System.Windows.Forms.ColumnHeader colCompMontante;
        private System.Windows.Forms.ColumnHeader colCompTipoCheque;
        private System.Windows.Forms.ColumnHeader colCompContaNib;
        private System.Windows.Forms.ColumnHeader colCompRefArq;
        private System.Windows.Forms.ColumnHeader colCompRefarqOri;
        private System.Windows.Forms.ColumnHeader colCompCodAna;
        private System.Windows.Forms.ColumnHeader colCompCancelamento;
        private System.Windows.Forms.ColumnHeader colCompCancelamentoID;
        private System.Windows.Forms.ColumnHeader colCompNotificacao;
        private System.Windows.Forms.ColumnHeader colCompNotifID;
        private System.Windows.Forms.ColumnHeader colCompChaveH;
        private System.Windows.Forms.Label labelRegistoEmAnalise;
        private NBIISNET.ListViewBase listViewRegistosAnalise;
        private System.Windows.Forms.ColumnHeader colAnaRemData;
        private System.Windows.Forms.ColumnHeader colAnaProcTimer;
        private System.Windows.Forms.ColumnHeader colAnaRemBalcao;
        private System.Windows.Forms.ColumnHeader colAnaRemNumero;
        private System.Windows.Forms.ColumnHeader colAnaDepNum;
        private System.Windows.Forms.ColumnHeader colAnaRemEstado;
        private System.Windows.Forms.Button buttonRefreshAnalise;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripAnalise;
        private System.Windows.Forms.ToolStripMenuItem confirmaCancelamentoDeAcolhimentoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem anulaCancelamentoDeAcolhimentoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ColumnHeader clmTpRemessa;
        private System.Windows.Forms.ColumnHeader clmTipo;
        private System.Windows.Forms.Button btnClear;
        private System.Windows.Forms.SplitContainer spContAccoes;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ControloBalcaoAcoes.cs
﻿using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Windows.Forms;
using CIConfigGlobalParameters;
using NBiis;
using NBiis.Generic;

namespace CIActividades
{
    public enum Tipo_Agrupador
    {
        Balcao_E_TipoRemessa = 1,
        Balcao_E_Remessa = 2,
        Balcao_E_Deposito = 3,
        Balcao_E_Documento = 4
    }

    public partial class ControloBalcaoAcoes : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public CIMenuInterface m_oMenuInterface;

        #region Variables

        //FILTROS
        private Int32 _filtro_TipoAgrupador;
        private Int32 _filtro_Balcao;
        private Int32 _filtro_TipoRemessa;
        private Int32 _filtro_Remessa;
        private Int32 _filtro_Deposito;
        private Int32 _updateRowsInList = 0;

        #endregion Variables
        private Boolean _IsLoad = true;
        private const String _SP_CONFIRMA_CANCELAMENTO_AGR_ = "[dbo].[Update_ConfirmaTibcoCancelaEnvioDocumentoAGR]";
        private const String _SP_ANULA_CANCELAMENTO_AGR_ = "[dbo].[Delete_TibcoCancelaEnvioDocumentoAGR]";
        private const String _SP_CONFIRMA_NOTIFICACAO_AGR_ = "[dbo].[Update_ConfirmaTibcoNotificaEnvioDocumentoForaPrazoAGR]";
        private const String _SP_ANULA_NOTIFICACAO_AGR_ = "[dbo].[Delete_TibcoNotificaEnvioDocumentoForaPrazoAGR]";

        public ControloBalcaoAcoes(CIConfigGP.CIGlobalParameters oParameters, CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        private void ControloBalcaoAcoes_Load(object sender, EventArgs e)
        {
            FillComboBoxTipoRemessa();
            RefreshListAnalise();
            this._filtro_TipoAgrupador = 0;
            this._filtro_Balcao = 0;
            this._filtro_TipoRemessa = 0;
            this._filtro_Remessa = 0;
            this._filtro_Deposito = 0;
            this.WindowState = FormWindowState.Maximized;
            this._IsLoad = false;
            this._updateRowsInList = 0;
            m_oMenuInterface.controloBalcaoAcoesEnable(false);
        }

        private void FillComboBoxTipoRemessa()
        {
            DataSet ds = null;

            if (comboBoxTipoRemessa.Items.Count == 0)
            {
                try
                {
                    String query = "SELECT [REMTIPOBALCAO_ID], CAST([REMTIPOBALCAO_ID] AS VARCHAR(2)) + ' - ' + [REMTIPOBALCAO_ABR] AS 'REMTIPOBALCAO_ABR' FROM [dbo].[REMESSA_TIPO_BALCAO]";
                    ds = m_oParameters.DirectSqlDataSet(query, "REMESSA_TIPO_BALCAO");
                    if (ds != null)
                    {
                        DataRow dr = ds.Tables["REMESSA_TIPO_BALCAO"].NewRow();
                        dr["REMTIPOBALCAO_ID"] = "0";
                        dr["REMTIPOBALCAO_ABR"] = "Todos";
                        ds.Tables["REMESSA_TIPO_BALCAO"].Rows.InsertAt(dr, 0);
                        comboBoxTipoRemessa.DataSource = ds.Tables["REMESSA_TIPO_BALCAO"];
                        comboBoxTipoRemessa.ValueMember = "REMTIPOBALCAO_ID";
                        comboBoxTipoRemessa.DisplayMember = "REMTIPOBALCAO_ABR";
                    }
                    else
                    {
                        MessageBox.Show("Não foi possível carregar os Tipos de Remessa.");
                    }
                }
                catch (Exception e)
                {
                    MessageBox.Show("Erro ao carregar os Tipos de Remessa. " + e.Message);
                }
                finally
                {
                    if (ds != null)
                    {
                        ds.Dispose();
                        ds = null;
                    }
                }
            }
        }

        #region ButtonsEvents

        private void buttonRefreshCompensacao_Click(object sender, EventArgs e)
        {
            this.RefreshListCompensacao();
            this.ShowCancelamentoENotificacaoButtons();
        }

        private void buttonRefreshAnalise_Click(object sender, EventArgs e)
        {
            this.RefreshListAnalise();
        }

        private void buttonNotificaAcolhimentoForaPrazo_Click(object sender, EventArgs e)
        {
            this.Insert_Notificacao();
        }

        private void buttonCancelamentoAcolhimento_Click(object sender, EventArgs e)
        {
            this.Insert_Cancelamento();
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            this._updateRowsInList = 0;
            this.labelRegistoEmAnalise.Text = "Registos em análise";
            this.lblRegEnviados.Text = "Registos enviados à compensação";
            this._filtro_TipoAgrupador = 0;
            this._filtro_Balcao = 0;
            this._filtro_TipoRemessa = 0;
            this._filtro_Remessa = 0;
            this._filtro_Deposito = 0;
            this.comboBoxTipoRemessa.SelectedIndex = 0;
            this.textBoxBalcao.Text = String.Empty;
            this.textBoxRemessa.Text = String.Empty;
            this.textBoxDeposito.Text = String.Empty;
            this.textBoxRemessa.Enabled = false;
            this.textBoxDeposito.Enabled = false;
            this.dateTimePickerAte.Value = DateTime.Now.Date;
            this.dateTimePickerDe.Value = DateTime.Now.Date;
            this.buttonCancelamentoAcolhimento.Enabled = false;
            this.buttonNotificaAcolhimentoForaPrazo.Enabled = false;
            this.listViewRegistosCompensacao.MyClear();
            this.RefreshListAnalise();
        }

        #endregion ButtonsEvents

        #region TextBoxEvents
        private void textBoxRemessa_Leave(object sender, EventArgs e)
        {
            this.ResetScreen();
            this.PaddTextbox(this.textBoxRemessa, 6, '0');
            this.EnableTxtFiltros();
        }

        private void textBoxDeposito_Leave(object sender, EventArgs e)
        {
            this.ResetScreen();
            this.PaddTextbox(this.textBoxDeposito, 7, '0');
        }

        private void textBoxBalcao_Leave(object sender, EventArgs e)
        {
            this.ResetScreen();
            this.PaddTextbox(this.textBoxBalcao, 4, '0');
            this.EnableTxtFiltros();
        }

        private void textBoxBalcao_TextChanged(object sender, EventArgs e)
        {
            TextBox tb = (TextBox)sender;
            if (!FieldIsNumeric(tb.Text))
            {
                textBoxBalcao.Text = textBoxBalcao.Text.Remove(textBoxBalcao.Text.Length - 1);
            }
        }

        private Boolean FieldIsNumeric(String text)
        {
            int result = 0;
            if (int.TryParse(text, out result) || text.Equals(""))
                return true;
            else
                return false;
        }

        /// <summary>
        /// Define se o filtro seguinte ficará disponível ou não para edição.
        /// Só se pode pesquisar por remessa se tivermos o balcão preenchido e por depósito se tivermos a remessa preenchida.
        /// </summary>
        private void EnableTxtFiltros()
        {
            if (!String.IsNullOrEmpty(this.textBoxBalcao.Text))
            {
                this.textBoxRemessa.Enabled = true;
            }
            else
            {
                this.textBoxRemessa.Enabled = false;
            }
            if (!String.IsNullOrEmpty(this.textBoxRemessa.Text))
            {
                this.textBoxDeposito.Enabled = true;
            }
            else
            {
                this.textBoxDeposito.Enabled = false;
            }
        }

        private void PaddTextbox(TextBox txtBox, Int32 padNumber, Char padChar)
        {
            if (!txtBox.Text.Trim().Equals(String.Empty))
                txtBox.Text = txtBox.Text.Trim().PadLeft(padNumber, padChar);
        }

        private void textBoxDeposito_TextChanged(object sender, EventArgs e)
        {
            TextBox tb = (TextBox)sender;
            if (!FieldIsNumeric(tb.Text))
            {
                textBoxDeposito.Text = textBoxDeposito.Text.Remove(textBoxDeposito.Text.Length - 1);
            }
        }

        private void textBoxRemessa_TextChanged(object sender, EventArgs e)
        {
            TextBox tb = (TextBox)sender;
            if (!FieldIsNumeric(tb.Text))
            {
                textBoxRemessa.Text = textBoxRemessa.Text.Remove(textBoxRemessa.Text.Length - 1);
            }
        }

        #endregion TextBoxEvents

        #region cbEvents

        private void comboBoxTipoRemessa_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!this._IsLoad)
                this.ResetScreen();
        }
        #endregion cbEvents

        #region ToolStripEvents

        private void ControloBalcaoAcoes_Click(object sender, EventArgs e)
        {
            if (!_IsLoad)
            {
                this.EnableTxtFiltros();
            }
        }

        private void contextMenuStripAnalise_Opening(object sender, CancelEventArgs e)
        {
            if (this.listViewRegistosAnalise.SelectedItems.Count < 1)
            {
                EnabledMenuStripAnalise(false, null);
            }
            else
            {
                EnabledMenuStripAnalise(true, ((ListViewAgregacaoBalcaoAcoes)listViewRegistosAnalise.SelectedItems[0].Tag));
            }
        }

        private void EnabledMenuStripAnalise(Boolean enabled, ListViewAgregacaoBalcaoAcoes balcaoAccao)
        {
            if (balcaoAccao == null)
            {
                this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem.Enabled = enabled;
                this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Enabled = enabled;
                this.anulaCancelamentoDeAcolhimentoToolStripMenuItem.Enabled = enabled;
                this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Enabled = enabled;
            }
            else
            {
                if (balcaoAccao.sTipoAccao.Equals("Cancelamento"))
                {
                    this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem.Enabled = enabled;
                    this.anulaCancelamentoDeAcolhimentoToolStripMenuItem.Enabled = enabled;
                    this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Enabled = !enabled;
                    this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Enabled = !enabled;
                }
                else
                {
                    this.confirmaCancelamentoDeAcolhimentoToolStripMenuItem.Enabled = !enabled;
                    this.anulaCancelamentoDeAcolhimentoToolStripMenuItem.Enabled = !enabled;
                    this.confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Enabled = enabled;
                    this.anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem.Enabled = enabled;
                }
            }
        }

        private void confirmaCancelamentoDeAcolhimentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewRegistosAnalise.SelectedItems.Count < 1)
                return;
            try
            {
                for (int i = 0; i < listViewRegistosAnalise.SelectedItems.Count; i++)
                {
                    Int32 iAgregacaoID = ((ListViewAgregacaoBalcaoAcoes)listViewRegistosAnalise.SelectedItems[i].Tag).iAgregacaoID;
                    this.Confirm_TibcoCancelaEnvioDocumento(iAgregacaoID);
                    GenericLog.GenLogRegistarInfo("Confirmado o Cancelamento DocACOM", "confirmaCancelamentoDeAcolhimentoToolStripMenuItem_Click()", iAgregacaoID);
                }
                MessageBox.Show(this, "Cancelamento de Acolhimento confirmado.", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "confirmaCancelamentoDeAcolhimentoToolStripMenuItem_Click()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                this.RefreshLists();
            }
        }

        private void anulaCancelamentoDeAcolhimentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewRegistosAnalise.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewRegistosAnalise.SelectedItems.Count; i++)
                {
                    Int32 iAgregacaoID = ((ListViewAgregacaoBalcaoAcoes)listViewRegistosAnalise.SelectedItems[i].Tag).iAgregacaoID;
                    this.Delete_TibcoCancelaEnvioDocumento(iAgregacaoID);
                    GenericLog.GenLogRegistarInfo("Anulado o Cancelamento DocACOM", "anulaCancelamentoDeAcolhimentoToolStripMenuItem_Click()", iAgregacaoID);
                }
                MessageBox.Show(this, "Cancelamento de Acolhimento anulado.", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "anulaCancelamentoDeAcolhimentoToolStripMenuItem_Click()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                this.RefreshLists();
            }
        }

        private void confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewRegistosAnalise.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewRegistosAnalise.SelectedItems.Count; i++)
                {
                    Int32 iAgregacaoID = ((ListViewAgregacaoBalcaoAcoes)listViewRegistosAnalise.SelectedItems[i].Tag).iAgregacaoID;
                    this.Confirm_TibcoNotificaEnvioDocumentoForaPrazo(iAgregacaoID);
                    GenericLog.GenLogRegistarInfo("DocACOM Notifica Confirma", "confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click()", iAgregacaoID);
                }
                MessageBox.Show(this, "Notificação de envio de documentos fora de prazo confirmado.", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "confirmaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                this.RefreshLists();
            }
        }

        private void anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewRegistosAnalise.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewRegistosAnalise.SelectedItems.Count; i++)
                {
                    Int32 iAgregacaoID = ((ListViewAgregacaoBalcaoAcoes)listViewRegistosAnalise.SelectedItems[i].Tag).iAgregacaoID;
                    this.Delete_TibcoNotificaEnvioDocumentoForaPrazo(iAgregacaoID);
                    GenericLog.GenLogRegistarInfo("DocACOM Notifica Anula", "anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click()", iAgregacaoID);
                }
                MessageBox.Show(this, "Notificação de envio de documentos fora de prazo anulado.", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "anulaNotificaçãoDeAcolhimentoForaPrazoToolStripMenuItem_Click()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                this.RefreshLists();
            }
        }

        #endregion ToolStripEvents

        #region DatePickersEvents
        private void dateTimePickerDe_ValueChanged(object sender, EventArgs e)
        {
            this.ResetScreen();
        }

        private void dateTimePickerAte_ValueChanged(object sender, EventArgs e)
        {
            this.ResetScreen();
        }
        #endregion DatePickersEvents

        private void ShowCancelamentoENotificacaoButtons()
        {
            this.buttonCancelamentoAcolhimento.Enabled = false;
            this.buttonNotificaAcolhimentoForaPrazo.Enabled = false;
            DateTime fromDate = dateTimePickerDe.Value;
            DateTime toDate = dateTimePickerAte.Value;
            Int16 differenceBetweenDates = Convert.ToInt16((toDate - fromDate).TotalDays);
            if (textBoxBalcao.Text != "" && comboBoxTipoRemessa.Text != "Todos"
                && differenceBetweenDates == 0 && this.listViewRegistosCompensacao.Items.Count > 0)
            {
                buttonCancelamentoAcolhimento.Enabled = true;
                buttonNotificaAcolhimentoForaPrazo.Enabled = true;
                this.lblRegEnviados.Text = this.listViewRegistosCompensacao.Items.Count + " Registos enviados à compensação";
            }
        }

        private void ResetScreen()
        {
            this.buttonCancelamentoAcolhimento.Enabled = false;
            this.buttonNotificaAcolhimentoForaPrazo.Enabled = false;
        }

        /// <summary>
        /// Método que executa o carregamento em simultâneo das duas listas
        /// </summary>
        private void RefreshLists()
        {
            this.RefreshListAnalise();
            this.RefreshListCompensacao();
            this.ShowCancelamentoENotificacaoButtons();
        }

        private String Filtros()
        {
            String whereClause = "";

            if (dateTimePickerDe.Value.Date != dateTimePickerAte.Value.Date)
                whereClause += " REMBALCAO_DATA >= '" + dateTimePickerDe.Value.Date.ToString("yyyy-MM-dd") + "' AND REMBALCAO_DATA <= '" + dateTimePickerAte.Value.Date.ToString("yyyy-MM-dd") + "'";
            else
                whereClause += " REMBALCAO_DATA = '" + dateTimePickerDe.Value.Date.ToString("yyyy-MM-dd") + "'";

            if (!String.IsNullOrEmpty(textBoxBalcao.Text))
            {
                whereClause += " AND BALCAO = " + textBoxBalcao.Text;
                this._filtro_Balcao = Convert.ToInt32(textBoxBalcao.Text.Trim());
            }

            if (comboBoxTipoRemessa.Text != "Todos")
            {
                whereClause += " AND REM_BALC.REMBALCAO_TIPO_BALCAO_ID = " + comboBoxTipoRemessa.SelectedValue;
                this._filtro_TipoAgrupador = (int)Tipo_Agrupador.Balcao_E_TipoRemessa;
                this._filtro_TipoRemessa = Convert.ToInt32(comboBoxTipoRemessa.SelectedValue);
            }

            if (!String.IsNullOrEmpty(textBoxRemessa.Text))
            {
                whereClause += " AND REMBALCAO_NUMERO = " + textBoxRemessa.Text;
                this._filtro_TipoAgrupador = (int)Tipo_Agrupador.Balcao_E_Remessa;
                this._filtro_Remessa = Convert.ToInt32(textBoxRemessa.Text);
            }

            if (!String.IsNullOrEmpty(textBoxDeposito.Text))
            {
                whereClause += " AND REMBALCAO_SEQUENCIA = " + textBoxDeposito.Text;
                this._filtro_TipoAgrupador = (int)Tipo_Agrupador.Balcao_E_Deposito;
                this._filtro_Deposito = Convert.ToInt32(textBoxDeposito.Text);
            }
            return whereClause;
        }

        private void RefreshListCompensacao()
        {
            this._updateRowsInList = 0;
            listViewRegistosCompensacao.MyClear();
            SqlDataReader dr = null;
            StringBuilder strBuilder = new StringBuilder();
            //strBuilder.Append("SELECT REM_BALC.REMBALCAO_DATA, REM_BALC.REMBALCAO_TIMER, VIEW_ACOM.BALCAO, REM_BALC.REMBALCAO_NUMERO, ");
            //strBuilder.Append("REM_BALC.REMBALCAO_SEQUENCIA, REM_STAT.REMINSTAT_DESC, VIEW_ACOM.DOC_ID, VIEW_ACOM.DOCACOM_ZONA5, VIEW_ACOM.DOCACOM_ZONA4, ");
            //strBuilder.Append("VIEW_ACOM.DOCACOM_ZONA3, VIEW_ACOM.DOCACOM_ZONA2, VIEW_ACOM.DOCACOM_ZONA1, REM_BALC.REMBALCAO_NIB, VIEW_ACOM.REFARQ, ");
            //strBuilder.Append("VIEW_ACOM.REFARQ_ORI, CAST(VIEW_ACOM.DOCACOM_CODANA AS VARCHAR(2)) + ' - ' + VIEW_ACOM.ESTADO_DESC AS 'DOCACOM_CODANA', ");
            //strBuilder.Append("VIEW_ACOM.DOCACOM_CANCELADO, VIEW_ACOM.CANCELA_EFECTUADO, VIEW_ACOM.CANCEL_ESTADO, ");
            //strBuilder.Append("VIEW_ACOM.CANCELA_DESCRICAO, VIEW_ACOM.CANCELA_ERRO, VIEW_ACOM.DOCACOM_NOTIFICADO, VIEW_ACOM.NOTIFICA_EFECTUADO, ");
            //strBuilder.Append("VIEW_ACOM.NOTIFICA_ESTADO, VIEW_ACOM.NOTIFICA_DESCRICAO, VIEW_ACOM.NOTIFICA_ERRO, VIEW_ACOM.DOCACOM_CHAVEH, ");
            //strBuilder.Append("REM_BALC.REMBALCAO_TIPO_ID, VIEW_ACOM.DOCACOM_ID");
            //strBuilder.Append(" FROM dbo.VW_PESQ_DOCUMENTO_ACOM VIEW_ACOM ");
            //strBuilder.Append(" INNER JOIN DOCUMENTO_BALCAO DOC_BALC ON VIEW_ACOM.DOC_ID = DOC_BALC.ID");
            //strBuilder.Append(" INNER JOIN dbo.DOCUMENTO_ACOM ACOM ON acom.DOCACOM_ID = VIEW_ACOM.DOCACOM_ID");
            //strBuilder.Append(" INNER JOIN REMESSA_BALCAO REM_BALC ON DOC_BALC.REMBALCAO_ID = REM_BALC.ID");
            //strBuilder.Append(" INNER JOIN REMESSAIN_STATUS REM_STAT ON REM_BALC.REMBALCAO_STAT_ID = REM_STAT.REMINSTAT_ID");
            //strBuilder.Append(" INNER JOIN [SIBSP_ESTADO_DOCUMENTO_ACOM] AS ACOM_EST ON ACOM.DOCACOM_CODANA = ACOM_EST.ESTADO");
            //strBuilder.Append(" WHERE ((ACOM_EST.[I_CANCELA] = 'TRUE' AND ACOM.DOCACOM_CANCELADO IS NULL OR VIEW_ACOM.CANCELA_EFECTUADO = 99) OR ");
            //strBuilder.Append(" (ACOM_EST.[I_NOTIFICA] = 'TRUE' AND ACOM.DOCACOM_NOTIFICADO IS NULL OR VIEW_ACOM.NOTIFICA_EFECTUADO = 99))");
            //strBuilder.Append(" AND ACOM.DOCACOMAGR_ID IS NULL AND VIEW_ACOM.DOC_ORIGEM_ID = 2 AND ");
            //remover 2 porque já foi recebido. só se tratam os que tiverem cancelado_id a null
            strBuilder.Append("SELECT REM_BALC.REMBALCAO_DATA, REM_BALC.REMBALCAO_TIMER, VIEW_ACOM.BALCAO, REM_BALC.REMBALCAO_NUMERO, ");
            strBuilder.Append("REM_BALC.REMBALCAO_SEQUENCIA, REM_STAT.REMINSTAT_DESC, VIEW_ACOM.DOC_ID, VIEW_ACOM.DOCACOM_ZONA5, ");
            strBuilder.Append("VIEW_ACOM.DOCACOM_ZONA4, VIEW_ACOM.DOCACOM_ZONA3, VIEW_ACOM.DOCACOM_ZONA2, VIEW_ACOM.DOCACOM_ZONA1, ");
            strBuilder.Append("REM_BALC.REMBALCAO_NIB, VIEW_ACOM.REFARQ, VIEW_ACOM.REFARQ_ORI, ");
            strBuilder.Append("CAST(VIEW_ACOM.DOCACOM_CODANA AS VARCHAR(2)) + ' - ' + VIEW_ACOM.ESTADO_DESC AS 'DOCACOM_CODANA', ");
            strBuilder.Append("VIEW_ACOM.DOCACOM_CANCELADO, VIEW_ACOM.CANCELA_EFECTUADO, VIEW_ACOM.CANCEL_ESTADO, VIEW_ACOM.CANCELA_DESCRICAO, ");
            strBuilder.Append("VIEW_ACOM.CANCELA_ERRO, VIEW_ACOM.DOCACOM_NOTIFICADO, VIEW_ACOM.NOTIFICA_EFECTUADO, VIEW_ACOM.NOTIFICA_ESTADO, ");
            strBuilder.Append("VIEW_ACOM.NOTIFICA_DESCRICAO, VIEW_ACOM.NOTIFICA_ERRO, VIEW_ACOM.DOCACOM_CHAVEH, REM_BALC.REMBALCAO_TIPO_ID, ");
            strBuilder.Append("VIEW_ACOM.DOCACOM_ID ");
            strBuilder.Append("FROM dbo.VW_PESQ_DOCUMENTO_ACOM VIEW_ACOM ");
            strBuilder.Append("INNER JOIN DOCUMENTO_BALCAO DOC_BALC ON VIEW_ACOM.DOC_ID = DOC_BALC.ID ");
            strBuilder.Append("INNER JOIN REMESSA_BALCAO REM_BALC ON DOC_BALC.REMBALCAO_ID = REM_BALC.ID ");
            strBuilder.Append("INNER JOIN REMESSAIN_STATUS REM_STAT ON REM_BALC.REMBALCAO_STAT_ID = REM_STAT.REMINSTAT_ID ");
            strBuilder.Append("INNER JOIN (SELECT MAX( VIEW_ACOM.DOCACOM_ID) AS 'DOCACOM_ID' ");
            strBuilder.Append("FROM dbo.VW_PESQ_DOCUMENTO_ACOM VIEW_ACOM ");
            strBuilder.Append("INNER JOIN DOCUMENTO_BALCAO DOC_BALC ON VIEW_ACOM.DOC_ID = DOC_BALC.ID ");
            strBuilder.Append("INNER JOIN dbo.DOCUMENTO_ACOM ACOM ON acom.DOCACOM_ID = VIEW_ACOM.DOCACOM_ID ");
            strBuilder.Append("INNER JOIN REMESSA_BALCAO REM_BALC ON DOC_BALC.REMBALCAO_ID = REM_BALC.ID ");
            strBuilder.Append("INNER JOIN [SIBSP_ESTADO_DOCUMENTO_ACOM] AS ACOM_EST ON ACOM.DOCACOM_CODANA = ACOM_EST.ESTADO ");
            strBuilder.Append("WHERE ((ACOM_EST.[I_CANCELA] = 'TRUE' AND ACOM.DOCACOM_CANCELADO IS NULL OR VIEW_ACOM.CANCELA_EFECTUADO = 99) OR ");
            strBuilder.Append("(ACOM_EST.[I_NOTIFICA] = 'TRUE' AND ACOM.DOCACOM_NOTIFICADO IS NULL OR VIEW_ACOM.NOTIFICA_EFECTUADO = 99)) AND ");
            strBuilder.Append("ACOM.DOCACOMAGR_ID IS NULL AND VIEW_ACOM.DOC_ORIGEM_ID = 2 AND ");
            strBuilder.Append(this.Filtros());
            strBuilder.Append(" group by VIEW_ACOM.DOC_ID) aux on aux.DOCACOM_ID = VIEW_ACOM.DOCACOM_ID ");            
            try
            {
                dr = m_oParameters.DirectSqlDataReader(strBuilder.ToString());
                while (dr.Read())
                {
                    AddCompensacaoListView(dr);
                }

                if (this.listViewRegistosCompensacao.Items.Count > 0)
                {
                    this.lblRegEnviados.Text = this.listViewRegistosCompensacao.Items.Count + " Registos enviados à compensação";
                    this._updateRowsInList = this.listViewRegistosCompensacao.Items.Count;
                }
                else
                {
                    this.lblRegEnviados.Text = "Registos enviados à compensação";
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshListCompensacao()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }
        }

        private void AddCompensacaoListView(SqlDataReader dr)
        {
            ListViewBalcaoAcoes oRr = new ListViewBalcaoAcoes(dr);
            ListViewItem olvItem = oRr.MakeListViewItemsAcoes(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewRegistosCompensacao.Items.Add(olvItem);
        }

        private void RefreshListAnalise()
        {
            String filtros = Filtros();
            listViewRegistosAnalise.MyClear();
            SqlDataReader dr = null;
            StringBuilder strBuilder = new StringBuilder();
            strBuilder.Append("SELECT DISTINCT REM_BALC.REMBALCAO_DATA, REM_BALC.REMBALCAO_TIMER, REM_BALC.REMBALCAO_BALCAO, ");
            strBuilder.Append("REM_BALC.REMBALCAO_NUMERO, REM_BALC.REMBALCAO_SEQUENCIA, REM_STAT.REMINSTAT_DESC, tp.REMTIPOBALCAO_DESC,  acom.DOCACOMAGR_ID, ");
            strBuilder.Append("(CASE WHEN acom.DOCACOM_NOTIFICADO IS NOT NULL THEN 'Notificação' ELSE 'Cancelamento' END) AS 'TIBCO' ");
            strBuilder.Append("FROM dbo.DOCUMENTO_ACOM AS acom ");
            strBuilder.Append("INNER JOIN DOCUMENTO_BALCAO AS DOC_BALC ON acom.DOC_ID = DOC_BALC.ID  ");
            strBuilder.Append("INNER JOIN REMESSA_BALCAO AS REM_BALC ON DOC_BALC.REMBALCAO_ID = REM_BALC.ID  ");
            strBuilder.Append("INNER JOIN REMESSAIN_STATUS REM_STAT ON REM_BALC.REMBALCAO_STAT_ID = REM_STAT.REMINSTAT_ID  ");
            strBuilder.Append("INNER JOIN [dbo].[DOCUMENTO_ACOM_AGR] agr ON agr.DOCACOMAGR_ID = acom.DOCACOMAGR_ID  ");
            strBuilder.Append("INNER JOIN [dbo].[REMESSA_TIPO_BALCAO] tp ON tp.REMTIPOBALCAO_ID = REM_BALC.REMBALCAO_TIPO_BALCAO_ID  ");
            strBuilder.Append("WHERE acom.DOCACOM_ORIGEM_ID = 2 ");
            strBuilder.Append("ORDER BY DOCACOMAGR_ID ASC");
            try
            {
                dr = m_oParameters.DirectSqlDataReader(strBuilder.ToString());
                while (dr.Read())
                {
                    AddAnaliseListView(dr);
                }
                if (this.listViewRegistosAnalise.Items.Count > 0)
                {
                    this.labelRegistoEmAnalise.Text = this.listViewRegistosAnalise.Items.Count + " Registos em análise";
                }
                else
                {
                    this.labelRegistoEmAnalise.Text = "Registos em análise";
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshListAnalise()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }
        }

        private void AddAnaliseListView(SqlDataReader dr)
        {
            ListViewAgregacaoBalcaoAcoes oRr = new ListViewAgregacaoBalcaoAcoes(dr);
            ListViewItem olvItem = oRr.MakeListViewItemsAcoes(m_oParameters.DateFormat);
            olvItem.Tag = oRr;
            listViewRegistosAnalise.Items.Add(olvItem);
        }

        private void Confirm_TibcoCancelaEnvioDocumento(Int32 idAgregacao)
        {
            this.ExecuteSPAgregacoes(idAgregacao, _SP_CONFIRMA_CANCELAMENTO_AGR_);
        }

        private void Delete_TibcoCancelaEnvioDocumento(Int32 idAgregacao)
        {
            this.ExecuteSPAgregacoes(idAgregacao, _SP_ANULA_CANCELAMENTO_AGR_);
        }

        private void Confirm_TibcoNotificaEnvioDocumentoForaPrazo(Int32 idAgregacao)
        {
            this.ExecuteSPAgregacoes(idAgregacao, _SP_CONFIRMA_NOTIFICACAO_AGR_);
        }

        private void Delete_TibcoNotificaEnvioDocumentoForaPrazo(Int32 idAgregacao)
        {
            this.ExecuteSPAgregacoes(idAgregacao, _SP_ANULA_NOTIFICACAO_AGR_);
        }

        /// <summary>
        /// Executa SP de anulação ou confirmação de agregação.
        /// </summary>
        /// <param name="idAgregacao">ID de agregação a executar acção</param>
        /// <param name="spName">Procedimento a executar</param>
        private void ExecuteSPAgregacoes(Int32 idAgregacao, String spName)
        {
            ArrayList oParamsAgreg = new ArrayList();
            oParamsAgreg.Add(new GeneralDBParameters("@AGREGAGACAO_ID_IN", idAgregacao));
            m_oParameters.DirectStoredProcedureNonQuery(spName, ref oParamsAgreg);
        }

        private void Insert_Notificacao()
        {
            this.Insert_DocumentosAcomAgregador(false);
        }

        private void Insert_Cancelamento()
        {
            this.Insert_DocumentosAcomAgregador(true);
        }

        /// <summary>
        /// Método que invoca SP para inserção de registos nas tabelas TIBCO
        /// Insere em TIBCO_CANCELA_ENVIO_DOCUMENTO ou TIBCO_NOTIFICA_ENVIO_DOCUMENTO_FORA_PRAZO      
        /// </summary>
        /// <param name="iCancelamento">TRUE para TIBCO_CANCELA_ENVIO_DOCUMENTO, FALSE para TIBCO_NOTIFICA_ENVIO_DOCUMENTO_FORA_PRAZO</param>
        private void Insert_DocumentosAcomAgregador(Boolean iCancelamento)
        {
            try
            {
                ArrayList oParams = new ArrayList();
                if (_filtro_Balcao != 0)
                    oParams.Add(new GeneralDBParameters("@Balcao_IN", this._filtro_Balcao));
                if (_filtro_Remessa != 0)
                    oParams.Add(new GeneralDBParameters("@Remessa_Numero_Balcao_IN", this._filtro_Remessa));
                if (_filtro_Deposito != 0)
                    oParams.Add(new GeneralDBParameters("@Remessa_Sequencia_Balcao_IN", this._filtro_Deposito));
                if (_filtro_TipoRemessa != 0)
                    oParams.Add(new GeneralDBParameters("@TipoRemessa_Balcao_IN", this._filtro_TipoRemessa));
                oParams.Add(new GeneralDBParameters("@TipoAgregador_IN", this._filtro_TipoAgrupador));
                oParams.Add(new GeneralDBParameters("@Operador_IN", m_oParameters.UserLogged.m_sUserName));
                oParams.Add(new GeneralDBParameters("@Remessa_Data_IN", this.dateTimePickerDe.Value.Date.ToString("yyyy-MM-dd")));
                if (iCancelamento)
                    oParams.Add(new GeneralDBParameters("@ICancelamento_IN", true));
                else
                    oParams.Add(new GeneralDBParameters("@ICancelamento_IN", false));
                object retRows = m_oParameters.DirectStoredProcedureScalar("[dbo].[Insert_All_Documentos_Acom_Agr]", ref oParams);
                Int32 updatedRows = Convert.ToInt32(retRows);
                this.ShowResultMessage(iCancelamento, updatedRows);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshLists()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                this.RefreshLists();
            }
        }

        private void ShowResultMessage(Boolean iCancelamento, Int32 updatedRows)
        {
            String tipo = "o seu cancelamento";
            if (updatedRows > 0)
            {
                tipo = "cancelamento";
                if (!iCancelamento)
                {
                    tipo = "notificação fora de prazo";
                }
                MessageBox.Show(this, String.Format("Foram inseridos {0} documentos para {1}.", this._updateRowsInList, tipo), Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                if (!iCancelamento)
                {
                    tipo = "a sua notificação fora de prazo";
                }
                MessageBox.Show(this, String.Format("O estado dos documentos não permite {0}.", tipo), Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ControloBalcaoAcoes.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="contextMenuStripAnalise.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>31, 19</value>
  </metadata>
</root>

// FILE: SDCIM/ModusCI/CIActividades/CriaXML.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;

namespace CIActividades
{
    public static class CriaXML
    {

        static string m_sXml;
        static ArrayList m_oNome;
        static ArrayList m_oValor;
    

        public static string Filtro(ArrayList nome, ArrayList valor)
        {
            m_oNome = nome;
            m_oValor = valor;
    
            
            m_sXml = "<filtro>";

            criaBody();

            m_sXml += "</filtro>";
           
            return m_sXml;
        }

        public static void criaBody()
        {
            for (int i = 0; i<m_oNome.Count; i++)
            {
                m_sXml += "<" + m_oNome[i].ToString() + ">" + m_oValor[i].ToString() + "</" + m_oNome[i].ToString() + ">";

            }

        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/DetalheDocumento.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    class DetalheDocumento
    {
        public int docID { get; set; }
        public String ZIB { get; set; }
        public string numConta { get; set; }
        public string numCheque { get; set; }
        public Double montante { get; set; }
        public string tipoCheque { get; set; }
        public int estadoDocId { get; set; }
        public string estadoDoc { get; set; }
        public string contaNIB { get; set; }
        public string refArquivo { get; set; }
        public int numSeq { get; set; }
        public string chaveH { get; set; }
        public int index { get; set; }
        public int maquina { get; set; }
        public string chaveHext { get; set; }
        public string tipoDoc { get; set; }
        public string tipoDocDescricao { get; set; }
        public DateTime timer { get; set; }
        public DateTime dataRemessa { get; set; }
        public int remId { get; set; }
        public int transId { get; set; }
        public int balcaoTomador { get; set; }
        public int balcaoDesbobramento { get; set; }
        public int remNum { get; set; }
        public int depositoSeq { get; set; }
        public string estadoTranche { get; set; }
        public int numeroTranche { get; set; }
        public string error { get; set; }
        public string balcaoTomadorDescricao { get; set; }
        public string balcaoDesbobramentoDescricao { get; set; }

        private void iniVArs()
        {

            this.docID = 0;
            this.ZIB = "";
            this.numConta = "";
            this.numCheque = "";
            this.montante = 0;
            this.tipoCheque = "";
            this.estadoDoc = "";
            this.contaNIB = "";
            this.refArquivo = "";
            this.numSeq = 0;
            this.chaveH = "";
            this.index = 0;
            this.maquina = 0;
            this.chaveHext = "";
            this.tipoDoc = "";
            this.timer = DateTime.MinValue;
            this.dataRemessa = DateTime.MinValue;
            this.remId = 0;
            this.transId = 0;
            this.balcaoTomador = 0;
            this.balcaoDesbobramento = 0;
            this.remNum = 0;
            this.depositoSeq = 0;
            this.estadoTranche = "";
            this.numeroTranche = 0;
            this.error = "";
            this.estadoDocId = 0;
            this.tipoDocDescricao = "";
            this.balcaoTomadorDescricao = "";
            this.balcaoDesbobramentoDescricao = "";
        }

        public DetalheDocumento(SqlDataReader dr)
        {

            iniVArs();

            this.docID = Convert.ToInt32(dr["DOC_ID"]);
            this.ZIB = Convert.ToString(dr["DOC_ZONA5"]);
            this.numConta = Convert.ToString(dr["DOC_ZONA4"]);
            this.numCheque = Convert.ToString(dr["DOC_ZONA3"]);
            this.montante = Convert.ToDouble(dr["DOC_ZONA2"]);
            this.tipoCheque = Convert.ToString(dr["DOC_ZONA1"]);
            this.estadoDocId = Convert.ToInt32(dr["DOCSTAT_ID"]);
            this.estadoDoc = Convert.ToString(dr["DOCSTAT_ABR"]);
            this.contaNIB = String.IsNullOrEmpty(dr["DOC_NIB"].ToString()) ? String.Empty : Convert.ToString(dr["DOC_NIB"]);
            this.refArquivo = Convert.ToString(dr["DOC_REFARQ"]);
            this.numSeq = String.IsNullOrEmpty(dr["DOC_NSEQ"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["DOC_NSEQ"]);
            this.chaveH = String.IsNullOrEmpty(dr["DOC_CHAVEH"].ToString()) ? String.Empty : Convert.ToString(dr["DOC_CHAVEH"]);
            this.index = String.IsNullOrEmpty(dr["DOC_INDEX"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["DOC_INDEX"]);
            this.maquina = Convert.ToInt32(dr["DOC_MAQUINA"]);
            this.chaveHext = String.IsNullOrEmpty(dr["DOC_CHAVEHEXT"].ToString()) ? String.Empty : Convert.ToString(dr["DOC_CHAVEHEXT"]);
            this.tipoDoc = Convert.ToString(dr["DOC_TIPO"]);
            this.tipoDocDescricao = Convert.ToString(dr["DOC_TIPO_DESC"]);
            this.timer = Convert.ToDateTime(dr["DOC_TIMER"]);
            this.dataRemessa = Convert.ToDateTime(dr["REMIN_DATA"]);
            this.remId = Convert.ToInt32(dr["REMIN_ID"]);
            this.transId = String.IsNullOrEmpty(dr["TRANOUT_ID"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["TRANOUT_ID"]);           
            this.balcaoTomador = Convert.ToInt32(dr["REMIN_BALCAO"]);
            this.remNum = Convert.ToInt32(dr["REMIN_NUMERO"]);
            this.depositoSeq = Convert.ToInt32(dr["REMIN_SEQ"]);
            this.estadoTranche = String.IsNullOrEmpty(dr["TRANOUTSTAT_ID"].ToString()) ? String.Empty : Convert.ToString(dr["TRANOUTSTAT_ID"]);
            this.numeroTranche = String.IsNullOrEmpty(dr["TRANOUT_NUMERO"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["TRANOUT_NUMERO"]);
            this.error = String.IsNullOrEmpty(dr["DOC_ERRO"].ToString()) ? String.Empty : Convert.ToString(dr["DOC_ERRO"]);
            this.balcaoDesbobramento = Convert.ToInt32(dr["DOCBALCAO_BALDESD"]);
            this.balcaoDesbobramentoDescricao = Convert.ToString(dr["DOCBALCAO_BALDESDDESCRICAO"]);
            this.balcaoTomadorDescricao = Convert.ToString(dr["REMIN_BALCAO_DESCRICAO"]);
        }
        public ListViewItem MakeListViewItemDocumento(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = docID.ToString();
            olvItem.SubItems.Add(ZIB.ToString());
            olvItem.SubItems.Add(numConta.ToString());
            olvItem.SubItems.Add(numCheque.ToString());
            string montanteToInsert = montante.ToString().Equals("0") ? montante.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(montante).PadLeft(16, ' ');
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(tipoCheque.ToString());
            olvItem.SubItems.Add(estadoDocId + " " + estadoDoc.ToString());
            olvItem.SubItems.Add(contaNIB.ToString());
            olvItem.SubItems.Add(refArquivo.ToString());
            olvItem.SubItems.Add(numSeq.ToString());
            olvItem.SubItems.Add(chaveH.ToString());
            olvItem.SubItems.Add(index.ToString());
            olvItem.SubItems.Add(maquina.ToString());
            olvItem.SubItems.Add(balcaoTomador.ToString().PadLeft(4, '0') + " - " + balcaoTomadorDescricao);
            olvItem.SubItems.Add(chaveHext.ToString());
            olvItem.SubItems.Add(tipoDoc.ToString() + " - " + tipoDocDescricao);
            olvItem.SubItems.Add(timer.ToString("yyyy-MM-dd HH:mm:ss"));
            olvItem.SubItems.Add(dataRemessa.ToString(sDateFormat));
            olvItem.SubItems.Add(remId.ToString());
            olvItem.SubItems.Add(transId.ToString());
            olvItem.SubItems.Add(this.balcaoDesbobramento.ToString().PadLeft(4, '0') + " - " + balcaoDesbobramentoDescricao);
            olvItem.SubItems.Add(remNum.ToString());
            olvItem.SubItems.Add(estadoTranche.ToString());
            olvItem.SubItems.Add(numeroTranche.ToString());
            olvItem.SubItems.Add(error.ToString());
            olvItem.SubItems.Add(depositoSeq.ToString());
            return olvItem;
        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/DetalheRemessa.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;
using System.Collections;
using NBiis.Generic;
using NBiis;

namespace CIActividades
{
    public class DetalheRemessa
    {
        private static int ORIGEM = 2;

        public int remId;
        public DateTime remData;
        public DateTime timer;
        public DateTime? timerEnviada;
        public string balcaoGestor;
        public int bancoRemessa;
        public int numRemessa;
        public string descricaoTipoRemessa;
        public int tipoRemessaId;
        public int numDeposito;
        public int estadoId;
        public string estadoRemessa;
        public int numTranches;
        public string chaveH;
        public string cgdError;
        public int quantidadeDoc;
        public int maquina;
        public string error;
        public double montante;
        public string balcaoDescricao;

        private CIConfigGP.CIGlobalParameters m_oParameters;

        private void initVars()
        {
            this.remId = 0;
            this.remData = DateTime.MinValue;
            this.timer = DateTime.MinValue; ;
            this.timerEnviada = DateTime.MinValue;
            this.balcaoGestor = "";
            this.numRemessa = 0;
            this.descricaoTipoRemessa = "";
            this.numDeposito = 0;
            this.estadoId = 0;
            this.estadoRemessa = "";
            this.numTranches = 0;
            this.chaveH = "";
            this.cgdError = "";
            this.quantidadeDoc = 0;
            this.maquina = 0;
            this.error = "";
            this.montante = 0.0;
            this.tipoRemessaId = 0;
            this.bancoRemessa = 0;
            this.balcaoDescricao = "";
        }

        /// <summary>
        /// Método para ser utilizado na contrução do form MudarEstado.
        /// Método vai à tabela [ACTIVITY_CHANGE] e como o mapeamento de estados das Remessas é igual para as Remessas Balcão, é utilizado o nome REMESSA_IN
        /// </summary>
        /// <returns></returns>
        public string GetTableName()
        {
            //E001212 - Neste caso manteve-se o nome porque na tabela activity-change, os estados da remessa in = remessa balcão
            return "REMESSA_IN";
        }

        public DetalheRemessa(SqlDataReader dr, CIConfigGP.CIGlobalParameters oParameters)
        {
            initVars();

            this.remId = Convert.ToInt32(dr["ID"]);
            this.remData = Convert.ToDateTime(dr["REMBALCAO_DATA"]);
            this.timer = Convert.ToDateTime(dr["REMBALCAOPROC_TIMER"]);
            this.timerEnviada = String.IsNullOrEmpty(dr["REMBALCAO_TM_ENVIADA"].ToString()) ? (DateTime?)null : Convert.ToDateTime(dr["REMBALCAO_TM_ENVIADA"]);
            this.balcaoGestor = Convert.ToString(dr["REMBALCAO_BALCAO"]);
            this.numRemessa = Convert.ToInt32(dr["REMBALCAO_NUMERO"]);
            this.bancoRemessa = Convert.ToInt32(dr["REMBALCAO_BANCO"]);
            this.descricaoTipoRemessa = Convert.ToString(dr["REMTIPO"]);
            this.tipoRemessaId = Convert.ToInt32(dr["REMBALCAO_TIPO_BALCAO_ID"]);
            this.numDeposito = Convert.ToInt32(dr["REMSEQ"]);
            this.estadoId = Convert.ToInt32(dr["REMINSTAT_ID"]);
            this.estadoRemessa = Convert.ToString(dr["REMINSTAT_DESC"]);
            this.numTranches = Convert.ToInt32(dr["REMQTTRANCHES"]);
            this.chaveH = Convert.ToString(dr["REMBALCAOPROC_CHAVEH"]);
            this.cgdError = Convert.ToString(dr["LOTEENV_CGDERROR"]);
            this.quantidadeDoc = Convert.ToInt32(dr["REMBALCAO_QT_DOCS"]);
            this.maquina = Convert.ToInt32(dr["REMBALCAOPROC_MAQUINA"]);
            this.error = Convert.ToString(dr["REMBALCAOPROC_ERRO"]);
            this.montante = Convert.ToDouble(dr["REMBALCAO_MT_DOCS"]);
            this.m_oParameters = oParameters;
            this.balcaoDescricao = Convert.ToString(dr["BALCAO_DESC"]);
        }

        public ListViewItem MakeListViewItemRemessas(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = remId.ToString();
            olvItem.SubItems.Add(remData.ToString(sDateFormat));
            olvItem.SubItems.Add(timer.ToString());
            olvItem.SubItems.Add(timerEnviada.HasValue ? timerEnviada.Value.ToString("yyyy-MM-dd HH:mm:ss") : "");
            olvItem.SubItems.Add(bancoRemessa.ToString());
            olvItem.SubItems.Add(balcaoGestor.ToString().PadLeft(4, '0') + " - " + balcaoDescricao);
            olvItem.SubItems.Add(tipoRemessaId + " - " + descricaoTipoRemessa.ToString());
            olvItem.SubItems.Add(numDeposito.ToString());
            olvItem.SubItems.Add(estadoId.ToString() + " " + estadoRemessa.ToString());
            olvItem.SubItems.Add(numTranches.ToString());
            olvItem.SubItems.Add(chaveH.ToString());
            olvItem.SubItems.Add(cgdError.ToString());
            olvItem.SubItems.Add(quantidadeDoc.ToString());
            string montanteToInsert = montante.ToString().Equals("0") ? montante.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(montante).PadLeft(16, ' ');
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(error.ToString());
            olvItem.SubItems.Add(maquina.ToString());

            return olvItem;
        }

        public void ChangeEstado(int iNewEstado, string m_sSPProcessa, string m_sSPValida)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@OldEstado", estadoId));
            oParams.Add(new GeneralDBParameters("@NewEstado", iNewEstado));
            oParams.Add(new GeneralDBParameters("@ReminID", remId));
            oParams.Add(new GeneralDBParameters("@Origem_ID", ORIGEM)); //E001212 - SUPBKOFF 11 2017/08/07
            try
            {
                if (m_sSPValida.Length > 0)
                {
                    m_oParameters.DirectStoredProcedureNonQuery(m_sSPValida, ref oParams);
                }

                m_oParameters.DirectStoredProcedureNonQuery(m_sSPProcessa, ref oParams);

                string sSmg = "Mudou estado da REMESSA: " + remId + " de " + estadoId.ToString() + " para " + iNewEstado.ToString();
                GenericLog.GenLogRegistarAlerta(sSmg, "ChangeEstadoRemessa()", 110);
                m_oParameters.EnviarAlertaSituacao(110, sSmg);

            }
            catch (Exception ex)
            {
                if (!(ex.Message.Substring(0, 5).Equals("#004#")))
                {
                    throw;
                }
            }
        }



    }
}


// FILE: SDCIM/ModusCI/CIActividades/DetalheRemessasEstorno.cs
﻿using System;
using System.Collections;
using System.Data.SqlClient;
using System.Windows.Forms;
using NBiis;
using NBiis.Generic;

namespace CIActividades
{
    class DetalheRemessasEstorno
    {
        private CIConfigGP.CIGlobalParameters m_oParameters;

        public int remId;
        public DateTime remData;
        public DateTime timer;
        public DateTime? timerEnviada;
        public DateTime timerEstorno;
        public string estornoRem; //Remessa não tem
        public string estornoDoc; //Remessa não tem
        public String balcaoGestorDescricao;
        public String balcaoGestor;
        public int numRemessa;
        public string descricaoTipoRemessa;
        public int tipoRemessaId;
        public int numDepositoSeq;
        public string estadoEstorno;
        public int estadoId;
        public string chaveH;
        public string cgdError;
        public int quantidadeDoc;
        public int maquina;
        public string error;
        public double montante;
        public Int64? Doc_ID {get; set;}
        //SDCIM 17
        public Int32 EstrnID { get; set; }


        private void initVars()
        {
            this.remId = 0;
            this.remData = DateTime.MinValue;
            this.timer = DateTime.MinValue; ;
            this.timerEnviada = DateTime.MinValue;
            this.estornoRem = "";//confirmar campos
            this.estornoDoc = "";//confirmar campos
            this.balcaoGestorDescricao = String.Empty;
            this.numRemessa = 0;
            this.descricaoTipoRemessa = "";
            this.numDepositoSeq = 0;
            this.estadoEstorno = "";
            this.estadoId = 0;
            this.chaveH = "";
            this.cgdError = "";
            this.quantidadeDoc = 0;
            this.maquina = 0;
            this.error = "";
            this.montante = 0.0;
            this.Doc_ID = null;
            this.tipoRemessaId = 0;
            this.balcaoGestor = "";
            this.timerEstorno = DateTime.MinValue;
            this.EstrnID = 0;
        }

        public string GetTableName()
        {
            return "ESTORNO_BALCAO";
        }

        public DetalheRemessasEstorno(SqlDataReader dr, CIConfigGP.CIGlobalParameters oParameters)
        {
            initVars();
            this.remId = Convert.ToInt32(dr["ID"]);
            this.remData = Convert.ToDateTime(dr["REMBALCAO_DATA"]);
            this.timer = Convert.ToDateTime(dr["REMBALCAOPROC_TIMER"]);
            this.timerEnviada = String.IsNullOrEmpty(dr["ESTRN_ENVIADO"].ToString()) ? (DateTime?)null : Convert.ToDateTime(dr["ESTRN_ENVIADO"]);
            this.estornoRem = Convert.ToString(dr["I_ESTRN_REMESSA"]);
            this.estornoDoc = Convert.ToString(dr["I_ESTRN_DOC"]);
            this.balcaoGestorDescricao = Convert.ToString(dr["BALCAO_DESC"]);
            this.numRemessa = Convert.ToInt32(dr["REMBALCAO_NUMERO"]);
            this.descricaoTipoRemessa = Convert.ToString(dr["REMTIPO"]);
            this.tipoRemessaId = Convert.ToInt32(dr["REMTIPOID"]);
            this.numDepositoSeq = Convert.ToInt32(dr["REMSEQ"]);
            this.estadoEstorno = Convert.ToString(dr["ESTRN_STATUS_ID"]) + " " + Convert.ToString(dr["D_ESTRN_STATUS"]);
            this.estadoId = Convert.ToInt32(dr["ESTRN_STATUS_ID"]);
            this.chaveH = Convert.ToString(dr["REMBALCAOPROC_CHAVEH"]);
            this.cgdError = Convert.ToString(dr["LOTEENV_CGDERROR"]);
            this.quantidadeDoc = Convert.ToInt32(dr["ESTRN_QT_DOCS"]);
            this.maquina = Convert.ToInt32(dr["REMBALCAOPROC_MAQUINA"]);
            this.error = String.IsNullOrEmpty(dr["ESTRN_ERRO"].ToString()) ? String.Empty : Convert.ToString(dr["ESTRN_ERRO"]);
            this.montante = Convert.ToDouble(dr["ESTRN_MT_DOCS"]);
            this.Doc_ID = String.IsNullOrEmpty(dr["Doc_ID"].ToString()) ? (Int64?)null : Convert.ToInt64(dr["Doc_ID"]);
            this.balcaoGestor = Convert.ToString(dr["REMBALCAO_BALCAO"]);
            this.timerEstorno = Convert.ToDateTime(dr["ESTRN_TIMER"]);
            this.EstrnID = Convert.ToInt32(dr["ESTRN_ID"]);
            this.m_oParameters = oParameters;
        }

        public ListViewItem MakeListViewItemRemessasEstorno(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = remId.ToString();
            olvItem.SubItems.Add(remData.ToString(sDateFormat));
            olvItem.SubItems.Add(timer.ToString());
            olvItem.SubItems.Add(timerEstorno.ToString());
            olvItem.SubItems.Add(timerEnviada.HasValue ? timerEnviada.Value.ToString("yyyy-MM-dd HH:mm:ss") : "");
            olvItem.SubItems.Add(estornoRem.ToString());
            olvItem.SubItems.Add(estornoDoc.ToString());
            olvItem.SubItems.Add(balcaoGestor.PadLeft(4, '0') + " - " + balcaoGestorDescricao.ToString());
            olvItem.SubItems.Add(numRemessa.ToString());
            olvItem.SubItems.Add(tipoRemessaId + " - " + descricaoTipoRemessa.ToString());
            olvItem.SubItems.Add(numDepositoSeq.ToString());
            olvItem.SubItems.Add(estadoEstorno.ToString());
            olvItem.SubItems.Add(chaveH.ToString());
            olvItem.SubItems.Add(cgdError.ToString());
            olvItem.SubItems.Add(quantidadeDoc.ToString());
            string montanteToInsert = montante.ToString().Equals("0") ? montante.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(montante).PadLeft(16, ' ');          
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(error.ToString());            
            olvItem.SubItems.Add(maquina.ToString());
            return olvItem;
        }

        public void ChangeEstado(int iNewStatus, string m_sSPProcessa, string m_sSPValida)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@OldEstado", estadoId));
            oParams.Add(new GeneralDBParameters("@NewEstado", iNewStatus));
            oParams.Add(new GeneralDBParameters("@EstornoID", this.EstrnID)); //SDCIM 17 remId para EstrnID
            if (m_sSPValida.Length > 0)
            {
                m_oParameters.DirectStoredProcedureNonQuery(m_sSPValida, ref oParams);
            }
            m_oParameters.DirectStoredProcedureNonQuery(m_sSPProcessa, ref oParams);
            string sSmg = "Mudou estado do Estorno da Remessa: " + remId + " de " + estadoEstorno.ToString() + " para " + iNewStatus.ToString();
            GenericLog.GenLogRegistarAlerta(sSmg, "ChangeEstadoRemessaEstorno()", 110);
            m_oParameters.EnviarAlertaSituacao(110, sSmg);

        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/DetalheTranche.cs
﻿using System;
using System.Collections;
using System.Data.SqlClient;
using System.Windows.Forms;
using NBiis;
using NBiis.Generic;

namespace CIActividades
{
    class DetalheTranche
    {
        private CIConfigGP.CIGlobalParameters m_oParameters;

        public int remId;
        public int estadoId;
        public int transId;
        public DateTime? remData;
        public int numero;
        public string estado;
        public int quantidade;
        public double montante;
        public string erro;
        public string chaveWS;
        public int estadoTIBCO;


        private void initVars()
        {
            this.remId = 0;
            this.estadoId = 0;
            this.transId = 0;
            this.remData = DateTime.MinValue;
            this.numero = 0;
            this.estado = "";
            this.quantidade = 0;
            this.erro = "";
            this.chaveWS = "";
            this.estadoTIBCO = 0;
            this.montante = 0.0;
        }

        public string GetTableName()
        {
            return "TRANCHE_OUT";
        }

        public DetalheTranche(SqlDataReader dr, CIConfigGP.CIGlobalParameters oParameters)
        {
            initVars();

            this.remId = Convert.ToInt32(dr["ID"]);
            this.estadoId = String.IsNullOrEmpty(dr["TRANOUTSTAT_ID"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["TRANOUTSTAT_ID"]);
            this.transId = String.IsNullOrEmpty(dr["TRANOUT_ID"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["TRANOUT_ID"]);
            this.remData = String.IsNullOrEmpty(dr["TRANOUT_TIMER"].ToString()) ? (DateTime?)null : Convert.ToDateTime(dr["TRANOUT_TIMER"]);
            this.numero = String.IsNullOrEmpty(dr["TRANOUT_NUMERO"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["TRANOUT_NUMERO"]); ;
            this.estado = String.IsNullOrEmpty(dr["TRANOUTSTAT_ABR"].ToString()) ? string.Empty : Convert.ToString(dr["TRANOUTSTAT_ABR"]);
            this.quantidade = Convert.ToInt32(dr["TRANOUT_QT_DOCS"]);
            this.erro = String.IsNullOrEmpty(dr["TRANOUT_ERRO"].ToString()) ? string.Empty : Convert.ToString(dr["TRANOUT_ERRO"]);
            this.chaveWS = Convert.ToString(dr["CHAVE_WEBSERVICE"]);
            this.estadoTIBCO = String.IsNullOrEmpty(dr["ESTADO"].ToString()) ? (Int32)0 : Convert.ToInt32(dr["ESTADO"]);
            this.montante = Convert.ToDouble(dr["TRANOUT_MT_DOCS"]);

            this.m_oParameters = oParameters;
        }

        public ListViewItem MakeListViewItemTranche(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = remId.ToString();
            olvItem.SubItems.Add(transId.ToString());
            olvItem.SubItems.Add(remData.ToString());
            olvItem.SubItems.Add(numero.ToString());
            olvItem.SubItems.Add(estadoId.ToString() + " " + estado.ToString());
            olvItem.SubItems.Add(quantidade.ToString());
            string montanteToInsert = montante.ToString().Equals("0") ? montante.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(montante).PadLeft(16, ' ');
            //olvItem.SubItems.Add(montante.ToString());
            olvItem.SubItems.Add(montanteToInsert);
            //olvItem.SubItems.Add(erro.ToString() == "0" ? "" : "Erro");
            olvItem.SubItems.Add(erro.ToString());
            olvItem.SubItems.Add(chaveWS.ToString());
            olvItem.SubItems.Add(estadoTIBCO.ToString());


            return olvItem;
        }

        public void ChangeEstado(int iNewStatus, string m_sSPProcessa, string m_sSPValida)
        {
            // ValidaChangeEstadoTranche(iNewStatus);
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@OldEstado", estadoId));
            oParams.Add(new GeneralDBParameters("@NewEstado", iNewStatus));
            oParams.Add(new GeneralDBParameters("@TranoutID", transId));

            if (m_sSPValida.Length > 0)
            {
                m_oParameters.DirectStoredProcedureNonQuery(m_sSPValida, ref oParams);
            }
            m_oParameters.DirectStoredProcedureNonQuery(m_sSPProcessa, ref oParams);

            string sSmg = "Mudou estado da TRANCHE: " + transId + " de " + estado.ToString() + " para " + iNewStatus.ToString();
            GenericLog.GenLogRegistarAlerta(sSmg, "ChangeEstadoTranche()", 110);
            m_oParameters.EnviarAlertaSituacao(110, sSmg);

        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/DetalhesDocumento.cs
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;
using CIConfigGlobalParameters;
using System.IO;



namespace CIActividades
{


    public class DetalhesDocumento : InterfaceDocs
    {  
        
        public DateTime m_dtREMIN_DATA;
        public string m_sREMIN_ID;
        public string m_sTRANOUT_ID;
        public string m_sREMIN_PAIS;
        public int m_iREMIN_BANCO;
        public int m_iREMIN_BALCAO;
        public string m_sREMIN_NUMERO;
        public int m_iTRANOUTSTAT_ID;
        public string m_sTRANOUT_NUMERO;

        public string m_sDOC_ID;
        public string m_sDOCORI_ID;
        public int m_iDOC_BALTOM;
        public int m_iDOC_TIPO;
        public string m_sDOC_ZONA5;
        public string m_sDOC_ZONA4;
        public string m_sDOC_ZONA3;
        public decimal m_dDOC_ZONA2;
        public string m_sDOC_ZONA1;
        public int m_iDOC_NSEQ;
        public string m_sDOC_INDEX;
        public DateTime m_dtDOC_DATADIGIT;
        public string m_sDOC_REFARQ;
        public string m_sDOC_MAQUINA;
        public string m_sDOC_CHAVEH;
        public string m_sDOC_CHAVEHEXT;
        public string m_sDOC_DOCNIB;
        public int m_iDOCSTAT_ID;
        public string m_sDOCSTAT_ABR;
        public DateTime m_dtDOC_TIMER;
        public string m_sDOC_ERRO;
        public int m_iOperativa;

        private void InitVars()
        {
            //m_oParameters = new CIConfigGP.CIGlobalParameters();

            m_dtREMIN_DATA=DateTime.MinValue;
            m_sREMIN_ID="-1";
            m_sTRANOUT_ID="-1";
            m_sREMIN_PAIS="PT  ";
            m_iREMIN_BANCO=35;
            m_iREMIN_BALCAO=0;
            m_sREMIN_NUMERO="";
            m_iTRANOUTSTAT_ID=0;
            m_sTRANOUT_NUMERO="";

            m_sDOC_ID="-1";
            m_sDOCORI_ID = "-1";
            m_iDOC_BALTOM = 0;
            m_iDOC_TIPO = 0;
            m_sDOC_ZONA5 = "";
            m_sDOC_ZONA4="";
            m_sDOC_ZONA3="";
            m_dDOC_ZONA2=0;
            m_sDOC_ZONA1="";
            m_iDOC_NSEQ=0;
            m_sDOC_INDEX="";
            m_dtDOC_DATADIGIT = DateTime.MinValue;
            m_sDOC_REFARQ="";
            m_sDOC_MAQUINA="ND";
            m_sDOC_CHAVEH="";
            m_sDOC_CHAVEHEXT="";
            m_sDOC_DOCNIB="";
            m_iDOCSTAT_ID=0;
            m_sDOCSTAT_ABR = "ND";
            m_dtDOC_TIMER = DateTime.MinValue;
            m_sDOC_ERRO = "";

            m_iOperativa = 0;
        }

        public DetalhesDocumento()
        {
            InitVars();
        }

        public DetalhesDocumento(SqlDataReader dr)
        {
            InitVars();

            //try
            //{
                m_dtREMIN_DATA = Convert.ToDateTime(dr["REMIN_DATA"]);
                m_sREMIN_ID = Convert.ToString(dr["REMIN_ID"]);
                m_sREMIN_PAIS = Convert.ToString(dr["REMIN_PAIS"]);
                m_iREMIN_BANCO = Convert.ToInt16(dr["REMIN_BANCO"]);
                m_iREMIN_BALCAO = Convert.ToInt16(dr["REMIN_BALCAO"]);
                m_sREMIN_NUMERO = Convert.ToString(dr["REMIN_NUMERO"]);
                if (dr["TRANOUT_ID"] == DBNull.Value)
                {
                    this.m_sTRANOUT_ID = String.Empty;
                }
                else
                {
                    this.m_sTRANOUT_ID = Convert.ToString(dr["TRANOUT_ID"]);
                }
                if (dr["TRANOUTSTAT_ID"] == DBNull.Value)
                {
                    this.m_iTRANOUTSTAT_ID = 0;
                }
                else
                {
                    this.m_iTRANOUTSTAT_ID = Convert.ToInt16(dr["TRANOUTSTAT_ID"]);
                }
                if (dr["TRANOUT_NUMERO"] == DBNull.Value)
                {
                    this.m_sTRANOUT_NUMERO = String.Empty;
                }
                else
                {
                    this.m_sTRANOUT_NUMERO = Convert.ToString(dr["TRANOUT_NUMERO"]);
                }
                //try
                //{
                //    m_sTRANOUT_ID = Convert.ToString(dr["TRANOUT_ID"]);
                //    m_iTRANOUTSTAT_ID = Convert.ToInt16(dr["TRANOUTSTAT_ID"]);
                //    m_sTRANOUT_NUMERO = Convert.ToString(dr["TRANOUT_NUMERO"]);
                //}
                //catch
                //{
                //}
                m_sDOC_ID = Convert.ToString(dr["DOC_ID"]);
                m_sDOCORI_ID = Convert.ToString(dr["DOCORI_ID"]);
                m_iDOC_BALTOM = Convert.ToInt16(dr["DOC_BALTOM"]);
                m_iDOC_TIPO = Convert.ToInt16(dr["DOC_TIPO"]);
                m_sDOC_ZONA5 = Convert.ToString(dr["DOC_ZONA5"]);
                m_sDOC_ZONA4 = Convert.ToString(dr["DOC_ZONA4"]);
                m_sDOC_ZONA3 = Convert.ToString(dr["DOC_ZONA3"]);
                m_dDOC_ZONA2 = Convert.ToDecimal(dr["DOC_ZONA2"]);
                m_sDOC_ZONA1 = Convert.ToString(dr["DOC_ZONA1"]);
                if (dr["DOC_NSEQ"] == DBNull.Value)
                {
                    m_iDOC_NSEQ = 0;
                }
                else {
                    m_iDOC_NSEQ = Convert.ToInt32(dr["DOC_NSEQ"]);
                }
                //try { m_iDOC_NSEQ = Convert.ToInt32(dr["DOC_NSEQ"]); }
                //catch { }
                if (dr["DOC_INDEX"] == DBNull.Value)
                {
                    m_sDOC_INDEX = String.Empty;
                }
                else
                {
                    m_sDOC_INDEX = Convert.ToString(dr["DOC_INDEX"]);
                }
                //try { m_sDOC_INDEX = Convert.ToString(dr["DOC_INDEX"]); }
                //catch { }
                if (dr["DOC_DATADIGIT"] == DBNull.Value)
                {
                    m_dtDOC_DATADIGIT = DateTime.Now;
                }
                else
                {
                   m_dtDOC_DATADIGIT = Convert.ToDateTime(dr["DOC_DATADIGIT"]); 
                }
                //try { m_dtDOC_DATADIGIT = Convert.ToDateTime(dr["DOC_DATADIGIT"]); }
                //catch { }
                if (dr["DOC_REFARQ"] == DBNull.Value)
                {
                    m_sDOC_REFARQ = String.Empty;
                }
                else
                {
                    m_sDOC_REFARQ = Convert.ToString(dr["DOC_REFARQ"]);
                }
                //try { m_sDOC_REFARQ = Convert.ToString(dr["DOC_REFARQ"]); }
                //catch { }
                //m_sDOC_MAQUINA = Convert.ToString(dr["DOC_MAQUINA"],"00");
                m_sDOC_MAQUINA = Convert.ToInt16(dr["DOC_MAQUINA"]).ToString("00");
                if (dr["DOC_CHAVEH"] == DBNull.Value)
                {
                    m_sDOC_CHAVEH = String.Empty;
                }
                else
                {
                    m_sDOC_CHAVEH = Convert.ToString(dr["DOC_CHAVEH"]);
                }
                //try { m_sDOC_CHAVEH = Convert.ToString(dr["DOC_CHAVEH"]); }
                //catch { }
                if (dr["DOC_CHAVEHEXT"] == DBNull.Value)
                {
                    m_sDOC_CHAVEHEXT = String.Empty;
                }
                else
                {
                    m_sDOC_CHAVEHEXT = Convert.ToString(dr["DOC_CHAVEHEXT"]);
                }
                //try { m_sDOC_CHAVEHEXT = Convert.ToString(dr["DOC_CHAVEHEXT"]); }
                //catch { }
                if (dr["DOC_NIB"] == DBNull.Value)
                {
                    m_sDOC_DOCNIB = String.Empty;
                }
                else
                {
                    m_sDOC_DOCNIB = Convert.ToString(dr["DOC_NIB"]);
                }
                //try { m_sDOC_DOCNIB = Convert.ToString(dr["DOC_NIB"]); }
                //catch { }
                m_iDOCSTAT_ID = Convert.ToInt16(dr["DOCSTAT_ID"]);
                m_sDOCSTAT_ABR = Convert.ToString(dr["DOCSTAT_ABR"]);
                m_dtDOC_TIMER = Convert.ToDateTime(dr["DOC_TIMER"]);
                m_sDOC_ERRO = Convert.ToString(dr["DOC_ERRO"]);
                m_iOperativa = int.Parse(dr["REMPROC_OPERATIVA"].ToString());

            //}
            //catch
            //{
            //}
        }
        public DetalhesDocumento(DataRow oRow)
        {
            InitVars();

            //try
            //{
                m_dtREMIN_DATA = Convert.ToDateTime(oRow["REMIN_DATA"]);
                m_sREMIN_ID = Convert.ToString(oRow["REMIN_ID"]);
                m_sREMIN_PAIS = Convert.ToString(oRow["REMIN_PAIS"]);
                m_iREMIN_BANCO = Convert.ToInt16(oRow["REMIN_BANCO"]);
                m_iREMIN_BALCAO = Convert.ToInt16(oRow["REMIN_BALCAO"]);
                m_sREMIN_NUMERO = Convert.ToString(oRow["REMIN_NUMERO"]);
                if (oRow["TRANOUT_ID"] == DBNull.Value)
                {
                    this.m_sTRANOUT_ID = String.Empty;
                }
                else
                {
                    m_sTRANOUT_ID = Convert.ToString(oRow["TRANOUT_ID"]);
                }
                if (oRow["TRANOUTSTAT_ID"] == DBNull.Value)
                {
                    this.m_iTRANOUTSTAT_ID = 0;
                }
                else
                {
                    m_iTRANOUTSTAT_ID = Convert.ToInt16(oRow["TRANOUTSTAT_ID"]);
                }
                if (oRow["TRANOUT_NUMERO"] == DBNull.Value)
                {
                    this.m_sTRANOUT_NUMERO = String.Empty;
                }
                else
                {
                    m_sTRANOUT_NUMERO = Convert.ToString(oRow["TRANOUT_NUMERO"]);
                }
                //try
                //{
                //    m_sTRANOUT_ID = Convert.ToString(oRow["TRANOUT_ID"]);
                //    m_iTRANOUTSTAT_ID = Convert.ToInt16(oRow["TRANOUTSTAT_ID"]);
                //    m_sTRANOUT_NUMERO = Convert.ToString(oRow["TRANOUT_NUMERO"]);
                //}
                //catch
                //{
                //}
                m_sDOC_ID = Convert.ToString(oRow["DOC_ID"]);
                m_sDOCORI_ID = Convert.ToString(oRow["DOCORI_ID"]);
                m_iDOC_BALTOM = Convert.ToInt16(oRow["DOC_BALTOM"]);
                m_iDOC_TIPO = Convert.ToInt16(oRow["DOC_TIPO"]);
                m_sDOC_ZONA5 = Convert.ToString(oRow["DOC_ZONA5"]);
                m_sDOC_ZONA4 = Convert.ToString(oRow["DOC_ZONA4"]);
                m_sDOC_ZONA3 = Convert.ToString(oRow["DOC_ZONA3"]);
                m_dDOC_ZONA2 = Convert.ToDecimal(oRow["DOC_ZONA2"]);
                m_sDOC_ZONA1 = Convert.ToString(oRow["DOC_ZONA1"]);
                if (oRow["DOC_NSEQ"] == DBNull.Value)
                {
                    m_iDOC_NSEQ = 0;
                }
                else {
                    m_iDOC_NSEQ = Convert.ToInt32(oRow["DOC_NSEQ"]);
                }
                //try { m_iDOC_NSEQ = Convert.ToInt32(oRow["DOC_NSEQ"]); }
                //catch { }
                if (oRow["DOC_INDEX"] == DBNull.Value)
                {
                    m_sDOC_INDEX = String.Empty;
                }
                else
                {
                    m_sDOC_INDEX = Convert.ToString(oRow["DOC_INDEX"]);
                }
                //try { m_sDOC_INDEX = Convert.ToString(oRow["DOC_INDEX"]); }
                //catch { }
                if (oRow["DOC_DATADIGIT"] == DBNull.Value)
                {
                    m_dtDOC_DATADIGIT = DateTime.Now;
                }
                else
                {
                    m_dtDOC_DATADIGIT = Convert.ToDateTime(oRow["DOC_DATADIGIT"]);
                }
                //try { m_dtDOC_DATADIGIT = Convert.ToDateTime(oRow["DOC_DATADIGIT"]); }
                //catch { }
                if (oRow["DOC_REFARQ"] == DBNull.Value)
                {
                    m_sDOC_REFARQ = String.Empty;
                }
                else
                {
                    m_sDOC_REFARQ = Convert.ToString(oRow["DOC_REFARQ"]);
                }
                //try { m_sDOC_REFARQ = Convert.ToString(oRow["DOC_REFARQ"]); }
                //catch { }
                //m_sDOC_MAQUINA = Convert.ToString(oRow["DOC_MAQUINA"], "00");
                m_sDOC_MAQUINA = Convert.ToInt16(oRow["DOC_MAQUINA"]).ToString("00");
                if (oRow["DOC_CHAVEH"] == DBNull.Value)
                {
                    m_sDOC_CHAVEH = String.Empty;
                }
                else
                {
                    m_sDOC_CHAVEH = Convert.ToString(oRow["DOC_CHAVEH"]);
                }
                //try { m_sDOC_CHAVEH = Convert.ToString(oRow["DOC_CHAVEH"]); }
                //catch { }              
                //try { m_sDOC_CHAVEHEXT = Convert.ToString(oRow["DOC_CHAVEHEXT"]); }
                //catch { }
                if (oRow["DOC_NIB"] == DBNull.Value)
                {
                }
                else
                {
                    m_sDOC_DOCNIB = Convert.ToString(oRow["DOC_NIB"]);
                }
                //try { m_sDOC_DOCNIB = Convert.ToString(oRow["DOC_NIB"]); }
                //catch { }                
                m_iDOCSTAT_ID = Convert.ToInt16(oRow["DOCSTAT_ID"]);
                m_sDOCSTAT_ABR = Convert.ToString(oRow["DOCSTAT_ABR"]);
                m_dtDOC_TIMER = Convert.ToDateTime(oRow["DOC_TIMER"]);
                m_sDOC_ERRO = Convert.ToString(oRow["DOC_ERRO"]);
                m_iOperativa = int.Parse(oRow["REMPROC_OPERATIVA"].ToString());

            //}
            //catch
            //{
            //}
        }

        public ListViewItem MakeListViewItemDetalhesDocumento(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();
                    
            olvItem.Text = m_sDOC_ID;
            olvItem.SubItems.Add(m_sDOC_ZONA5);
            olvItem.SubItems.Add(m_sDOC_ZONA4);
            olvItem.SubItems.Add(m_sDOC_ZONA3);
            string montanteToInsert = this.m_dDOC_ZONA2.ToString().Equals("0") ? this.m_dDOC_ZONA2.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dDOC_ZONA2).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDOC_ZONA2).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sDOC_ZONA1);
            olvItem.SubItems.Add(m_iDOCSTAT_ID.ToString() + " " + m_sDOCSTAT_ABR);
            olvItem.SubItems.Add(m_sDOC_DOCNIB);
            olvItem.SubItems.Add(m_sDOC_REFARQ);
            olvItem.SubItems.Add(m_iDOC_NSEQ.ToString());
            olvItem.SubItems.Add(m_sDOC_CHAVEH);
            olvItem.SubItems.Add(m_sDOC_INDEX);
            olvItem.SubItems.Add(m_sDOC_MAQUINA);
            olvItem.SubItems.Add(m_iDOC_BALTOM.ToString());
            olvItem.SubItems.Add(m_sDOC_CHAVEHEXT);
            olvItem.SubItems.Add(m_iDOC_TIPO.ToString());
            olvItem.SubItems.Add(m_dtDOC_TIMER.ToString(sDateTimeFormat));

            olvItem.SubItems.Add(m_dtREMIN_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sREMIN_ID);
            olvItem.SubItems.Add(m_sTRANOUT_ID);
            olvItem.SubItems.Add(m_sREMIN_PAIS);
            olvItem.SubItems.Add(m_iREMIN_BANCO.ToString());
            olvItem.SubItems.Add(m_iREMIN_BALCAO.ToString());
            olvItem.SubItems.Add(m_sREMIN_NUMERO);
            olvItem.SubItems.Add(m_iTRANOUTSTAT_ID.ToString());
            olvItem.SubItems.Add(m_sTRANOUT_NUMERO);
            olvItem.SubItems.Add(m_sDOC_ERRO);
            olvItem.SubItems.Add(m_sDOCORI_ID);
            olvItem.SubItems.Add(m_dtDOC_DATADIGIT.ToString(sDateFormat));

            return olvItem;
        }

        public string getImgFrente(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where DOC_ID= " + m_sDOC_ID + " and IMG_SIDE = 0 and IMG_TYPE= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select IMG_IMAGE from dbo.Imagem" + sWhereClauseFront);

            if (aImgF == null)
                return null;

            sFileNameFrente = oParameters.GetTempFileName("IMGFront") + ".jpg";

            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        public string getImgBack(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null)
        {
            string sFileNameBack, sWhereClauseBack;
            sWhereClauseBack = " where DOC_ID= " + m_sDOC_ID + " and IMG_SIDE = 1 and IMG_TYPE= 'JPG'";
            byte[] aImgB = (byte[])oParameters.DirectSqlScalar("select IMG_IMAGE from dbo.Imagem" + sWhereClauseBack);

            if (aImgB == null)
                return null;

            sFileNameBack = oParameters.GetTempFileName("IMGBack") + ".jpg";
            WriteImage(aImgB, sFileNameBack);

            return sFileNameBack;
        }

        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/DetalhesDocumentoBalcao.cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Windows.Forms;
using System.Data;
using System.IO;

namespace CIActividades
{
    public class DetalhesDocumentoBalcao
    {
        public DateTime m_dtREMIN_DATA;
        public int m_iREMIN_BALCAO;
        public string m_sREMIN_NUMERO;
        public string m_sDOC_ID;
        public string m_sDOCORI_ID;
        public int m_iDOC_BALTOM;
        public string m_sDOC_INDEX;
        public string m_sDOC_DOCNIB;
        public int DOC_TIPO;

        private void InitVars()
        {
            m_dtREMIN_DATA = DateTime.MinValue;
            m_iREMIN_BALCAO = 0;
            m_sREMIN_NUMERO = "";
            m_sDOC_ID = "-1";
            m_sDOCORI_ID = "-1";
            m_iDOC_BALTOM = 0;
            m_sDOC_INDEX = "";
            m_sDOC_DOCNIB = "";
            DOC_TIPO = 0;
        }      

        public DetalhesDocumentoBalcao(DataRow oRow)
        {
            InitVars();

            try
            {
                m_dtREMIN_DATA = Convert.ToDateTime(oRow["REMIN_DATA"]); // ?!
                m_iREMIN_BALCAO = Convert.ToInt16(oRow["REMIN_BALCAO"]);
                m_sREMIN_NUMERO = Convert.ToString(oRow["REMIN_NUMERO"]);
                m_sDOC_ID = Convert.ToString(oRow["DOC_ID"]);
                m_sDOCORI_ID = Convert.ToString(oRow["DOCORI_ID"]); // ?!
                m_iDOC_BALTOM = Convert.ToInt16(oRow["DOCBALCAO_BALTOM"]);
                if (oRow["DOC_INDEX"] == DBNull.Value)
                {
                    m_sDOC_INDEX = String.Empty;
                }
                else
                {
                    m_sDOC_INDEX = Convert.ToString(oRow["DOC_INDEX"]);
                }
                //try { m_sDOC_INDEX = Convert.ToString(oRow["DOC_INDEX"]); } catch { }
                if (oRow["DOC_NIB"] == DBNull.Value)
                {
                    m_sDOC_DOCNIB = String.Empty;
                }
                else
                {
                    m_sDOC_DOCNIB = Convert.ToString(oRow["DOC_NIB"]);
                }
                //try { m_sDOC_DOCNIB = Convert.ToString(oRow["DOC_NIB"]); } catch { }
                DOC_TIPO = Convert.ToInt16(oRow["DOC_TIPO"]); 
            }
            catch
            {
            }
        } 
    }
}


// FILE: SDCIM/ModusCI/CIActividades/DetalhesEstornosResumo.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    class DetalhesEstornosResumo
    {
        public DateTime ZEstorno { get; set; }
        public string EstadoEstornoDesc { get; set; }
        public Int32 EstadoEstornoID { get; set; }
        public Int32 NumEstorno { get; set; }
        public int NumDocs { get; set; }
        public double Montante { get; set; }
        public string ENVM { get; set; }
        public DateTime ZProcessamento { get; set; }
        public Int32 RemessaTipoID { get; set; }
        private String _remesssaTipoDest = String.Empty;
        public String RemessaTipoDesc
        {
            get
            {
                return this._remesssaTipoDest;
            }
            set
            {
                this._remesssaTipoDest = value;
            }
        }

        public void iniciarVar()
        {
            this.ZEstorno = DateTime.MinValue;
            this.EstadoEstornoDesc = "";
            this.EstadoEstornoID = 0;
            this.NumEstorno = 0;
            this.NumDocs = 0;
            this.Montante = 0.0f;
            this.ENVM = "";
            this.RemessaTipoDesc = String.Empty;
            this.RemessaTipoID = 0;
        }

        public DetalhesEstornosResumo(SqlDataReader dr)
        {
            iniciarVar();
            try
            {
                this.ZProcessamento = Convert.ToDateTime(dr["Z_PROCESS"]);
                ZEstorno = Convert.ToDateTime(dr["Z_ESTRN"]);
                EstadoEstornoDesc = Convert.ToString(dr["D_ESTRN_STATUS"]);
                EstadoEstornoID = Convert.ToInt32(dr["ESTRN_STATUS_ID"]);
                NumEstorno = Convert.ToInt32(dr["QT_ESTRN"]);
                NumDocs = Convert.ToInt32(dr["ESTRN_QT_DOCS"]);
                Montante = Convert.ToDouble(dr["ESTRN_MT_DOCS"]);
                ENVM = Convert.ToString(dr["LOTEENV_CGDERROR"]);
                this.RemessaTipoDesc = Convert.ToString(dr["REMTIPOBALCAO_DESC"]);
                this.RemessaTipoID = Convert.ToInt32(dr["REMBALCAO_TIPO_BALCAO_ID"]);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ListViewItem MakeListViewItemEstornoResumos(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = this.ZProcessamento.ToString(sDateFormat);
            olvItem.SubItems.Add(this.ZEstorno.ToString(sDateFormat));
            olvItem.SubItems.Add(this.EstadoEstornoID.ToString() + " " + this.EstadoEstornoDesc.ToString());
            olvItem.SubItems.Add(this.RemessaTipoID + " - " + this.RemessaTipoDesc.ToString());
            olvItem.SubItems.Add(this.NumEstorno.ToString());
            olvItem.SubItems.Add(this.NumDocs.ToString());
            string montanteToInsert = this.Montante.ToString().Equals("0") ? this.Montante.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.Montante).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(this.Montante).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(this.ENVM.ToString() == "0" ? "" : "Erro");
            return olvItem;
        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ImagemBalcaoForm.Designer.cs
﻿namespace CIActividades
{
    partial class ImagemBalcaoForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.imgFrente = new System.Windows.Forms.PictureBox();
            this.imgVerso = new System.Windows.Forms.PictureBox();
            this.lblErro = new System.Windows.Forms.Label();
            ((System.ComponentModel.ISupportInitialize)(this.imgFrente)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.imgVerso)).BeginInit();
            this.SuspendLayout();
            // 
            // imgFrente
            // 
            this.imgFrente.Location = new System.Drawing.Point(12, 12);
            this.imgFrente.Name = "imgFrente";
            this.imgFrente.Size = new System.Drawing.Size(490, 230);
            this.imgFrente.TabIndex = 0;
            this.imgFrente.TabStop = false;
            // 
            // imgVerso
            // 
            this.imgVerso.Location = new System.Drawing.Point(12, 248);
            this.imgVerso.Name = "imgVerso";
            this.imgVerso.Size = new System.Drawing.Size(490, 242);
            this.imgVerso.TabIndex = 1;
            this.imgVerso.TabStop = false;
            // 
            // lblErro
            // 
            this.lblErro.AutoSize = true;
            this.lblErro.Font = new System.Drawing.Font("Arial", 36F, System.Drawing.FontStyle.Bold);
            this.lblErro.ForeColor = System.Drawing.Color.Red;
            this.lblErro.Location = new System.Drawing.Point(29, 214);
            this.lblErro.Name = "lblErro";
            this.lblErro.Size = new System.Drawing.Size(452, 56);
            this.lblErro.TabIndex = 2;
            this.lblErro.Text = "ERRO NA IMAGEM";
            // 
            // ImagemBalcaoForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(514, 502);
            this.Controls.Add(this.lblErro);
            this.Controls.Add(this.imgVerso);
            this.Controls.Add(this.imgFrente);
            this.Name = "ImagemBalcaoForm";
            this.Text = "ImagemBalcaoForm";
            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.MostraImagem_FormClosed);
            this.Load += new System.EventHandler(this.ImagemBalcaoForm_Load_1);
            ((System.ComponentModel.ISupportInitialize)(this.imgFrente)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.imgVerso)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion
                 
        private System.Windows.Forms.PictureBox imgFrente;
        private System.Windows.Forms.PictureBox imgVerso;
        private System.Windows.Forms.Label lblErro;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ImagemBalcaoForm.cs
﻿using System;
using System.IO;
using System.Windows.Forms;
using NBiis;

namespace CIActividades
{
    public partial class ImagemBalcaoForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        int m_sDOCMDI_ID;
        public ImagemBalcaoForm()
        {
            InitializeComponent();

        }
        public ImagemBalcaoForm(CIConfigGP.CIGlobalParameters oParameters, int sDOCMDI_ID)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_sDOCMDI_ID = sDOCMDI_ID;
        }
        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }

        public string getImgFrente(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileName = m_oParameters.GetTempFileName("IMGMDIFront") + ".jpg";
            String query = "select top 1 IMGBALCAO_IMAGE from dbo.Imagem_Balcao where DOCBALCAO_ID= " + m_sDOCMDI_ID + " and IMGBALCAO_SIDE = 0 ";
            this.SetImage(oParameters, query, sFileName);
            return sFileName;
        }

        public string getImgBack(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileName = m_oParameters.GetTempFileName("IMGMDIBack") + ".jpg";
            String query = "select top 1 IMGBALCAO_IMAGE from dbo.Imagem_Balcao where DOCBALCAO_ID= " + m_sDOCMDI_ID + " and IMGBALCAO_SIDE = 1 ";
            this.SetImage(oParameters, query, sFileName);
            return sFileName;
        }

        private void SetImage(CIConfigGP.CIGlobalParameters oParameters, string query, string imageName)
        {
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar(query);
            WriteImage(aImgF, imageName);
        }
        private void MostraImagem_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                if (imgFrente.Image != null) imgFrente.Image.Dispose();
                if (imgVerso.Image != null) imgVerso.Image.Dispose();
                imgFrente.Image = null;
                imgVerso.Image = null;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 12);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ImagemBalcaoForm_Load_1(object sender, EventArgs e)
        {

            try
            {
                //parte da frente
                string sFileNameFront;
                sFileNameFront = getImgFrente(m_oParameters);
                imgFrente.Image = System.Drawing.Image.FromFile(sFileNameFront);
                imgFrente.SizeMode = PictureBoxSizeMode.StretchImage;

                //parte de tras
                string sFileNameBack;
                sFileNameBack = getImgBack(m_oParameters);
                imgVerso.Image = System.Drawing.Image.FromFile(sFileNameBack);
                imgVerso.SizeMode = PictureBoxSizeMode.StretchImage;
                lblErro.Visible = false;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 11);
                lblErro.Visible = true;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ImagemBalcaoForm.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIActividades/InterfaceDocs.cs
﻿using System;
using System.Collections.Generic;
using System.Text;

namespace CIActividades
{
    public interface InterfaceDocs
    {
        string getImgFrente(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null);
        string getImgBack(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null);
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ListViewAgregacaoBalcaoAcoes.cs
﻿using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    public class ListViewAgregacaoBalcaoAcoes
    {
        public DateTime dtREM_BALCAO_DATA;
        public DateTime dtREM_BALCAO_PROC;
        public Int16 iREM_BALCAO;
        public Int32 iREM_NUMERO;
        public Int32 iNUM_DEPOSITO; // REM_SEQUENCIA
        public String sREMBALCAO_STAT_DESC; //Estado da Remessa
        public Int32 iAgregacaoID;
        public String sRemessaTipo;
        public String sTipoAccao;

        private void initVars()
        {
            dtREM_BALCAO_DATA = DateTime.MinValue;
            dtREM_BALCAO_PROC = DateTime.MinValue;
            sREMBALCAO_STAT_DESC = String.Empty;
            iAgregacaoID = 0;
            sRemessaTipo = String.Empty;
        }

        public ListViewAgregacaoBalcaoAcoes(SqlDataReader dr)
        {
            initVars();

            dtREM_BALCAO_DATA = Convert.ToDateTime(dr["REMBALCAO_DATA"]);
            dtREM_BALCAO_PROC = Convert.ToDateTime(dr["REMBALCAO_TIMER"]);
            iREM_BALCAO = Convert.ToInt16(dr["REMBALCAO_BALCAO"]);
            iREM_NUMERO = Convert.ToInt32(dr["REMBALCAO_NUMERO"]);
            iNUM_DEPOSITO = Convert.ToInt32(dr["REMBALCAO_SEQUENCIA"]);
            sREMBALCAO_STAT_DESC = Convert.ToString(dr["REMINSTAT_DESC"]);
            iAgregacaoID = Convert.ToInt32(dr["DOCACOMAGR_ID"]);
            sRemessaTipo = Convert.ToString(dr["REMTIPOBALCAO_DESC"]);
            sTipoAccao = Convert.ToString(dr["TIBCO"]);
            //dtFICH_DATA = Convert.ToDateTime(dr["FICH_DATA"]);
        }

        public ListViewAgregacaoBalcaoAcoes(DataRow dtr)
        {
            initVars();

            dtREM_BALCAO_DATA = Convert.ToDateTime(dtr["REMBALCAO_DATA"]);
            dtREM_BALCAO_PROC = Convert.ToDateTime(dtr["REMBALCAO_TIMER"]);
            iREM_BALCAO = Convert.ToInt16(dtr["REMBALCAO_BALCAO"]);
            iREM_NUMERO = Convert.ToInt32(dtr["REMBALCAO_NUMERO"]);
            iNUM_DEPOSITO = Convert.ToInt32(dtr["REMBALCAO_SEQUENCIA"]);
            sREMBALCAO_STAT_DESC = Convert.ToString(dtr["REMINSTAT_DESC"]);
            iAgregacaoID = Convert.ToInt32(dtr["DOCACOMAGR_ID"]);
            sRemessaTipo = Convert.ToString(dtr["REMTIPOBALCAO_DESC"]);
            sTipoAccao = Convert.ToString(dtr["TIBCO"]);
        }

        public ListViewItem MakeListViewItemsAcoes(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = dtREM_BALCAO_DATA.ToString(sDateFormat);
            olvItem.SubItems.Add(dtREM_BALCAO_PROC.ToString(sDateFormat));
            olvItem.SubItems.Add(iREM_BALCAO.ToString("0000"));
            olvItem.SubItems.Add(iREM_NUMERO.ToString("0000000"));
            olvItem.SubItems.Add(iNUM_DEPOSITO.ToString("000000"));
            olvItem.SubItems.Add(sREMBALCAO_STAT_DESC);
            olvItem.SubItems.Add(sRemessaTipo);
            olvItem.SubItems.Add(sTipoAccao);
            return olvItem;
        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ListViewBalcaoAcoes.cs
﻿using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    public class ListViewBalcaoAcoes
    {
        public DateTime dtREM_BALCAO_DATA;
        public DateTime dtREM_BALCAO_PROC;
        public Int16 iREM_BALCAO;
        public Int32 iREM_NUMERO;
        public Int32 iNUM_DEPOSITO; // REM_SEQUENCIA
        public String sREMBALCAO_STAT_DESC; //Estado da Remessa
        public String sDOC_ID;
        public String sZIB; // [DOC_ZONA5]
        public String sNUM_CONTA; // [DOC_ZONA4]
        public String sNUM_CHEQUE; //[DOC_ZONA3]
        public Double fCHEQUE_MONTANTE; //[DOC_ZONA2]
        public String sTIPO_CHEQUE; // [DOC_ZONA1]
        public String sREM_NIB;
        public String sREFARQ;
        public String sREFARQ_ORI;
        public String sDOC_CODANA;
        public String sDOC_CANCELADO_ID;
        public String sCANCELA_EFECTUADO; // Coluna Cancelamento 1º campo
        public String sCANCELA_ESTADO; // Coluna Cancelamento 2º campo
        public String sCANCELA_DESCRICAO; // Coluna Cancelamento 3º campo
        public String sCANCELA_ERRO; // Coluna Cancelamento 4º campo
        public String sDOCACOM_NOTIFICADO_ID; // Coluna Notificacao 1º campo
        public String sNOTIFICA_EFECTUADO; // Coluna Notificacao 1º campo
        public String sNOTIFICA_ESTADO; // Coluna Notificacao 2º campo
        public String sNOTIFICA_DESCRICAO; // Coluna Notificacao 3º campo
        public String sNOTIFICA_ERRO; // Coluna Notificacao 4º campo
        public String sDOC_CHAVEH;
        public Int16 iREMBALCAO_TIPO_ID;
        public DateTime dtFICH_DATA;
        public String sDOCACOM_ID;

        private void initVars()
        {
            dtREM_BALCAO_DATA = DateTime.MinValue;
            dtREM_BALCAO_PROC = DateTime.MinValue;
            sREMBALCAO_STAT_DESC = "";
            sDOC_ID = "";
            sZIB = "";
            sNUM_CONTA = "";
            sNUM_CHEQUE = "";
            sTIPO_CHEQUE = "";
            sREM_NIB = "";
            sREFARQ = "";
            sREFARQ_ORI = "";
            sDOC_CODANA = "";
            sDOC_CANCELADO_ID = "";
            sCANCELA_EFECTUADO = "";
            sCANCELA_ESTADO = "";
            sCANCELA_DESCRICAO = "";
            sCANCELA_ERRO = "";
            sDOCACOM_NOTIFICADO_ID = "";
            sNOTIFICA_EFECTUADO = "";
            sNOTIFICA_ESTADO = "";
            sNOTIFICA_DESCRICAO = "";
            sNOTIFICA_ERRO = "";
            sDOC_CHAVEH = "";
        }

        public ListViewBalcaoAcoes(SqlDataReader dr)
        {
            initVars();

            dtREM_BALCAO_DATA = Convert.ToDateTime(dr["REMBALCAO_DATA"]);
            dtREM_BALCAO_PROC = Convert.ToDateTime(dr["REMBALCAO_TIMER"]);
            iREM_BALCAO = Convert.ToInt16(dr["BALCAO"]);
            iREM_NUMERO = Convert.ToInt32(dr["REMBALCAO_NUMERO"]);
            iNUM_DEPOSITO = Convert.ToInt32(dr["REMBALCAO_SEQUENCIA"]);
            sREMBALCAO_STAT_DESC = Convert.ToString(dr["REMINSTAT_DESC"]);
            sDOC_ID = Convert.ToString(dr["DOC_ID"]);
            sZIB = Convert.ToString(dr["DOCACOM_ZONA5"]);
            sNUM_CONTA = Convert.ToString(dr["DOCACOM_ZONA4"]);
            sNUM_CHEQUE = Convert.ToString(dr["DOCACOM_ZONA3"]);
            fCHEQUE_MONTANTE = Convert.ToDouble(dr["DOCACOM_ZONA2"]);
            sTIPO_CHEQUE = Convert.ToString(dr["DOCACOM_ZONA1"]);
            sREM_NIB = Convert.ToString(dr["REMBALCAO_NIB"]);
            sREFARQ = Convert.ToString(dr["REFARQ"]);
            sREFARQ_ORI = Convert.ToString(dr["REFARQ_ORI"]);
            sDOC_CODANA = Convert.ToString(dr["DOCACOM_CODANA"]);
            sDOC_CANCELADO_ID = Convert.ToString(dr["DOCACOM_CANCELADO"]);
            sCANCELA_EFECTUADO = Convert.ToString(dr["CANCELA_EFECTUADO"]);
            sCANCELA_ESTADO = Convert.ToString(dr["CANCEL_ESTADO"]);
            sCANCELA_DESCRICAO = Convert.ToString(dr["CANCELA_DESCRICAO"]);
            sCANCELA_ERRO = Convert.ToString(dr["CANCELA_ERRO"]);
            sDOCACOM_NOTIFICADO_ID = Convert.ToString(dr["DOCACOM_NOTIFICADO"]);
            sNOTIFICA_EFECTUADO = Convert.ToString(dr["NOTIFICA_EFECTUADO"]);
            sNOTIFICA_ESTADO = Convert.ToString(dr["NOTIFICA_ESTADO"]);
            sNOTIFICA_DESCRICAO = Convert.ToString(dr["NOTIFICA_DESCRICAO"]);
            sNOTIFICA_ERRO = Convert.ToString(dr["NOTIFICA_ERRO"]);
            sDOC_CHAVEH = Convert.ToString(dr["DOCACOM_CHAVEH"]);
            iREMBALCAO_TIPO_ID = Convert.ToInt16(dr["REMBALCAO_TIPO_ID"]);
            sDOCACOM_ID = Convert.ToString(dr["DOCACOM_ID"]);
        }

        public ListViewBalcaoAcoes(DataRow dtr)
        {
            initVars();

            dtREM_BALCAO_DATA = Convert.ToDateTime(dtr["REMBALCAO_DATA"]);
            dtREM_BALCAO_PROC = Convert.ToDateTime(dtr["REMBALCAO_TIMER"]);
            iREM_BALCAO = Convert.ToInt16(dtr["BALCAO"]);
            iREM_NUMERO = Convert.ToInt32(dtr["REMBALCAO_NUMERO"]);
            iNUM_DEPOSITO = Convert.ToInt32(dtr["REMBALCAO_SEQUENCIA"]);
            sREMBALCAO_STAT_DESC = Convert.ToString(dtr["REMINSTAT_DESC"]);
            sDOC_ID = Convert.ToString(dtr["DOC_ID"]);
            sZIB = Convert.ToString(dtr["DOCACOM_ZONA5"]);
            sNUM_CONTA = Convert.ToString(dtr["DOCACOM_ZONA4"]);
            sNUM_CHEQUE = Convert.ToString(dtr["DOCACOM_ZONA3"]);
            fCHEQUE_MONTANTE = Convert.ToDouble(dtr["DOCACOM_ZONA2"]);
            sTIPO_CHEQUE = Convert.ToString(dtr["DOCACOM_ZONA1"]);
            sREM_NIB = Convert.ToString(dtr["REMBALCAO_NIB"]);
            sREFARQ = Convert.ToString(dtr["REFARQ"]);
            sREFARQ_ORI = Convert.ToString(dtr["REFARQ_ORI"]);
            sDOC_CODANA = Convert.ToString(dtr["DOCACOM_CODANA"]);
            sDOC_CANCELADO_ID = Convert.ToString(dtr["DOCACOM_CANCELADO"]);
            sCANCELA_EFECTUADO = Convert.ToString(dtr["CANCELA_EFECTUADO"]);
            sCANCELA_ESTADO = Convert.ToString(dtr["CANCEL_ESTADO"]);
            sCANCELA_DESCRICAO = Convert.ToString(dtr["CANCELA_DESCRICAO"]);
            sCANCELA_ERRO = Convert.ToString(dtr["CANCELA_ERRO"]);
            sDOCACOM_NOTIFICADO_ID = Convert.ToString(dtr["DOCACOM_NOTIFICADO"]);
            sNOTIFICA_EFECTUADO = Convert.ToString(dtr["NOTIFICA_EFECTUADO"]);
            sNOTIFICA_ESTADO = Convert.ToString(dtr["NOTIFICA_ESTADO"]);
            sNOTIFICA_DESCRICAO = Convert.ToString(dtr["NOTIFICA_DESCRICAO"]);
            sNOTIFICA_ERRO = Convert.ToString(dtr["NOTIFICA_ERRO"]);
            sDOC_CHAVEH = Convert.ToString(dtr["DOCACOM_CHAVEH"]);
            iREMBALCAO_TIPO_ID = Convert.ToInt16(dtr["REMBALCAO_TIPO_ID"]);
            sDOCACOM_ID = Convert.ToString(dtr["DOCACOM_ID"]);
        }

        public ListViewItem MakeListViewItemsAcoes(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = dtREM_BALCAO_DATA.ToString(sDateFormat);
            olvItem.SubItems.Add(dtREM_BALCAO_PROC.ToString(sDateFormat));
            olvItem.SubItems.Add(iREM_BALCAO.ToString("0000"));
            olvItem.SubItems.Add(iREM_NUMERO.ToString("0000000"));
            olvItem.SubItems.Add(iNUM_DEPOSITO.ToString("000000"));
            olvItem.SubItems.Add(sREMBALCAO_STAT_DESC);
            olvItem.SubItems.Add(sDOC_ID);
            olvItem.SubItems.Add(sZIB);
            olvItem.SubItems.Add(sNUM_CONTA);
            olvItem.SubItems.Add(sNUM_CHEQUE);
            string montanteToInsert = this.fCHEQUE_MONTANTE.ToString().Equals("0") ? this.fCHEQUE_MONTANTE.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.fCHEQUE_MONTANTE).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(fCHEQUE_MONTANTE).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(sTIPO_CHEQUE);
            olvItem.SubItems.Add(sREM_NIB);
            olvItem.SubItems.Add(sREFARQ);
            olvItem.SubItems.Add(sREFARQ_ORI);
            olvItem.SubItems.Add(sDOC_CODANA);
            olvItem.SubItems.Add(sCANCELA_EFECTUADO + "  " + sCANCELA_ESTADO + " " + sCANCELA_DESCRICAO + " " + sCANCELA_ERRO);
            olvItem.SubItems.Add(sDOC_CANCELADO_ID);
            olvItem.SubItems.Add(sNOTIFICA_EFECTUADO + " " + sNOTIFICA_ESTADO + " " + sNOTIFICA_DESCRICAO + " " + sNOTIFICA_ERRO);
            olvItem.SubItems.Add(sDOCACOM_NOTIFICADO_ID);
            olvItem.SubItems.Add(sDOC_CHAVEH);
            return olvItem;
        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ListViewDetalhes.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIActividades
{
    public abstract class ListViewDetalhes
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

//        public string m_sID;
        public string m_sRemessaID;
        public string m_sNumero;
        public DateTime m_dtTimer;
        public int m_iStatus;
        public string  m_sStatusAbr;
        public int m_iQt;
        public decimal m_dMt;
        public string m_sErro;
        public string m_sErroDescricao;

        public abstract string GetTableName();
        public abstract void ChangeEstado(int iNewStatus, string m_sSPProcessa, string m_sSPValida);
        public abstract ListViewItem MakeListViewItem(string sDateFormat, string sDateTimeFormat);
        public abstract string GetWhereClause2ViewDetails();

        public ListViewDetalhes()
        {
//            m_sID = "";
            m_sNumero = "";
            m_dtTimer = new DateTime(0);
            m_iStatus = -9999;
            m_sStatusAbr = "";
            m_iQt = 0;
            m_dMt = 0;
            m_sErro = "";
            m_sErroDescricao = "";

            this.m_oParameters = null;
        }

        public ListViewDetalhes(SqlDataReader oReader, CIConfigGP.CIGlobalParameters oParameters)
        {
//            m_sID = "";
            m_sNumero = "";
            m_dtTimer = new DateTime(0);
            m_iStatus = -9999;
            m_sStatusAbr = "";
            m_iQt = 0;
            m_dMt = 0;
            m_sErro = "";
            m_sErroDescricao = "";

            this.m_oParameters = oParameters;
        }

        public ListViewDetalhes(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
        {
//            m_sID = "";
            m_sNumero = "";
            m_dtTimer = new DateTime(0);
            m_iStatus = -9999;
            m_sStatusAbr = "";
            m_iQt = 0;
            m_dMt = 0;
            m_sErro = "";
            m_sErroDescricao = "";
            this.m_oParameters = oParameters;
        }
      
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ListViewDetalhesImagem.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;
using CIConfigGlobalParameters;
using System.IO;

namespace CIActividades
{
    class ListViewDetalhesImagem
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public string m_sId;
        public int m_iNrPagina;
        public int m_iEstado;
        public string m_sErro;
        public DateTime m_dtTimer;
        public string m_sIdConsulta;

        public ListViewDetalhesImagem()
        {
            m_sId = "";
            m_iNrPagina = -1;
            m_iEstado = 0;
            m_sErro = "";
            m_dtTimer   = DateTime.Now;
            m_sIdConsulta = "";

            this.m_oParameters = null;
        }

        public ListViewDetalhesImagem(SqlDataReader oReader, CIConfigGP.CIGlobalParameters oParameters)
        {
            this.m_oParameters = oParameters;

            m_sId = Convert.ToString( oReader["CONSULTA_ID"] );
            m_iNrPagina = Convert.ToInt32(oReader["NUM_PAGINA"]);
            m_iEstado = Convert.ToInt32(oReader["ESTADO"]);
            m_sErro = Convert.ToString(oReader["LAST_ERRO_DESC"]);
            m_dtTimer = Convert.ToDateTime(oReader["TIMER_ACTUALIZACAO"]);
            m_sIdConsulta = Convert.ToString(oReader["ID_DADOS_DOCUMENTO_CONSULTA"]);
        }

        public virtual ListViewItem BuildListViewItem()
        {
            ListViewItem oItem = new ListViewItem();

            oItem.Text = m_sIdConsulta;
            oItem.SubItems.Add(m_dtTimer.ToString("yyyy-MM-dd HH:mm:ss"));
            oItem.SubItems.Add(m_iNrPagina.ToString());
            oItem.SubItems.Add(m_iEstado.ToString());
            oItem.SubItems.Add(m_sErro);

            oItem.Tag = this;

            return oItem;
        }

        public string GetImage()
        {
            string sFileName;

            byte[] aImgF = (byte[])m_oParameters.DirectSqlScalar("select IMAGEM from dbo.TIBCO_OBTEM_IMAGEM where CONSULTA_ID = " + m_sId);

            if (aImgF == null)
            {
                return "";
            }

            sFileName = m_oParameters.GetTempFileName(m_sId) + ".jpg";

            WriteImage(aImgF, sFileName);

            return sFileName;
        }

        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ListViewEstornoDeposito.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    public class ListViewEstornoDeposito
    {
        public String m_cREM_PAIS;
        public Int16 m_iREM_BANCO;
        public Int16 m_iREM_BALCAO;
        public Int32 m_iDeposito; // REM_SEQUENCIA
        public Int32 m_Estado_ID;
        public String m_Estado;
        public DateTime m_dtREM_DATA;
        public String m_sREM_OPERADOR;
        //public String m_RemessaTipo;
        //public Int64 m_iRemessa; // [REM_NUMERO]

        private void InitVars()
        {
            m_cREM_PAIS = "";
            m_dtREM_DATA = DateTime.MinValue;
            m_sREM_OPERADOR = "";
            //m_RemessaTipo = "";
            m_Estado = "";
        }

        public ListViewEstornoDeposito(SqlDataReader dr)
        {
            InitVars();

            m_cREM_PAIS = Convert.ToString(dr["REM_PAIS"]);
            m_iREM_BANCO = Convert.ToInt16(dr["REM_BANCO"]);
            m_iREM_BALCAO = Convert.ToInt16(dr["REM_BALCAO"]);
            m_iDeposito = Convert.ToInt32(dr["REM_SEQUENCIA"]);
            this.m_Estado_ID = Convert.ToInt32(dr["STATUS_ID"]);
            m_Estado = Convert.ToString(dr["NM_SACO_STATUS"]);
            m_dtREM_DATA = Convert.ToDateTime(dr["REM_DATA"]);
            m_sREM_OPERADOR = Convert.ToString(dr["REM_OPERADOR"]);
            //m_RemessaTipo = Convert.ToString(dr["REM_TIPO_ID"]);
            //m_iRemessa = Convert.ToInt64(dr["REM_NUMERO"]);
        }

        public ListViewItem MakeListViewItem(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_cREM_PAIS.ToString();
            olvItem.SubItems.Add(m_iREM_BANCO.ToString());
            olvItem.SubItems.Add(m_iREM_BALCAO.ToString("0000"));
            olvItem.SubItems.Add(m_iDeposito.ToString("0000000"));
            olvItem.SubItems.Add(m_Estado.ToString());
            olvItem.SubItems.Add(m_dtREM_DATA.ToString(sDateFormat));//sDateFormat
            olvItem.SubItems.Add(m_sREM_OPERADOR.ToString());
            //olvItem.SubItems.Add(m_iRemessa.ToString("000000"));
            //olvItem.SubItems.Add(m_RemessaTipo.ToString());

            return olvItem;
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ListViewEstornoDocumento.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    public class ListViewEstornoDocumento
    {

        public String m_cREM_PAIS;
        public Int16 m_iREM_BANCO;
        public Int16 m_iREM_BALCAO;
        public Int32 m_iDeposito; // REM_SEQUENCIA
        public Int32 m_Estado_ID;
        public String  m_Estado;
        public DateTime m_dtREM_DATA;
        public String m_sREM_OPERADOR;
        public Int32 m_iDOC_NSEQ;
       // public String m_RemessaTipo;


        private void InitVars()
        {
            m_cREM_PAIS = "";
            m_dtREM_DATA = DateTime.MinValue;
            m_sREM_OPERADOR = "";
            //m_RemessaTipo = "";
            m_Estado = "";
        }

        public ListViewEstornoDocumento(SqlDataReader dr)
        {
            InitVars();

            m_cREM_PAIS = Convert.ToString(dr["REM_PAIS"]);
            m_iREM_BANCO = Convert.ToInt16(dr["REM_BANCO"]);
            m_iREM_BALCAO = Convert.ToInt16(dr["REM_BALCAO"]);
            m_iDeposito = Convert.ToInt32(dr["REM_SEQUENCIA"]);
            this.m_Estado_ID = Convert.ToInt32(dr["STATUS_ID"]);
            m_Estado = Convert.ToString(dr["NM_SACO_STATUS"]);
            m_dtREM_DATA = Convert.ToDateTime(dr["REM_DATA"]);
            m_sREM_OPERADOR = Convert.ToString(dr["REM_OPERADOR"]);
            m_iDOC_NSEQ = Convert.ToInt32(dr["DOC_NSEQ"]);
            //m_RemessaTipo = Convert.ToString(dr["REM_TIPO_ID"]);
        }

        public ListViewItem MakeListViewItem(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_cREM_PAIS.ToString();
            olvItem.SubItems.Add(m_iREM_BANCO.ToString());
            olvItem.SubItems.Add(m_iREM_BALCAO.ToString("0000"));
            olvItem.SubItems.Add(m_iDeposito.ToString("0000000"));
            olvItem.SubItems.Add(m_Estado.ToString());
            olvItem.SubItems.Add(m_dtREM_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sREM_OPERADOR.ToString());
            olvItem.SubItems.Add(m_iDOC_NSEQ.ToString());
            //olvItem.SubItems.Add(m_RemessaTipo.ToString());
            return olvItem;
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/ListViewRemessaDetalhe.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
namespace CIActividades
{

    public class ListViewRemessaDetalhe: ListViewDetalhes
    {
        public DateTime m_dtREMIN_TIMER;
        public DateTime m_dtREMIN_TM_ENVIADA;
        public string m_sREMIN_PAIS;
        public int m_iREMIN_BANCO;
        public int m_iREMIN_BALCAO;
        public string m_sBALCAO_ABR;
        public DateTime m_dtREMIN_DATA;
        public string m_sREMPROC_CHAVEH;
        public string m_sREMPROC_CHAVEHEXT;
        public int m_iLOTEENV_CGDERROR;
        public int m_iOperativa;

        public int m_iMaquina;

        public override string GetTableName()
        {
            return "REMESSA_IN";
        }

        public ListViewRemessaDetalhe(SqlDataReader oReader, CIConfigGP.CIGlobalParameters oParameters)
            : base(oReader, oParameters)
        {
            m_sRemessaID = oReader["REMIN_ID"].ToString();
            m_dtREMIN_DATA = Convert.ToDateTime(oReader["REMIN_DATA"]);
            m_dtTimer = Convert.ToDateTime(oReader["REMPROC_TIMER"]);
            m_dtREMIN_TIMER = Convert.ToDateTime(oReader["REMIN_TIMER"]);
            m_dtREMIN_TM_ENVIADA = Convert.ToDateTime(oReader["REMIN_TM_ENVIADA"]);
            if (m_dtREMIN_TIMER == m_dtREMIN_TM_ENVIADA)
            {
                m_dtREMIN_TM_ENVIADA = DateTime.MinValue;
            }
            m_sREMIN_PAIS = oReader["REMIN_PAIS"].ToString();
            m_iREMIN_BANCO = Convert.ToInt16(oReader["REMIN_BANCO"]);
            m_iREMIN_BALCAO = Convert.ToInt16(oReader["REMIN_BALCAO"]);
            m_sBALCAO_ABR = oReader["BALCAO_ABR"].ToString();
            m_sNumero = oReader["REMIN_NUMERO"].ToString();
            m_iStatus = Convert.ToInt16(oReader["REMINSTAT_ID"]);
            m_sStatusAbr = oReader["REMINSTAT_ABR"].ToString();
            m_sREMPROC_CHAVEH = oReader["REMPROC_CHAVEH"].ToString();
            m_sREMPROC_CHAVEHEXT = oReader["REMPROC_CHAVEHEXT"].ToString();
            m_iQt = Convert.ToInt16(oReader["REMIN_QT_DOCS"]);
            m_dMt = Convert.ToDecimal(oReader["REMIN_MT_DOCS"]);
            m_sErro = oReader["REMPROC_ERRO"].ToString();
            m_iLOTEENV_CGDERROR = Convert.ToInt16(oReader["LOTEENV_CGDERROR"]);
            m_iOperativa = Convert.ToInt16(oReader["REMPROC_OPERATIVA"]);
            if (oReader["REMPROC_MAQUINA"] == DBNull.Value)
            {

                m_iMaquina = 0;
            }
            else
            {
                m_iMaquina = Convert.ToInt16(oReader["REMPROC_MAQUINA"]);
            } 
        }

        public ListViewRemessaDetalhe(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            : base(oRow, oParameters)
        {
            m_sRemessaID = oRow["REMIN_ID"].ToString();
            m_dtREMIN_DATA = Convert.ToDateTime(oRow["REMIN_DATA"]);
            m_dtTimer = Convert.ToDateTime(oRow["REMPROC_TIMER"]);
            m_dtREMIN_TIMER = Convert.ToDateTime(oRow["REMIN_TIMER"]);
            m_dtREMIN_TM_ENVIADA = Convert.ToDateTime(oRow["REMIN_TM_ENVIADA"]);
            if (m_dtREMIN_TIMER == m_dtREMIN_TM_ENVIADA)
            {
                m_dtREMIN_TM_ENVIADA = DateTime.MinValue;
            }
            m_sREMIN_PAIS = oRow["REMIN_PAIS"].ToString();
            m_iREMIN_BANCO = Convert.ToInt16(oRow["REMIN_BANCO"]);
            m_iREMIN_BALCAO = Convert.ToInt16(oRow["REMIN_BALCAO"]);
            m_sBALCAO_ABR = oRow["BALCAO_ABR"].ToString();
            m_sNumero = oRow["REMIN_NUMERO"].ToString();
            m_iStatus = Convert.ToInt16(oRow["REMINSTAT_ID"]);
            m_sStatusAbr = oRow["REMINSTAT_ABR"].ToString();
            m_sREMPROC_CHAVEH = oRow["REMPROC_CHAVEH"].ToString();
            m_sREMPROC_CHAVEHEXT = oRow["REMPROC_CHAVEHEXT"].ToString();
            m_iQt = Convert.ToInt16(oRow["REMIN_QT_DOCS"]);
            m_dMt = Convert.ToDecimal(oRow["REMIN_MT_DOCS"]);
            m_sErro = oRow["REMPROC_ERRO"].ToString();
            m_iLOTEENV_CGDERROR = Convert.ToInt16(oRow["LOTEENV_CGDERROR"]);
            m_iOperativa = Convert.ToInt16(oRow["REMPROC_OPERATIVA"]);
            if (oRow["REMPROC_MAQUINA"] == DBNull.Value)
            {

                m_iMaquina = 0;
            }
            else
            {
                m_iMaquina = Convert.ToInt16(oRow["REMPROC_MAQUINA"]);
            }
            //try
            //{
            //    m_iMaquina = Convert.ToInt16(oRow["REMPROC_MAQUINA"]);
            //}
            //catch
            //{
            //    m_iMaquina = 0;
            //}
        }

        public override ListViewItem MakeListViewItem(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_sRemessaID;
            olvItem.SubItems.Add(m_dtREMIN_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_dtTimer.ToString(sDateTimeFormat));
            if (m_dtREMIN_TM_ENVIADA == DateTime.MinValue)
            {
                olvItem.SubItems.Add("");
            }
            else
            {
                olvItem.SubItems.Add(m_dtREMIN_TM_ENVIADA.ToString(sDateTimeFormat));
            }
            olvItem.SubItems.Add(m_sREMIN_PAIS);//esconder
            olvItem.SubItems.Add(m_iREMIN_BANCO.ToString());//esconder
            olvItem.SubItems.Add(m_iREMIN_BALCAO.ToString() + " " + m_sBALCAO_ABR);
            olvItem.SubItems.Add(m_sNumero.ToString());
            olvItem.SubItems.Add(m_iStatus.ToString() + " " + m_sStatusAbr);
            olvItem.SubItems.Add(m_sREMPROC_CHAVEH);
            olvItem.SubItems.Add(m_sREMPROC_CHAVEHEXT);
            olvItem.SubItems.Add(m_iLOTEENV_CGDERROR.ToString());
            olvItem.SubItems.Add(m_iQt.ToString().PadLeft(6, ' '));
            string montanteToInsert = this.m_dMt.ToString().Equals("0") ? this.m_dMt.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dMt).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dMt).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sErro);
            olvItem.SubItems.Add(m_iMaquina.ToString("00"));
            
            return olvItem;
        }



        public override void ChangeEstado(int iNewEstado, string m_sSPProcessa, string m_sSPValida)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@OldEstado", m_iStatus));
            oParams.Add(new GeneralDBParameters("@NewEstado", iNewEstado));
            oParams.Add(new GeneralDBParameters("@ReminID", m_sRemessaID));
            
            try
            {
                if (m_sSPValida.Length > 0)
                {
                    
                    m_oParameters.DirectStoredProcedureNonQuery(m_sSPValida , ref oParams);
                }

                m_oParameters.DirectStoredProcedureNonQuery(m_sSPProcessa, ref oParams);

                string sSmg = "Mudou estado da REMESSA: " + m_sRemessaID + " de " + m_iStatus.ToString() + " para " + iNewEstado.ToString();
                GenericLog.GenLogRegistarAlerta(sSmg, "ChangeEstadoRemessa()", 110);
                m_oParameters.EnviarAlertaSituacao(110, sSmg);

            }
            catch (Exception ex)
            {
                if (!(ex.Message.Substring(0, 5).Equals("#004#")))
                {
                    throw;
                }

                DialogResult oRes = MessageBox.Show(ex.Message + "\nConfirma?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (oRes.Equals(DialogResult.Yes))
                {
                    try
                    {
                        FecharRemessa(1);

                    }
                    catch
                    {
                        throw;
                    }
                }
            }



        }

        

        public void FecharRemessa(int iForcarFecho)
        {
            string sSPName = "dbo.Update_FecharRemessa";
            ArrayList oParam = new ArrayList();

            oParam.Add(new GeneralDBParameters("@RemID", m_sRemessaID));
            //oParam.Add(new GeneralDBParameters("@Pais", m_sREMIN_PAIS));
            //oParam.Add(new GeneralDBParameters("@Banco", m_iREMIN_BANCO));
            //oParam.Add(new GeneralDBParameters("@Balcao",m_iREMIN_BALCAO));
            //oParam.Add(new GeneralDBParameters("@Numero", m_sNumero));
            //oParam.Add(new GeneralDBParameters("@Banco", m_iREMIN_BANCO));
            //oParam.Add(new GeneralDBParameters("@Data", m_dtREMIN_DATA));
            oParam.Add(new GeneralDBParameters("@ForcarFecho", iForcarFecho));

            m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref oParam);
        }

        public override string GetWhereClause2ViewDetails()
        {
            string sWhereClause;
            sWhereClause = " where REMIN_ID=" + m_sRemessaID;

            return sWhereClause;
        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/ListViewSacoDetalhe.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    public class ListViewSacoDetalhe
    {
        public String m_cREM_PAIS;
        public Int16 m_iREM_BANCO;
        public Int16 m_iREM_BALCAO;
        public Int32 m_iDeposito; // REM_SEQUENCIA
        public Int32 m_Estado_ID;
        public String  m_Estado;
        public DateTime m_dtREM_DATA;
        public String m_sREM_OPERADOR;
        public Int64 m_iRemessa; // [REM_NUMERO]
        public Int16 m_iREM_TIPO_ID;
        public String m_iREM_TIPO_Desc;
        public String m_cREM_APLICACAO;
        public Int32 m_iREM_QT_DOCS;
        public Double m_fREM_MT_DOCS;
        public String m_sREM_NIB;
        public String m_cZIB; // [DOC_ZONA5]
        public String m_cNUM_CONTA; // [DOC_ZONA4]
        public String m_cNUM_CHEQUE; //[DOC_ZONA3]
        public Double m_fCHEQUE_MONTANTE; //[DOC_ZONA2]
        public String m_cTIPO_CHEQU; // [DOC_ZONA1]
        public DateTime m_dtDOC_DATADIGIT;
        public Int32 m_iDOC_NSEQ;
        public Int32 m_iDOC_MAQUINA;
        public String TP_REGISTO;

        private void InitVars()
        {
            m_cREM_PAIS = "";
            m_dtREM_DATA = DateTime.MinValue;
            m_sREM_OPERADOR = "";
            m_cREM_APLICACAO = "";
            m_Estado = "";
            m_sREM_NIB = "";
            m_cZIB = "";
            m_cNUM_CONTA = "";
            m_cNUM_CHEQUE = "";
            m_cTIPO_CHEQU = "";
            m_dtDOC_DATADIGIT = DateTime.MinValue;
            TP_REGISTO = "";
            m_iREM_TIPO_Desc = "";
        }

        public ListViewSacoDetalhe(SqlDataReader dr)
        {
            InitVars();
            m_cREM_PAIS = Convert.ToString(dr["REM_PAIS"]);
            m_iREM_BANCO = Convert.ToInt16(dr["REM_BANCO"]);
            m_iREM_BALCAO = Convert.ToInt16(dr["REM_BALCAO"]);
            m_iDeposito = Convert.ToInt32(dr["REM_SEQUENCIA"]);
            this.m_Estado_ID = Convert.ToInt32(dr["STATUS_ID"]);
            m_Estado = Convert.ToString(dr["NM_SACO_STATUS"]);
            m_dtREM_DATA = Convert.ToDateTime(dr["REM_DATA"]);
            m_sREM_OPERADOR = Convert.ToString(dr["REM_OPERADOR"]);
            m_iRemessa = Convert.ToInt64(dr["REM_NUMERO"]);
            m_iREM_TIPO_ID = Convert.ToInt16(dr["REM_TIPO_ID"]);
            m_cREM_APLICACAO = Convert.ToString(dr["REM_APLICACAO"]);
            m_iREM_QT_DOCS = Convert.ToInt32(dr["REM_QT_DOCS"]);
            m_fREM_MT_DOCS = Convert.ToDouble(dr["REM_MT_DOCS"]);
            m_sREM_NIB = Convert.ToString(dr["REM_NIB"]);
            m_cZIB = Convert.ToString(dr["DOC_ZONA5"]);
            m_cNUM_CONTA = Convert.ToString(dr["DOC_ZONA4"]);
            m_cNUM_CHEQUE = Convert.ToString(dr["DOC_ZONA3"]);
            m_fCHEQUE_MONTANTE = Convert.ToDouble(dr["DOC_ZONA2"]);
            m_cTIPO_CHEQU = Convert.ToString(dr["DOC_ZONA1"]);
            m_dtDOC_DATADIGIT = Convert.ToDateTime(dr["DOC_DATADIGIT"]);
            m_iDOC_NSEQ = Convert.ToInt32(dr["DOC_NSEQ"]);
            m_iDOC_MAQUINA = Convert.ToInt32(dr["DOC_MAQUINA"]);
            TP_REGISTO = Convert.ToString(dr["TP_REGISTO"]);
            m_iREM_TIPO_Desc = Convert.ToString(dr["REMTIPOBALCAO_ABR"]);
        }

        public ListViewItem MakeListViewItem(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_cREM_PAIS.ToString();
            olvItem.SubItems.Add(m_iREM_BANCO.ToString());
            olvItem.SubItems.Add(m_iREM_BALCAO.ToString("0000"));
            olvItem.SubItems.Add(m_iDeposito.ToString("0000000"));
            olvItem.SubItems.Add(m_Estado.ToString());            
            olvItem.SubItems.Add(m_dtREM_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sREM_OPERADOR.ToString());
            olvItem.SubItems.Add(m_iRemessa.ToString("000000"));
            olvItem.SubItems.Add(m_iREM_TIPO_ID.ToString() + " - " + m_iREM_TIPO_Desc);
            olvItem.SubItems.Add(m_cREM_APLICACAO.ToString());
            olvItem.SubItems.Add(m_iREM_QT_DOCS.ToString());
            string montanteToInsert = this.m_fREM_MT_DOCS.ToString().Equals("0") ? this.m_fREM_MT_DOCS.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_fREM_MT_DOCS).PadLeft(16, ' ');            
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sREM_NIB.PadLeft(13, '0'));
            olvItem.SubItems.Add(m_cZIB.ToString());
            olvItem.SubItems.Add(m_cNUM_CONTA.ToString());
            olvItem.SubItems.Add(m_cNUM_CHEQUE.ToString());
            montanteToInsert = this.m_fCHEQUE_MONTANTE.ToString().Equals("0") ? this.m_fCHEQUE_MONTANTE.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_fCHEQUE_MONTANTE).PadLeft(16, ' ');
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_cTIPO_CHEQU);
            olvItem.SubItems.Add(m_dtDOC_DATADIGIT.ToString(sDateFormat));
            olvItem.SubItems.Add(m_iDOC_NSEQ.ToString());
            olvItem.SubItems.Add(m_iDOC_MAQUINA.ToString());
           

            return olvItem;
        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/ListViewTrancheDetalhe.cs
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIActividades
{
    class ListViewTrancheDetalhe: ListViewDetalhes
    {
        public string m_sTrancheID;
        public string m_sChaveWS;
        public string m_sTIBCOEstado;
      

        public override string GetTableName()
        {
            return "TRANCHE_OUT";
        }

        public ListViewTrancheDetalhe(SqlDataReader oReader, CIConfigGP.CIGlobalParameters oParameters)
            : base(oReader, oParameters)
        {
            m_sRemessaID = oReader["REMIN_ID"].ToString();
            //try 
            //{

                m_sTrancheID = Convert.ToString(oReader["TRANOUT_ID"]);
                m_dtTimer = Convert.ToDateTime(oReader["TRANOUT_TIMER"]);
                m_sNumero = (oReader["TRANOUT_NUMERO"]).ToString();
                m_iStatus = Convert.ToInt32(oReader["TRANOUTSTAT_ID"]);
                m_sStatusAbr = Convert.ToString(oReader["TRANOUTSTAT_ABR"]);
                m_iQt = Convert.ToInt32(oReader["TRANOUT_QT_DOCS"]);
                m_dMt = Convert.ToDecimal(oReader["TRANOUT_MT_DOCS"]);
                m_sErro = Convert.ToString(oReader["TRANOUT_ERRO"]);
                if (oReader["ENVIO_DESCRICAO"] == DBNull.Value) {

                    this.m_sErroDescricao = string.Empty;
                } 
                else {

                    m_sErroDescricao = Convert.ToString(oReader["ENVIO_DESCRICAO"]);
                }
                //try
                //{
                //    m_sErroDescricao = Convert.ToString(oReader["ENVIO_DESCRICAO"]);
                //}
                //catch
                //{
                //}
                m_sErro = m_sErroDescricao + " " + m_sErro;
                m_sChaveWS = Convert.ToString(oReader["CHAVE_WEBSERVICE"]);
                m_sTIBCOEstado = Convert.ToString(oReader["ESTADO"]);
            //}
            //catch
            //{}
            
        }

        public ListViewTrancheDetalhe(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            : base(oRow, oParameters)
        {
            m_sRemessaID = oRow["REMIN_ID"].ToString();
            m_sTrancheID = Convert.ToString(oRow["TRANOUT_ID"]);
            m_dtTimer = Convert.ToDateTime(oRow["TRANOUT_TIMER"]);
            m_sNumero = oRow["TRANOUT_NUMERO"].ToString();
            m_iStatus = Convert.ToInt32(oRow["TRANOUTSTAT_ID"]);
            m_sStatusAbr = Convert.ToString(oRow["TRANOUTSTAT_ABR"]);
            m_iQt = Convert.ToInt32(oRow["TRANOUT_QT_DOCS"]);
            m_dMt = Convert.ToDecimal(oRow["TRANOUT_MT_DOCS"]);
            m_sErro = Convert.ToString(oRow["TRANOUT_ERRO"]);
            if (oRow["ENVIO_DESCRICAO"] == DBNull.Value)
            {

                this.m_sErroDescricao = string.Empty;
            }
            else
            {

                m_sErroDescricao = Convert.ToString(oRow["ENVIO_DESCRICAO"]);
            }
            //try
            //{
            //    m_sErroDescricao = Convert.ToString(oRow["ENVIO_DESCRICAO"]);
            //}
            //catch
            //{
            //}
            m_sErro = m_sErroDescricao + " " + m_sErro;
            m_sChaveWS = Convert.ToString(oRow["CHAVE_WEBSERVICE"]);
            m_sTIBCOEstado = Convert.ToString(oRow["ESTADO"]);
            
        }


        public override void ChangeEstado(int iNewStatus, string m_sSPProcessa, string m_sSPValida)
        {
            // ValidaChangeEstadoTranche(iNewStatus);
             ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@OldEstado", m_iStatus));
            oParams.Add(new GeneralDBParameters("@NewEstado", iNewStatus));
            oParams.Add(new GeneralDBParameters("@TranoutID", m_sTrancheID));
            if (m_sSPValida.Length > 0)
            {
                m_oParameters.DirectStoredProcedureNonQuery(m_sSPValida , ref oParams);
            }
            m_oParameters.DirectStoredProcedureNonQuery(m_sSPProcessa, ref oParams);

            string sSmg = "Mudou estado da TRANCHE: " + m_sTrancheID + " de " + m_iStatus.ToString() + " para " + iNewStatus.ToString();
            GenericLog.GenLogRegistarAlerta(sSmg, "ChangeEstadoTranche()", 110);
            m_oParameters.EnviarAlertaSituacao(110, sSmg);

        }

        public override ListViewItem MakeListViewItem(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_sRemessaID;
            olvItem.SubItems.Add(m_sTrancheID);
            olvItem.SubItems.Add(m_dtTimer.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(m_sNumero);
            olvItem.SubItems.Add(m_iStatus.ToString() + " " + m_sStatusAbr);
            olvItem.SubItems.Add(m_iQt.ToString().PadLeft(6,' '));
            string montanteToInsert = this.m_dMt.ToString().Equals("0") ? this.m_dMt.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dMt).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dMt).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sErro);
            olvItem.SubItems.Add(m_sChaveWS);
            olvItem.SubItems.Add(m_sTIBCOEstado);
            return olvItem;
        }

        public override string GetWhereClause2ViewDetails()
        {
            string sWhereClause;
            sWhereClause = " where TRANOUT_ID=" + m_sTrancheID;

            return sWhereClause;
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/MostraImagem.Designer.cs
﻿namespace MDIsControlo
{
    partial class MostraImagem
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.labelErro = new System.Windows.Forms.Label();
            this.pictImgBack = new System.Windows.Forms.PictureBox();
            this.picImgFront = new System.Windows.Forms.PictureBox();
            ((System.ComponentModel.ISupportInitialize)(this.pictImgBack)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picImgFront)).BeginInit();
            this.SuspendLayout();
            // 
            // labelErro
            // 
            this.labelErro.AutoSize = true;
            this.labelErro.Font = new System.Drawing.Font("Arial", 36F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelErro.ForeColor = System.Drawing.Color.Red;
            this.labelErro.Location = new System.Drawing.Point(75, 235);
            this.labelErro.Name = "labelErro";
            this.labelErro.Size = new System.Drawing.Size(454, 56);
            this.labelErro.TabIndex = 6;
            this.labelErro.Text = "ERRO NA IMAGEM";
            this.labelErro.Visible = false;
            // 
            // pictImgBack
            // 
            this.pictImgBack.Location = new System.Drawing.Point(55, 265);
            this.pictImgBack.Name = "pictImgBack";
            this.pictImgBack.Size = new System.Drawing.Size(489, 249);
            this.pictImgBack.TabIndex = 5;
            this.pictImgBack.TabStop = false;
            // 
            // picImgFront
            // 
            this.picImgFront.Location = new System.Drawing.Point(55, 10);
            this.picImgFront.Name = "picImgFront";
            this.picImgFront.Size = new System.Drawing.Size(489, 249);
            this.picImgFront.TabIndex = 4;
            this.picImgFront.TabStop = false;
            // 
            // MostraImagem
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(601, 533);
            this.Controls.Add(this.labelErro);
            this.Controls.Add(this.pictImgBack);
            this.Controls.Add(this.picImgFront);
            this.Name = "MostraImagem";
            this.Text = "MostraImagem";
            this.Load += new System.EventHandler(this.MostraImagem_Load);
            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.MostraImagem_FormClosed);
            ((System.ComponentModel.ISupportInitialize)(this.pictImgBack)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picImgFront)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label labelErro;
        private System.Windows.Forms.PictureBox pictImgBack;
        private System.Windows.Forms.PictureBox picImgFront;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/MostraImagem.cs
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using System.IO;

namespace MDIsControlo
{
    public partial class MostraImagem : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        string m_sDOCMDI_ID;

        public MostraImagem()
        {
            InitializeComponent();
        }

        public MostraImagem(CIConfigGP.CIGlobalParameters oParameters, string sDOCMDI_ID)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_sDOCMDI_ID = sDOCMDI_ID;
        }

        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }

        public string getImgFrente(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where DOCMDI_ID= " + m_sDOCMDI_ID + " and IMG_SIDE = 0";// and IMG_TYPE= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select top 1 IMG_IMAGE from dbo.IMAGEM" + sWhereClauseFront);

            sFileNameFrente = m_oParameters.GetTempFileName("IMGMDIFront") + ".jpg";
            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        public string getImgBack(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where DOCMDI_ID= " + m_sDOCMDI_ID + " and IMG_SIDE = 1 ";// and IMG_TYPE= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select top 1 IMG_IMAGE from dbo.IMAGEM" + sWhereClauseFront);

            sFileNameFrente = m_oParameters.GetTempFileName("IMGMDIBack") + ".jpg";
            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        private void MostraImagem_Load(object sender, EventArgs e)
        {
            string sFileName;
            try
            {
                //parte da frente
                sFileName = getImgFrente(m_oParameters);
                picImgFront.Image = System.Drawing.Image.FromFile(sFileName);
                picImgFront.SizeMode = PictureBoxSizeMode.StretchImage;

                //parte de tras
                sFileName = getImgBack(m_oParameters);
                pictImgBack.Image = System.Drawing.Image.FromFile(sFileName);
                pictImgBack.SizeMode = PictureBoxSizeMode.StretchImage;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 11);
                labelErro.Visible = true;   
            }
        }

        private void MostraImagem_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                if (picImgFront.Image != null) picImgFront.Image.Dispose();
                if (pictImgBack.Image != null) pictImgBack.Image.Dispose();

                picImgFront.Image = null;
                pictImgBack.Image = null;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 12);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
     }
}

// FILE: SDCIM/ModusCI/CIActividades/MostraImagem.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoEstorno.Designer.cs
﻿namespace CIActividades
{
    partial class MudarEstadoEstorno
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Label2 = new System.Windows.Forms.Label();
            this.Label1 = new System.Windows.Forms.Label();
            this.tbCurrentEstado = new System.Windows.Forms.TextBox();
            this.btCancel = new System.Windows.Forms.Button();
            this.btOK = new System.Windows.Forms.Button();
            this.cbEstadoNovo = new System.Windows.Forms.ComboBox();
            this.SuspendLayout();
            // 
            // Label2
            // 
            this.Label2.Location = new System.Drawing.Point(12, 70);
            this.Label2.Name = "Label2";
            this.Label2.Size = new System.Drawing.Size(96, 23);
            this.Label2.TabIndex = 17;
            this.Label2.Text = "Novo Estado:";
            // 
            // Label1
            // 
            this.Label1.Location = new System.Drawing.Point(12, 30);
            this.Label1.Name = "Label1";
            this.Label1.Size = new System.Drawing.Size(96, 23);
            this.Label1.TabIndex = 16;
            this.Label1.Text = "Estado Actual:";
            // 
            // tbCurrentEstado
            // 
            this.tbCurrentEstado.Location = new System.Drawing.Point(132, 30);
            this.tbCurrentEstado.Name = "tbCurrentEstado";
            this.tbCurrentEstado.ReadOnly = true;
            this.tbCurrentEstado.Size = new System.Drawing.Size(304, 20);
            this.tbCurrentEstado.TabIndex = 15;
            this.tbCurrentEstado.TabStop = false;
            this.tbCurrentEstado.Text = "Estado Actual";
            // 
            // btCancel
            // 
            this.btCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btCancel.Location = new System.Drawing.Point(298, 128);
            this.btCancel.Name = "btCancel";
            this.btCancel.Size = new System.Drawing.Size(75, 23);
            this.btCancel.TabIndex = 14;
            this.btCancel.Text = "Cancel";
            this.btCancel.Click += new System.EventHandler(this.btCancel_Click);
            // 
            // btOK
            // 
            this.btOK.Location = new System.Drawing.Point(67, 128);
            this.btOK.Name = "btOK";
            this.btOK.Size = new System.Drawing.Size(75, 23);
            this.btOK.TabIndex = 13;
            this.btOK.Text = "OK";
            this.btOK.Click += new System.EventHandler(this.btOK_Click);
            // 
            // cbEstadoNovo
            // 
            this.cbEstadoNovo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbEstadoNovo.Location = new System.Drawing.Point(132, 70);
            this.cbEstadoNovo.Name = "cbEstadoNovo";
            this.cbEstadoNovo.Size = new System.Drawing.Size(304, 21);
            this.cbEstadoNovo.TabIndex = 12;
            this.cbEstadoNovo.SelectedIndexChanged += new System.EventHandler(this.cbEstadoNovo_SelectedIndexChanged_1);
            // 
            // MudarEstadoEstorno
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(460, 175);
            this.Controls.Add(this.Label2);
            this.Controls.Add(this.Label1);
            this.Controls.Add(this.tbCurrentEstado);
            this.Controls.Add(this.btCancel);
            this.Controls.Add(this.btOK);
            this.Controls.Add(this.cbEstadoNovo);
            this.Name = "MudarEstadoEstorno";
            this.Text = "MudarEstadoEstorno";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        internal System.Windows.Forms.Label Label2;
        internal System.Windows.Forms.Label Label1;
        internal System.Windows.Forms.TextBox tbCurrentEstado;
        internal System.Windows.Forms.Button btCancel;
        internal System.Windows.Forms.Button btOK;
        internal System.Windows.Forms.ComboBox cbEstadoNovo;

    }
}

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoEstorno.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace CIActividades
{
    public partial class MudarEstadoEstorno : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        public int id;
        public string estado;
        public int idEstado;
        public MudarEstadoEstorno(CIConfigGP.CIGlobalParameters oParameters, int id, string estado, int idEstado)
        {
            this.idEstado = idEstado;
            this.id = id;
            this.estado = estado;
            m_oParameters = oParameters;
            InitializeComponent();
            preenheComboBox();
            preenchertexbox();
        }
        private void preenchertexbox() {

            this.tbCurrentEstado.Text = estado;
        
        }

        private void preenheComboBox()
        {
            DataSet ds = null;


            if (cbEstadoNovo.Items.Count > 0)
            {
                return;
            }

            try
            {

                string sComm = "select * from dbo.ESTORNO_STATUS";
                ds = m_oParameters.DirectSqlDataSet(sComm, "Estorno_Estatus");
                cbEstadoNovo.DataSource = ds.Tables[0];
                cbEstadoNovo.DisplayMember = "NM_ESTRN_STATUS";
                cbEstadoNovo.ValueMember = "ID";

            }
            finally
            {
                if (ds != null)
                {
                    ds.Dispose();
                    ds = null;
                }
            }
        }
       
        private void cbEstadoNovo_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            this.tbCurrentEstado.Text = cbEstadoNovo.Text;
        }

        private void btOK_Click(object sender, EventArgs e)
        {
            estado = cbEstadoNovo.Text;
            idEstado = Convert.ToInt32(cbEstadoNovo.SelectedValue);
            SqlDataReader dr = null;
            string sQuery = "update  REMESSA_BALCAO Set REMBALCAO_STAT_ID ="+idEstado+"where ID =" + id;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
            }
            catch
            {
                MessageBox.Show("Não foi possivel mudar o estado");
            }

            DialogResult = DialogResult.OK;
        }

        private void btCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoEstorno.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoForm.Designer.cs
﻿namespace CIActividades
{
    partial class MudarEstadoForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MudarEstadoForm));
            this.Label2 = new System.Windows.Forms.Label();
            this.Label1 = new System.Windows.Forms.Label();
            this.tbCurrentEstado = new System.Windows.Forms.TextBox();
            this.btCancel = new System.Windows.Forms.Button();
            this.btOK = new System.Windows.Forms.Button();
            this.cbEstadoNovo = new System.Windows.Forms.ComboBox();
            this.SuspendLayout();
            // 
            // Label2
            // 
            this.Label2.Location = new System.Drawing.Point(12, 77);
            this.Label2.Name = "Label2";
            this.Label2.Size = new System.Drawing.Size(96, 23);
            this.Label2.TabIndex = 11;
            this.Label2.Text = "Novo Estado:";
            // 
            // Label1
            // 
            this.Label1.Location = new System.Drawing.Point(12, 37);
            this.Label1.Name = "Label1";
            this.Label1.Size = new System.Drawing.Size(96, 23);
            this.Label1.TabIndex = 10;
            this.Label1.Text = "Estado Actual:";
            // 
            // tbCurrentEstado
            // 
            this.tbCurrentEstado.Location = new System.Drawing.Point(132, 37);
            this.tbCurrentEstado.Name = "tbCurrentEstado";
            this.tbCurrentEstado.ReadOnly = true;
            this.tbCurrentEstado.Size = new System.Drawing.Size(296, 20);
            this.tbCurrentEstado.TabIndex = 9;
            this.tbCurrentEstado.TabStop = false;
            this.tbCurrentEstado.Text = "Estado Actual";
            // 
            // btCancel
            // 
            this.btCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btCancel.Location = new System.Drawing.Point(298, 135);
            this.btCancel.Name = "btCancel";
            this.btCancel.Size = new System.Drawing.Size(75, 23);
            this.btCancel.TabIndex = 8;
            this.btCancel.Text = "Cancel";
           
            // 
            // btOK
            // 
            this.btOK.Location = new System.Drawing.Point(67, 135);
            this.btOK.Name = "btOK";
            this.btOK.Size = new System.Drawing.Size(75, 23);
            this.btOK.TabIndex = 7;
            this.btOK.Text = "OK";
            this.btOK.Click += new System.EventHandler(this.btOK_Click);
            // 
            // cbEstadoNovo
            // 
            this.cbEstadoNovo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbEstadoNovo.Location = new System.Drawing.Point(132, 77);
            this.cbEstadoNovo.Name = "cbEstadoNovo";
            this.cbEstadoNovo.Size = new System.Drawing.Size(304, 21);
            this.cbEstadoNovo.TabIndex = 6;
            // 
            // MudarEstadoForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(454, 189);
            this.Controls.Add(this.Label2);
            this.Controls.Add(this.Label1);
            this.Controls.Add(this.tbCurrentEstado);
            this.Controls.Add(this.btCancel);
            this.Controls.Add(this.btOK);
            this.Controls.Add(this.cbEstadoNovo);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "MudarEstadoForm";
            this.Text = "Mudar Estado";
            this.Load += new System.EventHandler(this.MudarEstadoForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        internal System.Windows.Forms.Label Label2;
        internal System.Windows.Forms.Label Label1;
        internal System.Windows.Forms.TextBox tbCurrentEstado;
        internal System.Windows.Forms.Button btCancel;
        internal System.Windows.Forms.Button btOK;
        internal System.Windows.Forms.ComboBox cbEstadoNovo;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoForm.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;


using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
namespace CIActividades
{
    public partial class MudarEstadoForm : Form
    {
        CIConfigGP.CIGlobalParameters m_oParameters;
        public bool m_bCancelPressed;
        int m_iOldActiv;
        string m_sTableName;
        string m_sCurrEstado;
        public int m_iNewEstado;
        public string m_sNewEstado;
        public string  m_sSPValida;
        public string  m_sSPProcessa;
 

        public MudarEstadoForm(CIConfigGP.CIGlobalParameters oParameters, int iOldActiv, string sTableName, string sCurrEstado)
        {
            m_sNewEstado = "";
            m_oParameters = oParameters;
            m_iOldActiv = iOldActiv;
            m_sTableName = sTableName;
            m_sCurrEstado = sCurrEstado;
            InitializeComponent();
        }

        private void MudarEstadoForm_Load(object sender, EventArgs e)
        {

            tbCurrentEstado.Text = m_iOldActiv.ToString() + " - " + m_sCurrEstado;

            m_iNewEstado = -999;
            m_bCancelPressed = false;

            int iSelected = 0;
            //int iIndex = 0;
            string sComm;
            DataSet ds;

            sComm = "Select ACTIVITY_OLD_DESC from view_activity_change_desc where ACTIVITY_OLD=" + m_iOldActiv + " AND ACTIVITY_TABLE='" + m_sTableName +"'";

            object obj = m_oParameters.DirectSqlScalar(sComm);
            if(obj != null)
            {
                tbCurrentEstado.Text = obj.ToString();
            }
            
            //sComm = "Select ACTIVITY_OLD, ACTIVITY_NEW, ACTIVITY_NEW_DESC from view_activity_change_desc where ACTIVITY_OLD=" + m_iOldActiv + " AND ACTIVITY_TABLE='" + m_sTableName + "'";
            sComm = "Select ACTCHANGE_ID, ACTIVITY_NEW, ACTIVITY_NEW_DESC, ACTIVITY_SPVALIDA, ACTIVITY_SPPROCESSA, TAG from view_activity_change_desc where ACTIVITY_OLD=" + m_iOldActiv + " AND ACTIVITY_TABLE='" + m_sTableName + "' order by ACTIVITY_NEW";
            ds = m_oParameters.DirectSqlDataSet(sComm, "ChangeEstado");
            cbEstadoNovo.Items.Clear();
           
            cbEstadoNovo.DataSource = ds.Tables[0];
            cbEstadoNovo.DisplayMember = "ACTIVITY_NEW_DESC";
            //cbEstadoNovo.ValueMember = "ACTCHANGE_ID";

            ds.Dispose();


            DataTable oTable = (DataTable)cbEstadoNovo.DataSource;

            //SqlDataReader dr;

            //dr = m_oParameters.DirectSqlDataReader(sComm);
            //while (dr.Read())
            //{
            //    object obj = dr["ACTIVITY_NEW_DESC"]
            //    iIndex = cbEstadoNovo.Items.Add(obj.Gettexto);
            //    if (dr["ACTIVITY_NEW"].ToString() == m_iOldActiv.ToString())
            //        iSelected = iIndex;
            //}
            //dr.Close();

            if (cbEstadoNovo.Items.Count > 0)
                cbEstadoNovo.SelectedIndex = iSelected;
            else
            {
                btOK.Enabled = false;
                cbEstadoNovo.Enabled = false;
            }
        }

        private void btOK_Click(object sender, EventArgs e)
        {
            DataRowView oRow;

            m_sNewEstado = cbEstadoNovo.Text;
           
            //string[] sValores;

            oRow = (DataRowView)cbEstadoNovo.SelectedValue;

            //sValores = cbEstadoNovo.SelectedValue.ToString().Split(',');

            //m_iNewEstado = int.Parse(sValores[0]);
            //m_sSPValida = sValores[1];
            //m_sSPProcessa = sValores[2];

            m_iNewEstado = Convert.ToInt16(oRow["ACTIVITY_NEW"]);
            m_sSPValida = oRow["ACTIVITY_SPVALIDA"].ToString();
            m_sSPProcessa = oRow["ACTIVITY_SPPROCESSA"].ToString();


            DialogResult = DialogResult.OK;
        }

       
    }
}

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Label2.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Label1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="tbCurrentEstado.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="btCancel.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="btOK.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="cbEstadoNovo.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoRemessa.Designer.cs
﻿namespace CIActividades
{
    partial class MudarEstadoRemessa
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Label2 = new System.Windows.Forms.Label();
            this.Label1 = new System.Windows.Forms.Label();
            this.tbCurrentEstado = new System.Windows.Forms.TextBox();
            this.btCancel = new System.Windows.Forms.Button();
            this.btOK = new System.Windows.Forms.Button();
            this.cbEstadoNovo = new System.Windows.Forms.ComboBox();
            this.SuspendLayout();
            // 
            // Label2
            // 
            this.Label2.Location = new System.Drawing.Point(12, 76);
            this.Label2.Name = "Label2";
            this.Label2.Size = new System.Drawing.Size(85, 24);
            this.Label2.TabIndex = 17;
            this.Label2.Text = "Novo Estado:";
            // 
            // Label1
            // 
            this.Label1.Location = new System.Drawing.Point(12, 36);
            this.Label1.Name = "Label1";
            this.Label1.Size = new System.Drawing.Size(85, 24);
            this.Label1.TabIndex = 16;
            this.Label1.Text = "Estado Actual:";
            // 
            // tbCurrentEstado
            // 
            this.tbCurrentEstado.Location = new System.Drawing.Point(132, 36);
            this.tbCurrentEstado.Name = "tbCurrentEstado";
            this.tbCurrentEstado.ReadOnly = true;
            this.tbCurrentEstado.Size = new System.Drawing.Size(293, 20);
            this.tbCurrentEstado.TabIndex = 15;
            this.tbCurrentEstado.TabStop = false;
            this.tbCurrentEstado.Text = "Estado Actual";
            // 
            // btCancel
            // 
            this.btCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btCancel.Location = new System.Drawing.Point(298, 134);
            this.btCancel.Name = "btCancel";
            this.btCancel.Size = new System.Drawing.Size(64, 24);
            this.btCancel.TabIndex = 14;
            this.btCancel.Text = "Cancel";
            this.btCancel.Click += new System.EventHandler(this.btCancel_Click);
            // 
            // btOK
            // 
            this.btOK.Location = new System.Drawing.Point(67, 134);
            this.btOK.Name = "btOK";
            this.btOK.Size = new System.Drawing.Size(64, 24);
            this.btOK.TabIndex = 13;
            this.btOK.Text = "OK";
            this.btOK.Click += new System.EventHandler(this.btOK_Click);
            // 
            // cbEstadoNovo
            // 
            this.cbEstadoNovo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbEstadoNovo.Location = new System.Drawing.Point(132, 76);
            this.cbEstadoNovo.Name = "cbEstadoNovo";
            this.cbEstadoNovo.Size = new System.Drawing.Size(293, 21);
            this.cbEstadoNovo.TabIndex = 12;
            this.cbEstadoNovo.SelectedIndexChanged += new System.EventHandler(this.cbEstadoNovo_SelectedIndexChanged);
            // 
            // MudarEstadoRemessa
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(443, 177);
            this.Controls.Add(this.Label2);
            this.Controls.Add(this.Label1);
            this.Controls.Add(this.tbCurrentEstado);
            this.Controls.Add(this.btCancel);
            this.Controls.Add(this.btOK);
            this.Controls.Add(this.cbEstadoNovo);
            this.Name = "MudarEstadoRemessa";
            this.Text = "MudarEstadoRemessa";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        internal System.Windows.Forms.Label Label2;
        internal System.Windows.Forms.Label Label1;
        internal System.Windows.Forms.TextBox tbCurrentEstado;
        internal System.Windows.Forms.Button btCancel;
        internal System.Windows.Forms.Button btOK;
        internal System.Windows.Forms.ComboBox cbEstadoNovo;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoRemessa.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace CIActividades
{

    public partial class MudarEstadoRemessa : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        public int id;
        public string estado;
        public int estadoId;
        public MudarEstadoRemessa(CIConfigGP.CIGlobalParameters oParameters, int id, string estado, int estadoId)
        {
            this.estadoId = estadoId;
            this.id = id;
            this.estado = estado;
            m_oParameters = oParameters;
            InitializeComponent();
            preenheComboBox();
            preencherTexbox();
        }
        private void preencherTexbox()
        {

            this.tbCurrentEstado.Text = estado;

        }

        private void preenheComboBox()
        {
            DataSet ds = null;


            if (cbEstadoNovo.Items.Count > 0)
            {
                return;
            }

            try
            {

                //string sComm = "select * from dbo.REMESSAIN_STATUS";
                //ds = m_oParameters.DirectSqlDataSet(sComm, "TRANCHEOUT_STATUS");
                string m_sTableName = "REMESSA_IN";
                string sComm = "Select ACTCHANGE_ID, ACTIVITY_NEW, ACTIVITY_NEW_DESC, ACTIVITY_SPVALIDA, ACTIVITY_SPPROCESSA, TAG from view_activity_change_desc where ACTIVITY_OLD=" + estadoId + " AND ACTIVITY_TABLE='" + m_sTableName + "' order by ACTIVITY_NEW";
                ds = m_oParameters.DirectSqlDataSet(sComm, "ChangeEstado");
                cbEstadoNovo.Items.Clear();

                cbEstadoNovo.DataSource = ds.Tables[0];
                cbEstadoNovo.DisplayMember = "ACTIVITY_NEW_DESC";
                /*cbEstadoNovo.DisplayMember = "REMINSTAT_DESC";
                cbEstadoNovo.ValueMember = "REMINSTAT_ID";*/

                if (cbEstadoNovo.Items.Count > 0)
                    cbEstadoNovo.SelectedIndex = 0;
                else
                {
                    btOK.Enabled = false;
                    cbEstadoNovo.Enabled = false;
                }

            }
            finally
            {
                if (ds != null)
                {
                    ds.Dispose();

                    ds = null;
                }
            }
        }

        private void cbEstadoNovo_SelectedIndexChanged(object sender, EventArgs e)
        {

            this.tbCurrentEstado.Text = cbEstadoNovo.Text;


        }

        private void btOK_Click(object sender, EventArgs e)
        {
            estado = cbEstadoNovo.Text;
            estadoId = Convert.ToInt32(cbEstadoNovo.SelectedValue);
            SqlDataReader dr = null;
            string sQuery = "update  REMESSA_BALCAO Set REMBALCAO_STAT_ID =" + estadoId + "where ID =" + id;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
            }
            catch
            {
                MessageBox.Show("Não foi possivel mudar o estado");
            }

            DialogResult = DialogResult.OK;
        }

        private void btCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}






// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoRemessa.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoTranches.Designer.cs
﻿namespace CIActividades
{
    partial class MudarEstadoTranches
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Label2 = new System.Windows.Forms.Label();
            this.Label1 = new System.Windows.Forms.Label();
            this.btCancel = new System.Windows.Forms.Button();
            this.btOK = new System.Windows.Forms.Button();
            this.cbEstadoNovo = new System.Windows.Forms.ComboBox();
            this.tbCurrentEstado = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // Label2
            // 
            this.Label2.Location = new System.Drawing.Point(12, 71);
            this.Label2.Name = "Label2";
            this.Label2.Size = new System.Drawing.Size(96, 23);
            this.Label2.TabIndex = 17;
            this.Label2.Text = "Novo Estado:";
            // 
            // Label1
            // 
            this.Label1.Location = new System.Drawing.Point(12, 31);
            this.Label1.Name = "Label1";
            this.Label1.Size = new System.Drawing.Size(96, 23);
            this.Label1.TabIndex = 16;
            this.Label1.Text = "Estado Actual:";
            // 
            // btCancel
            // 
            this.btCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btCancel.Location = new System.Drawing.Point(298, 129);
            this.btCancel.Name = "btCancel";
            this.btCancel.Size = new System.Drawing.Size(75, 23);
            this.btCancel.TabIndex = 14;
            this.btCancel.Text = "Cancel";
            this.btCancel.Click += new System.EventHandler(this.btCancel_Click);
            // 
            // btOK
            // 
            this.btOK.Location = new System.Drawing.Point(67, 129);
            this.btOK.Name = "btOK";
            this.btOK.Size = new System.Drawing.Size(75, 23);
            this.btOK.TabIndex = 13;
            this.btOK.Text = "OK";
            this.btOK.Click += new System.EventHandler(this.btOK_Click);
            // 
            // cbEstadoNovo
            // 
            this.cbEstadoNovo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbEstadoNovo.Location = new System.Drawing.Point(132, 71);
            this.cbEstadoNovo.Name = "cbEstadoNovo";
            this.cbEstadoNovo.Size = new System.Drawing.Size(304, 21);
            this.cbEstadoNovo.TabIndex = 12;
            this.cbEstadoNovo.SelectedIndexChanged += new System.EventHandler(this.cbEstadoNovo_SelectedIndexChanged_1);
            // 
            // tbCurrentEstado
            // 
            this.tbCurrentEstado.Location = new System.Drawing.Point(132, 31);
            this.tbCurrentEstado.Name = "tbCurrentEstado";
            this.tbCurrentEstado.ReadOnly = true;
            this.tbCurrentEstado.Size = new System.Drawing.Size(304, 20);
            this.tbCurrentEstado.TabIndex = 18;
            this.tbCurrentEstado.TabStop = false;
            this.tbCurrentEstado.Text = "Estado Actual";
            // 
            // MudarEstadoTranches
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(463, 170);
            this.Controls.Add(this.tbCurrentEstado);
            this.Controls.Add(this.Label2);
            this.Controls.Add(this.Label1);
            this.Controls.Add(this.btCancel);
            this.Controls.Add(this.btOK);
            this.Controls.Add(this.cbEstadoNovo);
            this.Name = "MudarEstadoTranches";
            this.Text = "MudarEstadoTranches";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        internal System.Windows.Forms.Label Label2;
        internal System.Windows.Forms.Label Label1;
        internal System.Windows.Forms.Button btCancel;
        internal System.Windows.Forms.Button btOK;
        internal System.Windows.Forms.ComboBox cbEstadoNovo;
        internal System.Windows.Forms.TextBox tbCurrentEstado;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoTranches.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace CIActividades
{
    public partial class MudarEstadoTranches : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        public int idTranche;
        public string estadoTranche;
        public int idEstado;
        public MudarEstadoTranches(CIConfigGP.CIGlobalParameters oParameters, int id, string estado, int idEstado)
        {
            this.idEstado = idEstado;
            this.idTranche = id;
            this.estadoTranche = estado;
            m_oParameters = oParameters;
            InitializeComponent();
            preenheComboBox();
            preencherTexbox();
        }
        private void preencherTexbox()
        {

            this.tbCurrentEstado.Text = estadoTranche;
        }
        private void preenheComboBox()
        {
            DataSet ds = null;

            if (cbEstadoNovo.Items.Count > 0)
            {
                return;
            }

            try
            {
                string sComm = "select * from dbo.TRANCHEOUT_STATUS";
                ds = m_oParameters.DirectSqlDataSet(sComm, "TRANCHEOUT_STATUS");
                cbEstadoNovo.DataSource = ds.Tables[0];
                cbEstadoNovo.DisplayMember = "TRANOUTSTAT_DESC";
                cbEstadoNovo.ValueMember = "TRANOUTSTAT_ID";

            }
            finally
            {
                if (ds != null)
                {
                    ds.Dispose();
                    ds = null;
                }
            }
        }

        private void cbEstadoNovo_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            this.tbCurrentEstado.Text = cbEstadoNovo.Text;

        }

        private void btOK_Click(object sender, EventArgs e)
        {

            estadoTranche = cbEstadoNovo.Text;
            idEstado = Convert.ToInt32(cbEstadoNovo.SelectedValue);
            SqlDataReader dr = null;
            string sQuery = "Update  TRANCHE_OUT Set TRANOUTSTAT_ID = " + idEstado + " where TRANOUT_ID =" + idTranche;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
            }
            catch
            {
                MessageBox.Show("Não foi possivel mudar o estado");
            }

            DialogResult = DialogResult.OK;
        }

        private void btCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/MudarEstadoTranches.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIActividades/PesqFicheiroACOM.Designer.cs
﻿namespace CIActividades
{
    partial class PesqFicheiroACOM
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.listViewPesquisaDocumentoACOM = new NBIISNET.ListViewBase();
            this.columnHeader28 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader29 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader30 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader32 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader33 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader34 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader36 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader37 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader40 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnOrigem = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader41 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader42 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader43 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader44 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader45 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader46 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader47 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader48 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader49 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnACOMCancel = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.CancelID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderACOMNotif = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.NotifyID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader50 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader51 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripACOM = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.CancelaACOMToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.confirmarCancelamentoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.anulaCancelaToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.NotificaACOMStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ConfirmaNotificaACOMStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.AnulaNotificaACOMStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.labelACOM = new System.Windows.Forms.Label();
            this.lblDeposito = new System.Windows.Forms.Label();
            this.txtDeposito = new System.Windows.Forms.TextBox();
            this.label4 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.textBoxNumCheque = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.textBoxREFARQ = new System.Windows.Forms.TextBox();
            this.label7 = new System.Windows.Forms.Label();
            this.textBoxBalcao = new System.Windows.Forms.TextBox();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrldtInicio = new System.Windows.Forms.DateTimePicker();
            this.buttonACOM = new System.Windows.Forms.Button();
            this.contextMenuStripACOM.SuspendLayout();
            this.SuspendLayout();
            // 
            // listViewPesquisaDocumentoACOM
            // 
            this.listViewPesquisaDocumentoACOM.AllowColumnReorder = true;
            this.listViewPesquisaDocumentoACOM.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewPesquisaDocumentoACOM.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader28,
            this.columnHeader29,
            this.columnHeader30,
            this.columnHeader32,
            this.columnHeader33,
            this.columnHeader34,
            this.columnHeader36,
            this.columnHeader37,
            this.columnHeader40,
            this.columnOrigem,
            this.columnHeader41,
            this.columnHeader42,
            this.columnHeader43,
            this.columnHeader44,
            this.columnHeader45,
            this.columnHeader46,
            this.columnHeader47,
            this.columnHeader48,
            this.columnHeader49,
            this.columnACOMCancel,
            this.CancelID,
            this.columnHeaderACOMNotif,
            this.NotifyID,
            this.columnHeader50,
            this.columnHeader51});
            this.listViewPesquisaDocumentoACOM.ContextMenuStrip = this.contextMenuStripACOM;
            this.listViewPesquisaDocumentoACOM.EnableExportar = true;
            this.listViewPesquisaDocumentoACOM.FullRowSelect = true;
            this.listViewPesquisaDocumentoACOM.GridLines = true;
            this.listViewPesquisaDocumentoACOM.HideSelection = false;
            this.listViewPesquisaDocumentoACOM.Location = new System.Drawing.Point(6, 82);
            this.listViewPesquisaDocumentoACOM.Name = "listViewPesquisaDocumentoACOM";
            this.listViewPesquisaDocumentoACOM.Size = new System.Drawing.Size(1344, 234);
            this.listViewPesquisaDocumentoACOM.TabIndex = 45;
            this.listViewPesquisaDocumentoACOM.UseCompatibleStateImageBehavior = false;
            this.listViewPesquisaDocumentoACOM.View = System.Windows.Forms.View.Details;
            this.listViewPesquisaDocumentoACOM.DoubleClick += new System.EventHandler(this.listViewPesquisaDocumentoACOM_DoubleClick);
            // 
            // columnHeader28
            // 
            this.columnHeader28.Text = "FichID";
            this.columnHeader28.Width = 0;
            // 
            // columnHeader29
            // 
            this.columnHeader29.Text = "FichNSeq";
            this.columnHeader29.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader29.Width = 50;
            // 
            // columnHeader30
            // 
            this.columnHeader30.Text = "FichData";
            this.columnHeader30.Width = 70;
            // 
            // columnHeader32
            // 
            this.columnHeader32.Text = "LotAcomID";
            this.columnHeader32.Width = 0;
            // 
            // columnHeader33
            // 
            this.columnHeader33.Text = "LotNum";
            this.columnHeader33.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader33.Width = 0;
            // 
            // columnHeader34
            // 
            this.columnHeader34.Text = "Produto";
            this.columnHeader34.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader34.Width = 30;
            // 
            // columnHeader36
            // 
            this.columnHeader36.Text = "DataProc";
            this.columnHeader36.Width = 80;
            // 
            // columnHeader37
            // 
            this.columnHeader37.Text = "LoteStatus";
            // 
            // columnHeader40
            // 
            this.columnHeader40.Text = "DocAcomID";
            this.columnHeader40.Width = 0;
            // 
            // columnOrigem
            // 
            this.columnOrigem.Text = "Origem";
            // 
            // columnHeader41
            // 
            this.columnHeader41.Text = "ZIB";
            this.columnHeader41.Width = 70;
            // 
            // columnHeader42
            // 
            this.columnHeader42.Text = "NConta";
            this.columnHeader42.Width = 80;
            // 
            // columnHeader43
            // 
            this.columnHeader43.Text = "NCheque";
            this.columnHeader43.Width = 75;
            // 
            // columnHeader44
            // 
            this.columnHeader44.Text = "Import";
            this.columnHeader44.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader44.Width = 100;
            // 
            // columnHeader45
            // 
            this.columnHeader45.Text = "Tipo";
            this.columnHeader45.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader45.Width = 30;
            // 
            // columnHeader46
            // 
            this.columnHeader46.Text = "REFARQ";
            this.columnHeader46.Width = 100;
            // 
            // columnHeader47
            // 
            this.columnHeader47.Text = "REFARQ2";
            this.columnHeader47.Width = 100;
            // 
            // columnHeader48
            // 
            this.columnHeader48.Text = "Balcão";
            this.columnHeader48.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader48.Width = 50;
            // 
            // columnHeader49
            // 
            this.columnHeader49.Text = "CodAna";
            // 
            // columnACOMCancel
            // 
            this.columnACOMCancel.Text = "Cancelamento";
            // 
            // CancelID
            // 
            this.CancelID.Text = "CancelID";
            // 
            // columnHeaderACOMNotif
            // 
            this.columnHeaderACOMNotif.Text = "Notificação";
            // 
            // NotifyID
            // 
            this.NotifyID.Text = "NotifyID";
            // 
            // columnHeader50
            // 
            this.columnHeader50.Text = "ChaveH";
            this.columnHeader50.Width = 100;
            // 
            // columnHeader51
            // 
            this.columnHeader51.Text = "Linha Óptica";
            this.columnHeader51.Width = 100;
            // 
            // contextMenuStripACOM
            // 
            this.contextMenuStripACOM.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.CancelaACOMToolStripMenuItem,
            this.confirmarCancelamentoToolStripMenuItem,
            this.anulaCancelaToolStripMenuItem,
            this.NotificaACOMStripMenuItem,
            this.ConfirmaNotificaACOMStripMenuItem,
            this.AnulaNotificaACOMStripMenuItem});
            this.contextMenuStripACOM.Name = "contextMenuStripRemTrans";
            this.contextMenuStripACOM.Size = new System.Drawing.Size(365, 136);
            this.contextMenuStripACOM.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripACOM_Opening);
            // 
            // CancelaACOMToolStripMenuItem
            // 
            this.CancelaACOMToolStripMenuItem.Name = "CancelaACOMToolStripMenuItem";
            this.CancelaACOMToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.CancelaACOMToolStripMenuItem.Text = "Cancela Acolhimento";
            this.CancelaACOMToolStripMenuItem.Click += new System.EventHandler(this.CancelaACOMToolStripMenuItem_Click);
            // 
            // confirmarCancelamentoToolStripMenuItem
            // 
            this.confirmarCancelamentoToolStripMenuItem.Name = "confirmarCancelamentoToolStripMenuItem";
            this.confirmarCancelamentoToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.confirmarCancelamentoToolStripMenuItem.Text = "Confirmar Cancelamento";
            this.confirmarCancelamentoToolStripMenuItem.Click += new System.EventHandler(this.confirmarCancelamentoToolStripMenuItem_Click);
            // 
            // anulaCancelaToolStripMenuItem
            // 
            this.anulaCancelaToolStripMenuItem.Name = "anulaCancelaToolStripMenuItem";
            this.anulaCancelaToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.anulaCancelaToolStripMenuItem.Text = "Anula Cancelamento";
            this.anulaCancelaToolStripMenuItem.Click += new System.EventHandler(this.anulaCancelaToolStripMenuItem_Click);
            // 
            // NotificaACOMStripMenuItem
            // 
            this.NotificaACOMStripMenuItem.Name = "NotificaACOMStripMenuItem";
            this.NotificaACOMStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.NotificaACOMStripMenuItem.Text = "Notifica Acolhimento de Envio Documento Fora Prazo";
            this.NotificaACOMStripMenuItem.Click += new System.EventHandler(this.NotificaACOMStripMenuItem_Click);
            // 
            // ConfirmaNotificaACOMStripMenuItem
            // 
            this.ConfirmaNotificaACOMStripMenuItem.Name = "ConfirmaNotificaACOMStripMenuItem";
            this.ConfirmaNotificaACOMStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.ConfirmaNotificaACOMStripMenuItem.Text = "Confirmar Notificação de Envio Documento Fora Prazo";
            this.ConfirmaNotificaACOMStripMenuItem.Click += new System.EventHandler(this.ConfirmaNotificaACOMStripMenuItem_Click);
            // 
            // AnulaNotificaACOMStripMenuItem
            // 
            this.AnulaNotificaACOMStripMenuItem.Name = "AnulaNotificaACOMStripMenuItem";
            this.AnulaNotificaACOMStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.AnulaNotificaACOMStripMenuItem.Text = "Anula Notificação de Envio Documento Fora Prazo";
            this.AnulaNotificaACOMStripMenuItem.Click += new System.EventHandler(this.AnulaNotificaACOMStripMenuItem_Click);
            // 
            // labelACOM
            // 
            this.labelACOM.AutoSize = true;
            this.labelACOM.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelACOM.Location = new System.Drawing.Point(88, 66);
            this.labelACOM.Name = "labelACOM";
            this.labelACOM.Size = new System.Drawing.Size(115, 13);
            this.labelACOM.TabIndex = 46;
            this.labelACOM.Text = "Registos em ACOM";
            // 
            // lblDeposito
            // 
            this.lblDeposito.AutoSize = true;
            this.lblDeposito.Location = new System.Drawing.Point(413, 9);
            this.lblDeposito.Name = "lblDeposito";
            this.lblDeposito.Size = new System.Drawing.Size(49, 13);
            this.lblDeposito.TabIndex = 82;
            this.lblDeposito.Text = "Depósito";
            // 
            // txtDeposito
            // 
            this.txtDeposito.Location = new System.Drawing.Point(416, 23);
            this.txtDeposito.MaxLength = 7;
            this.txtDeposito.Name = "txtDeposito";
            this.txtDeposito.Size = new System.Drawing.Size(76, 20);
            this.txtDeposito.TabIndex = 81;
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(97, 9);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(55, 13);
            this.label4.TabIndex = 80;
            this.label4.Text = "Data Final";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(3, 9);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(60, 13);
            this.label3.TabIndex = 79;
            this.label3.Text = "Data Inicial";
            // 
            // textBoxNumCheque
            // 
            this.textBoxNumCheque.Location = new System.Drawing.Point(341, 23);
            this.textBoxNumCheque.MaxLength = 10;
            this.textBoxNumCheque.Name = "textBoxNumCheque";
            this.textBoxNumCheque.Size = new System.Drawing.Size(69, 20);
            this.textBoxNumCheque.TabIndex = 71;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(338, 9);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(66, 13);
            this.label1.TabIndex = 77;
            this.label1.Text = "NumCheque";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label2.ForeColor = System.Drawing.SystemColors.Desktop;
            this.label2.Location = new System.Drawing.Point(232, 9);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(57, 13);
            this.label2.TabIndex = 78;
            this.label2.Text = "REFARQ";
            // 
            // textBoxREFARQ
            // 
            this.textBoxREFARQ.Location = new System.Drawing.Point(235, 23);
            this.textBoxREFARQ.MaxLength = 14;
            this.textBoxREFARQ.Name = "textBoxREFARQ";
            this.textBoxREFARQ.Size = new System.Drawing.Size(100, 20);
            this.textBoxREFARQ.TabIndex = 70;
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(188, 9);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(40, 13);
            this.label7.TabIndex = 75;
            this.label7.Text = "Balcão";
            // 
            // textBoxBalcao
            // 
            this.textBoxBalcao.Location = new System.Drawing.Point(191, 23);
            this.textBoxBalcao.MaxLength = 4;
            this.textBoxBalcao.Name = "textBoxBalcao";
            this.textBoxBalcao.Size = new System.Drawing.Size(38, 20);
            this.textBoxBalcao.TabIndex = 69;
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = "yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(100, 23);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(85, 20);
            this.m_ctrldtFim.TabIndex = 68;
            // 
            // m_ctrldtInicio
            // 
            this.m_ctrldtInicio.CustomFormat = "yyyy-MM-dd";
            this.m_ctrldtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtInicio.Location = new System.Drawing.Point(6, 23);
            this.m_ctrldtInicio.Name = "m_ctrldtInicio";
            this.m_ctrldtInicio.Size = new System.Drawing.Size(85, 20);
            this.m_ctrldtInicio.TabIndex = 67;
            // 
            // buttonACOM
            // 
            this.buttonACOM.Location = new System.Drawing.Point(7, 56);
            this.buttonACOM.Name = "buttonACOM";
            this.buttonACOM.Size = new System.Drawing.Size(75, 23);
            this.buttonACOM.TabIndex = 83;
            this.buttonACOM.Text = "Refresh";
            this.buttonACOM.UseVisualStyleBackColor = true;
            this.buttonACOM.Click += new System.EventHandler(this.buttonACOM_Click);
            // 
            // PesqFicheiroACOM
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1362, 317);
            this.Controls.Add(this.buttonACOM);
            this.Controls.Add(this.lblDeposito);
            this.Controls.Add(this.txtDeposito);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.textBoxNumCheque);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.textBoxREFARQ);
            this.Controls.Add(this.label7);
            this.Controls.Add(this.textBoxBalcao);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrldtInicio);
            this.Controls.Add(this.labelACOM);
            this.Controls.Add(this.listViewPesquisaDocumentoACOM);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Name = "PesqFicheiroACOM";
            this.Text = "Pesquisas e Reenvios ACOM";
            this.Load += new System.EventHandler(this.PesqFicheiroACOM_Load);
            this.Leave += new System.EventHandler(this.PesqFicheiroACOM_Leave);
            this.contextMenuStripACOM.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        public NBIISNET.ListViewBase listViewPesquisaDocumentoACOM;
        private System.Windows.Forms.ColumnHeader columnHeader28;
        private System.Windows.Forms.ColumnHeader columnHeader29;
        private System.Windows.Forms.ColumnHeader columnHeader30;
        private System.Windows.Forms.ColumnHeader columnHeader32;
        private System.Windows.Forms.ColumnHeader columnHeader33;
        private System.Windows.Forms.ColumnHeader columnHeader34;
        private System.Windows.Forms.ColumnHeader columnHeader36;
        private System.Windows.Forms.ColumnHeader columnHeader37;
        private System.Windows.Forms.ColumnHeader columnHeader40;
        private System.Windows.Forms.ColumnHeader columnOrigem;
        private System.Windows.Forms.ColumnHeader columnHeader41;
        private System.Windows.Forms.ColumnHeader columnHeader42;
        private System.Windows.Forms.ColumnHeader columnHeader43;
        private System.Windows.Forms.ColumnHeader columnHeader44;
        private System.Windows.Forms.ColumnHeader columnHeader45;
        private System.Windows.Forms.ColumnHeader columnHeader46;
        private System.Windows.Forms.ColumnHeader columnHeader47;
        private System.Windows.Forms.ColumnHeader columnHeader48;
        private System.Windows.Forms.ColumnHeader columnHeader49;
        private System.Windows.Forms.ColumnHeader columnACOMCancel;
        private System.Windows.Forms.ColumnHeader columnHeaderACOMNotif;
        private System.Windows.Forms.ColumnHeader columnHeader50;
        private System.Windows.Forms.ColumnHeader columnHeader51;
        public System.Windows.Forms.Label labelACOM;
        private System.Windows.Forms.Label lblDeposito;
        private System.Windows.Forms.TextBox txtDeposito;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox textBoxNumCheque;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox textBoxREFARQ;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.TextBox textBoxBalcao;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrldtInicio;
        private System.Windows.Forms.Button buttonACOM;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripACOM;
        private System.Windows.Forms.ToolStripMenuItem CancelaACOMToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem confirmarCancelamentoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem anulaCancelaToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem NotificaACOMStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ConfirmaNotificaACOMStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem AnulaNotificaACOMStripMenuItem;
        private System.Windows.Forms.ColumnHeader NotifyID;
        private System.Windows.Forms.ColumnHeader CancelID;

    }
}

// FILE: SDCIM/ModusCI/CIActividades/PesqFicheiroACOM.cs
﻿using System;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Windows.Forms;
using CIConfigGlobalParameters;
using CIConfigGP;
using NBiis;

namespace CIActividades
{
    public partial class PesqFicheiroACOM : Form
    {
        #region Properties

        public CIGlobalParameters m_oParameters;

        public CIMenuInterface m_oMenuInterface;

        public Tibco Tibco = new Tibco();

        #endregion

        #region Page Events
        private CIMenuInterface _m_oMenuInterface = null;

        public PesqFicheiroACOM(CIGlobalParameters oParameters, CIMenuInterface m_oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            this._m_oMenuInterface = m_oMenuInterface;
        }

        private void PesqFicheiroACOM_Load(object sender, EventArgs e)
        {
            this.WindowState = System.Windows.Forms.FormWindowState.Maximized;            
            m_ctrldtInicio.Value = DateTime.Now.AddDays(-1);
            m_ctrldtFim.Value = DateTime.Now.AddDays(-1);
            RefreshListaACOM();
            this._m_oMenuInterface.enablePesqFicheiroAcom(false);
        }

        #endregion

        #region Private Functions

        private void RefreshListaACOM()
        {
            listViewPesquisaDocumentoACOM.MyClear();

            string sWhereClause = FiltrosComuns();

            String innerJoin = String.Empty;

            innerJoin = @" INNER JOIN dbo.DOCUMENTO_BALCAO as docBalcao ON docBalcao.ID = DOC_ID 
                                         INNER JOIN dbo.REMESSA_BALCAO as rem ON rem.ID = docBalcao.REMBALCAO_ID ";
            if (txtDeposito.Text != "")
                sWhereClause += " AND rem.REMBALCAO_SEQUENCIA = " + this.txtDeposito.Text;

            this.RefreshDocumentoACOM(String.Format(" {0} {1} {2} ", innerJoin, sWhereClause, FiltrosBotoesACOM()));

        }

        private void RefreshDocumentoACOM(string sWhereClause)
        {
            string sQuery = "select * from VW_PESQ_DOCUMENTO_ACOM " + sWhereClause + " order by FICH_DATA";

            SqlDataReader dr = null;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddDocumento2ListViewACOM(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshDocumentoACOM()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                listViewPesquisaDocumentoACOM.EndUpdate();
                labelACOM.Text = listViewPesquisaDocumentoACOM.Items.Count.ToString() + " Registos em ACOM";
            }
        }

        private void AddDocumento2ListViewACOM(SqlDataReader dr)
        {
            PesquisaDocumentoACOM oPd = new PesquisaDocumentoACOM(dr);

            ListViewItem olvItem = oPd.MakeListViewItem(m_oParameters.DateFormat);

            olvItem.Tag = oPd;

            listViewPesquisaDocumentoACOM.Items.Add(olvItem);
        }


        private decimal GetDecimal(string str)
        {
            if (str.Trim().Length == 0) return 0;
            string s = Convert.ToString(1.2);
            if (s.IndexOf('.') > 0) { str = str.Replace(',', '.'); } else { str = str.Replace('.', ','); }
            decimal dValor = -1;
            if (!Decimal.TryParse(str, out dValor))
            {
                dValor = -1;
            }
            return dValor;
        }

        private string FiltrosBotoesACOM()
        {
            string sWhereClause = "";
            string sWhereStatus = "";


            if (sWhereStatus.Length > 0)
            {
                sWhereStatus = " and (" + sWhereStatus.Substring(3) + ")";
            }

            return sWhereClause + sWhereStatus;
        }

        private string FiltrosComuns()
        {
            string sWhereClause = "";
            sWhereClause = " Where (DATA between '" + m_ctrldtInicio.Value.ToString(m_oParameters.DateFormat) + "' and ";
            sWhereClause += "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateFormat) + "' ";
            sWhereClause += "  or DATA2 between '" + m_ctrldtInicio.Value.ToString(m_oParameters.DateFormat) + "' and ";
            sWhereClause += "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateFormat) + "') ";

            if (GetDecimal(textBoxBalcao.Text) > 0)
            {
                sWhereClause += " and BALCAO=" + textBoxBalcao.Text;
            }
            if (GetDecimal(textBoxNumCheque.Text) > 0)
            {
                sWhereClause += " and DOC_NCHEQUE='" + textBoxNumCheque.Text + "'";
            }

            if (GetDecimal(textBoxREFARQ.Text) > 0)
            {
                sWhereClause += "and (REFARQ='" + textBoxREFARQ.Text + "' or DOCACOM_REFARQ2='" + textBoxREFARQ.Text + "') ";
            }

            //validar
            sWhereClause += " and DOC_ORIGEM_ID=2 AND DOCACOM_CODANA = 3";

            return sWhereClause;
        }

        private void listViewPesquisaDocumentoACOM_DoubleClick(object sender, EventArgs e)
        {

        }

        private void CancelaACOMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;
            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;

                    Tibco.Insert_TibcoCancelaEnvioDocumento((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag, m_oParameters);

                    GenericLog.GenLogRegistarInfo("DocACOM Cancelado", "Insert_TibcoCancelaEnvioDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Acolhimento dos documentos cancelado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Insert_TibcoCancelaEnvioDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void confirmarCancelamentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;
            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Confirma_TibcoCancelaEnvioDocumento(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_CANCELADO, 0, m_oParameters);
                    GenericLog.GenLogRegistarInfo("Confirmado o Cancelamento DocACOM", "Update_ConfirmaTibcoCancelaEnvioDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirmado o Cancelamento do Acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoCancelaEnvioDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void anulaCancelaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;
            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Delete_TibcoCancelaEnvioDocumento(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_CANCELADO, m_oParameters);
                    GenericLog.GenLogRegistarInfo("Anulado o Cancelamento DocACOM", "Delete_TibcoCancelaEnvioDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anulado o Cancelamento do Acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Delete_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void NotificaACOMStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;
            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Insert_TibcoNotificaEnvioDocumentoForaPrazo((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag, m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocACOM Notificado", "Insert_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Insert_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void ConfirmaNotificaACOMStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;
            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Confirma_TibcoNotificaEnvioDocumentoForaPrazo(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_NOTIFICADO, m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocACOM Notifica Confirma", "Confirma_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirma Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void AnulaNotificaACOMStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;
            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Anula_TibcoNotificaEnvioDocumentoForaPrazo(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_NOTIFICADO, m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocACOM Notifica Anula", "Anula_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anula Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Anula_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void EnabledMenuStripAcom(Boolean enabled)
        {
            this.CancelaACOMToolStripMenuItem.Enabled = enabled;
            this.confirmarCancelamentoToolStripMenuItem.Enabled = enabled;
            this.anulaCancelaToolStripMenuItem.Enabled = enabled;
            this.NotificaACOMStripMenuItem.Enabled = enabled;
            this.ConfirmaNotificaACOMStripMenuItem.Enabled = enabled;
            this.AnulaNotificaACOMStripMenuItem.Enabled = enabled;
        }
        #endregion

        #region Control Events
        #region Buttons
        private void buttonACOM_Click(object sender, EventArgs e)
        {
            RefreshListaACOM();
        }
        #endregion

        private void contextMenuStripACOM_Opening(object sender, CancelEventArgs e)
        {
            /*
             * SDCIM 7 - Mostrar opções de acordo com Origem
             */
            if (this.listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
            {
                e.Cancel = true;
                return;
            }
            EnabledMenuStripAcom(true);
            for (int i = 0; i < this.listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
            {
                PesquisaDocumentoACOM docAcom = (PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag;
                Int32 id = 0;
                Int32.TryParse(docAcom.m_sDocOrigemID, out id);
                if (!docAcom.m_sCANCELA_EFECTUADO.Equals("100"))
                {
                    //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                    if (!String.IsNullOrEmpty(docAcom.m_sCANCELA_EFECTUADO) && Convert.ToInt32(docAcom.m_sCANCELA_EFECTUADO) < 0)
                    {
                        this.anulaCancelaToolStripMenuItem.Enabled = true;
                    }
                    else
                    {
                        this.anulaCancelaToolStripMenuItem.Enabled = false;
                    }
                    this.confirmarCancelamentoToolStripMenuItem.Enabled = false;
                }
                else
                {
                    this.CancelaACOMToolStripMenuItem.Enabled = false;
                }
                if (!docAcom.m_sNOTIFICA_EFECTUADO.Equals("100"))
                {
                    //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                    if (!String.IsNullOrEmpty(docAcom.m_sNOTIFICA_EFECTUADO) && Convert.ToInt32(docAcom.m_sNOTIFICA_EFECTUADO) < 0)
                    {
                        this.AnulaNotificaACOMStripMenuItem.Enabled = true;
                    }
                    else
                    {
                        this.AnulaNotificaACOMStripMenuItem.Enabled = false;
                    }
                    this.ConfirmaNotificaACOMStripMenuItem.Enabled = false;
                }
                else
                {
                    this.NotificaACOMStripMenuItem.Enabled = false;
                }
                break;
            }
        }
        #endregion

        private void PesqFicheiroACOM_Leave(object sender, EventArgs e)
        {
            this._m_oMenuInterface.enablePesqFicheiroAcom(true);
            this.Dispose();
        }
    }
}

// FILE: SDCIM/ModusCI/CIActividades/PesqFicheiroACOM.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="contextMenuStripACOM.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>

// FILE: SDCIM/ModusCI/CIActividades/PesquisaDocumento.cs
﻿using System;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Forms;

namespace CIActividades
{
    public class PesquisaDocumento : InterfaceDocs
    {

        public string m_sREMIN_ID;
        public DateTime m_dtREMIN_DATA;
        public DateTime m_dtREMPROC_TIMER;
        public string m_sREMIN_BALCAO;
        public string m_sREMESSA_NUMERO;
        public int m_iREMINSTAT_ID;
        public string m_sREMINSTAT_ABR;
        public string m_sREMPROC_TIPOPROD;

        public int m_sDOC_ID;
        public string m_sDOC_ZONA5;
        public string m_sDOC_ZONA4;
        public string m_sDOC_ZONA3;
        public string m_sDOC_ZONA2;
        public decimal m_dDOC_IMPORT;
        public string m_sDOC_ZONA1;
        public string m_sDOC_NIB;
        public string m_sREFARQ;
        public string m_sREFARQ_ORI;
        public string m_sDOC_CHAVEH;

        public string m_sDOC_REAPRESENTADO;
        public string m_sREAPRESENTADO_EFECTUADO;
        public string m_sREAPRESENTADO_ESTADO;
        public string m_sREAPRESENTADO_ERRO;

        public string m_sDOC_ISREAPRESENTADO;

        public string m_sDOC_CANCELADO;
        public string m_sCANCELA_EFECTUADO;
        public string m_sCANCELA_ESTADO;
        public string m_sCANCELA_ERRO;

        public string m_sCANCELA_DESCRICAO;

        /*
         * SDCIM 7
         */
        public String m_sDocOrigemID { get; set; }
        public String m_sDocOrigemDesc { get; set; }


        private void InitVars()
        {
            m_sREMIN_ID = "";
            m_dtREMIN_DATA = DateTime.MinValue;
            m_dtREMPROC_TIMER = DateTime.MinValue;
            m_sREMIN_BALCAO = "";
            m_sREMESSA_NUMERO = "";
            m_iREMINSTAT_ID = -1;
            m_sREMINSTAT_ABR = "";
            m_sREMPROC_TIPOPROD = "";

            m_sDOC_ID = 0;
            m_sDOC_ZONA5 = "";
            m_sDOC_ZONA4 = "";
            m_sDOC_ZONA3 = "";
            m_sDOC_ZONA2 = "";
            m_dDOC_IMPORT = 0;
            m_sDOC_ZONA1 = "";
            m_sDOC_NIB = "";
            m_sREFARQ = "";
            m_sREFARQ_ORI = "";
            m_sDOC_CHAVEH = "";

            m_sDOC_REAPRESENTADO = "";
            m_sREAPRESENTADO_EFECTUADO = "";
            m_sREAPRESENTADO_ESTADO = "";
            m_sREAPRESENTADO_ERRO = "";

            m_sDOC_ISREAPRESENTADO = "";

            m_sDOC_CANCELADO = "";
            m_sCANCELA_EFECTUADO = "";
            m_sCANCELA_ESTADO = "";
            m_sCANCELA_ERRO = "";

            m_sCANCELA_DESCRICAO = "";

            this.m_sDocOrigemDesc = String.Empty;
            this.m_sDocOrigemID = String.Empty;
        }

        public PesquisaDocumento()
        {
            InitVars();
        }

        public PesquisaDocumento(SqlDataReader dr)
        {
            InitVars();

            m_sREMIN_ID = Convert.ToString(dr["REMIN_ID"]);
            m_dtREMIN_DATA = Convert.ToDateTime(dr["REMIN_DATA"]);
            if (dr["REMPROC_TIMER"] == DBNull.Value)
            {

                m_dtREMPROC_TIMER = DateTime.Now;
            }
            else
            {

                m_dtREMPROC_TIMER = Convert.ToDateTime(dr["REMPROC_TIMER"]);
            }
            m_sREMIN_BALCAO = Convert.ToString(dr["REMIN_BALCAO"]);
            m_sREMESSA_NUMERO = Convert.ToString(dr["REMESSA_NUMERO"]);
            m_iREMINSTAT_ID = Convert.ToInt32(dr["REMINSTAT_ID"]);
            m_sREMINSTAT_ABR = Convert.ToString(dr["REMINSTAT_ABR"]);
            m_sREMPROC_TIPOPROD = Convert.ToString(dr["REMPROC_TIPOPROD"]);
            m_sDOC_ID = Convert.ToInt32(dr["DOC_ID"]);
            m_sDOC_ZONA5 = Convert.ToString(dr["DOC_ZONA5"]);
            m_sDOC_ZONA4 = Convert.ToString(dr["DOC_ZONA4"]);
            m_sDOC_ZONA3 = Convert.ToString(dr["DOC_ZONA3"]);
            m_sDOC_ZONA2 = Convert.ToString(dr["DOC_ZONA2"]);
            m_dDOC_IMPORT = Convert.ToDecimal(dr["DOC_ZONA2"]);// / (decimal)100.0;
            m_sDOC_ZONA1 = Convert.ToString(dr["DOC_ZONA1"]);
            m_sDOC_NIB = Convert.ToString(dr["DOC_NIB"]);
            m_sREFARQ = Convert.ToString(dr["REFARQ"]);
            if (dr["REFARQ_ORI"] == DBNull.Value)
            {
                m_sREFARQ_ORI = string.Empty;
            }
            else
            {
                m_sREFARQ_ORI = Convert.ToString(dr["REFARQ_ORI"]);
            }
            m_sDOC_REAPRESENTADO = Convert.ToString(dr["DOC_REAPRESENTADO"]);
            m_sREAPRESENTADO_EFECTUADO = Convert.ToString(dr["REAPRESENTADO_EFECTUADO"]);
            m_sREAPRESENTADO_ESTADO = Convert.ToString(dr["REAPRESENTADO_ESTADO"]);
            m_sREAPRESENTADO_ERRO = Convert.ToString(dr["REAPRESENTADO_ERRO"]);
            m_sDOC_ISREAPRESENTADO = Convert.ToString(dr["DOC_ISREAPRESENTADO"]);
            m_sDOC_CANCELADO = Convert.ToString(dr["DOC_CANCELADO"]);
            m_sCANCELA_EFECTUADO = Convert.ToString(dr["CANCELA_EFECTUADO"]);
            m_sCANCELA_ESTADO = Convert.ToString(dr["CANCELA_ESTADO"]);
            m_sCANCELA_ERRO = Convert.ToString(dr["CANCELA_ERRO"]);
            if (dr["CANCELA_DESCRICAO"] == DBNull.Value)
            {
                m_sCANCELA_DESCRICAO = string.Empty;
            }
            else
            {
                m_sCANCELA_DESCRICAO = Convert.ToString(dr["CANCELA_DESCRICAO"]);
            }
            m_sDOC_CHAVEH = Convert.ToString(dr["DOC_CHAVEH"]);
            this.m_sDocOrigemID = Convert.ToString(dr["DOC_ORIGEM_ID"]);
            this.m_sDocOrigemDesc = Convert.ToString(dr["DOC_ORIGEM_D"]);
        }

        public ListViewItem MakeListViewItem(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_sREMIN_ID;
            olvItem.SubItems.Add(m_dtREMIN_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_dtREMPROC_TIMER.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(this.m_sDocOrigemDesc);
            olvItem.SubItems.Add(m_sREMIN_BALCAO.PadLeft(4, '0'));
            olvItem.SubItems.Add(m_sREMESSA_NUMERO.PadLeft(11, '0'));
            olvItem.SubItems.Add(m_iREMINSTAT_ID.ToString() + " " + m_sREMINSTAT_ABR);            
            olvItem.SubItems.Add(m_sDOC_ID.ToString());
            olvItem.SubItems.Add(m_sDOC_ZONA5);
            olvItem.SubItems.Add(m_sDOC_ZONA4);
            olvItem.SubItems.Add(m_sDOC_ZONA3);
            string montanteToInsert = m_dDOC_IMPORT.ToString().Equals("0") ? m_dDOC_IMPORT.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(m_dDOC_IMPORT).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDOC_IMPORT).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sDOC_ZONA1);
            olvItem.SubItems.Add(m_sDOC_NIB);
            olvItem.SubItems.Add(m_sREFARQ);
            olvItem.SubItems.Add(m_sREFARQ_ORI);
            olvItem.SubItems.Add(m_sDOC_ISREAPRESENTADO);
            olvItem.SubItems.Add(m_sREAPRESENTADO_EFECTUADO + " " + m_sREAPRESENTADO_ESTADO + " " + m_sREAPRESENTADO_ERRO);
            olvItem.SubItems.Add(m_sDOC_REAPRESENTADO);
            olvItem.SubItems.Add(m_sCANCELA_EFECTUADO + " " + m_sCANCELA_ESTADO + " " + m_sCANCELA_DESCRICAO + " " + m_sCANCELA_ERRO);
            olvItem.SubItems.Add(m_sDOC_CANCELADO);
            olvItem.SubItems.Add(m_sDOC_CHAVEH.ToString());
            return olvItem;
        }
        public string getImgFrente(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null)
        {
            string sFileNameFrente, sWhereClauseFront;
            byte[] aImgF = null;
            if (origem.HasValue && origem.Value == (Int32)RemessaOrigem.Balcao)
            {
                sWhereClauseFront = " WHERE DOCBALCAO_ID = " + m_sDOC_ID + " AND IMGBALCAO_SIDE = 0 AND IMGBALCAO_TYPE = 'JPG'";
                aImgF = (byte[])oParameters.DirectSqlScalar("select IMGBALCAO_IMAGE from dbo.IMAGEM_BALCAO " + sWhereClauseFront);

            }
            else
            {
                sWhereClauseFront = " where DOC_ID= " + m_sDOC_ID + " and IMG_SIDE = 0 and IMG_TYPE= 'JPG'";
                aImgF = (byte[])oParameters.DirectSqlScalar("select IMG_IMAGE from dbo.Imagem " + sWhereClauseFront);
            }
            

            if (aImgF == null)
                return null;

            sFileNameFrente = oParameters.GetTempFileName("IMGPesqFront") + ".jpg";

            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        public string getImgBack(CIConfigGP.CIGlobalParameters oParameters, Int32? origem = null)
        {
            string sFileNameBack, sWhereClauseBack;
            byte[] aImgB = null;

            if (origem.HasValue && origem.Value == (Int32)RemessaOrigem.Balcao)
            {
                sWhereClauseBack = " WHERE DOCBALCAO_ID = " + m_sDOC_ID + " AND IMGBALCAO_SIDE = 1 AND IMGBALCAO_TYPE = 'JPG'";
                aImgB = (byte[])oParameters.DirectSqlScalar("select IMGBALCAO_IMAGE from dbo.IMAGEM_BALCAO " + sWhereClauseBack);
            }
            else
            {
                sWhereClauseBack = " where DOC_ID= " + m_sDOC_ID + " and IMG_SIDE = 1 and IMG_TYPE= 'JPG'";
                aImgB = (byte[])oParameters.DirectSqlScalar("select IMG_IMAGE from dbo.Imagem " + sWhereClauseBack);
            }
            

            if (aImgB == null)
                return null;

            sFileNameBack = oParameters.GetTempFileName("IMGPesqBack") + ".jpg";
            WriteImage(aImgB, sFileNameBack);

            return sFileNameBack;
        }

        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/PesquisaDocumentoACOM.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    public class PesquisaDocumentoACOM
    {
        public string m_sFICH_ID;
        public string m_sFICH_NSEQ;
        public DateTime m_dtFICH_DATA;

        public string m_sLOTEACOM_ID;
        public string m_sLOTEACOM_NUMERO;
        public string m_sLOTEACOM_PRODUTO;
        public DateTime m_dtLOTEACOM_DATAPROC;
        public string m_sLOTESTATUS_ID;
        public string m_sLOTESTAT_ABR;

        public string m_sDOCACOM_ID;
        public string m_sDOCACOM_ZONA5;
        public string m_sDOCACOM_ZONA4;
        public string m_sDOCACOM_ZONA3;
        public string m_sDOCACOM_ZONA2;
        public decimal m_dDOCACOM_IMPORT;
        public string m_sDOCACOM_ZONA1;
        public string m_sREFARQ;
        public string m_sDOCACOM_REFARQ2;
        public string m_sDOCACOM_BALCAO;
        public string m_sDOCACOM_CODANA;
        public string m_sDOCACOM_CANCELADO;
        public string m_sCANCEL_ESTADO;
        public string m_sCANCELA_ERRO;
        public string m_sESTADO_DESC;
        public string m_sDOCACOM_CHAVEH;
        public string m_sDOCACOM_LINHAOPT;
        public string m_sCANCELA_EFECTUADO;
        public string m_sCANCELA_DESCRICAO;
        public string m_sCANCELA_ID;

        public string m_sNOTIFICA_ID;
        public string m_sDOCACOM_NOTIFICADO;
        public string m_sNOTIFICA_ESTADO;
        public string m_sNOTIFICA_ERRO;
        public string m_sNOTIFICA_EFECTUADO;
        public string m_sNOTIFICA_DESCRICAO;

        /*
         * SDCIM 7
         */
        public String m_sDocOrigemID { get; set; }
        public String m_sDocOrigemDesc { get; set; }

        private void InitVars()
        {
            m_sFICH_ID = "";
            m_sFICH_NSEQ = "";
            m_dtFICH_DATA = DateTime.MinValue;

            m_sLOTEACOM_ID = "";
            m_sLOTEACOM_NUMERO = "";
            m_sLOTEACOM_PRODUTO = "";
            m_dtLOTEACOM_DATAPROC = DateTime.MinValue;
            m_sLOTESTATUS_ID = "";
            m_sLOTESTAT_ABR = "";

            m_sDOCACOM_ID = "";
            m_sDOCACOM_ZONA5 = "";
            m_sDOCACOM_ZONA4 = "";
            m_sDOCACOM_ZONA3 = "";
            m_sDOCACOM_ZONA2 = "";
            m_dDOCACOM_IMPORT = -1;
            m_sDOCACOM_ZONA1 = "";
            m_sREFARQ = "";
            m_sDOCACOM_REFARQ2 = "";
            m_sDOCACOM_BALCAO = "";
            m_sDOCACOM_CODANA = "";
            m_sESTADO_DESC = "";
            m_sDOCACOM_CHAVEH = "";
            m_sDOCACOM_LINHAOPT = "";

            m_sDOCACOM_CANCELADO = "";
            m_sCANCEL_ESTADO = "";
            m_sCANCELA_ERRO = "";
            m_sCANCELA_EFECTUADO = "";
            m_sCANCELA_DESCRICAO = "";

            m_sDOCACOM_NOTIFICADO = "";
            m_sNOTIFICA_ESTADO = "";
            m_sNOTIFICA_ERRO = "";
            m_sNOTIFICA_EFECTUADO = "";
            m_sNOTIFICA_DESCRICAO = "";

            this.m_sDocOrigemDesc = String.Empty;
            this.m_sDocOrigemID = String.Empty;
        }

        public PesquisaDocumentoACOM()
        {
            InitVars();
        }

        public PesquisaDocumentoACOM(SqlDataReader dr)
        {
            InitVars();

            m_sFICH_ID = Convert.ToString(dr["FICH_ID"]);
            m_sFICH_NSEQ = Convert.ToString(dr["FICH_NSEQ"]);
            m_dtFICH_DATA = Convert.ToDateTime(dr["FICH_DATA"]);

            m_sLOTEACOM_ID = Convert.ToString(dr["LOTEACOM_ID"]);
            m_sLOTEACOM_NUMERO = Convert.ToString(dr["LOTEACOM_NUMERO"]);
            m_sLOTEACOM_PRODUTO = Convert.ToString(dr["LOTEACOM_PRODUTO"]);
            m_dtLOTEACOM_DATAPROC = Convert.ToDateTime(dr["LOTEACOM_DATAPROC"]);
            m_sLOTESTATUS_ID = Convert.ToString(dr["LOTESTATUS_ID"]);
            m_sLOTESTAT_ABR = Convert.ToString(dr["LOTESTAT_ABR"]);

            m_sDOCACOM_ID = Convert.ToString(dr["DOCACOM_ID"]);
            m_sDOCACOM_ZONA5 = Convert.ToString(dr["DOCACOM_ZONA5"]);
            m_sDOCACOM_ZONA4 = Convert.ToString(dr["DOCACOM_ZONA4"]);
            m_sDOCACOM_ZONA3 = Convert.ToString(dr["DOCACOM_ZONA3"]);
            m_sDOCACOM_ZONA2 = Convert.ToString(dr["DOCACOM_ZONA2"]);
            m_dDOCACOM_IMPORT = Convert.ToDecimal(dr["DOCACOM_IMPORT"]);
            m_sDOCACOM_ZONA1 = Convert.ToString(dr["DOCACOM_ZONA1"]);
            m_sREFARQ = Convert.ToString(dr["REFARQ"]);
            m_sDOCACOM_REFARQ2 = Convert.ToString(dr["DOCACOM_REFARQ2"]);
            m_sDOCACOM_BALCAO = Convert.ToString(dr["DOCACOM_BALCAO"]);
            m_sESTADO_DESC = Convert.ToString(dr["ESTADO_DESC"]);
            m_sDOCACOM_CODANA = Convert.ToString(dr["DOCACOM_CODANA"]);
            m_sDOCACOM_CHAVEH = Convert.ToString(dr["DOCACOM_CHAVEH"]);
            m_sDOCACOM_LINHAOPT = Convert.ToString(dr["DOCACOM_LINHAOPT"]);

            m_sDOCACOM_CANCELADO = Convert.ToString(dr["DOCACOM_CANCELADO"]);
            m_sCANCEL_ESTADO = Convert.ToString(dr["CANCEL_ESTADO"]);
            m_sCANCELA_ERRO = Convert.ToString(dr["CANCELA_ERRO"]);
            m_sCANCELA_EFECTUADO = Convert.ToString(dr["CANCELA_EFECTUADO"]);
            if (dr["CANCELA_DESCRICAO"] != DBNull.Value)
            {
                m_sCANCELA_DESCRICAO = Convert.ToString(dr["CANCELA_DESCRICAO"]);
            }
            else
            {

                m_sCANCELA_DESCRICAO = string.Empty;

            }
            m_sDOCACOM_NOTIFICADO = Convert.ToString(dr["DOCACOM_NOTIFICADO"]);
            m_sNOTIFICA_ESTADO = Convert.ToString(dr["NOTIFICA_ESTADO"]);
            m_sNOTIFICA_ERRO = Convert.ToString(dr["NOTIFICA_ERRO"]);
            m_sNOTIFICA_EFECTUADO = Convert.ToString(dr["NOTIFICA_EFECTUADO"]);
            if (dr["NOTIFICA_DESCRICAO"] != DBNull.Value)
            {
                m_sNOTIFICA_DESCRICAO = Convert.ToString(dr["NOTIFICA_DESCRICAO"]);
            }
            else
            {

                m_sNOTIFICA_DESCRICAO = string.Empty;
            }
            this.m_sDocOrigemID = Convert.ToString(dr["DOC_ORIGEM_ID"]);
            this.m_sDocOrigemDesc = Convert.ToString(dr["DOC_ORIGEM_D"]);
            if (dr["NotifID"] != DBNull.Value)
            {
                m_sNOTIFICA_ID = Convert.ToString(dr["NotifID"]);
            }
            if (dr["CancelID"] != DBNull.Value)
            {
                m_sCANCELA_ID = Convert.ToString(dr["CancelID"]);
            }
        }

        public ListViewItem MakeListViewItem(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_sFICH_ID;
            olvItem.SubItems.Add(m_sFICH_NSEQ);
            olvItem.SubItems.Add(m_dtFICH_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sLOTEACOM_ID);
            olvItem.SubItems.Add(m_sLOTEACOM_NUMERO);
            olvItem.SubItems.Add(m_sLOTEACOM_PRODUTO);
            olvItem.SubItems.Add(m_dtLOTEACOM_DATAPROC.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sLOTESTATUS_ID + " " + m_sLOTESTAT_ABR);
            olvItem.SubItems.Add(m_sDOCACOM_ID);
            olvItem.SubItems.Add(this.m_sDocOrigemDesc);
            olvItem.SubItems.Add(m_sDOCACOM_ZONA5);
            olvItem.SubItems.Add(m_sDOCACOM_ZONA4);
            olvItem.SubItems.Add(m_sDOCACOM_ZONA3);
            string montanteToInsert = m_dDOCACOM_IMPORT.ToString().Equals("0") ? m_dDOCACOM_IMPORT.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(m_dDOCACOM_IMPORT).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDOCACOM_IMPORT).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sDOCACOM_ZONA1);
            olvItem.SubItems.Add(m_sREFARQ);
            olvItem.SubItems.Add(m_sDOCACOM_REFARQ2);
            olvItem.SubItems.Add(m_sDOCACOM_BALCAO.PadLeft(4, '0'));
            olvItem.SubItems.Add(m_sDOCACOM_CODANA + " " + m_sESTADO_DESC);
            olvItem.SubItems.Add(m_sCANCELA_EFECTUADO + " " + m_sCANCEL_ESTADO + " " + m_sCANCELA_DESCRICAO + " " + m_sCANCELA_ERRO);
            olvItem.SubItems.Add(m_sDOCACOM_CANCELADO);
            olvItem.SubItems.Add(m_sNOTIFICA_EFECTUADO + " " + m_sNOTIFICA_ESTADO + " " + m_sNOTIFICA_DESCRICAO + " " + m_sNOTIFICA_ERRO);
            olvItem.SubItems.Add(m_sDOCACOM_NOTIFICADO);
            olvItem.SubItems.Add(m_sDOCACOM_CHAVEH);
            olvItem.SubItems.Add(m_sDOCACOM_LINHAOPT);
            olvItem.SubItems.Add(m_sCANCELA_ID);
            olvItem.SubItems.Add(m_sNOTIFICA_ID);
            return olvItem;
        }

    }
}

// FILE: SDCIM/ModusCI/CIActividades/PesquisaDocumentoENVM.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace CIActividades
{
    public class PesquisaDocumentoENVM
    {

        public string m_sFICH_ID;
        public string m_sFICH_NSEQ;
        public DateTime m_dtFICH_DATA;
        public string m_sFICH_REFCMP;

        public string m_sLOTEENV_ID;
        public string m_sLOTEENV_NUMERO;
        public string m_sLOTEENV_CODBAL;
        public string m_sLOTEENV_NREM;
        public DateTime m_dtLOTEENV_DTREM;
        public string m_sLOTEENV_TCAP;
        public string m_sLOTEENV_TREM;
        public string m_sLOTESTATUS_ID;
        public string m_sLOTESTAT_ABR;


        public string m_sDOCENV_ID;
        public string m_sDOCENV_ZONA5;
        public string m_sDOCENV_ZONA4;
        public string m_sDOCENV_ZONA3;
        public string m_sDOCENV_ZONA2;
        public decimal m_dDOCENV_IMPORT;
        public string m_sDOCENV_ZONA1;
        public string m_sDOCENV_REFARQ;
        public string m_sREFARQ_ORI;
        public string m_sDOCENV_ANOMAL;
        public string m_sESTADO_DESC;
        public string m_sDOCENV_DUPLICADO;
        public string m_sDOCENV_CODANA;
        public string m_sDOCENV_CHAVEH;

        public string m_sDOCENV_REAPRESENTADO;
        public string m_sREAPRESENTADO_EFECTUADO;
        public string m_sREAPRESENTADO_ESTADO;
        public string m_sREAPRESENTADO_ERRO;

        public string m_sDOCENV_CANCELADO;
        public string m_sCANCELA_EFECTUADO;
        public string m_sCANCELA_ESTADO;
        public string m_sCANCELA_ERRO;
        public string m_sCANCELA_DESCRICAO;

        public string m_sDOCENV_NOTIFICADO;
        public string m_sNOTIFICA_EFECTUADO;
        public string m_sNOTIFICA_ESTADO;
        public string m_sNOTIFICA_ERRO;
        public string m_sNOTIFICA_DESCRICAO;

        /*
         * SDCIM 7
         */
        public String m_sDocOrigemID { get; set; }
        public String m_sDocOrigemDesc { get; set; }
        public String m_sDocEnv_ImgQual { get; set; }
        public String m_sLoteEnv_AnomaliaID { get; set; }
        public String m_sLoteEnv_DescAnomalia { get; set; }
        /*
         * SDCIM 7
         */

        private void InitVars()
        {
            m_sFICH_ID = "";
            m_sFICH_NSEQ = "";
            m_dtFICH_DATA = DateTime.MinValue;
            m_sFICH_REFCMP = "";

            m_sLOTEENV_ID = "";
            m_sLOTEENV_NUMERO = "";
            m_sLOTEENV_CODBAL = "";
            m_sLOTEENV_NREM = "";
            m_dtLOTEENV_DTREM = DateTime.MinValue;
            m_sLOTEENV_TCAP = "";
            m_sLOTEENV_TREM = "";
            m_sLOTESTATUS_ID = "";
            m_sLOTESTAT_ABR = "";

            m_sDOCENV_ID = "";
            m_sDOCENV_ZONA5 = "";
            m_sDOCENV_ZONA4 = "";
            m_sDOCENV_ZONA3 = "";
            m_sDOCENV_ZONA2 = "";
            m_dDOCENV_IMPORT = -1;
            m_sDOCENV_ZONA1 = "";
            m_sDOCENV_REFARQ = "";
            m_sREFARQ_ORI = "";
            m_sDOCENV_ANOMAL = "";
            m_sESTADO_DESC = "";
            m_sDOCENV_DUPLICADO = "";
            m_sDOCENV_CODANA = "";
            m_sDOCENV_CHAVEH = "";

            m_sDOCENV_REAPRESENTADO = "";
            m_sREAPRESENTADO_EFECTUADO = "";
            m_sREAPRESENTADO_ESTADO = "";
            m_sREAPRESENTADO_ERRO = "";

            m_sDOCENV_CANCELADO = "";
            m_sCANCELA_EFECTUADO = "";
            m_sCANCELA_ESTADO = "";
            m_sCANCELA_ERRO = "";
            m_sCANCELA_DESCRICAO = "";

            m_sDOCENV_NOTIFICADO = "";
            m_sNOTIFICA_EFECTUADO = "";
            m_sNOTIFICA_ESTADO = "";
            m_sNOTIFICA_ERRO = "";
            m_sNOTIFICA_DESCRICAO = "";

            this.m_sDocOrigemDesc = String.Empty;
            this.m_sDocOrigemID = String.Empty;
            this.m_sDocEnv_ImgQual = String.Empty;
            this.m_sLoteEnv_AnomaliaID = String.Empty;
            this.m_sLoteEnv_DescAnomalia = String.Empty;
        }

        public PesquisaDocumentoENVM()
        {
            InitVars();
        }

        public PesquisaDocumentoENVM(SqlDataReader dr)
        {
            InitVars();

            try
            {
                m_sFICH_ID = Convert.ToString(dr["FICH_ID"]);
                m_sFICH_NSEQ = Convert.ToString(dr["FICH_NSEQ"]);
                m_dtFICH_DATA = Convert.ToDateTime(dr["FICH_DATA"]);
                m_sFICH_REFCMP = Convert.ToString(dr["FICH_REFCMP"]);

                m_sLOTEENV_ID = Convert.ToString(dr["LOTEENV_ID"]);
                m_sLOTEENV_NUMERO = Convert.ToString(dr["LOTEENV_NUMERO"]);
                m_sLOTEENV_CODBAL = Convert.ToString(dr["LOTEENV_CODBAL"]);
                m_sLOTEENV_NREM = Convert.ToString(dr["LOTEENV_NREM"]);
                m_dtLOTEENV_DTREM = Convert.ToDateTime(dr["LOTEENV_DTREM"]);
                m_sLOTEENV_TCAP = Convert.ToString(dr["LOTEENV_TCAP"]);
                m_sLOTEENV_TREM = Convert.ToString(dr["LOTEENV_TREM"]);
                m_sLOTESTATUS_ID = Convert.ToString(dr["LOTESTATUS_ID"]);
                m_sLOTESTAT_ABR = Convert.ToString(dr["LOTESTAT_ABR"]);

                m_sDOCENV_ID = Convert.ToString(dr["DOCENV_ID"]);
                m_sDOCENV_ZONA5 = Convert.ToString(dr["DOCENV_ZONA5"]);
                m_sDOCENV_ZONA4 = Convert.ToString(dr["DOCENV_ZONA4"]);
                m_sDOCENV_ZONA3 = Convert.ToString(dr["DOCENV_ZONA3"]);
                m_sDOCENV_ZONA2 = Convert.ToString(dr["DOCENV_ZONA2"]);
                m_dDOCENV_IMPORT = Convert.ToDecimal(dr["DOCENV_ZONA2"]);
                m_sDOCENV_ZONA1 = Convert.ToString(dr["DOCENV_ZONA1"]);
                m_sDOCENV_REFARQ = Convert.ToString(dr["REFARQ"]);
                if (dr["REFARQ_ORI"] != DBNull.Value)
                {
                    m_sREFARQ_ORI = Convert.ToString(dr["REFARQ_ORI"]);
                }
                m_sDOCENV_ANOMAL = Convert.ToString(dr["DOCENV_ANOMAL"]);
                m_sESTADO_DESC = Convert.ToString(dr["ESTADO_DESC"]);
                m_sDOCENV_DUPLICADO = Convert.ToString(dr["DOCENV_DUPLICADO"]);
                m_sDOCENV_CODANA = Convert.ToString(dr["DOCENV_CODANA"]);

                m_sDOCENV_REAPRESENTADO = Convert.ToString(dr["DOCENV_REAPRESENTADO"]);
                m_sREAPRESENTADO_EFECTUADO = Convert.ToString(dr["REAPRESENTADO_EFECTUADO"]);
                m_sREAPRESENTADO_ESTADO = Convert.ToString(dr["REAPRESENTADO_ESTADO"]);
                m_sREAPRESENTADO_ERRO = Convert.ToString(dr["REAPRESENTADO_ERRO"]);

                m_sDOCENV_CANCELADO = Convert.ToString(dr["DOCENV_CANCELADO"]);
                m_sCANCELA_EFECTUADO = Convert.ToString(dr["CANCELA_EFECTUADO"]);
                m_sCANCELA_ESTADO = Convert.ToString(dr["CANCELA_ESTADO"]);
                m_sCANCELA_ERRO = Convert.ToString(dr["CANCELA_ERRO"]);
                if (dr["CANCELA_DESCRICAO"] != DBNull.Value)
                {
                    m_sCANCELA_DESCRICAO = Convert.ToString(dr["CANCELA_DESCRICAO"]);
                }
                m_sDOCENV_NOTIFICADO = Convert.ToString(dr["DOCENV_NOTIFICADO"]);
                m_sNOTIFICA_EFECTUADO = Convert.ToString(dr["NOTIFICA_EFECTUADO"]);
                m_sNOTIFICA_ESTADO = Convert.ToString(dr["NOTIFICA_ESTADO"]);
                m_sNOTIFICA_ERRO = Convert.ToString(dr["NOTIFICA_ERRO"]);
                if (dr["NOTIFICA_DESCRICAO"] != DBNull.Value)
                {
                    m_sNOTIFICA_DESCRICAO = Convert.ToString(dr["NOTIFICA_DESCRICAO"]);
                }
                m_sDOCENV_CHAVEH = Convert.ToString(dr["DOCENV_CHAVEH"]);
                this.m_sDocOrigemID = Convert.ToString(dr["DOC_ORIGEM_ID"]);
                this.m_sDocOrigemDesc = Convert.ToString(dr["DOC_ORIGEM_D"]);

                if (dr["DOCENV_IMGQUAL"] != DBNull.Value)
                {
                    this.m_sDocEnv_ImgQual = Convert.ToString(dr["DOCENV_IMGQUAL"]);
                }
                this.m_sLoteEnv_AnomaliaID = Convert.ToString(dr["LOTEENV_ANOMAL"]);
                this.m_sLoteEnv_DescAnomalia = Convert.ToString(dr["LOTEENV_ANOMAL_D"]);
            }
            catch
            {
            }
        }

        public ListViewItem MakeListViewItem(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_sFICH_ID;
            olvItem.SubItems.Add(m_sFICH_NSEQ);
            olvItem.SubItems.Add(m_dtFICH_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sFICH_REFCMP);
            olvItem.SubItems.Add(m_sLOTEENV_ID);
            olvItem.SubItems.Add(m_sLOTEENV_NUMERO);
            olvItem.SubItems.Add(this.m_sDocOrigemDesc);//sdcim 7
            olvItem.SubItems.Add(m_sLOTEENV_CODBAL.PadLeft(4, '0'));
            olvItem.SubItems.Add(m_sLOTEENV_NREM.PadLeft(11, '0'));
            olvItem.SubItems.Add(m_dtLOTEENV_DTREM.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sLOTEENV_TCAP);
            olvItem.SubItems.Add(m_sLOTEENV_TREM);
            olvItem.SubItems.Add(m_sLOTESTATUS_ID + " " + m_sLOTESTAT_ABR);
            olvItem.SubItems.Add(this.m_sLoteEnv_AnomaliaID + " " + this.m_sLoteEnv_DescAnomalia);
            olvItem.SubItems.Add(m_sDOCENV_ID);
            olvItem.SubItems.Add(m_sDOCENV_ZONA5);
            olvItem.SubItems.Add(m_sDOCENV_ZONA4);
            olvItem.SubItems.Add(m_sDOCENV_ZONA3);
            string montanteToInsert = m_dDOCENV_IMPORT.ToString().Equals("0") ? m_dDOCENV_IMPORT.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(m_dDOCENV_IMPORT).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDOCENV_IMPORT).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sDOCENV_ZONA1);
            olvItem.SubItems.Add(m_sDOCENV_REFARQ);
            olvItem.SubItems.Add(m_sREFARQ_ORI);
            olvItem.SubItems.Add(this.m_sDocEnv_ImgQual);
            olvItem.SubItems.Add(m_sDOCENV_ANOMAL + " " + m_sESTADO_DESC);
            olvItem.SubItems.Add(m_sDOCENV_CODANA);
            olvItem.SubItems.Add(m_sDOCENV_DUPLICADO);
            olvItem.SubItems.Add(m_sREAPRESENTADO_EFECTUADO + " " + m_sREAPRESENTADO_ESTADO + " " + m_sREAPRESENTADO_ERRO);
            olvItem.SubItems.Add(m_sDOCENV_REAPRESENTADO);
            olvItem.SubItems.Add(m_sCANCELA_EFECTUADO + " " + m_sCANCELA_ESTADO + " " + m_sCANCELA_DESCRICAO + " " + m_sCANCELA_ERRO);
            olvItem.SubItems.Add(m_sDOCENV_CANCELADO);
            olvItem.SubItems.Add(m_sNOTIFICA_EFECTUADO + " " + m_sNOTIFICA_ESTADO + " " + m_sNOTIFICA_DESCRICAO + " " + m_sNOTIFICA_ERRO);
            olvItem.SubItems.Add(m_sDOCENV_NOTIFICADO);
            olvItem.SubItems.Add(m_sDOCENV_CHAVEH);
            return olvItem;
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/PesquisasForm.Designer.cs
﻿namespace CIActividades
{
    partial class PesquisasForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.PesquisasEnable(true);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PesquisasForm));
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.toolStripButtonEmAnalise = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonOK = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonMaisMenos = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonErro = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonExitJanela = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonRem = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonENVM = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonACOM = new System.Windows.Forms.ToolStripButton();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrldtInicio = new System.Windows.Forms.DateTimePicker();
            this.listViewPesquisaDocumento = new NBIISNET.ListViewBase();
            this.columnHeader4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderPROC_TIMER = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnOrigemCompensacao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader31 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocNIB = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocRefarq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderRefarqOri = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderISReapresentado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderReapr = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderReaprID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderDocCancelado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeadercancelID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColChaveH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripDOC = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuItemReapresentarDOC = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItemConfirmarDOC = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItemAnularDOC = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem2 = new System.Windows.Forms.ToolStripSeparator();
            this.historicoDoDocumentoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem5 = new System.Windows.Forms.ToolStripSeparator();
            this.cancelaDocumentoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.confirmarCancelamentoToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.anularCancelamentoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.marcarCancelamentoComEfectuadoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.listViewPesquisaDocumentoENVM = new NBIISNET.ListViewBase();
            this.columnHeader5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader6 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader7 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader8 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader9 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader10 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.colunaOrigem = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader11 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader12 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader13 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader14 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader15 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader16 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.LoteAnom = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader17 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader18 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader19 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader20 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader21 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader22 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader23 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderRefarqOriENVM = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.clmImgQual = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader24 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader26 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader25 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderReap = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader35 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderCancelado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader39 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderNotif = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader53 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader27 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripENVM = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuItemENVMNotificaAcolhimento = new System.Windows.Forms.ToolStripMenuItem();
            this.confirmarNotificacaoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItemENVMAnulaNotificacao = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripSeparator();
            this.reapresentarCompensacaoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ConfirmarReapresentacaoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.anularReapresentacaoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem3 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripMenuItemHistoricoENVM = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem6 = new System.Windows.Forms.ToolStripSeparator();
            this.cancelaDocumentoToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.confirmarCancelamentoToolStripMenuItem2 = new System.Windows.Forms.ToolStripMenuItem();
            this.anularCancelamentoToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.labelDOC = new System.Windows.Forms.Label();
            this.buttonDocumento = new System.Windows.Forms.Button();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.labelENVM = new System.Windows.Forms.Label();
            this.buttonENVM = new System.Windows.Forms.Button();
            this.labelACOM = new System.Windows.Forms.Label();
            this.listViewPesquisaDocumentoACOM = new NBIISNET.ListViewBase();
            this.columnHeader28 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader29 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader30 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader32 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader33 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader34 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader36 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader37 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader40 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnOrigem = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader41 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader42 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader43 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader44 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader45 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader46 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader47 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader48 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader49 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnACOMCancel = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader38 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeaderACOMNotif = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader52 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader50 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader51 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripACOM = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.CancelaACOMToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.confirmarCancelamentoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.anulaCancelaToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem4 = new System.Windows.Forms.ToolStripSeparator();
            this.ToolStripMenuItemHistoricoACOM = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem7 = new System.Windows.Forms.ToolStripSeparator();
            this.NotificaACOMStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ConfirmaNotificaACOMStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.AnulaNotificaACOMStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.buttonACOM = new System.Windows.Forms.Button();
            this.textBoxMontante = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.textBoxBalcao = new System.Windows.Forms.TextBox();
            this.label8 = new System.Windows.Forms.Label();
            this.textBoxNumRemessa = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.textBoxNumCheque = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.textBoxREFARQ = new System.Windows.Forms.TextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.checkBoxPorAnalisar = new System.Windows.Forms.CheckBox();
            this.lblOrigem = new System.Windows.Forms.Label();
            this.cbOrigem = new System.Windows.Forms.ComboBox();
            this.cbPendenteIntervencao = new System.Windows.Forms.CheckBox();
            this.lblDeposito = new System.Windows.Forms.Label();
            this.txtDeposito = new System.Windows.Forms.TextBox();
            this.toolStrip1.SuspendLayout();
            this.contextMenuStripDOC.SuspendLayout();
            this.contextMenuStripENVM.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).BeginInit();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            this.contextMenuStripACOM.SuspendLayout();
            this.SuspendLayout();
            // 
            // toolStrip1
            // 
            this.toolStrip1.ImageScalingSize = new System.Drawing.Size(32, 32);
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButtonEmAnalise,
            this.toolStripSeparator3,
            this.toolStripButtonOK,
            this.toolStripButtonMaisMenos,
            this.toolStripButtonErro,
            this.toolStripSeparator2,
            this.toolStripButtonExitJanela,
            this.toolStripSeparator4,
            this.toolStripButtonRem,
            this.toolStripSeparator1,
            this.toolStripButtonENVM,
            this.toolStripSeparator5,
            this.toolStripButtonACOM});
            this.toolStrip1.Location = new System.Drawing.Point(0, 0);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Padding = new System.Windows.Forms.Padding(0);
            this.toolStrip1.Size = new System.Drawing.Size(988, 39);
            this.toolStrip1.TabIndex = 24;
            this.toolStrip1.Text = "toolStripActividades";
            // 
            // toolStripButtonEmAnalise
            // 
            this.toolStripButtonEmAnalise.CheckOnClick = true;
            this.toolStripButtonEmAnalise.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonEmAnalise.Image = global::CIActividades.Properties.Resources.Par;
            this.toolStripButtonEmAnalise.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonEmAnalise.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonEmAnalise.Name = "toolStripButtonEmAnalise";
            this.toolStripButtonEmAnalise.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonEmAnalise.Text = "toolStripButton4";
            this.toolStripButtonEmAnalise.ToolTipText = "Em análise";
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonOK
            // 
            this.toolStripButtonOK.CheckOnClick = true;
            this.toolStripButtonOK.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonOK.Image = global::CIActividades.Properties.Resources.Bom;
            this.toolStripButtonOK.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonOK.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonOK.Name = "toolStripButtonOK";
            this.toolStripButtonOK.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonOK.Text = "Ver OK";
            this.toolStripButtonOK.ToolTipText = "Ver OK";
            // 
            // toolStripButtonMaisMenos
            // 
            this.toolStripButtonMaisMenos.CheckOnClick = true;
            this.toolStripButtonMaisMenos.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonMaisMenos.Image = global::CIActividades.Properties.Resources.comprobl;
            this.toolStripButtonMaisMenos.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonMaisMenos.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonMaisMenos.Name = "toolStripButtonMaisMenos";
            this.toolStripButtonMaisMenos.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonMaisMenos.Text = "Ver Mais ou Menos";
            this.toolStripButtonMaisMenos.ToolTipText = "Ver Mai ou Menos";
            // 
            // toolStripButtonErro
            // 
            this.toolStripButtonErro.CheckOnClick = true;
            this.toolStripButtonErro.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonErro.Image = global::CIActividades.Properties.Resources.Erro;
            this.toolStripButtonErro.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonErro.Margin = new System.Windows.Forms.Padding(0, 1, 10, 2);
            this.toolStripButtonErro.Name = "toolStripButtonErro";
            this.toolStripButtonErro.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonErro.Text = "Ver em Erro";
            this.toolStripButtonErro.ToolTipText = "Ver em Erro";
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Name = "toolStripSeparator2";
            this.toolStripSeparator2.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonExitJanela
            // 
            this.toolStripButtonExitJanela.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonExitJanela.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonExitJanela.Image")));
            this.toolStripButtonExitJanela.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonExitJanela.Name = "toolStripButtonExitJanela";
            this.toolStripButtonExitJanela.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonExitJanela.Click += new System.EventHandler(this.toolStripButtonExitJanela_Click);
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = "toolStripSeparator4";
            this.toolStripSeparator4.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonRem
            // 
            this.toolStripButtonRem.BackColor = System.Drawing.SystemColors.Info;
            this.toolStripButtonRem.Checked = true;
            this.toolStripButtonRem.CheckOnClick = true;
            this.toolStripButtonRem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolStripButtonRem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.toolStripButtonRem.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toolStripButtonRem.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonRem.Image")));
            this.toolStripButtonRem.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonRem.Name = "toolStripButtonRem";
            this.toolStripButtonRem.Size = new System.Drawing.Size(37, 36);
            this.toolStripButtonRem.Text = "Rem";
            this.toolStripButtonRem.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            this.toolStripButtonRem.Click += new System.EventHandler(this.toolStripButtonRem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonENVM
            // 
            this.toolStripButtonENVM.BackColor = System.Drawing.SystemColors.Info;
            this.toolStripButtonENVM.Checked = true;
            this.toolStripButtonENVM.CheckOnClick = true;
            this.toolStripButtonENVM.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolStripButtonENVM.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.toolStripButtonENVM.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toolStripButtonENVM.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonENVM.Image")));
            this.toolStripButtonENVM.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonENVM.Name = "toolStripButtonENVM";
            this.toolStripButtonENVM.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonENVM.Text = "ENVM";
            this.toolStripButtonENVM.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            this.toolStripButtonENVM.Click += new System.EventHandler(this.toolStripButtonENVM_Click);
            // 
            // toolStripSeparator5
            // 
            this.toolStripSeparator5.Name = "toolStripSeparator5";
            this.toolStripSeparator5.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonACOM
            // 
            this.toolStripButtonACOM.BackColor = System.Drawing.SystemColors.Info;
            this.toolStripButtonACOM.Checked = true;
            this.toolStripButtonACOM.CheckOnClick = true;
            this.toolStripButtonACOM.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolStripButtonACOM.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.toolStripButtonACOM.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.toolStripButtonACOM.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonACOM.Image")));
            this.toolStripButtonACOM.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonACOM.Name = "toolStripButtonACOM";
            this.toolStripButtonACOM.Size = new System.Drawing.Size(44, 36);
            this.toolStripButtonACOM.Text = "ACOM";
            this.toolStripButtonACOM.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            this.toolStripButtonACOM.Click += new System.EventHandler(this.toolStripButtonACOM_Click);
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = "yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(103, 57);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(85, 20);
            this.m_ctrldtFim.TabIndex = 1;
            // 
            // m_ctrldtInicio
            // 
            this.m_ctrldtInicio.CustomFormat = "yyyy-MM-dd";
            this.m_ctrldtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtInicio.Location = new System.Drawing.Point(12, 57);
            this.m_ctrldtInicio.Name = "m_ctrldtInicio";
            this.m_ctrldtInicio.Size = new System.Drawing.Size(85, 20);
            this.m_ctrldtInicio.TabIndex = 0;
            // 
            // listViewPesquisaDocumento
            // 
            this.listViewPesquisaDocumento.AllowColumnReorder = true;
            this.listViewPesquisaDocumento.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewPesquisaDocumento.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader4,
            this.columnHeader3,
            this.columnHeaderPROC_TIMER,
            this.columnOrigemCompensacao,
            this.columnHeader2,
            this.columnHeader31,
            this.columnHeader1,
            this.detDocColDocId,
            this.detDocColDocZona5,
            this.detDocColDocZona4,
            this.detDocColDocZona3,
            this.detDocColDocZona2,
            this.detDocColDocZona1,
            this.detDocColDocNIB,
            this.detDocColDocRefarq,
            this.columnHeaderRefarqOri,
            this.columnHeaderISReapresentado,
            this.columnHeaderReapr,
            this.columnHeaderReaprID,
            this.columnHeaderDocCancelado,
            this.columnHeadercancelID,
            this.detDocColChaveH});
            this.listViewPesquisaDocumento.ContextMenuStrip = this.contextMenuStripDOC;
            this.listViewPesquisaDocumento.EnableExportar = true;
            this.listViewPesquisaDocumento.FullRowSelect = true;
            this.listViewPesquisaDocumento.GridLines = true;
            this.listViewPesquisaDocumento.HideSelection = false;
            this.listViewPesquisaDocumento.Location = new System.Drawing.Point(3, 27);
            this.listViewPesquisaDocumento.Name = "listViewPesquisaDocumento";
            this.listViewPesquisaDocumento.Size = new System.Drawing.Size(985, 149);
            this.listViewPesquisaDocumento.TabIndex = 42;
            this.listViewPesquisaDocumento.TabStop = false;
            this.listViewPesquisaDocumento.UseCompatibleStateImageBehavior = false;
            this.listViewPesquisaDocumento.View = System.Windows.Forms.View.Details;
            this.listViewPesquisaDocumento.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewPesquisaDocumento_MouseDoubleClick);
            // 
            // columnHeader4
            // 
            this.columnHeader4.Text = "ReminID";
            this.columnHeader4.Width = 0;
            // 
            // columnHeader3
            // 
            this.columnHeader3.Text = "Rem.Data";
            this.columnHeader3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader3.Width = 70;
            // 
            // columnHeaderPROC_TIMER
            // 
            this.columnHeaderPROC_TIMER.Text = "ProcTimer";
            this.columnHeaderPROC_TIMER.Width = 120;
            // 
            // columnOrigemCompensacao
            // 
            this.columnOrigemCompensacao.Text = "Origem";
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Rem.Balcao";
            this.columnHeader2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader2.Width = 50;
            // 
            // columnHeader31
            // 
            this.columnHeader31.Text = "RemNumero";
            this.columnHeader31.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader31.Width = 80;
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Rem.Estado";
            this.columnHeader1.Width = 90;
            // 
            // detDocColDocId
            // 
            this.detDocColDocId.Text = "Doc ID";
            this.detDocColDocId.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.detDocColDocId.Width = 49;
            // 
            // detDocColDocZona5
            // 
            this.detDocColDocZona5.Text = "ZIB";
            // 
            // detDocColDocZona4
            // 
            this.detDocColDocZona4.Text = "N. Conta";
            this.detDocColDocZona4.Width = 80;
            // 
            // detDocColDocZona3
            // 
            this.detDocColDocZona3.Text = "N.Cheque";
            this.detDocColDocZona3.Width = 75;
            // 
            // detDocColDocZona2
            // 
            this.detDocColDocZona2.Text = "Montante";
            this.detDocColDocZona2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.detDocColDocZona2.Width = 100;
            // 
            // detDocColDocZona1
            // 
            this.detDocColDocZona1.Text = "Tp";
            this.detDocColDocZona1.Width = 30;
            // 
            // detDocColDocNIB
            // 
            this.detDocColDocNIB.Text = "Conta/NIB";
            this.detDocColDocNIB.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocNIB.Width = 120;
            // 
            // detDocColDocRefarq
            // 
            this.detDocColDocRefarq.Text = "Refarq";
            this.detDocColDocRefarq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocRefarq.Width = 100;
            // 
            // columnHeaderRefarqOri
            // 
            this.columnHeaderRefarqOri.Text = "RefarqOri";
            this.columnHeaderRefarqOri.Width = 30;
            // 
            // columnHeaderISReapresentado
            // 
            this.columnHeaderISReapresentado.Text = "IsReapresentado";
            this.columnHeaderISReapresentado.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeaderISReapresentado.Width = 20;
            // 
            // columnHeaderReapr
            // 
            this.columnHeaderReapr.Text = "Reapresentado";
            // 
            // columnHeaderReaprID
            // 
            this.columnHeaderReaprID.Text = "Reapr.ID";
            this.columnHeaderReaprID.Width = 0;
            // 
            // columnHeaderDocCancelado
            // 
            this.columnHeaderDocCancelado.Text = "Cancelamento";
            // 
            // columnHeadercancelID
            // 
            this.columnHeadercancelID.Text = "Cancel ID";
            this.columnHeadercancelID.Width = 0;
            // 
            // detDocColChaveH
            // 
            this.detDocColChaveH.Text = "ChaveH";
            this.detDocColChaveH.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColChaveH.Width = 150;
            // 
            // contextMenuStripDOC
            // 
            this.contextMenuStripDOC.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItemReapresentarDOC,
            this.toolStripMenuItemConfirmarDOC,
            this.toolStripMenuItemAnularDOC,
            this.toolStripMenuItem2,
            this.historicoDoDocumentoToolStripMenuItem,
            this.toolStripMenuItem5,
            this.cancelaDocumentoToolStripMenuItem,
            this.confirmarCancelamentoToolStripMenuItem1,
            this.anularCancelamentoToolStripMenuItem,
            this.marcarCancelamentoComEfectuadoToolStripMenuItem});
            this.contextMenuStripDOC.Name = "contextMenuStripRemTrans";
            this.contextMenuStripDOC.Size = new System.Drawing.Size(297, 192);
            this.contextMenuStripDOC.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripDOC_Opening);
            // 
            // toolStripMenuItemReapresentarDOC
            // 
            this.toolStripMenuItemReapresentarDOC.Name = "toolStripMenuItemReapresentarDOC";
            this.toolStripMenuItemReapresentarDOC.Size = new System.Drawing.Size(296, 22);
            this.toolStripMenuItemReapresentarDOC.Text = "Reapresentar à Compensação";
            this.toolStripMenuItemReapresentarDOC.Click += new System.EventHandler(this.toolStripMenuItemReapresentarDOC_Click);
            // 
            // toolStripMenuItemConfirmarDOC
            // 
            this.toolStripMenuItemConfirmarDOC.Name = "toolStripMenuItemConfirmarDOC";
            this.toolStripMenuItemConfirmarDOC.Size = new System.Drawing.Size(296, 22);
            this.toolStripMenuItemConfirmarDOC.Text = "Confirmar Reapresentação";
            this.toolStripMenuItemConfirmarDOC.Click += new System.EventHandler(this.toolStripMenuItemConfirmarDOC_Click);
            // 
            // toolStripMenuItemAnularDOC
            // 
            this.toolStripMenuItemAnularDOC.Name = "toolStripMenuItemAnularDOC";
            this.toolStripMenuItemAnularDOC.Size = new System.Drawing.Size(296, 22);
            this.toolStripMenuItemAnularDOC.Text = "Anular Reapresentação";
            this.toolStripMenuItemAnularDOC.Click += new System.EventHandler(this.toolStripMenuItemAnularDOC_Click);
            // 
            // toolStripMenuItem2
            // 
            this.toolStripMenuItem2.Name = "toolStripMenuItem2";
            this.toolStripMenuItem2.Size = new System.Drawing.Size(293, 6);
            // 
            // historicoDoDocumentoToolStripMenuItem
            // 
            this.historicoDoDocumentoToolStripMenuItem.Name = "historicoDoDocumentoToolStripMenuItem";
            this.historicoDoDocumentoToolStripMenuItem.Size = new System.Drawing.Size(296, 22);
            this.historicoDoDocumentoToolStripMenuItem.Text = "Historico do documento";
            this.historicoDoDocumentoToolStripMenuItem.Click += new System.EventHandler(this.historicoDoDocumentoToolStripMenuItem_Click);
            // 
            // toolStripMenuItem5
            // 
            this.toolStripMenuItem5.Name = "toolStripMenuItem5";
            this.toolStripMenuItem5.Size = new System.Drawing.Size(293, 6);
            // 
            // cancelaDocumentoToolStripMenuItem
            // 
            this.cancelaDocumentoToolStripMenuItem.Name = "cancelaDocumentoToolStripMenuItem";
            this.cancelaDocumentoToolStripMenuItem.Size = new System.Drawing.Size(296, 22);
            this.cancelaDocumentoToolStripMenuItem.Text = "Cancela Documento à Compensação";
            this.cancelaDocumentoToolStripMenuItem.Click += new System.EventHandler(this.cancelaDocumentoToolStripMenuItem_Click);
            // 
            // confirmarCancelamentoToolStripMenuItem1
            // 
            this.confirmarCancelamentoToolStripMenuItem1.Name = "confirmarCancelamentoToolStripMenuItem1";
            this.confirmarCancelamentoToolStripMenuItem1.Size = new System.Drawing.Size(296, 22);
            this.confirmarCancelamentoToolStripMenuItem1.Text = "Confirmar Cancelamento à Compensação";
            this.confirmarCancelamentoToolStripMenuItem1.Click += new System.EventHandler(this.confirmarCancelamentoToolStripMenuItem1_Click);
            // 
            // anularCancelamentoToolStripMenuItem
            // 
            this.anularCancelamentoToolStripMenuItem.Name = "anularCancelamentoToolStripMenuItem";
            this.anularCancelamentoToolStripMenuItem.Size = new System.Drawing.Size(296, 22);
            this.anularCancelamentoToolStripMenuItem.Text = "Anular Cancelamento à Compensação";
            this.anularCancelamentoToolStripMenuItem.Click += new System.EventHandler(this.anularCancelamentoToolStripMenuItem_Click);
            // 
            // marcarCancelamentoComEfectuadoToolStripMenuItem
            // 
            this.marcarCancelamentoComEfectuadoToolStripMenuItem.Name = "marcarCancelamentoComEfectuadoToolStripMenuItem";
            this.marcarCancelamentoComEfectuadoToolStripMenuItem.Size = new System.Drawing.Size(296, 22);
            this.marcarCancelamentoComEfectuadoToolStripMenuItem.Text = "Marcar Cancelamento como Efectuado";
            this.marcarCancelamentoComEfectuadoToolStripMenuItem.Click += new System.EventHandler(this.marcarCancelamentoComEfectuadoToolStripMenuItem_Click);
            // 
            // listViewPesquisaDocumentoENVM
            // 
            this.listViewPesquisaDocumentoENVM.AllowColumnReorder = true;
            this.listViewPesquisaDocumentoENVM.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewPesquisaDocumentoENVM.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader5,
            this.columnHeader6,
            this.columnHeader7,
            this.columnHeader8,
            this.columnHeader9,
            this.columnHeader10,
            this.colunaOrigem,
            this.columnHeader11,
            this.columnHeader12,
            this.columnHeader13,
            this.columnHeader14,
            this.columnHeader15,
            this.columnHeader16,
            this.LoteAnom,
            this.columnHeader17,
            this.columnHeader18,
            this.columnHeader19,
            this.columnHeader20,
            this.columnHeader21,
            this.columnHeader22,
            this.columnHeader23,
            this.columnHeaderRefarqOriENVM,
            this.clmImgQual,
            this.columnHeader24,
            this.columnHeader26,
            this.columnHeader25,
            this.columnHeaderReap,
            this.columnHeader35,
            this.columnHeaderCancelado,
            this.columnHeader39,
            this.columnHeaderNotif,
            this.columnHeader53,
            this.columnHeader27});
            this.listViewPesquisaDocumentoENVM.ContextMenuStrip = this.contextMenuStripENVM;
            this.listViewPesquisaDocumentoENVM.EnableExportar = true;
            this.listViewPesquisaDocumentoENVM.FullRowSelect = true;
            this.listViewPesquisaDocumentoENVM.GridLines = true;
            this.listViewPesquisaDocumentoENVM.HideSelection = false;
            this.listViewPesquisaDocumentoENVM.Location = new System.Drawing.Point(3, 30);
            this.listViewPesquisaDocumentoENVM.Name = "listViewPesquisaDocumentoENVM";
            this.listViewPesquisaDocumentoENVM.Size = new System.Drawing.Size(476, 234);
            this.listViewPesquisaDocumentoENVM.TabIndex = 43;
            this.listViewPesquisaDocumentoENVM.UseCompatibleStateImageBehavior = false;
            this.listViewPesquisaDocumentoENVM.View = System.Windows.Forms.View.Details;
            this.listViewPesquisaDocumentoENVM.DoubleClick += new System.EventHandler(this.listViewPesquisaDocumentoENVM_DoubleClick);
            // 
            // columnHeader5
            // 
            this.columnHeader5.Text = "FichID";
            this.columnHeader5.Width = 0;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "FichNSeq";
            this.columnHeader6.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader6.Width = 50;
            // 
            // columnHeader7
            // 
            this.columnHeader7.Text = "FichData";
            this.columnHeader7.Width = 70;
            // 
            // columnHeader8
            // 
            this.columnHeader8.Text = "REFCMP";
            // 
            // columnHeader9
            // 
            this.columnHeader9.Text = "LOTEENVID";
            this.columnHeader9.Width = 0;
            // 
            // columnHeader10
            // 
            this.columnHeader10.Text = "LotNum";
            this.columnHeader10.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader10.Width = 50;
            // 
            // colunaOrigem
            // 
            this.colunaOrigem.Text = "Origem";
            // 
            // columnHeader11
            // 
            this.columnHeader11.Text = "CodBal";
            this.columnHeader11.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader11.Width = 50;
            // 
            // columnHeader12
            // 
            this.columnHeader12.Text = "NumRem";
            this.columnHeader12.Width = 80;
            // 
            // columnHeader13
            // 
            this.columnHeader13.Text = "RemData";
            this.columnHeader13.Width = 70;
            // 
            // columnHeader14
            // 
            this.columnHeader14.Text = "TCAP";
            this.columnHeader14.Width = 30;
            // 
            // columnHeader15
            // 
            this.columnHeader15.Text = "TREM";
            this.columnHeader15.Width = 30;
            // 
            // columnHeader16
            // 
            this.columnHeader16.Text = "LoteStatus";
            this.columnHeader16.Width = 80;
            // 
            // LoteAnom
            // 
            this.LoteAnom.Text = "Lote Anomal";
            this.LoteAnom.Width = 80;
            // 
            // columnHeader17
            // 
            this.columnHeader17.Text = "DocenvID";
            this.columnHeader17.Width = 0;
            // 
            // columnHeader18
            // 
            this.columnHeader18.Text = "ZIB";
            this.columnHeader18.Width = 70;
            // 
            // columnHeader19
            // 
            this.columnHeader19.Text = "NConta";
            this.columnHeader19.Width = 80;
            // 
            // columnHeader20
            // 
            this.columnHeader20.Text = "NCheque";
            this.columnHeader20.Width = 75;
            // 
            // columnHeader21
            // 
            this.columnHeader21.Text = "Import";
            this.columnHeader21.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader21.Width = 100;
            // 
            // columnHeader22
            // 
            this.columnHeader22.Text = "Tipo";
            this.columnHeader22.Width = 30;
            // 
            // columnHeader23
            // 
            this.columnHeader23.Text = "REFARQ";
            this.columnHeader23.Width = 100;
            // 
            // columnHeaderRefarqOriENVM
            // 
            this.columnHeaderRefarqOriENVM.Text = "RefarqOri";
            // 
            // clmImgQual
            // 
            this.clmImgQual.Text = "Img. Qual.";
            this.clmImgQual.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.clmImgQual.Width = 50;
            // 
            // columnHeader24
            // 
            this.columnHeader24.Text = "Anomal";
            // 
            // columnHeader26
            // 
            this.columnHeader26.Text = "CodAna";
            this.columnHeader26.Width = 30;
            // 
            // columnHeader25
            // 
            this.columnHeader25.Text = "Duplicado";
            this.columnHeader25.Width = 30;
            // 
            // columnHeaderReap
            // 
            this.columnHeaderReap.Text = "Reapr.";
            // 
            // columnHeader35
            // 
            this.columnHeader35.Text = "Reapr.ID";
            this.columnHeader35.Width = 0;
            // 
            // columnHeaderCancelado
            // 
            this.columnHeaderCancelado.Text = "Cancelamento";
            // 
            // columnHeader39
            // 
            this.columnHeader39.Text = "Cancel ID";
            this.columnHeader39.Width = 0;
            // 
            // columnHeaderNotif
            // 
            this.columnHeaderNotif.Text = "Notificação";
            this.columnHeaderNotif.Width = 100;
            // 
            // columnHeader53
            // 
            this.columnHeader53.Text = "Notif ID";
            this.columnHeader53.Width = 0;
            // 
            // columnHeader27
            // 
            this.columnHeader27.Text = "ChaveH";
            this.columnHeader27.Width = 100;
            // 
            // contextMenuStripENVM
            // 
            this.contextMenuStripENVM.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItemENVMNotificaAcolhimento,
            this.confirmarNotificacaoToolStripMenuItem,
            this.toolStripMenuItemENVMAnulaNotificacao,
            this.toolStripMenuItem1,
            this.reapresentarCompensacaoToolStripMenuItem,
            this.ConfirmarReapresentacaoToolStripMenuItem,
            this.anularReapresentacaoToolStripMenuItem,
            this.toolStripMenuItem3,
            this.toolStripMenuItemHistoricoENVM,
            this.toolStripMenuItem6,
            this.cancelaDocumentoToolStripMenuItem1,
            this.confirmarCancelamentoToolStripMenuItem2,
            this.anularCancelamentoToolStripMenuItem1});
            this.contextMenuStripENVM.Name = "contextMenuStripRemTrans";
            this.contextMenuStripENVM.Size = new System.Drawing.Size(365, 242);
            this.contextMenuStripENVM.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripENVM_Opening);
            // 
            // toolStripMenuItemENVMNotificaAcolhimento
            // 
            this.toolStripMenuItemENVMNotificaAcolhimento.Name = "toolStripMenuItemENVMNotificaAcolhimento";
            this.toolStripMenuItemENVMNotificaAcolhimento.Size = new System.Drawing.Size(364, 22);
            this.toolStripMenuItemENVMNotificaAcolhimento.Text = "Notifica Acolhimento de Envio Documento Fora Prazo";
            this.toolStripMenuItemENVMNotificaAcolhimento.Click += new System.EventHandler(this.toolStripMenuItemENVMNotificaAcolhimento_Click);
            // 
            // confirmarNotificacaoToolStripMenuItem
            // 
            this.confirmarNotificacaoToolStripMenuItem.Name = "confirmarNotificacaoToolStripMenuItem";
            this.confirmarNotificacaoToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.confirmarNotificacaoToolStripMenuItem.Text = "Confirmar Notificação de Envio Documento Fora Prazo";
            this.confirmarNotificacaoToolStripMenuItem.Click += new System.EventHandler(this.confirmarNotificacaoToolStripMenuItem_Click);
            // 
            // toolStripMenuItemENVMAnulaNotificacao
            // 
            this.toolStripMenuItemENVMAnulaNotificacao.Name = "toolStripMenuItemENVMAnulaNotificacao";
            this.toolStripMenuItemENVMAnulaNotificacao.Size = new System.Drawing.Size(364, 22);
            this.toolStripMenuItemENVMAnulaNotificacao.Text = "Anula Notificação de Envio Documento Fora Prazo";
            this.toolStripMenuItemENVMAnulaNotificacao.Click += new System.EventHandler(this.toolStripMenuItemENVMAnulaNotificacao_Click);
            // 
            // toolStripMenuItem1
            // 
            this.toolStripMenuItem1.Name = "toolStripMenuItem1";
            this.toolStripMenuItem1.Size = new System.Drawing.Size(361, 6);
            // 
            // reapresentarCompensacaoToolStripMenuItem
            // 
            this.reapresentarCompensacaoToolStripMenuItem.Name = "reapresentarCompensacaoToolStripMenuItem";
            this.reapresentarCompensacaoToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.reapresentarCompensacaoToolStripMenuItem.Text = "Reapresentar à Compensação";
            this.reapresentarCompensacaoToolStripMenuItem.Click += new System.EventHandler(this.reapresentarCompensacaoToolStripMenuItem_Click);
            // 
            // ConfirmarReapresentacaoToolStripMenuItem
            // 
            this.ConfirmarReapresentacaoToolStripMenuItem.Name = "ConfirmarReapresentacaoToolStripMenuItem";
            this.ConfirmarReapresentacaoToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.ConfirmarReapresentacaoToolStripMenuItem.Text = "Confirmar Reapresentação";
            this.ConfirmarReapresentacaoToolStripMenuItem.Click += new System.EventHandler(this.ConfirmarReapresentacaoToolStripMenuItem_Click);
            // 
            // anularReapresentacaoToolStripMenuItem
            // 
            this.anularReapresentacaoToolStripMenuItem.Name = "anularReapresentacaoToolStripMenuItem";
            this.anularReapresentacaoToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.anularReapresentacaoToolStripMenuItem.Text = "Anular Reapresentação";
            this.anularReapresentacaoToolStripMenuItem.Click += new System.EventHandler(this.anularReapresentacaoToolStripMenuItem_Click);
            // 
            // toolStripMenuItem3
            // 
            this.toolStripMenuItem3.Name = "toolStripMenuItem3";
            this.toolStripMenuItem3.Size = new System.Drawing.Size(361, 6);
            // 
            // toolStripMenuItemHistoricoENVM
            // 
            this.toolStripMenuItemHistoricoENVM.Name = "toolStripMenuItemHistoricoENVM";
            this.toolStripMenuItemHistoricoENVM.Size = new System.Drawing.Size(364, 22);
            this.toolStripMenuItemHistoricoENVM.Text = "Historico do documento";
            this.toolStripMenuItemHistoricoENVM.Click += new System.EventHandler(this.toolStripMenuItemHistoricoENVM_Click);
            // 
            // toolStripMenuItem6
            // 
            this.toolStripMenuItem6.Name = "toolStripMenuItem6";
            this.toolStripMenuItem6.Size = new System.Drawing.Size(361, 6);
            // 
            // cancelaDocumentoToolStripMenuItem1
            // 
            this.cancelaDocumentoToolStripMenuItem1.Name = "cancelaDocumentoToolStripMenuItem1";
            this.cancelaDocumentoToolStripMenuItem1.Size = new System.Drawing.Size(364, 22);
            this.cancelaDocumentoToolStripMenuItem1.Text = "Cancela Documento à Compensação";
            this.cancelaDocumentoToolStripMenuItem1.Click += new System.EventHandler(this.cancelaDocumentoToolStripMenuItem1_Click);
            // 
            // confirmarCancelamentoToolStripMenuItem2
            // 
            this.confirmarCancelamentoToolStripMenuItem2.Name = "confirmarCancelamentoToolStripMenuItem2";
            this.confirmarCancelamentoToolStripMenuItem2.Size = new System.Drawing.Size(364, 22);
            this.confirmarCancelamentoToolStripMenuItem2.Text = "Confirmar Cancelamento à Compensação";
            this.confirmarCancelamentoToolStripMenuItem2.Click += new System.EventHandler(this.confirmarCancelamentoToolStripMenuItem2_Click);
            // 
            // anularCancelamentoToolStripMenuItem1
            // 
            this.anularCancelamentoToolStripMenuItem1.Name = "anularCancelamentoToolStripMenuItem1";
            this.anularCancelamentoToolStripMenuItem1.Size = new System.Drawing.Size(364, 22);
            this.anularCancelamentoToolStripMenuItem1.Text = "Anular Cancelamento à Compensação";
            this.anularCancelamentoToolStripMenuItem1.Click += new System.EventHandler(this.anularCancelamentoToolStripMenuItem1_Click);
            // 
            // splitContainer1
            // 
            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer1.Location = new System.Drawing.Point(0, 83);
            this.splitContainer1.Name = "splitContainer1";
            this.splitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.labelDOC);
            this.splitContainer1.Panel1.Controls.Add(this.listViewPesquisaDocumento);
            this.splitContainer1.Panel1.Controls.Add(this.buttonDocumento);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
            this.splitContainer1.Size = new System.Drawing.Size(988, 456);
            this.splitContainer1.SplitterDistance = 179;
            this.splitContainer1.TabIndex = 44;
            // 
            // labelDOC
            // 
            this.labelDOC.AutoSize = true;
            this.labelDOC.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelDOC.Location = new System.Drawing.Point(111, 8);
            this.labelDOC.Name = "labelDOC";
            this.labelDOC.Size = new System.Drawing.Size(286, 13);
            this.labelDOC.TabIndex = 43;
            this.labelDOC.Text = "Registos em Remessas enviadas à Compensação";
            // 
            // buttonDocumento
            // 
            this.buttonDocumento.Location = new System.Drawing.Point(12, 3);
            this.buttonDocumento.Name = "buttonDocumento";
            this.buttonDocumento.Size = new System.Drawing.Size(75, 23);
            this.buttonDocumento.TabIndex = 0;
            this.buttonDocumento.Text = "Refresh";
            this.buttonDocumento.UseVisualStyleBackColor = true;
            this.buttonDocumento.Click += new System.EventHandler(this.buttonDocumento_Click);
            // 
            // splitContainer2
            // 
            this.splitContainer2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer2.Location = new System.Drawing.Point(3, 3);
            this.splitContainer2.Name = "splitContainer2";
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.labelENVM);
            this.splitContainer2.Panel1.Controls.Add(this.listViewPesquisaDocumentoENVM);
            this.splitContainer2.Panel1.Controls.Add(this.buttonENVM);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.labelACOM);
            this.splitContainer2.Panel2.Controls.Add(this.listViewPesquisaDocumentoACOM);
            this.splitContainer2.Panel2.Controls.Add(this.buttonACOM);
            this.splitContainer2.Size = new System.Drawing.Size(982, 267);
            this.splitContainer2.SplitterDistance = 482;
            this.splitContainer2.TabIndex = 44;
            // 
            // labelENVM
            // 
            this.labelENVM.AutoSize = true;
            this.labelENVM.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelENVM.Location = new System.Drawing.Point(107, 9);
            this.labelENVM.Name = "labelENVM";
            this.labelENVM.Size = new System.Drawing.Size(115, 13);
            this.labelENVM.TabIndex = 44;
            this.labelENVM.Text = "Registos em ENVM";
            // 
            // buttonENVM
            // 
            this.buttonENVM.Location = new System.Drawing.Point(9, 3);
            this.buttonENVM.Name = "buttonENVM";
            this.buttonENVM.Size = new System.Drawing.Size(75, 23);
            this.buttonENVM.TabIndex = 0;
            this.buttonENVM.Text = "Refresh";
            this.buttonENVM.UseVisualStyleBackColor = true;
            this.buttonENVM.Click += new System.EventHandler(this.buttonENVM_Click);
            // 
            // labelACOM
            // 
            this.labelACOM.AutoSize = true;
            this.labelACOM.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelACOM.Location = new System.Drawing.Point(98, 8);
            this.labelACOM.Name = "labelACOM";
            this.labelACOM.Size = new System.Drawing.Size(115, 13);
            this.labelACOM.TabIndex = 45;
            this.labelACOM.Text = "Registos em ACOM";
            // 
            // listViewPesquisaDocumentoACOM
            // 
            this.listViewPesquisaDocumentoACOM.AllowColumnReorder = true;
            this.listViewPesquisaDocumentoACOM.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewPesquisaDocumentoACOM.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader28,
            this.columnHeader29,
            this.columnHeader30,
            this.columnHeader32,
            this.columnHeader33,
            this.columnHeader34,
            this.columnHeader36,
            this.columnHeader37,
            this.columnHeader40,
            this.columnOrigem,
            this.columnHeader41,
            this.columnHeader42,
            this.columnHeader43,
            this.columnHeader44,
            this.columnHeader45,
            this.columnHeader46,
            this.columnHeader47,
            this.columnHeader48,
            this.columnHeader49,
            this.columnACOMCancel,
            this.columnHeader38,
            this.columnHeaderACOMNotif,
            this.columnHeader52,
            this.columnHeader50,
            this.columnHeader51});
            this.listViewPesquisaDocumentoACOM.ContextMenuStrip = this.contextMenuStripACOM;
            this.listViewPesquisaDocumentoACOM.EnableExportar = true;
            this.listViewPesquisaDocumentoACOM.FullRowSelect = true;
            this.listViewPesquisaDocumentoACOM.GridLines = true;
            this.listViewPesquisaDocumentoACOM.HideSelection = false;
            this.listViewPesquisaDocumentoACOM.Location = new System.Drawing.Point(3, 30);
            this.listViewPesquisaDocumentoACOM.Name = "listViewPesquisaDocumentoACOM";
            this.listViewPesquisaDocumentoACOM.Size = new System.Drawing.Size(490, 234);
            this.listViewPesquisaDocumentoACOM.TabIndex = 44;
            this.listViewPesquisaDocumentoACOM.UseCompatibleStateImageBehavior = false;
            this.listViewPesquisaDocumentoACOM.View = System.Windows.Forms.View.Details;
            this.listViewPesquisaDocumentoACOM.DoubleClick += new System.EventHandler(this.listViewPesquisaDocumentoACOM_DoubleClick);
            // 
            // columnHeader28
            // 
            this.columnHeader28.Text = "FichID";
            this.columnHeader28.Width = 0;
            // 
            // columnHeader29
            // 
            this.columnHeader29.Text = "FichNSeq";
            this.columnHeader29.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader29.Width = 50;
            // 
            // columnHeader30
            // 
            this.columnHeader30.Text = "FichData";
            this.columnHeader30.Width = 70;
            // 
            // columnHeader32
            // 
            this.columnHeader32.Text = "LotAcomID";
            this.columnHeader32.Width = 0;
            // 
            // columnHeader33
            // 
            this.columnHeader33.Text = "LotNum";
            this.columnHeader33.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader33.Width = 0;
            // 
            // columnHeader34
            // 
            this.columnHeader34.Text = "Produto";
            this.columnHeader34.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader34.Width = 30;
            // 
            // columnHeader36
            // 
            this.columnHeader36.Text = "DataProc";
            this.columnHeader36.Width = 80;
            // 
            // columnHeader37
            // 
            this.columnHeader37.Text = "LoteStatus";
            // 
            // columnHeader40
            // 
            this.columnHeader40.Text = "DocAcomID";
            this.columnHeader40.Width = 0;
            // 
            // columnOrigem
            // 
            this.columnOrigem.Text = "Origem";
            // 
            // columnHeader41
            // 
            this.columnHeader41.Text = "ZIB";
            this.columnHeader41.Width = 70;
            // 
            // columnHeader42
            // 
            this.columnHeader42.Text = "NConta";
            this.columnHeader42.Width = 80;
            // 
            // columnHeader43
            // 
            this.columnHeader43.Text = "NCheque";
            this.columnHeader43.Width = 75;
            // 
            // columnHeader44
            // 
            this.columnHeader44.Text = "Import";
            this.columnHeader44.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader44.Width = 100;
            // 
            // columnHeader45
            // 
            this.columnHeader45.Text = "Tipo";
            this.columnHeader45.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader45.Width = 30;
            // 
            // columnHeader46
            // 
            this.columnHeader46.Text = "REFARQ";
            this.columnHeader46.Width = 100;
            // 
            // columnHeader47
            // 
            this.columnHeader47.Text = "REFARQ2";
            this.columnHeader47.Width = 100;
            // 
            // columnHeader48
            // 
            this.columnHeader48.Text = "Balcão";
            this.columnHeader48.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader48.Width = 50;
            // 
            // columnHeader49
            // 
            this.columnHeader49.Text = "CodAna";
            // 
            // columnACOMCancel
            // 
            this.columnACOMCancel.Text = "Cancelamento";
            // 
            // columnHeader38
            // 
            this.columnHeader38.Text = "Cancel ID";
            this.columnHeader38.Width = 0;
            // 
            // columnHeaderACOMNotif
            // 
            this.columnHeaderACOMNotif.Text = "Notificação";
            // 
            // columnHeader52
            // 
            this.columnHeader52.Text = "Notif ID";
            this.columnHeader52.Width = 0;
            // 
            // columnHeader50
            // 
            this.columnHeader50.Text = "ChaveH";
            this.columnHeader50.Width = 100;
            // 
            // columnHeader51
            // 
            this.columnHeader51.Text = "Linha Óptica";
            this.columnHeader51.Width = 100;
            // 
            // contextMenuStripACOM
            // 
            this.contextMenuStripACOM.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.CancelaACOMToolStripMenuItem,
            this.confirmarCancelamentoToolStripMenuItem,
            this.anulaCancelaToolStripMenuItem,
            this.toolStripMenuItem4,
            this.ToolStripMenuItemHistoricoACOM,
            this.toolStripMenuItem7,
            this.NotificaACOMStripMenuItem,
            this.ConfirmaNotificaACOMStripMenuItem,
            this.AnulaNotificaACOMStripMenuItem});
            this.contextMenuStripACOM.Name = "contextMenuStripRemTrans";
            this.contextMenuStripACOM.Size = new System.Drawing.Size(365, 192);
            this.contextMenuStripACOM.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripACOM_Opening);
            // 
            // CancelaACOMToolStripMenuItem
            // 
            this.CancelaACOMToolStripMenuItem.Name = "CancelaACOMToolStripMenuItem";
            this.CancelaACOMToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.CancelaACOMToolStripMenuItem.Text = "Cancela Acolhimento";
            this.CancelaACOMToolStripMenuItem.Click += new System.EventHandler(this.CancelaACOMToolStripMenuItem_Click);
            // 
            // confirmarCancelamentoToolStripMenuItem
            // 
            this.confirmarCancelamentoToolStripMenuItem.Name = "confirmarCancelamentoToolStripMenuItem";
            this.confirmarCancelamentoToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.confirmarCancelamentoToolStripMenuItem.Text = "Confirmar Cancelamento";
            this.confirmarCancelamentoToolStripMenuItem.Click += new System.EventHandler(this.confirmarCancelamentoToolStripMenuItem_Click);
            // 
            // anulaCancelaToolStripMenuItem
            // 
            this.anulaCancelaToolStripMenuItem.Name = "anulaCancelaToolStripMenuItem";
            this.anulaCancelaToolStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.anulaCancelaToolStripMenuItem.Text = "Anula Cancelamento";
            this.anulaCancelaToolStripMenuItem.Click += new System.EventHandler(this.anulaCancelaToolStripMenuItem_Click);
            // 
            // toolStripMenuItem4
            // 
            this.toolStripMenuItem4.Name = "toolStripMenuItem4";
            this.toolStripMenuItem4.Size = new System.Drawing.Size(361, 6);
            // 
            // ToolStripMenuItemHistoricoACOM
            // 
            this.ToolStripMenuItemHistoricoACOM.Name = "ToolStripMenuItemHistoricoACOM";
            this.ToolStripMenuItemHistoricoACOM.Size = new System.Drawing.Size(364, 22);
            this.ToolStripMenuItemHistoricoACOM.Text = "Historico do documento";
            this.ToolStripMenuItemHistoricoACOM.Click += new System.EventHandler(this.ToolStripMenuItemHistoricoACOM_Click);
            // 
            // toolStripMenuItem7
            // 
            this.toolStripMenuItem7.Name = "toolStripMenuItem7";
            this.toolStripMenuItem7.Size = new System.Drawing.Size(361, 6);
            // 
            // NotificaACOMStripMenuItem
            // 
            this.NotificaACOMStripMenuItem.Name = "NotificaACOMStripMenuItem";
            this.NotificaACOMStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.NotificaACOMStripMenuItem.Text = "Notifica Acolhimento de Envio Documento Fora Prazo";
            this.NotificaACOMStripMenuItem.Click += new System.EventHandler(this.NotificaACOMStripMenuItem_Click);
            // 
            // ConfirmaNotificaACOMStripMenuItem
            // 
            this.ConfirmaNotificaACOMStripMenuItem.Name = "ConfirmaNotificaACOMStripMenuItem";
            this.ConfirmaNotificaACOMStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.ConfirmaNotificaACOMStripMenuItem.Text = "Confirmar Notificação de Envio Documento Fora Prazo";
            this.ConfirmaNotificaACOMStripMenuItem.Click += new System.EventHandler(this.ConfirmaNotificaACOMStripMenuItem_Click);
            // 
            // AnulaNotificaACOMStripMenuItem
            // 
            this.AnulaNotificaACOMStripMenuItem.Name = "AnulaNotificaACOMStripMenuItem";
            this.AnulaNotificaACOMStripMenuItem.Size = new System.Drawing.Size(364, 22);
            this.AnulaNotificaACOMStripMenuItem.Text = "Anula Notificação de Envio Documento Fora Prazo";
            this.AnulaNotificaACOMStripMenuItem.Click += new System.EventHandler(this.AnulaNotificaACOMStripMenuItem_Click);
            // 
            // buttonACOM
            // 
            this.buttonACOM.Location = new System.Drawing.Point(3, 4);
            this.buttonACOM.Name = "buttonACOM";
            this.buttonACOM.Size = new System.Drawing.Size(75, 23);
            this.buttonACOM.TabIndex = 0;
            this.buttonACOM.Text = "Refresh";
            this.buttonACOM.UseVisualStyleBackColor = true;
            this.buttonACOM.Click += new System.EventHandler(this.buttonACOM_Click);
            // 
            // textBoxMontante
            // 
            this.textBoxMontante.Location = new System.Drawing.Point(419, 57);
            this.textBoxMontante.MaxLength = 13;
            this.textBoxMontante.Name = "textBoxMontante";
            this.textBoxMontante.Size = new System.Drawing.Size(83, 20);
            this.textBoxMontante.TabIndex = 5;
            this.textBoxMontante.TextChanged += new System.EventHandler(this.textBoxMontante_TextChanged);
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(416, 43);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(52, 13);
            this.label6.TabIndex = 31;
            this.label6.Text = "Montante";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(194, 43);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(40, 13);
            this.label7.TabIndex = 51;
            this.label7.Text = "Balcão";
            // 
            // textBoxBalcao
            // 
            this.textBoxBalcao.Location = new System.Drawing.Point(194, 57);
            this.textBoxBalcao.MaxLength = 4;
            this.textBoxBalcao.Name = "textBoxBalcao";
            this.textBoxBalcao.Size = new System.Drawing.Size(38, 20);
            this.textBoxBalcao.TabIndex = 2;
            this.textBoxBalcao.TextChanged += new System.EventHandler(this.textBoxBalcao_TextChanged);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(505, 43);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(73, 13);
            this.label8.TabIndex = 53;
            this.label8.Text = "NumRemessa";
            // 
            // textBoxNumRemessa
            // 
            this.textBoxNumRemessa.Location = new System.Drawing.Point(508, 57);
            this.textBoxNumRemessa.MaxLength = 11;
            this.textBoxNumRemessa.Name = "textBoxNumRemessa";
            this.textBoxNumRemessa.Size = new System.Drawing.Size(76, 20);
            this.textBoxNumRemessa.TabIndex = 6;
            this.textBoxNumRemessa.TextChanged += new System.EventHandler(this.textBoxNumRemessa_TextChanged);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(341, 43);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(66, 13);
            this.label1.TabIndex = 55;
            this.label1.Text = "NumCheque";
            // 
            // textBoxNumCheque
            // 
            this.textBoxNumCheque.Location = new System.Drawing.Point(344, 57);
            this.textBoxNumCheque.MaxLength = 10;
            this.textBoxNumCheque.Name = "textBoxNumCheque";
            this.textBoxNumCheque.Size = new System.Drawing.Size(69, 20);
            this.textBoxNumCheque.TabIndex = 4;
            this.textBoxNumCheque.TextChanged += new System.EventHandler(this.textBoxNumCheque_TextChanged);
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label2.ForeColor = System.Drawing.SystemColors.Desktop;
            this.label2.Location = new System.Drawing.Point(235, 43);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(57, 13);
            this.label2.TabIndex = 57;
            this.label2.Text = "REFARQ";
            // 
            // textBoxREFARQ
            // 
            this.textBoxREFARQ.Location = new System.Drawing.Point(238, 57);
            this.textBoxREFARQ.MaxLength = 14;
            this.textBoxREFARQ.Name = "textBoxREFARQ";
            this.textBoxREFARQ.Size = new System.Drawing.Size(100, 20);
            this.textBoxREFARQ.TabIndex = 3;
            this.textBoxREFARQ.TextChanged += new System.EventHandler(this.textBoxREFARQ_TextChanged);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(12, 43);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(60, 13);
            this.label3.TabIndex = 59;
            this.label3.Text = "Data Inicial";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(100, 43);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(55, 13);
            this.label4.TabIndex = 60;
            this.label4.Text = "Data Final";
            // 
            // checkBoxPorAnalisar
            // 
            this.checkBoxPorAnalisar.AutoSize = true;
            this.checkBoxPorAnalisar.Location = new System.Drawing.Point(889, 59);
            this.checkBoxPorAnalisar.Name = "checkBoxPorAnalisar";
            this.checkBoxPorAnalisar.Size = new System.Drawing.Size(81, 17);
            this.checkBoxPorAnalisar.TabIndex = 61;
            this.checkBoxPorAnalisar.Text = "Por analisar";
            this.checkBoxPorAnalisar.UseVisualStyleBackColor = true;
            // 
            // lblOrigem
            // 
            this.lblOrigem.AutoSize = true;
            this.lblOrigem.Location = new System.Drawing.Point(669, 43);
            this.lblOrigem.Name = "lblOrigem";
            this.lblOrigem.Size = new System.Drawing.Size(40, 13);
            this.lblOrigem.TabIndex = 62;
            this.lblOrigem.Text = "Origem";
            // 
            // cbOrigem
            // 
            this.cbOrigem.DisplayMember = "Text";
            this.cbOrigem.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbOrigem.FormattingEnabled = true;
            this.cbOrigem.Location = new System.Drawing.Point(672, 57);
            this.cbOrigem.Name = "cbOrigem";
            this.cbOrigem.Size = new System.Drawing.Size(73, 21);
            this.cbOrigem.TabIndex = 63;
            this.cbOrigem.ValueMember = "Value";
            this.cbOrigem.SelectedIndexChanged += new System.EventHandler(this.cbOrigem_SelectedIndexChanged);
            // 
            // cbPendenteIntervencao
            // 
            this.cbPendenteIntervencao.AutoSize = true;
            this.cbPendenteIntervencao.Location = new System.Drawing.Point(751, 59);
            this.cbPendenteIntervencao.Name = "cbPendenteIntervencao";
            this.cbPendenteIntervencao.Size = new System.Drawing.Size(132, 17);
            this.cbPendenteIntervencao.TabIndex = 64;
            this.cbPendenteIntervencao.Text = "Pendente Intervenção";
            this.cbPendenteIntervencao.UseVisualStyleBackColor = true;
            // 
            // lblDeposito
            // 
            this.lblDeposito.AutoSize = true;
            this.lblDeposito.Location = new System.Drawing.Point(588, 43);
            this.lblDeposito.Name = "lblDeposito";
            this.lblDeposito.Size = new System.Drawing.Size(49, 13);
            this.lblDeposito.TabIndex = 66;
            this.lblDeposito.Text = "Depósito";
            // 
            // txtDeposito
            // 
            this.txtDeposito.Enabled = false;
            this.txtDeposito.Location = new System.Drawing.Point(590, 57);
            this.txtDeposito.MaxLength = 7;
            this.txtDeposito.Name = "txtDeposito";
            this.txtDeposito.Size = new System.Drawing.Size(76, 20);
            this.txtDeposito.TabIndex = 65;
            this.txtDeposito.TextChanged += new System.EventHandler(this.txtDeposito_TextChanged);
            // 
            // PesquisasForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(988, 551);
            this.Controls.Add(this.lblDeposito);
            this.Controls.Add(this.txtDeposito);
            this.Controls.Add(this.cbPendenteIntervencao);
            this.Controls.Add(this.cbOrigem);
            this.Controls.Add(this.lblOrigem);
            this.Controls.Add(this.checkBoxPorAnalisar);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.textBoxNumCheque);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label8);
            this.Controls.Add(this.textBoxREFARQ);
            this.Controls.Add(this.label7);
            this.Controls.Add(this.textBoxNumRemessa);
            this.Controls.Add(this.textBoxBalcao);
            this.Controls.Add(this.label6);
            this.Controls.Add(this.textBoxMontante);
            this.Controls.Add(this.splitContainer1);
            this.Controls.Add(this.toolStrip1);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrldtInicio);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "PesquisasForm";
            this.ShowInTaskbar = false;
            this.Text = "Pesquisas e Reenvios";
            this.Load += new System.EventHandler(this.PesquisasForm_Load);
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.contextMenuStripDOC.ResumeLayout(false);
            this.contextMenuStripENVM.ResumeLayout(false);
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel1.PerformLayout();
            this.splitContainer1.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
            this.splitContainer1.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel1.PerformLayout();
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).EndInit();
            this.splitContainer2.ResumeLayout(false);
            this.contextMenuStripACOM.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.ToolStripButton toolStripButtonEmAnalise;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator5;
        private System.Windows.Forms.ToolStripButton toolStripButtonErro;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripButton toolStripButtonExitJanela;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrldtInicio;
        private NBIISNET.ListViewBase listViewPesquisaDocumento;
        private System.Windows.Forms.ColumnHeader detDocColDocId;
        private System.Windows.Forms.ColumnHeader detDocColDocZona5;
        private System.Windows.Forms.ColumnHeader detDocColDocZona4;
        private System.Windows.Forms.ColumnHeader detDocColDocZona3;
        private System.Windows.Forms.ColumnHeader detDocColDocZona2;
        private System.Windows.Forms.ColumnHeader detDocColDocZona1;
        private System.Windows.Forms.ColumnHeader detDocColDocNIB;
        private System.Windows.Forms.ColumnHeader detDocColDocRefarq;
        private System.Windows.Forms.ColumnHeader detDocColChaveH;
        public NBIISNET.ListViewBase listViewPesquisaDocumentoENVM;
        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.ColumnHeader columnHeader3;
        private System.Windows.Forms.ColumnHeader columnHeader4;
        private System.Windows.Forms.ColumnHeader columnHeader5;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.ColumnHeader columnHeader7;
        private System.Windows.Forms.ColumnHeader columnHeader8;
        private System.Windows.Forms.ColumnHeader columnHeader9;
        private System.Windows.Forms.ColumnHeader columnHeader10;
        private System.Windows.Forms.ColumnHeader columnHeader11;
        private System.Windows.Forms.ColumnHeader columnHeader12;
        private System.Windows.Forms.ColumnHeader columnHeader13;
        private System.Windows.Forms.ColumnHeader columnHeader14;
        private System.Windows.Forms.ColumnHeader columnHeader15;
        private System.Windows.Forms.ColumnHeader columnHeader16;
        private System.Windows.Forms.ColumnHeader columnHeader17;
        private System.Windows.Forms.ColumnHeader columnHeader18;
        private System.Windows.Forms.ColumnHeader columnHeader19;
        private System.Windows.Forms.ColumnHeader columnHeader20;
        private System.Windows.Forms.ColumnHeader columnHeader21;
        private System.Windows.Forms.ColumnHeader columnHeader22;
        private System.Windows.Forms.ColumnHeader columnHeader23;
        private System.Windows.Forms.ColumnHeader columnHeader24;
        private System.Windows.Forms.ColumnHeader columnHeader25;
        private System.Windows.Forms.ColumnHeader columnHeader26;
        private System.Windows.Forms.ColumnHeader columnHeader27;
        private System.Windows.Forms.SplitContainer splitContainer2;
        public NBIISNET.ListViewBase listViewPesquisaDocumentoACOM;
        private System.Windows.Forms.ColumnHeader columnHeader28;
        private System.Windows.Forms.ColumnHeader columnHeader29;
        private System.Windows.Forms.ColumnHeader columnHeader30;
        private System.Windows.Forms.ColumnHeader columnHeader32;
        private System.Windows.Forms.ColumnHeader columnHeader33;
        private System.Windows.Forms.ColumnHeader columnHeader34;
        private System.Windows.Forms.ColumnHeader columnHeader36;
        private System.Windows.Forms.ColumnHeader columnHeader37;
        private System.Windows.Forms.ColumnHeader columnHeader40;
        private System.Windows.Forms.ColumnHeader columnHeader41;
        private System.Windows.Forms.ColumnHeader columnHeader42;
        private System.Windows.Forms.ColumnHeader columnHeader43;
        private System.Windows.Forms.ColumnHeader columnHeader44;
        private System.Windows.Forms.ColumnHeader columnHeader45;
        private System.Windows.Forms.ColumnHeader columnHeader46;
        private System.Windows.Forms.ColumnHeader columnHeader47;
        private System.Windows.Forms.ColumnHeader columnHeader48;
        private System.Windows.Forms.ColumnHeader columnHeader49;
        private System.Windows.Forms.ColumnHeader columnHeader50;
        private System.Windows.Forms.ColumnHeader columnHeader51;
        private System.Windows.Forms.Button buttonDocumento;
        private System.Windows.Forms.Button buttonENVM;
        private System.Windows.Forms.Button buttonACOM;
        private System.Windows.Forms.TextBox textBoxMontante;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.TextBox textBoxBalcao;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TextBox textBoxNumRemessa;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox textBoxNumCheque;
        private System.Windows.Forms.ColumnHeader columnHeader31;
        private System.Windows.Forms.ColumnHeader columnHeaderReap;
        private System.Windows.Forms.ColumnHeader columnACOMCancel;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripACOM;
        private System.Windows.Forms.ToolStripMenuItem CancelaACOMToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem anulaCancelaToolStripMenuItem;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripENVM;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemENVMNotificaAcolhimento;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemENVMAnulaNotificacao;
        private System.Windows.Forms.ToolStripMenuItem reapresentarCompensacaoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ConfirmarReapresentacaoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem anularReapresentacaoToolStripMenuItem;
        private System.Windows.Forms.ColumnHeader columnHeaderNotif;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox textBoxREFARQ;
        private System.Windows.Forms.ToolStripMenuItem confirmarNotificacaoToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem confirmarCancelamentoToolStripMenuItem;
        public System.Windows.Forms.Label labelDOC;
        public System.Windows.Forms.Label labelENVM;
        public System.Windows.Forms.Label labelACOM;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.ColumnHeader columnHeaderReapr;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripDOC;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemReapresentarDOC;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemConfirmarDOC;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemAnularDOC;
        private System.Windows.Forms.ToolStripButton toolStripButtonRem;
        private System.Windows.Forms.ToolStripButton toolStripButtonENVM;
        private System.Windows.Forms.ToolStripButton toolStripButtonACOM;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem2;
        private System.Windows.Forms.ToolStripMenuItem historicoDoDocumentoToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem3;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItemHistoricoENVM;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem4;
        private System.Windows.Forms.ToolStripMenuItem ToolStripMenuItemHistoricoACOM;
        private System.Windows.Forms.ColumnHeader columnHeaderDocCancelado;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem5;
        private System.Windows.Forms.ToolStripMenuItem cancelaDocumentoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem confirmarCancelamentoToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem anularCancelamentoToolStripMenuItem;
        private System.Windows.Forms.ColumnHeader columnHeaderISReapresentado;
        private System.Windows.Forms.ToolStripButton toolStripButtonOK;
        private System.Windows.Forms.ToolStripButton toolStripButtonMaisMenos;
        private System.Windows.Forms.ColumnHeader columnHeaderCancelado;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem6;
        private System.Windows.Forms.ToolStripMenuItem cancelaDocumentoToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem confirmarCancelamentoToolStripMenuItem2;
        private System.Windows.Forms.ToolStripMenuItem anularCancelamentoToolStripMenuItem1;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem7;
        private System.Windows.Forms.ToolStripMenuItem NotificaACOMStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ConfirmaNotificaACOMStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem AnulaNotificaACOMStripMenuItem;
        private System.Windows.Forms.ColumnHeader columnHeaderACOMNotif;
        private System.Windows.Forms.ColumnHeader columnHeaderReaprID;
        private System.Windows.Forms.ColumnHeader columnHeadercancelID;
        private System.Windows.Forms.ColumnHeader columnHeader35;
        private System.Windows.Forms.ColumnHeader columnHeader39;
        private System.Windows.Forms.ColumnHeader columnHeader53;
        private System.Windows.Forms.ColumnHeader columnHeader38;
        private System.Windows.Forms.ColumnHeader columnHeader52;
        private System.Windows.Forms.ColumnHeader columnHeaderRefarqOri;
        private System.Windows.Forms.ColumnHeader columnHeaderRefarqOriENVM;
        private System.Windows.Forms.CheckBox checkBoxPorAnalisar;
        private System.Windows.Forms.ColumnHeader columnHeaderPROC_TIMER;
        private System.Windows.Forms.ToolStripMenuItem marcarCancelamentoComEfectuadoToolStripMenuItem;
        private System.Windows.Forms.ColumnHeader colunaOrigem;
        private System.Windows.Forms.ColumnHeader columnOrigem;
        private System.Windows.Forms.ColumnHeader columnOrigemCompensacao;
        private System.Windows.Forms.Label lblOrigem;
        protected System.Windows.Forms.ComboBox cbOrigem;
        private System.Windows.Forms.CheckBox cbPendenteIntervencao;
        private System.Windows.Forms.Label lblDeposito;
        private System.Windows.Forms.TextBox txtDeposito;
        private System.Windows.Forms.ColumnHeader clmImgQual;
        private System.Windows.Forms.ColumnHeader LoteAnom;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/PesquisasForm.cs
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;
using CIConfigGlobalParameters;
using NBiis;
using NBiis.Generic;
using NBIISNET;

namespace CIActividades
{

    public partial class PesquisasForm : Form
    {
        private List<Int32> _idsNotificacao = null;
        private List<Int32> _idsCancelamento = null;        
        public CIMenuInterface m_oMenuInterface;
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        private Tibco Tibco = new Tibco();
        public PesquisasForm(CIConfigGP.CIGlobalParameters oParameters, CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
            this.LoadCbOrigem();
        }

        private void LoadCbOrigem()
        {
            try
            {
                string strQuery = "SELECT  [REMORI_ID],[REMORI_ABR] FROM [dbo].[REMESSA_ORIGEM] WHERE I_VISIVEL = 'TRUE' ORDER BY [REMORI_ABR] ASC";
                DataSet ds = m_oParameters.DirectSqlDataSet(strQuery, "REMESSA_ORIGEM");
                List<ComboBoxItem> items = new List<ComboBoxItem>();
                items.Add(new ComboBoxItem
                {
                    ISelected = true,
                    Text = "Todos",
                    Value = "0"
                });
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    ComboBoxItem item = new ComboBoxItem
                    {
                        ISelected = false,
                        Text = oRow["REMORI_ABR"].ToString(),
                        Value = oRow["REMORI_ID"].ToString()
                    };
                    items.Add(item);
                }
                ds.Dispose();
                this.cbOrigem.DataSource = items;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        public decimal GetDecimal(string str)
        {
            if (str.Trim().Length == 0) return 0;
            string s = Convert.ToString(1.2);
            if (s.IndexOf('.') > 0) { str = str.Replace(',', '.'); } else { str = str.Replace('.', ','); }
            decimal dValor = -1;
            if (!Decimal.TryParse(str, out dValor))
            {
                dValor = -1;
            }
            return dValor;
        }

        private void definirNivelUtilizacao()
        {
            checkBoxPorAnalisar.Visible = (m_oParameters.UserLogged.m_iUserGroup < 1);
            if (m_oParameters.UserLogged.m_iUserGroup > 1)
            {
                CancelaACOMToolStripMenuItem.Enabled = false;
                confirmarCancelamentoToolStripMenuItem.Enabled = false;
                anulaCancelaToolStripMenuItem.Enabled = false;

                toolStripMenuItemENVMNotificaAcolhimento.Enabled = false;
                confirmarNotificacaoToolStripMenuItem.Enabled = false;
                toolStripMenuItemENVMAnulaNotificacao.Enabled = false;

                reapresentarCompensacaoToolStripMenuItem.Enabled = false;
                ConfirmarReapresentacaoToolStripMenuItem.Enabled = false;
                anularReapresentacaoToolStripMenuItem.Enabled = false;

                toolStripMenuItemReapresentarDOC.Enabled = false;
                toolStripMenuItemConfirmarDOC.Enabled = false;
                toolStripMenuItemAnularDOC.Enabled = false;

                cancelaDocumentoToolStripMenuItem.Enabled = false;
                confirmarCancelamentoToolStripMenuItem1.Enabled = false;
                anularCancelamentoToolStripMenuItem.Enabled = false;
                //cancelamentoOKToolStripMenuItem.Enabled = false;

                cancelaDocumentoToolStripMenuItem1.Enabled = false;
                confirmarCancelamentoToolStripMenuItem2.Enabled = false;
                anularCancelamentoToolStripMenuItem1.Enabled = false;

                NotificaACOMStripMenuItem.Enabled = false;
                ConfirmaNotificaACOMStripMenuItem.Enabled = false;
                AnulaNotificaACOMStripMenuItem.Enabled = false;

            }
        }

        private void PesquisasForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
                ////SUPFBKOFF 20 intervalo de dados por defeito passou a ser 1 dia.
                m_ctrldtFim.Value = DateTime.Now.Date;
                m_ctrldtInicio.Value = DateTime.Now.Date;
                definirNivelUtilizacao();
                m_oMenuInterface.PesquisasEnable(false);
                BotoesJanelasEnabled();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private string FiltroNumRemessa()
        {
            if (GetDecimal(textBoxNumRemessa.Text) <= 0)
            {
                return "";
            }
            return " and REMESSA_NUMERO=" + textBoxNumRemessa.Text;
        }

        private string FiltroREFARQ_ACOM()
        {
            string sWhereClause = "";
            if (GetDecimal(textBoxREFARQ.Text) > 0)
            {
                sWhereClause += " Where (REFARQ='" + textBoxREFARQ.Text + "' or DOCACOM_REFARQ2='" + textBoxREFARQ.Text + "') ";
            }
            return sWhereClause;
        }

        private string FiltroREFARQ()
        {
            string sWhereClause = "";
            if (GetDecimal(textBoxREFARQ.Text) > 0)
            {
                sWhereClause += " Where (REFARQ='" + textBoxREFARQ.Text + "' or REFARQ_ORI='" + textBoxREFARQ.Text + "') ";
            }
            return sWhereClause;
        }

        private string FiltrosComuns()
        {
            string sWhereClause = "";
            sWhereClause = " Where (DATA between '" + m_ctrldtInicio.Value.ToString(m_oParameters.DateFormat) + "' and ";
            sWhereClause += "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateFormat) + "' ";
            sWhereClause += "  or DATA2 between '" + m_ctrldtInicio.Value.ToString(m_oParameters.DateFormat) + "' and ";
            sWhereClause += "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateFormat) + "') ";
            if (GetDecimal(textBoxMontante.Text) > 0)
            {
                string aux = GetDecimal(textBoxMontante.Text).ToString();
                aux = aux.Replace(",", "").Replace(",", "");
                sWhereClause += " and DOC_MONTANTE*100=" + aux;
            }
            if (GetDecimal(textBoxBalcao.Text) > 0)
            {
                sWhereClause += " and BALCAO=" + textBoxBalcao.Text;
            }
            if (GetDecimal(textBoxNumCheque.Text) > 0)
            {
                sWhereClause += " and DOC_NCHEQUE='" + textBoxNumCheque.Text + "'";
            }
            //if (GetDecimal(textBoxREFARQ.Text) > 0)
            //{
            //    sWhereClause += " and REFARQ='" + textBoxREFARQ.Text + "'";
            //}
            if (this.cbOrigem.SelectedIndex > 0)
            {
                sWhereClause += " and DOC_ORIGEM_ID=" + this.cbOrigem.SelectedValue;
            }
            return sWhereClause;
        }

        private void RefreshListaDocumento()
        {
            string padleft = "";
            if (this.textBoxBalcao.Text.Length > 0 && this.textBoxBalcao.Text.Length < 4)
            {
                padleft = textBoxBalcao.Text.PadLeft(4, '0');
                this.textBoxBalcao.Text = padleft;
            }

            listViewPesquisaDocumento.MyClear();

            string sWhereClause = FiltrosComuns();

            if (FiltroREFARQ().Length > 0)
            {
                RefreshDocumento(FiltroREFARQ());
            }
            else
            {
                if (this.cbOrigem.SelectedValue.Equals("2") && this.GetDecimal(this.txtDeposito.Text.Trim()) > 0)
                {
                    sWhereClause += " AND SEQ_DEPOSITO = " + this.txtDeposito.Text;
                }

                RefreshDocumento(sWhereClause + FiltroNumRemessa() + FiltrosBotoes());
            }
        }

        private void buttonDocumento_Click(object sender, EventArgs e)
        {
            RefreshListaDocumento();
        }

        private void RefreshDocumento(string sWhereClause)
        {
            string sQuery = "select * from VW_PESQ_DOCUMENTO " + sWhereClause + " order by REMIN_DATA, REMIN_BALCAO, REFARQ";

            SqlDataReader dr = null;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddDocumento2ListView(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                listViewPesquisaDocumento.EndUpdate();
                labelDOC.Text = listViewPesquisaDocumento.Items.Count.ToString() + " Registos em Remessas enviadas à Compensação";
            }
        }

        private void AddDocumento2ListView(SqlDataReader dr)
        {
            PesquisaDocumento oPd = new PesquisaDocumento(dr);
            ListViewItem olvItem = oPd.MakeListViewItem(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt);
            olvItem.Tag = oPd;
            listViewPesquisaDocumento.Items.Add(olvItem);
        }

        private string FiltrosBotoes()
        {
            string sWhereClause = "";
            if (toolStripButtonEmAnalise.Checked)
            {
                sWhereClause += " and (DOC_REAPRESENTADO is not null or DOC_CANCELADO is not null or REFARQ_ORI is not null)";
            }
            if (checkBoxPorAnalisar.Checked)
            {
                //sWhereClause += " and not (DOC_REAPRESENTADO is not null or DOC_CANCELADO is not null or REFARQ_ORI is not null)";
                sWhereClause += " and DOC_REAPRESENTADO is null and DOC_CANCELADO is null and REFARQ_ORI is null ";
            }

            /*
             * Adicionado botão para mostrar todos os registos pendentens de intervenção
             */
            if (this.cbPendenteIntervencao.Checked)
            {
                sWhereClause += " AND (CANCELA_EFECTUADO = 100 OR REAPRESENTADO_EFECTUADO = 100) ";
            }
            string sWhereStatus = "";
            if (toolStripButtonErro.Checked)
            {
                sWhereStatus += " or (REAPRESENTADO_EFECTUADO<0 or CANCELA_EFECTUADO<0)";
            }
            if (toolStripButtonMaisMenos.Checked)
            {
                sWhereStatus += " or (REAPRESENTADO_EFECTUADO<>2 and REAPRESENTADO_EFECTUADO>=0)";
                sWhereStatus += " or (CANCELA_EFECTUADO<>2 and CANCELA_EFECTUADO>=0)";
            }
            if (toolStripButtonOK.Checked)
            {
                sWhereStatus += " or (REAPRESENTADO_EFECTUADO=2 or CANCELA_EFECTUADO=2)";
            }

            if (sWhereStatus.Length > 0)
            {
                sWhereStatus = " and (" + sWhereStatus.Substring(3) + ")";
            }

            return sWhereClause + sWhereStatus;
        }

        private string FiltrosBotoesENVM()
        {
            string sWhereClause = "";
            if (toolStripButtonEmAnalise.Checked)
            {
                sWhereClause += " and (DOCENV_CANCELADO is not null or DOCENV_REAPRESENTADO is not null or DOCENV_NOTIFICADO is not null or DOCENV_DUPLICADO<>0)";
            }
            if (checkBoxPorAnalisar.Checked)
            {
                sWhereClause += " and not (DOCENV_CANCELADO is not null or DOCENV_REAPRESENTADO is not null or DOCENV_NOTIFICADO is not null or DOCENV_DUPLICADO<>0)";
            }
            /*
             * Adicionado botão para mostrar todos os registos pendentens de intervenção
             */
            if (this.cbPendenteIntervencao.Checked)
            {
                sWhereClause += " AND (NOTIFICA_EFECTUADO = 100 OR REAPRESENTADO_EFECTUADO = 100) ";
            }
            string sWhereStatus = "";
            if (toolStripButtonErro.Checked)
            {
                sWhereStatus += " or (REAPRESENTADO_EFECTUADO<0 or NOTIFICA_EFECTUADO<0)";
            }
            if (toolStripButtonMaisMenos.Checked)
            {
                sWhereStatus += " or (REAPRESENTADO_EFECTUADO<>2 and REAPRESENTADO_EFECTUADO>=0)";
                sWhereStatus += " or (NOTIFICA_EFECTUADO<>2 and NOTIFICA_EFECTUADO>=0)";
                //                sWhereStatus += " or (DOCENV_DUPLICADO<>0)";
            }
            if (toolStripButtonOK.Checked)
            {
                sWhereStatus += " or (REAPRESENTADO_EFECTUADO=2 or NOTIFICA_EFECTUADO=2)";
            }

            if (sWhereStatus.Length > 0)
            {
                sWhereStatus = " and (" + sWhereStatus.Substring(3) + ")";
            }

            return sWhereClause + sWhereStatus;
        }

        private string FiltrosBotoesACOM()
        {
            string sWhereClause = "";
            if (toolStripButtonEmAnalise.Checked)
            {
                sWhereClause += " and (DOCACOM_CANCELADO is not null or DOCACOM_NOTIFICADO is not null or ESTADO_ALERTA=1)";
            }
            if (checkBoxPorAnalisar.Checked)
            {
                sWhereClause += " and not (DOCACOM_CANCELADO is not null or DOCACOM_NOTIFICADO is not null or ESTADO_ALERTA=1)";
            }
            /*
             * Adicionado botão para mostrar todos os registos pendentens de intervenção
             */
            if (this.cbPendenteIntervencao.Checked)
            {
                sWhereClause += " AND (CANCELA_EFECTUADO = 100 OR NOTIFICA_EFECTUADO = 100) ";
            }
            string sWhereStatus = "";
            if (toolStripButtonErro.Checked)
            {
                sWhereStatus += " or (CANCELA_EFECTUADO<0 or NOTIFICA_EFECTUADO<0)";
            }
            if (toolStripButtonMaisMenos.Checked)
            {
                sWhereStatus += " or (CANCELA_EFECTUADO<>2 and CANCELA_EFECTUADO>=0)";
                sWhereStatus += " or (NOTIFICA_EFECTUADO<>2 and NOTIFICA_EFECTUADO>=0)";
            }
            if (toolStripButtonOK.Checked)
            {
                sWhereStatus += " or (CANCELA_EFECTUADO=2 or NOTIFICA_EFECTUADO=2)";
            }

            if (sWhereStatus.Length > 0)
            {
                sWhereStatus = " and (" + sWhereStatus.Substring(3) + ")";
            }

            return sWhereClause + sWhereStatus;
        }

        private void RefreshListaENVM()
        {
            listViewPesquisaDocumentoENVM.MyClear();
            if (FiltroREFARQ().Length > 0)
            {
                RefreshDocumentoENVM(FiltroREFARQ());
            }
            else
            {
                string sWhereClause = FiltrosComuns();
                String innerJoin = String.Empty;
                if (this.cbOrigem.SelectedValue.Equals("2") && this.GetDecimal(this.txtDeposito.Text.Trim()) > 0)
                {
                    innerJoin = @" INNER JOIN dbo.DOCUMENTO_BALCAO as docBalcao ON docBalcao.ID = DOC_ID 
                                         INNER JOIN dbo.REMESSA_BALCAO as rem ON rem.ID = docBalcao.REMBALCAO_ID ";
                    sWhereClause += " AND rem.REMBALCAO_SEQUENCIA = " + this.txtDeposito.Text;
                }
                this.RefreshDocumentoENVM(String.Format(" {0} {1} {2} ", innerJoin, sWhereClause, FiltrosBotoesENVM()));
            }
        }

        private void buttonENVM_Click(object sender, EventArgs e)
        {
            RefreshListaENVM();
        }
        private void RefreshDocumentoENVM(string sWhereClause)
        {
            string sQuery = "select * from VW_PESQ_DOCUMENTO_ENVM " + sWhereClause + " order by FICH_DATA";

            SqlDataReader dr = null;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddDocumento2ListViewENVM(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshDocumentoENVM()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                listViewPesquisaDocumentoENVM.EndUpdate();
                labelENVM.Text = listViewPesquisaDocumentoENVM.Items.Count.ToString() + " Registos em ENVM";
            }
        }

        private void AddDocumento2ListViewENVM(SqlDataReader dr)
        {
            PesquisaDocumentoENVM oPd = new PesquisaDocumentoENVM(dr);

            ListViewItem olvItem = oPd.MakeListViewItem(m_oParameters.DateFormat);

            olvItem.Tag = oPd;

            listViewPesquisaDocumentoENVM.Items.Add(olvItem);
        }

        private void RefreshListaACOM()
        {
            listViewPesquisaDocumentoACOM.MyClear();
            if (FiltroREFARQ().Length > 0)
            {
                RefreshDocumentoACOM(FiltroREFARQ_ACOM());
            }
            else
            {
                string sWhereClause = FiltrosComuns();
                String innerJoin = String.Empty;
                if (this.cbOrigem.SelectedValue.Equals("2") && this.GetDecimal(this.txtDeposito.Text.Trim()) > 0)
                {
                    innerJoin = @" INNER JOIN dbo.DOCUMENTO_BALCAO as docBalcao ON docBalcao.ID = DOC_ID 
                                         INNER JOIN dbo.REMESSA_BALCAO as rem ON rem.ID = docBalcao.REMBALCAO_ID ";
                    sWhereClause += " AND rem.REMBALCAO_SEQUENCIA = " + this.txtDeposito.Text;
                }
                this.RefreshDocumentoACOM(String.Format(" {0} {1} {2} ", innerJoin, sWhereClause, FiltrosBotoesACOM()));
            }
        }
        private void buttonACOM_Click(object sender, EventArgs e)
        {
            RefreshListaACOM();
        }
        private void RefreshDocumentoACOM(string sWhereClause)
        {
            string sQuery = "select * from VW_PESQ_DOCUMENTO_ACOM " + sWhereClause + " order by FICH_DATA";

            SqlDataReader dr = null;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    AddDocumento2ListViewACOM(dr);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshDocumentoACOM()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
                listViewPesquisaDocumentoACOM.EndUpdate();
                labelACOM.Text = listViewPesquisaDocumentoACOM.Items.Count.ToString() + " Registos em ACOM";
            }
        }
        private void AddDocumento2ListViewACOM(SqlDataReader dr)
        {
            PesquisaDocumentoACOM oPd = new PesquisaDocumentoACOM(dr);

            ListViewItem olvItem = oPd.MakeListViewItem(m_oParameters.DateFormat);

            olvItem.Tag = oPd;

            listViewPesquisaDocumentoACOM.Items.Add(olvItem);
        }

        private void toolStripButtonExitJanela_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

  

        private void CancelaACOMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Insert_TibcoCancelaEnvioDocumento((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag,m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocACOM Cancelado", "Insert_TibcoCancelaEnvioDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Acolhimento dos documentos cancelado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Insert_TibcoCancelaEnvioDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void anulaCancelaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Delete_TibcoCancelaEnvioDocumento(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_CANCELADO,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Anulado o Cancelamento DocACOM", "Delete_TibcoCancelaEnvioDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anulado o Cancelamento do Acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Delete_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void toolStripMenuItemENVMNotificaAcolhimento_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Tibco.Insert_TibcoCancelaChaveDocumento((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag, m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocENVM Notificado", "Insert_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Insert_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void confirmarCancelamentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Confirma_TibcoCancelaEnvioDocumento(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_CANCELADO, 0,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Confirmado o Cancelamento DocACOM", "Update_ConfirmaTibcoCancelaEnvioDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirmado o Cancelamento do Acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoCancelaEnvioDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void confirmarNotificacaoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Tibco.Confirma_TibcoNotificaEnvioDocumentoForaPrazo(((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_NOTIFICADO,m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocENVM Notifica Confirma", "Confirma_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirma Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void toolStripMenuItemENVMAnulaNotificacao_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Tibco.Anula_TibcoNotificaEnvioDocumentoForaPrazo(((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_NOTIFICADO,m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocENVM Notifica Anula", "Anula_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anula Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Anula_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void reapresentarCompensacaoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Reapresentar_Documento((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag);
                    GenericLog.GenLogRegistarInfo("DocENVM Reapresentar_Documento", "Reapresentar_Documento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Reapresentar Documentos", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Reapresentar_Documento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void ConfirmarReapresentacaoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Confirmar_Reapresentar_Documento(((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_REAPRESENTADO);
                    GenericLog.GenLogRegistarInfo("DocENVM Confirmar_Reapresentar_Documento", "Confirmar_Reapresentar_Documento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirmar Reapresentar Documentos", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirmar_Reapresentar_Documento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void anularReapresentacaoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Anular_Reapresentar_Documento(((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_REAPRESENTADO);
                    GenericLog.GenLogRegistarInfo("DocENVM Anular_Reapresentar_Documento", "Anular_Reapresentar_Documento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anular Reapresentar Documentos", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Anular_Reapresentar_Documento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

       
        public void Reapresentar_Documento(PesquisaDocumento oDoc)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Doc_id", oDoc.m_sDOC_ID));
            oParams.Add(new GeneralDBParameters("@REFARQ", oDoc.m_sREFARQ));
            oParams.Add(new GeneralDBParameters("@DOC_ISREAPRESENTADO", oDoc.m_sDOC_ISREAPRESENTADO));
            //SDCIM 7 - Adicionar origem ao documento
            oParams.Add(new GeneralDBParameters("@DOC_OrigemID", oDoc.m_sDocOrigemID));
            //SDCIM 7 - Adicionar origem ao documento
            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Insert_ReapresentarDocumentoCompensacao]", ref oParams);
        }
        public void Reapresentar_Documento(PesquisaDocumentoENVM oDoc)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Docenv_id", oDoc.m_sDOCENV_ID));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Insert_ReapresentarDocumentoCompensacao]", ref oParams);
        }
        public void Confirmar_Reapresentar_Documento(string sREAPRESENTADO)
        {
            try
            {
                m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);

                ArrayList oParams = new ArrayList();
                oParams.Add(new GeneralDBParameters("@Reapresentado", sREAPRESENTADO));

                m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Update_ConfirmarReapresentarDocumentoCompensacao]", ref oParams);

                m_oParameters.Commit();
            }
            catch
            {
                m_oParameters.RollBack();
                throw;
            }
        }

        public void Anular_Reapresentar_Documento(string sREAPRESENTADO)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Reapresentado", sREAPRESENTADO));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Delete_ReapresentarDocumentoCompensacao]", ref oParams);
        }

        private void listViewPesquisaDocumento_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            PesquisaDocumento oDoc = (PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[0].Tag;
            MostraImagem fMostraImg = new MostraImagem(m_oParameters, oDoc, Convert.ToInt32(oDoc.m_sDocOrigemID));
            fMostraImg.ShowDialog();
        }

        private void toolStripMenuItemReapresentarDOC_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumento.SelectedItems.Count; i++)
                {
                    int sID = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_ID;
                    Reapresentar_Documento((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag);
                    GenericLog.GenLogRegistarInfo("Doc Reapresentar_Documento", "Reapresentar_Documento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Reapresentar Documentos", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Reapresentar_Documento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaDocumento();
            }
        }

        private void toolStripMenuItemConfirmarDOC_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumento.SelectedItems.Count; i++)
                {
                    int sID = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_ID;
                    Confirmar_Reapresentar_Documento(((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_REAPRESENTADO);
                    GenericLog.GenLogRegistarInfo("Doc Confirmar_Reapresentar_Documento", "Confirmar_Reapresentar_Documento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirmar Reapresentar Documentos", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirmar_Reapresentar_Documento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaDocumento();
            }
        }

        private void toolStripMenuItemAnularDOC_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumento.SelectedItems.Count; i++)
                {
                    int sID = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_ID;
                    Anular_Reapresentar_Documento(((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_REAPRESENTADO);
                    GenericLog.GenLogRegistarInfo("Doc Anular_Reapresentar_Documento", "Anular_Reapresentar_Documento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anular Reapresentar Documentos", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Anular_Reapresentar_Documento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaDocumento();
            }
        }

        private void BotoesJanelasEnabled()
        {
            //if (toolStripButtonRem.Checked)
            //{
            //}
            //if (toolStripButtonENVM.Checked)
            //{
            //}
            //if (toolStripButtonACOM.Checked)
            //{
            //}
            splitContainer1.Panel1Collapsed = !toolStripButtonRem.Checked;
            splitContainer1.Panel2Collapsed = !toolStripButtonENVM.Checked && !toolStripButtonACOM.Checked;
            splitContainer2.Panel1Collapsed = !toolStripButtonENVM.Checked;
            splitContainer2.Panel2Collapsed = !toolStripButtonACOM.Checked;
        }

        private void toolStripButtonRem_Click(object sender, EventArgs e)
        {
            BotoesJanelasEnabled();
        }

        private void toolStripButtonENVM_Click(object sender, EventArgs e)
        {
            BotoesJanelasEnabled();
        }

        private void toolStripButtonACOM_Click(object sender, EventArgs e)
        {
            BotoesJanelasEnabled();
        }

        private void Historico_Documento(string sREFARQ, int iOrigem)
        //private void Historico_Documento(string sNUMERO_CHEQUE, int iOrigem)
        {
            string sWhereClause = " WHERE REFARQ='" + sREFARQ + "'";
            //string sWhereClause = " WHERE NUMERO_CHEQUE='" + sNUMERO_CHEQUE + "'";
            switch (iOrigem)
            {
                case 1:
                    listViewPesquisaDocumento.MyClear();
                    listViewPesquisaDocumentoENVM.MyClear();
                    listViewPesquisaDocumentoACOM.MyClear();
                    RefreshDocumento(sWhereClause);
                    RefreshDocumentoENVM(sWhereClause);
                    RefreshDocumentoACOM(sWhereClause);
                    break;
                case 2:
                    listViewPesquisaDocumento.MyClear();
                    listViewPesquisaDocumentoENVM.MyClear();
                    listViewPesquisaDocumentoACOM.MyClear();
                    RefreshDocumento(sWhereClause);
                    RefreshDocumentoENVM(sWhereClause);
                    RefreshDocumentoACOM(sWhereClause);
                    break;
                case 3:
                    listViewPesquisaDocumento.MyClear();
                    listViewPesquisaDocumentoENVM.MyClear();
                    listViewPesquisaDocumentoACOM.MyClear();
                    RefreshDocumento(sWhereClause);
                    RefreshDocumentoENVM(sWhereClause);
                    RefreshDocumentoACOM(sWhereClause);
                    break;
            }
        }

        private void historicoDoDocumentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count != 1)
                return;

            try
            {
                //string sNUMERO_CHEQUE = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[0].Tag).m_sDOC_ZONA3;
                string sRefArq = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[0].Tag).m_sREFARQ;
                Historico_Documento(sRefArq, 1);
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripMenuItemHistoricoENVM_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count != 1)
                return;

            try
            {
                //string sNUMERO_CHEQUE = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[0].Tag).m_sDOCENV_ZONA3;
                string sRefArq = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[0].Tag).m_sDOCENV_REFARQ;
                Historico_Documento(sRefArq, 2);
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ToolStripMenuItemHistoricoACOM_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count != 1)
                return;

            try
            {
                //string sNUMERO_CHEQUE = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[0].Tag).m_sDOCACOM_ZONA3;
                string sRefArq = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[0].Tag).m_sREFARQ;
                Historico_Documento(sRefArq, 3);
                //Historico_Documento(sNUMERO_CHEQUE, 3);
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cancelaDocumentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumento.SelectedItems.Count; i++)
                {
                    int sID = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_ID;
                    Tibco.Insert_TibcoCancelaChaveDocumento((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Doc Cancelado", "Insert_TibcoCancelaChaveDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Documentos cancelado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Insert_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaDocumento();
            }
        }

        private void confirmarCancelamentoToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumento.SelectedItems.Count; i++)
                {
                    int sID = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_ID;
                    Tibco.Confirma_TibcoCancelaChaveDocumento(((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_CANCELADO, 0,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Confirmado o Cancelamento Doc", "Delete_TibcoCancelaChaveDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirmado o Cancelamento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaDocumento();
            }
        }

        private void anularCancelamentoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumento.SelectedItems.Count; i++)
                {
                    int sID = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_ID;
                    Tibco.Delete_TibcoCancelaEnvioDocumento(((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_CANCELADO,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Anulado o Cancelamento Doc", "Delete_TibcoCancelaChaveDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anulado o Cancelamento do DOC", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Delete_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaDocumento();
            }
        }

        private void cancelaDocumentoToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Tibco.Insert_TibcoCancelaChaveDocumento((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag,m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocENV Cancelado", "Insert_TibcoCancelaChaveDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Documentos ENVM cancelados", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Insert_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void confirmarCancelamentoToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Tibco.Confirma_TibcoCancelaChaveDocumento(((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_CANCELADO, 0,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Confirmado o Cancelamento DocENV", "Delete_TibcoCancelaChaveDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirmado o Cancelamento do DOCENV", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void anularCancelamentoToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_ID;
                    Tibco.Delete_TibcoCancelaEnvioDocumento(((PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag).m_sDOCENV_CANCELADO,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Anulado o Cancelamento DocENV", "Delete_TibcoCancelaChaveDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anulado o Cancelamento do DOCENV", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Delete_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaENVM();
            }
        }

        private void NotificaACOMStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Insert_TibcoNotificaEnvioDocumentoForaPrazo((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag,m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocACOM Notificado", "Insert_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Insert_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void ConfirmaNotificaACOMStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Confirma_TibcoNotificaEnvioDocumentoForaPrazo(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_NOTIFICADO,m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocACOM Notifica Confirma", "Confirma_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Confirma Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void AnulaNotificaACOMStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
                {
                    string sID = ((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_ID;
                    Tibco.Anula_TibcoNotificaEnvioDocumentoForaPrazo(((PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag).m_sDOCACOM_NOTIFICADO,m_oParameters);
                    GenericLog.GenLogRegistarInfo("DocACOM Notifica Anula", "Anula_TibcoNotificaEnvioDocumentoForaPrazo()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Anula Notificação de envio de documentos fora de prazo para acolhimento", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Anula_TibcoNotificaEnvioDocumentoForaPrazo()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaACOM();
            }
        }

        private void marcarCancelamentoComEfectuadoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewPesquisaDocumento.SelectedItems.Count < 1)
                return;

            try
            {
                for (int i = 0; i < listViewPesquisaDocumento.SelectedItems.Count; i++)
                {
                    int sID = ((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_ID;
                    Tibco.Confirma_TibcoCancelaChaveDocumento(((PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag).m_sDOC_CANCELADO, 2,m_oParameters);
                    GenericLog.GenLogRegistarInfo("Cancelamento marcado como efectuado", "Confirma_TibcoCancelaChaveDocumento()", Convert.ToInt32(sID));
                }
                MessageBox.Show(this, "Cancelamento marcado como efectuado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "Confirma_TibcoCancelaChaveDocumento()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                RefreshListaDocumento();
            }
        }

        private void textBoxBalcao_TextChanged(object sender, EventArgs e)
        {
            this.ValidarNumerico(this.textBoxBalcao);
        }

        private void txtDeposito_TextChanged(object sender, EventArgs e)
        {
            this.ValidarNumerico(this.txtDeposito);
        }

        private void textBoxNumRemessa_TextChanged(object sender, EventArgs e)
        {
            this.ValidarNumerico(this.textBoxNumRemessa);
        }

        private void textBoxMontante_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(this.textBoxMontante.Text, "[^0-9]"))
            {
                MessageBox.Show("Montante não deve conter separador decimal");
                this.textBoxMontante.Text= this.textBoxMontante.Text.Remove(this.textBoxMontante.Text.Length - 1);
            }
        }

        private void textBoxREFARQ_TextChanged(object sender, EventArgs e)
        {
            this.ValidarNumerico(this.textBoxREFARQ);
        }

        private void textBoxNumCheque_TextChanged(object sender, EventArgs e)
        {
            this.ValidarNumerico(this.textBoxNumCheque);
        }

        private void ValidarNumerico(TextBox txtValidar)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txtValidar.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txtValidar.Text = txtValidar.Text.Remove(txtValidar.Text.Length - 1);
            }
        }

        private void cbOrigem_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.txtDeposito.Enabled = false;
            this.txtDeposito.Text = String.Empty;
            if (this.cbOrigem.SelectedValue.Equals("2"))
            {
                this.txtDeposito.Enabled = true;
            }
        }

        #region SDCIM 7 - Eventos menuStrip

        private void contextMenuStripENVM_Opening(object sender, CancelEventArgs e)
        {
            /*
             * SDCIM 7 - Mostrar opções de acordo com Origem
             */
            if (this.listViewPesquisaDocumentoENVM.SelectedItems.Count < 1)
            {
                e.Cancel = true;
                return;
            }

            for (int i = 0; i < this.listViewPesquisaDocumentoENVM.SelectedItems.Count; i++)
            {
                PesquisaDocumentoENVM docEnvm = (PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[i].Tag;
                Int32 id = 0;
                Int32.TryParse(docEnvm.m_sDocOrigemID, out id);
                switch ((RemessaOrigem)id)
                {
                    case RemessaOrigem.GCCA:
                        this.EnabledMenuStripEnvm(true);

                        if (!docEnvm.m_sCANCELA_EFECTUADO.Equals("100"))
                        {
                            //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                            if (!String.IsNullOrEmpty(docEnvm.m_sCANCELA_EFECTUADO) && Convert.ToInt32(docEnvm.m_sCANCELA_EFECTUADO) < 0)
                            {
                                this.anularCancelamentoToolStripMenuItem1.Enabled = true;
                            }
                            else
                            {
                                this.anularCancelamentoToolStripMenuItem1.Enabled = false;
                            }
                            this.confirmarCancelamentoToolStripMenuItem2.Enabled = false;
                        }
                        else
                        {
                            this.cancelaDocumentoToolStripMenuItem1.Enabled = false;
                        }

                        if (!docEnvm.m_sREAPRESENTADO_EFECTUADO.Equals("100"))
                        {
                            //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                            if (!String.IsNullOrEmpty(docEnvm.m_sREAPRESENTADO_EFECTUADO) && Convert.ToInt32(docEnvm.m_sREAPRESENTADO_EFECTUADO) < 0)
                            {
                                this.anularReapresentacaoToolStripMenuItem.Enabled = true;
                            }
                            else
                            {
                                this.anularReapresentacaoToolStripMenuItem.Enabled = false;
                            }
                            this.ConfirmarReapresentacaoToolStripMenuItem.Enabled = false;
                        }
                        else
                        {
                            this.reapresentarCompensacaoToolStripMenuItem.Enabled = false;
                        }
                        break;
                    case RemessaOrigem.Balcao:
                        this.EnabledMenuStripEnvm(false);
                        //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                        if (!String.IsNullOrEmpty(docEnvm.m_sCANCELA_EFECTUADO) && Convert.ToInt32(docEnvm.m_sCANCELA_EFECTUADO) < 0)
                        {
                            this.anularCancelamentoToolStripMenuItem1.Enabled = true;
                        }
                        //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                        if (!String.IsNullOrEmpty(docEnvm.m_sREAPRESENTADO_EFECTUADO) && Convert.ToInt32(docEnvm.m_sREAPRESENTADO_EFECTUADO) < 0)
                        {
                            this.anularReapresentacaoToolStripMenuItem.Enabled = true;
                        }
                        this.toolStripMenuItemHistoricoENVM.Enabled = true;
                        break;
                    default:
                        this.EnabledMenuStripEnvm(false);
                        break;
                }
                this.toolStripMenuItemENVMNotificaAcolhimento.Visible = false;
                this.confirmarNotificacaoToolStripMenuItem.Visible = false;
                this.toolStripMenuItemENVMAnulaNotificacao.Visible = false;
                this.toolStripMenuItem1.Visible = false;
            }
            /*
             * SDCIM 7 - Mostrar opções de acordo com Origem
             */
        }

        private void EnabledMenuStripEnvm(Boolean enabled)
        {
            this.toolStripMenuItemENVMNotificaAcolhimento.Enabled = enabled;
            this.confirmarNotificacaoToolStripMenuItem.Enabled = enabled;
            this.toolStripMenuItemENVMAnulaNotificacao.Enabled = enabled;
            this.reapresentarCompensacaoToolStripMenuItem.Enabled = enabled;
            this.ConfirmarReapresentacaoToolStripMenuItem.Enabled = enabled;
            this.anularReapresentacaoToolStripMenuItem.Enabled = enabled;
            this.toolStripMenuItemHistoricoENVM.Enabled = enabled;
            this.cancelaDocumentoToolStripMenuItem1.Enabled = enabled;
            this.confirmarCancelamentoToolStripMenuItem2.Enabled = enabled;
            this.anularCancelamentoToolStripMenuItem1.Enabled = enabled;
            this.toolStripMenuItem1.Enabled = enabled;
            this.toolStripMenuItem3.Enabled = enabled;
            this.toolStripMenuItem6.Enabled = enabled;
        }

        private void contextMenuStripACOM_Opening(object sender, CancelEventArgs e)
        {
            /*
             * SDCIM 7 - Mostrar opções de acordo com Origem
             */
            if (this.listViewPesquisaDocumentoACOM.SelectedItems.Count < 1)
            {
                e.Cancel = true;
                return;
            }

            for (int i = 0; i < this.listViewPesquisaDocumentoACOM.SelectedItems.Count; i++)
            {
                PesquisaDocumentoACOM docAcom = (PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[i].Tag;
                Int32 id = 0;
                Int32.TryParse(docAcom.m_sDocOrigemID, out id);
                switch ((RemessaOrigem)id)
                {
                    case RemessaOrigem.GCCA:
                    case RemessaOrigem.Balcao:
                        this.EnabledMenuStripAcom(true);
                        if (!this.TryCancelamento(docAcom))
                        {
                            this.CancelaACOMToolStripMenuItem.Enabled = false;
                        }
                        if (!this.TryNotificacao(docAcom))
                        {
                            this.NotificaACOMStripMenuItem.Enabled = false;
                        }
                        if (!docAcom.m_sCANCELA_EFECTUADO.Equals("100"))
                        {
                            //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                            if (!String.IsNullOrEmpty(docAcom.m_sCANCELA_EFECTUADO) && Convert.ToInt32(docAcom.m_sCANCELA_EFECTUADO) < 0)
                            {
                                this.anulaCancelaToolStripMenuItem.Enabled = true;
                            }
                            else
                            {
                                this.anulaCancelaToolStripMenuItem.Enabled = false;
                            }
                            this.confirmarCancelamentoToolStripMenuItem.Enabled = false;
                        }
                        else
                        {
                            this.CancelaACOMToolStripMenuItem.Enabled = false;
                        }
                        if (!docAcom.m_sNOTIFICA_EFECTUADO.Equals("100"))
                        {
                            //SDCIM 7 - Caso seja erro tem de ser possível anular. Estado < 0
                            if (!String.IsNullOrEmpty(docAcom.m_sNOTIFICA_EFECTUADO) && Convert.ToInt32(docAcom.m_sNOTIFICA_EFECTUADO) < 0)
                            {
                                this.AnulaNotificaACOMStripMenuItem.Enabled = true;
                            }
                            else
                            {
                                this.AnulaNotificaACOMStripMenuItem.Enabled = false;
                            }
                            this.ConfirmaNotificaACOMStripMenuItem.Enabled = false;
                        }
                        else
                        {
                            this.NotificaACOMStripMenuItem.Enabled = false;
                        }
                        break;
                    default:
                        this.EnabledMenuStripAcom(false);
                        break;
                }
            }
        }

        private void EnabledMenuStripAcom(Boolean enabled)
        {
            this.CancelaACOMToolStripMenuItem.Enabled = enabled;
            this.confirmarCancelamentoToolStripMenuItem.Enabled = enabled;
            this.anulaCancelaToolStripMenuItem.Enabled = enabled;
            this.ToolStripMenuItemHistoricoACOM.Enabled = enabled;
            this.NotificaACOMStripMenuItem.Enabled = enabled;
            this.ConfirmaNotificaACOMStripMenuItem.Enabled = enabled;
            this.AnulaNotificaACOMStripMenuItem.Enabled = enabled;
            this.toolStripMenuItem4.Enabled = enabled;
            this.toolStripMenuItem7.Enabled = enabled;
        }

        private void contextMenuStripDOC_Opening(object sender, CancelEventArgs e)
        {
            /*
             * SDCIM 7 - Mostrar opções de acordo com Origem
             */
            if (this.listViewPesquisaDocumento.SelectedItems.Count < 1)
            {
                e.Cancel = true;
                return;
            }

            for (int i = 0; i < this.listViewPesquisaDocumento.SelectedItems.Count; i++)
            {
                PesquisaDocumento doc = (PesquisaDocumento)listViewPesquisaDocumento.SelectedItems[i].Tag;
                Int32 id = 0;
                Int32.TryParse(doc.m_sDocOrigemID, out id);
                switch ((RemessaOrigem)id)
                {
                    case RemessaOrigem.GCCA:
                        this.EnabledMenuStripCompensacao(true);
                        if (!doc.m_sCANCELA_EFECTUADO.Equals("100"))
                        {
                            if (!String.IsNullOrEmpty(doc.m_sCANCELA_EFECTUADO) && Convert.ToInt32(doc.m_sCANCELA_EFECTUADO) < 0)
                            {
                                this.anularCancelamentoToolStripMenuItem.Enabled = true;
                            }
                            else
                            {
                                this.anularCancelamentoToolStripMenuItem.Enabled = false;
                            }
                            this.confirmarCancelamentoToolStripMenuItem1.Enabled = false;
                            this.marcarCancelamentoComEfectuadoToolStripMenuItem.Enabled = false;
                        }
                        else
                        {
                            this.cancelaDocumentoToolStripMenuItem.Enabled = false;
                        }
                        if (!doc.m_sREAPRESENTADO_EFECTUADO.Equals("100"))
                        {

                            if (!String.IsNullOrEmpty(doc.m_sREAPRESENTADO_EFECTUADO) && Convert.ToInt32(doc.m_sREAPRESENTADO_EFECTUADO) < 0)
                            {
                                this.toolStripMenuItemAnularDOC.Enabled = true;
                            }
                            else
                            {
                                this.toolStripMenuItemAnularDOC.Enabled = false;
                            }
                            this.toolStripMenuItemConfirmarDOC.Enabled = false;

                        }
                        else
                        {
                            this.toolStripMenuItemReapresentarDOC.Enabled = false;
                        }
                        break;
                    case RemessaOrigem.Balcao:
                        this.EnabledMenuStripCompensacao(false);
                        if (!String.IsNullOrEmpty(doc.m_sCANCELA_EFECTUADO) && Convert.ToInt32(doc.m_sCANCELA_EFECTUADO) < 0)
                        {
                            this.anularCancelamentoToolStripMenuItem.Enabled = true;
                        }
                        if (!String.IsNullOrEmpty(doc.m_sREAPRESENTADO_EFECTUADO) && Convert.ToInt32(doc.m_sREAPRESENTADO_EFECTUADO) < 0)
                        {
                            this.toolStripMenuItemAnularDOC.Enabled = true;
                        }
                        this.historicoDoDocumentoToolStripMenuItem.Enabled = true;
                        break;
                    default:
                        this.EnabledMenuStripCompensacao(false);
                        break;
                }
            }
        }

        private void EnabledMenuStripCompensacao(Boolean enabled)
        {
            this.toolStripMenuItemReapresentarDOC.Enabled = enabled;
            this.toolStripMenuItemConfirmarDOC.Enabled = enabled;
            this.toolStripMenuItemAnularDOC.Enabled = enabled;
            this.historicoDoDocumentoToolStripMenuItem.Enabled = enabled;
            this.cancelaDocumentoToolStripMenuItem.Enabled = enabled;
            this.confirmarCancelamentoToolStripMenuItem1.Enabled = enabled;
            this.anularCancelamentoToolStripMenuItem.Enabled = enabled;
            this.marcarCancelamentoComEfectuadoToolStripMenuItem.Enabled = enabled;
            this.toolStripMenuItem2.Enabled = enabled;
            this.toolStripMenuItem5.Enabled = enabled;
        }

        /// <summary>
        /// Método que verifica a possibilidade de se enviar para "notificação fora de prazo" o documento ACOM
        /// </summary>
        /// <param name="docENVM">Documento ENVM</param>
        /// <returns>TRUE se pode notificar, FALSE caso contrário</returns>
        private Boolean TryNotificacao(PesquisaDocumentoACOM docACOM)
        {
            if (this._idsNotificacao == null)
                this.LoadIDSNotificaoOrCancelamento();

            if (this._idsNotificacao.Count > 0 && this._idsNotificacao.Contains(Convert.ToInt32(docACOM.m_sDOCACOM_CODANA))
                && DateTime.Now.Date >= docACOM.m_dtFICH_DATA.AddDays(1).Date)
                return true;
            return false;
        }

        /// <summary>
        /// Método que verifica a possibilidade de se enviar para "notificação fora de prazo" o documento ACOM
        /// </summary>
        /// <param name="docENVM">Documento ENVM</param>
        /// <returns>TRUE se pode notificar, FALSE caso contrário</returns>
        private Boolean TryCancelamento(PesquisaDocumentoACOM docACOM)
        {
            if (this._idsCancelamento == null)
                this.LoadIDSNotificaoOrCancelamento();

            if (this._idsCancelamento.Count > 0 && this._idsCancelamento.Contains(Convert.ToInt32(docACOM.m_sDOCACOM_CODANA)))
                return true;
            return false;
        }

        /// <summary>
        /// Carrega os ids de estados de cancelamento e notificação para documentos ACOM
        /// </summary>
        private void LoadIDSNotificaoOrCancelamento()
        {
            this._idsNotificacao = new List<int>();
            this._idsCancelamento = new List<int>();
            String sQuery = "SELECT [ESTADO], I_NOTIFICA, I_CANCELA FROM [dbo].[SIBSP_ESTADO_DOCUMENTO_ACOM] WHERE I_NOTIFICA = 'TRUE' OR I_CANCELA = 'TRUE';";
            SqlDataReader dr = null;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    if (Convert.ToBoolean(dr["I_NOTIFICA"]))
                    {
                        this._idsNotificacao.Add(Convert.ToInt32(dr["ESTADO"]));
                    }
                    if (Convert.ToBoolean(dr["I_CANCELA"]))
                    {
                        this._idsCancelamento.Add(Convert.ToInt32(dr["ESTADO"]));
                    }
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "LoadIDS()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }
        }

        #endregion

        private void listViewPesquisaDocumentoENVM_DoubleClick(object sender, EventArgs e)
        {
            //PesquisaDocumentoENVM oDoc = (PesquisaDocumentoENVM)listViewPesquisaDocumentoENVM.SelectedItems[0].Tag;
            //MostraImagem fMostraImg = new MostraImagem(m_oParameters, oDoc, Convert.ToInt32(oDoc.m_sDocOrigemID));
            //fMostraImg.ShowDialog();
        }

        private void listViewPesquisaDocumentoACOM_DoubleClick(object sender, EventArgs e)
        {
            //PesquisaDocumentoACOM oDoc = (PesquisaDocumentoACOM)listViewPesquisaDocumentoACOM.SelectedItems[0].Tag;
            //MostraImagem fMostraImg = new MostraImagem(m_oParameters, oDoc, Convert.ToInt32(oDoc.m_sDocOrigemID));
            //fMostraImg.ShowDialog();
        }

        
    }
}

// FILE: SDCIM/ModusCI/CIActividades/PesquisasForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButtonExitJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFYSURBVFhH1ZGLrgMhCET76fvnW0fBIi+1tr25JGdRQGaS
        fWzGfchx3Nd1LYN5BL78tm45CCMSgdkuTneqH4UR8sDcIE416m1HfdyOcwOYMeJUp/529AVAC0rQd8Wp
        RzPbYf6jB3qhOPVpbjvaUl4cmDBzmo8YSEwMc7hrEgPtcUZZishM8Nx7BuTyBES/i6UfM7Aag9Br8VjX
        rBjYwi62PUlqQA9rpLAUoKXnBmZMxF0D/BZnukcGZjEVNwbKGVFr6FH/zIBapOlzJNxryHSm2nZMxUGd
        YwN8d96WvB3DQi3M1L40oDky0EAYYQa9bxrgMMIMet8yIKMJRfzEAIto/rOB9ngVKSqRPS3ehCPwwYKE
        KjDLZQ8ycMVpdmDFgCvm5PKpZ7AkDmYGIjE3OwZQQz8kM+CKJLl86hksiYPIQCSSZmEAZ9SneAbc5Qu5
        fF5wbUY38Fc87icdVRQJ1bFuoAAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonRem.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4gonkDpg4hG
        YKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gXbl54nuf63dd9
        0OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z1zg8OoY/cITdn4fw
        bf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDXsYbrWfUKwJrPE9M2M1Oc
        VzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgWcx+PSzg166yZZ8xM8XvXDix9
        c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusHwtNNCsA5U1zS4BLxzJIfg299qO32
        Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/1S1NjL3diRat7qrO7wLRP3HjWsojBeCo
        mDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzPEee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+
        kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLvKQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8D
        TgDQASA1MVpwzwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonENVM.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4gonkDpg4hG
        YKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gXbl54nuf63dd9
        0OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z1zg8OoY/cITdn4fw
        bf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDXsYbrWfUKwJrPE9M2M1Oc
        VzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgWcx+PSzg166yZZ8xM8XvXDix9
        c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusHwtNNCsA5U1zS4BLxzJIfg299qO32
        Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/1S1NjL3diRat7qrO7wLRP3HjWsojBeCo
        mDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzPEee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+
        kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLvKQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8D
        TgDQASA1MVpwzwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonACOM.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4gonkDpg4hG
        YKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gXbl54nuf63dd9
        0OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z1zg8OoY/cITdn4fw
        bf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDXsYbrWfUKwJrPE9M2M1Oc
        VzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgWcx+PSzg166yZZ8xM8XvXDix9
        c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusHwtNNCsA5U1zS4BLxzJIfg299qO32
        Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/1S1NjL3diRat7qrO7wLRP3HjWsojBeCo
        mDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzPEee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+
        kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLvKQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8D
        TgDQASA1MVpwzwAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="contextMenuStripDOC.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>452, 17</value>
  </metadata>
  <metadata name="contextMenuStripENVM.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>284, 17</value>
  </metadata>
  <metadata name="contextMenuStripACOM.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>111, 21</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAQAAAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAAAAAAAAAAAAAAAAAAGPwAAAAAAAA
        AAAAAAAAAAY/YAAAAAAAAAAAAAAAAABj9gAAAAAAAAAAAAAAAAAGP2AAAAAAAAAAAAAAAAAAY/YAAAAA
        AAAAAAAAAAAABj9gAAAAAAAAAAAAAAAAAGP2AAAAAAAAAAAAAAAAAAY/YAAAAAAAAAAAAAAIAAAP9gAA
        AAAAAAAHAAAAcAgDYAAAAAAAAAAHAHd3dwBwBvAAAAAAAAAAAHfu7u53AAAAAAAAAAAAAHfu////7nAA
        gAAAAAAAAHDu52Zmd/7nBwAAAAAAAAAH7n53dmZ/7nAIAAAAAAAHDu7u7u52Z/5wcAAAAAAAAH7u/u7u
        52Z/5wAAAAAAAAB+/+7u7u52f+cAAAAAAAAAfu/+7u7u5m/nAAAAAAAAAH7/7u/u7udv5wAAAAAAAAB+
        7/7u/+7nb+cAAAAAAAAAd+///u7u52/nAAAAAAAABwfu//7+7u5+4HAAAAAAAAAHfu////7n7oAAAAAA
        AAAAcHfu/+/v7ucHAAAAAAAAAAAHfu7+7ud3AAAAAAAAAAAAAHd+7ud3AAAAAAAAAAAAAAcAd3d3AHAA
        AAAAAAAAAAAABwAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////x////4P///8D///+A////Af//
        /gP///wH///4D///8B////A//gDgf/gAAP/wAAP/4AAH/8AAB/+AAAf/gAAD/wAAA/8AAAP/AAAD/wAA
        A/8AAAP/AAAD/wAAA/8AAAP/gAAH/4AAB//AAA//4AAf//AAP//4AH///gH//w==
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIActividades/RemessasResumo.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace CIActividades
{
    public enum RemessaOrigem
    {
        GCCA = 1,
        Balcao = 2,
        MDIs = 3
    }

    class RemessasResumo
    {
        public DateTime m_dtREMPROC_DATA;
        public DateTime m_dtREMIN_DATA;
        public int m_iREMINSTAT_ID;
        public string m_sREMINSTAT_ABR;
        public int m_iREMIN_QT;
        public int m_iREMIN_QT_DOCS;
        public decimal m_dREMIN_MT_DOCS;
        public int m_iLOTEENV_CGDERROR;

        private void InitVars()
        {
            m_dtREMPROC_DATA = DateTime.MinValue;
            m_dtREMIN_DATA = DateTime.MinValue;
            m_iREMINSTAT_ID=-1;
            m_sREMINSTAT_ABR="";
            m_iREMIN_QT=0;
            m_iREMIN_QT_DOCS=0;
            m_dREMIN_MT_DOCS=0;
            m_iLOTEENV_CGDERROR = 0;
        }

        public RemessasResumo()
        {
            InitVars();
        }

        public RemessasResumo(SqlDataReader dr)
        {
            InitVars();

            //try
            //{
                m_dtREMPROC_DATA = Convert.ToDateTime(dr["REMPROC_DATA"]);
                m_dtREMIN_DATA = Convert.ToDateTime(dr["REMIN_DATA"]);
                m_iREMINSTAT_ID = Convert.ToInt32(dr["REMINSTAT_ID"]);
                m_sREMINSTAT_ABR = Convert.ToString(dr["REMINSTAT_ABR"]);
                m_iREMIN_QT = Convert.ToInt32(dr["REMIN_QT"]);
                m_iREMIN_QT_DOCS = Convert.ToInt32(dr["REMIN_QT_DOCS"]);
                m_dREMIN_MT_DOCS = Convert.ToDecimal(dr["REMIN_MT_DOCS"]);
                m_iLOTEENV_CGDERROR = Convert.ToInt16(dr["LOTEENV_CGDERROR"]);
            //}
            //catch
            //{ 
            //}
        }

        public ListViewItem MakeListViewItemResumoRemessas(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_dtREMPROC_DATA.ToString(sDateFormat);
            olvItem.SubItems.Add(m_dtREMIN_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_iREMINSTAT_ID.ToString() + " " + m_sREMINSTAT_ABR);
            olvItem.SubItems.Add(m_iREMIN_QT.ToString().PadLeft(4, ' '));
            olvItem.SubItems.Add(m_iREMIN_QT_DOCS.ToString().PadLeft(6,' '));
            string montanteToInsert = this.m_dREMIN_MT_DOCS.ToString().Equals("0") ? this.m_dREMIN_MT_DOCS.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dREMIN_MT_DOCS).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dREMIN_MT_DOCS).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_iLOTEENV_CGDERROR.ToString()=="0"?"":"Erro");

            return olvItem;
        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/RemessasResumoBalcao.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace CIActividades
{
    class RemessasResumoBalcao
    {
        public DateTime m_dtREMPROC_DATA;
        public DateTime m_dtREMIN_DATA;
        public int m_iREMINSTAT_ID;
        public string m_sREMINSTAT_ABR;
        public int m_iREMIN_QT;
        public int m_iREMIN_QT_DOCS;
        public decimal m_dREMIN_MT_DOCS;
        public int m_iLOTEENV_CGDERROR;
        public string descricaoTipoRemessa;
        public int tpRemessaID;

        private void InitVars()
        {
            m_dtREMPROC_DATA = DateTime.MinValue;
            m_dtREMIN_DATA = DateTime.MinValue;
            m_iREMINSTAT_ID = -1;
            m_sREMINSTAT_ABR = "";
            m_iREMIN_QT = 0;
            m_iREMIN_QT_DOCS = 0;
            m_dREMIN_MT_DOCS = 0;
            m_iLOTEENV_CGDERROR = 0;
            this.descricaoTipoRemessa = "";
            this.tpRemessaID = 0;

        }

        public RemessasResumoBalcao()
        {
            InitVars();
        }

        public RemessasResumoBalcao(SqlDataReader dr)
            : base()
        {
            InitVars();
            m_dtREMPROC_DATA = Convert.ToDateTime(dr["REMPROC_DATA"]);
            m_dtREMIN_DATA = Convert.ToDateTime(dr["REMIN_DATA"]);
            m_iREMINSTAT_ID = Convert.ToInt32(dr["REMINSTAT_ID"]);
            m_sREMINSTAT_ABR = Convert.ToString(dr["REMINSTAT_ABR"]);
            m_iREMIN_QT = Convert.ToInt32(dr["REMIN_QT"]);
            m_iREMIN_QT_DOCS = Convert.ToInt32(dr["REMIN_QT_DOCS"]);
            m_dREMIN_MT_DOCS = Convert.ToDecimal(dr["REMIN_MT_DOCS"]);
            m_iLOTEENV_CGDERROR = Convert.ToInt16(dr["LOTEENV_CGDERROR"]);
            descricaoTipoRemessa = Convert.ToString(dr["REMTIPOBALCAO_DESC"]);
            tpRemessaID = Convert.ToInt16(dr["REMBALCAO_TIPO_BALCAO_ID"]);
        }

        public ListViewItem MakeListViewItemResumoRemessasBalcao(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_dtREMPROC_DATA.ToString(sDateFormat);
            olvItem.SubItems.Add(m_dtREMIN_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_iREMINSTAT_ID.ToString() + " " + m_sREMINSTAT_ABR);
            olvItem.SubItems.Add(tpRemessaID.ToString() + " - " + descricaoTipoRemessa.ToString());
            olvItem.SubItems.Add(m_iREMIN_QT.ToString().PadLeft(4, ' '));
            olvItem.SubItems.Add(m_iREMIN_QT_DOCS.ToString().PadLeft(6, ' '));
            string montanteToInsert = m_dREMIN_MT_DOCS.ToString().Equals("0") ? m_dREMIN_MT_DOCS.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(m_dREMIN_MT_DOCS).PadLeft(16, ' ');
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_iLOTEENV_CGDERROR.ToString() == "0" ? "" : "Erro");            
            return olvItem;
        }
    }
}


// FILE: SDCIM/ModusCI/CIActividades/SacoForm.Designer.cs
﻿namespace CIActividades
{
    partial class SacoForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            m_oMenuInterface.sacoEnable(true);
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SacoForm));
            this.labelBalcao = new System.Windows.Forms.Label();
            this.labelDeposito = new System.Windows.Forms.Label();
            this.labelRemessa = new System.Windows.Forms.Label();
            this.textBoxBalcao = new System.Windows.Forms.TextBox();
            this.textBoxDeposito = new System.Windows.Forms.TextBox();
            this.textBoxRemessa = new System.Windows.Forms.TextBox();
            this.buttonPesquisa = new System.Windows.Forms.Button();
            this.toolStripButtonExitJanela = new System.Windows.Forms.ToolStripButton();
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.dtpBeginDate = new System.Windows.Forms.DateTimePicker();
            this.lblEndDate = new System.Windows.Forms.Label();
            this.dtpEndDate = new System.Windows.Forms.DateTimePicker();
            this.lblBeginDate = new System.Windows.Forms.Label();
            this.listViewResultEstornoDocumento = new NBIISNET.ListViewBase();
            this.columnHeader29 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader30 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader31 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader32 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.Estado1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader33 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader34 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader42 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader35 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader36 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.lblCountListViewEstornoDocumento = new System.Windows.Forms.Label();
            this.lblCountListViewDepositos = new System.Windows.Forms.Label();
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.Estado3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader6 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader7 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader8 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader9 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader10 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader11 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader12 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader13 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader14 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader15 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader16 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader17 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader18 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader19 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader20 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewResultDeposito = new NBIISNET.ListViewBase();
            this.lblListViewEstornoDeposito = new System.Windows.Forms.Label();
            this.columnHeader21 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader22 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader23 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader24 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.Estado2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader25 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader26 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader27 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader28 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewResultEstornoDeposito = new NBIISNET.ListViewBase();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.toolStrip1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).BeginInit();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            this.SuspendLayout();
            // 
            // labelBalcao
            // 
            this.labelBalcao.AutoSize = true;
            this.labelBalcao.Location = new System.Drawing.Point(412, 8);
            this.labelBalcao.Name = "labelBalcao";
            this.labelBalcao.Size = new System.Drawing.Size(40, 13);
            this.labelBalcao.TabIndex = 0;
            this.labelBalcao.Text = "Balcão";
            // 
            // labelDeposito
            // 
            this.labelDeposito.AutoSize = true;
            this.labelDeposito.Location = new System.Drawing.Point(452, 8);
            this.labelDeposito.Name = "labelDeposito";
            this.labelDeposito.Size = new System.Drawing.Size(49, 13);
            this.labelDeposito.TabIndex = 1;
            this.labelDeposito.Text = "Depósito";
            // 
            // labelRemessa
            // 
            this.labelRemessa.AutoSize = true;
            this.labelRemessa.Location = new System.Drawing.Point(504, 8);
            this.labelRemessa.Name = "labelRemessa";
            this.labelRemessa.Size = new System.Drawing.Size(51, 13);
            this.labelRemessa.TabIndex = 2;
            this.labelRemessa.Text = "Remessa";
            // 
            // textBoxBalcao
            // 
            this.textBoxBalcao.Location = new System.Drawing.Point(412, 24);
            this.textBoxBalcao.MaxLength = 4;
            this.textBoxBalcao.Name = "textBoxBalcao";
            this.textBoxBalcao.Size = new System.Drawing.Size(37, 20);
            this.textBoxBalcao.TabIndex = 3;
            this.textBoxBalcao.TextChanged += new System.EventHandler(this.textBoxBalcao_TextChanged);
            // 
            // textBoxDeposito
            // 
            this.textBoxDeposito.Location = new System.Drawing.Point(455, 24);
            this.textBoxDeposito.MaxLength = 7;
            this.textBoxDeposito.Name = "textBoxDeposito";
            this.textBoxDeposito.Size = new System.Drawing.Size(46, 20);
            this.textBoxDeposito.TabIndex = 4;
            this.textBoxDeposito.TextChanged += new System.EventHandler(this.textBoxDeposito_TextChanged);
            // 
            // textBoxRemessa
            // 
            this.textBoxRemessa.Location = new System.Drawing.Point(507, 24);
            this.textBoxRemessa.MaxLength = 6;
            this.textBoxRemessa.Name = "textBoxRemessa";
            this.textBoxRemessa.Size = new System.Drawing.Size(48, 20);
            this.textBoxRemessa.TabIndex = 5;
            this.textBoxRemessa.TextChanged += new System.EventHandler(this.textBoxRemessa_TextChanged);
            // 
            // buttonPesquisa
            // 
            this.buttonPesquisa.Image = global::CIActividades.Properties.Resources.Refresh;
            this.buttonPesquisa.Location = new System.Drawing.Point(561, 8);
            this.buttonPesquisa.Name = "buttonPesquisa";
            this.buttonPesquisa.Size = new System.Drawing.Size(40, 43);
            this.buttonPesquisa.TabIndex = 6;
            this.buttonPesquisa.UseVisualStyleBackColor = true;
            this.buttonPesquisa.Click += new System.EventHandler(this.buttonPesquisa_Click);
            // 
            // toolStripButtonExitJanela
            // 
            this.toolStripButtonExitJanela.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonExitJanela.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonExitJanela.Image")));
            this.toolStripButtonExitJanela.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonExitJanela.Name = "toolStripButtonExitJanela";
            this.toolStripButtonExitJanela.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonExitJanela.Click += new System.EventHandler(this.toolStripButtonExitJanela_Click);
            // 
            // toolStrip1
            // 
            this.toolStrip1.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip1.ImageScalingSize = new System.Drawing.Size(32, 32);
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButtonExitJanela});
            this.toolStrip1.Location = new System.Drawing.Point(604, 9);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Padding = new System.Windows.Forms.Padding(0);
            this.toolStrip1.Size = new System.Drawing.Size(47, 39);
            this.toolStrip1.TabIndex = 24;
            this.toolStrip1.Text = "toolStripActividades";
            // 
            // dtpBeginDate
            // 
            this.dtpBeginDate.CustomFormat = " dddd - yyyy-MM-dd";
            this.dtpBeginDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpBeginDate.Location = new System.Drawing.Point(41, 24);
            this.dtpBeginDate.Name = "dtpBeginDate";
            this.dtpBeginDate.Size = new System.Drawing.Size(168, 20);
            this.dtpBeginDate.TabIndex = 26;
            // 
            // lblEndDate
            // 
            this.lblEndDate.AutoSize = true;
            this.lblEndDate.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblEndDate.Location = new System.Drawing.Point(215, 28);
            this.lblEndDate.Name = "lblEndDate";
            this.lblEndDate.Size = new System.Drawing.Size(18, 13);
            this.lblEndDate.TabIndex = 27;
            this.lblEndDate.Text = "a:";
            // 
            // dtpEndDate
            // 
            this.dtpEndDate.CustomFormat = " dddd - yyyy-MM-dd";
            this.dtpEndDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpEndDate.Location = new System.Drawing.Point(239, 24);
            this.dtpEndDate.Name = "dtpEndDate";
            this.dtpEndDate.Size = new System.Drawing.Size(167, 20);
            this.dtpEndDate.TabIndex = 28;
            // 
            // lblBeginDate
            // 
            this.lblBeginDate.AutoSize = true;
            this.lblBeginDate.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblBeginDate.Location = new System.Drawing.Point(12, 27);
            this.lblBeginDate.Name = "lblBeginDate";
            this.lblBeginDate.Size = new System.Drawing.Size(27, 13);
            this.lblBeginDate.TabIndex = 25;
            this.lblBeginDate.Text = "De:";
            // 
            // listViewResultEstornoDocumento
            // 
            this.listViewResultEstornoDocumento.AllowColumnReorder = true;
            this.listViewResultEstornoDocumento.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewResultEstornoDocumento.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader29,
            this.columnHeader30,
            this.columnHeader31,
            this.columnHeader32,
            this.Estado1,
            this.columnHeader33,
            this.columnHeader34,
            this.columnHeader42,
            this.columnHeader35,
            this.columnHeader36});
            this.listViewResultEstornoDocumento.EnableExportar = true;
            this.listViewResultEstornoDocumento.FullRowSelect = true;
            this.listViewResultEstornoDocumento.GridLines = true;
            this.listViewResultEstornoDocumento.HideSelection = false;
            this.listViewResultEstornoDocumento.Location = new System.Drawing.Point(3, 16);
            this.listViewResultEstornoDocumento.Name = "listViewResultEstornoDocumento";
            this.listViewResultEstornoDocumento.Size = new System.Drawing.Size(909, 122);
            this.listViewResultEstornoDocumento.TabIndex = 34;
            this.listViewResultEstornoDocumento.TabStop = false;
            this.listViewResultEstornoDocumento.UseCompatibleStateImageBehavior = false;
            this.listViewResultEstornoDocumento.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader29
            // 
            this.columnHeader29.Text = "País";
            // 
            // columnHeader30
            // 
            this.columnHeader30.Text = "Banco";
            // 
            // columnHeader31
            // 
            this.columnHeader31.Text = "Balcão";
            this.columnHeader31.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // columnHeader32
            // 
            this.columnHeader32.Text = "Depósito";
            this.columnHeader32.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader32.Width = 59;
            // 
            // Estado1
            // 
            this.Estado1.Text = "Estado";
            this.Estado1.Width = 110;
            // 
            // columnHeader33
            // 
            this.columnHeader33.Text = "Data Remessa";
            this.columnHeader33.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader33.Width = 90;
            // 
            // columnHeader34
            // 
            this.columnHeader34.Text = "Operador";
            this.columnHeader34.Width = 79;
            // 
            // columnHeader42
            // 
            this.columnHeader42.Text = "N. Seq";
            this.columnHeader42.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader42.Width = 62;
            // 
            // columnHeader35
            // 
            this.columnHeader35.Text = "Remessa Balcão";
            this.columnHeader35.Width = 0;
            // 
            // columnHeader36
            // 
            this.columnHeader36.Text = "Tipo Remessa";
            this.columnHeader36.Width = 0;
            // 
            // lblCountListViewEstornoDocumento
            // 
            this.lblCountListViewEstornoDocumento.AutoSize = true;
            this.lblCountListViewEstornoDocumento.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblCountListViewEstornoDocumento.Location = new System.Drawing.Point(-1, 0);
            this.lblCountListViewEstornoDocumento.Name = "lblCountListViewEstornoDocumento";
            this.lblCountListViewEstornoDocumento.Size = new System.Drawing.Size(118, 13);
            this.lblCountListViewEstornoDocumento.TabIndex = 33;
            this.lblCountListViewEstornoDocumento.Text = "Estorno Documento";
            // 
            // lblCountListViewDepositos
            // 
            this.lblCountListViewDepositos.AutoSize = true;
            this.lblCountListViewDepositos.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblCountListViewDepositos.Location = new System.Drawing.Point(0, 0);
            this.lblCountListViewDepositos.Name = "lblCountListViewDepositos";
            this.lblCountListViewDepositos.Size = new System.Drawing.Size(57, 13);
            this.lblCountListViewDepositos.TabIndex = 29;
            this.lblCountListViewDepositos.Text = "Depósito";
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "País";
            this.columnHeader1.Width = 40;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Banco";
            this.columnHeader2.Width = 50;
            // 
            // columnHeader3
            // 
            this.columnHeader3.Text = "Balcão";
            this.columnHeader3.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // columnHeader4
            // 
            this.columnHeader4.Text = "Depósito";
            this.columnHeader4.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // Estado3
            // 
            this.Estado3.Text = "Estado";
            this.Estado3.Width = 110;
            // 
            // columnHeader5
            // 
            this.columnHeader5.Text = "Data Remessa";
            this.columnHeader5.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader5.Width = 85;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "Operador";
            // 
            // columnHeader7
            // 
            this.columnHeader7.Text = "Remessa Balcão";
            // 
            // columnHeader8
            // 
            this.columnHeader8.Text = "Tipo Remessa";
            this.columnHeader8.Width = 185;
            // 
            // columnHeader9
            // 
            this.columnHeader9.Text = "Aplic.";
            this.columnHeader9.Width = 40;
            // 
            // columnHeader10
            // 
            this.columnHeader10.Text = "Tot. Doc. Rem";
            this.columnHeader10.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader10.Width = 80;
            // 
            // columnHeader11
            // 
            this.columnHeader11.Text = "Montante Remessa";
            this.columnHeader11.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader11.Width = 90;
            // 
            // columnHeader12
            // 
            this.columnHeader12.Text = "Nib/Conta";
            this.columnHeader12.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader12.Width = 80;
            // 
            // columnHeader13
            // 
            this.columnHeader13.Text = "Zib";
            this.columnHeader13.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader13.Width = 70;
            // 
            // columnHeader14
            // 
            this.columnHeader14.Text = "Num. Conta";
            this.columnHeader14.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader14.Width = 80;
            // 
            // columnHeader15
            // 
            this.columnHeader15.Text = "Num. Cheque";
            this.columnHeader15.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader15.Width = 80;
            // 
            // columnHeader16
            // 
            this.columnHeader16.Text = "Montante";
            this.columnHeader16.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader16.Width = 85;
            // 
            // columnHeader17
            // 
            this.columnHeader17.Text = "Tp";
            this.columnHeader17.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // columnHeader18
            // 
            this.columnHeader18.Text = "Data Digitalização";
            this.columnHeader18.Width = 85;
            // 
            // columnHeader19
            // 
            this.columnHeader19.Text = "N. Seq";
            this.columnHeader19.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // columnHeader20
            // 
            this.columnHeader20.Text = "Máquina";
            this.columnHeader20.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // listViewResultDeposito
            // 
            this.listViewResultDeposito.AllowColumnReorder = true;
            this.listViewResultDeposito.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewResultDeposito.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader1,
            this.columnHeader2,
            this.columnHeader3,
            this.columnHeader4,
            this.Estado3,
            this.columnHeader5,
            this.columnHeader6,
            this.columnHeader7,
            this.columnHeader8,
            this.columnHeader9,
            this.columnHeader10,
            this.columnHeader11,
            this.columnHeader12,
            this.columnHeader13,
            this.columnHeader14,
            this.columnHeader15,
            this.columnHeader16,
            this.columnHeader17,
            this.columnHeader18,
            this.columnHeader19,
            this.columnHeader20});
            this.listViewResultDeposito.EnableExportar = true;
            this.listViewResultDeposito.FullRowSelect = true;
            this.listViewResultDeposito.GridLines = true;
            this.listViewResultDeposito.HideSelection = false;
            this.listViewResultDeposito.Location = new System.Drawing.Point(4, 16);
            this.listViewResultDeposito.Name = "listViewResultDeposito";
            this.listViewResultDeposito.Size = new System.Drawing.Size(909, 227);
            this.listViewResultDeposito.TabIndex = 30;
            this.listViewResultDeposito.TabStop = false;
            this.listViewResultDeposito.UseCompatibleStateImageBehavior = false;
            this.listViewResultDeposito.View = System.Windows.Forms.View.Details;
            // 
            // lblListViewEstornoDeposito
            // 
            this.lblListViewEstornoDeposito.AutoSize = true;
            this.lblListViewEstornoDeposito.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblListViewEstornoDeposito.Location = new System.Drawing.Point(-1, 0);
            this.lblListViewEstornoDeposito.Name = "lblListViewEstornoDeposito";
            this.lblListViewEstornoDeposito.Size = new System.Drawing.Size(104, 13);
            this.lblListViewEstornoDeposito.TabIndex = 31;
            this.lblListViewEstornoDeposito.Text = "Estorno Depósito";
            // 
            // columnHeader21
            // 
            this.columnHeader21.Text = "País";
            // 
            // columnHeader22
            // 
            this.columnHeader22.Text = "Banco";
            // 
            // columnHeader23
            // 
            this.columnHeader23.Text = "Balcão";
            this.columnHeader23.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // columnHeader24
            // 
            this.columnHeader24.Text = "Depósito";
            this.columnHeader24.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // Estado2
            // 
            this.Estado2.Text = "Estado";
            this.Estado2.Width = 110;
            // 
            // columnHeader25
            // 
            this.columnHeader25.Text = "Data Remessa";
            this.columnHeader25.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader25.Width = 90;
            // 
            // columnHeader26
            // 
            this.columnHeader26.Text = "Operador";
            this.columnHeader26.Width = 73;
            // 
            // columnHeader27
            // 
            this.columnHeader27.Text = "Remessa Balcão";
            this.columnHeader27.Width = 0;
            // 
            // columnHeader28
            // 
            this.columnHeader28.Text = "Tipo Remessa";
            this.columnHeader28.Width = 0;
            // 
            // listViewResultEstornoDeposito
            // 
            this.listViewResultEstornoDeposito.AllowColumnReorder = true;
            this.listViewResultEstornoDeposito.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewResultEstornoDeposito.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader21,
            this.columnHeader22,
            this.columnHeader23,
            this.columnHeader24,
            this.Estado2,
            this.columnHeader25,
            this.columnHeader26,
            this.columnHeader27,
            this.columnHeader28});
            this.listViewResultEstornoDeposito.EnableExportar = true;
            this.listViewResultEstornoDeposito.FullRowSelect = true;
            this.listViewResultEstornoDeposito.GridLines = true;
            this.listViewResultEstornoDeposito.HideSelection = false;
            this.listViewResultEstornoDeposito.Location = new System.Drawing.Point(3, 16);
            this.listViewResultEstornoDeposito.Name = "listViewResultEstornoDeposito";
            this.listViewResultEstornoDeposito.Size = new System.Drawing.Size(909, 121);
            this.listViewResultEstornoDeposito.TabIndex = 32;
            this.listViewResultEstornoDeposito.TabStop = false;
            this.listViewResultEstornoDeposito.UseCompatibleStateImageBehavior = false;
            this.listViewResultEstornoDeposito.View = System.Windows.Forms.View.Details;
            // 
            // splitContainer1
            // 
            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer1.Location = new System.Drawing.Point(12, 50);
            this.splitContainer1.Name = "splitContainer1";
            this.splitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.lblCountListViewDepositos);
            this.splitContainer1.Panel1.Controls.Add(this.listViewResultDeposito);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
            this.splitContainer1.Size = new System.Drawing.Size(916, 551);
            this.splitContainer1.SplitterDistance = 249;
            this.splitContainer1.TabIndex = 35;
            // 
            // splitContainer2
            // 
            this.splitContainer2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer2.Location = new System.Drawing.Point(1, 4);
            this.splitContainer2.Name = "splitContainer2";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.lblListViewEstornoDeposito);
            this.splitContainer2.Panel1.Controls.Add(this.listViewResultEstornoDeposito);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.lblCountListViewEstornoDocumento);
            this.splitContainer2.Panel2.Controls.Add(this.listViewResultEstornoDocumento);
            this.splitContainer2.Size = new System.Drawing.Size(915, 291);
            this.splitContainer2.SplitterDistance = 146;
            this.splitContainer2.TabIndex = 0;
            // 
            // SacoForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(940, 602);
            this.Controls.Add(this.splitContainer1);
            this.Controls.Add(this.dtpEndDate);
            this.Controls.Add(this.lblEndDate);
            this.Controls.Add(this.dtpBeginDate);
            this.Controls.Add(this.lblBeginDate);
            this.Controls.Add(this.buttonPesquisa);
            this.Controls.Add(this.textBoxRemessa);
            this.Controls.Add(this.textBoxDeposito);
            this.Controls.Add(this.textBoxBalcao);
            this.Controls.Add(this.labelRemessa);
            this.Controls.Add(this.labelDeposito);
            this.Controls.Add(this.labelBalcao);
            this.Controls.Add(this.toolStrip1);
            this.Name = "SacoForm";
            this.ShowInTaskbar = false;
            this.Text = "Depósitos / Estornos";
            this.Load += new System.EventHandler(this.SacoForm_Load);
            this.Leave += new System.EventHandler(this.SacoForm_Leave);
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel1.PerformLayout();
            this.splitContainer1.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
            this.splitContainer1.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel1.PerformLayout();
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).EndInit();
            this.splitContainer2.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label labelBalcao;
        private System.Windows.Forms.Label labelDeposito;
        private System.Windows.Forms.Label labelRemessa;
        private System.Windows.Forms.TextBox textBoxBalcao;
        private System.Windows.Forms.TextBox textBoxDeposito;
        private System.Windows.Forms.TextBox textBoxRemessa;
        private System.Windows.Forms.Button buttonPesquisa;
        private System.Windows.Forms.ToolStripButton toolStripButtonExitJanela;
        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.DateTimePicker dtpBeginDate;
        private System.Windows.Forms.Label lblEndDate;
        private System.Windows.Forms.DateTimePicker dtpEndDate;
        private System.Windows.Forms.Label lblBeginDate;
        private NBIISNET.ListViewBase listViewResultEstornoDocumento;
        private System.Windows.Forms.ColumnHeader columnHeader29;
        private System.Windows.Forms.ColumnHeader columnHeader30;
        private System.Windows.Forms.ColumnHeader columnHeader31;
        private System.Windows.Forms.ColumnHeader columnHeader32;
        private System.Windows.Forms.ColumnHeader Estado1;
        private System.Windows.Forms.ColumnHeader columnHeader33;
        private System.Windows.Forms.ColumnHeader columnHeader34;
        private System.Windows.Forms.ColumnHeader columnHeader42;
        private System.Windows.Forms.ColumnHeader columnHeader35;
        private System.Windows.Forms.ColumnHeader columnHeader36;
        private System.Windows.Forms.Label lblCountListViewEstornoDocumento;
        private System.Windows.Forms.Label lblCountListViewDepositos;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.ColumnHeader columnHeader3;
        private System.Windows.Forms.ColumnHeader columnHeader4;
        private System.Windows.Forms.ColumnHeader Estado3;
        private System.Windows.Forms.ColumnHeader columnHeader5;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.ColumnHeader columnHeader7;
        private System.Windows.Forms.ColumnHeader columnHeader8;
        private System.Windows.Forms.ColumnHeader columnHeader9;
        private System.Windows.Forms.ColumnHeader columnHeader10;
        private System.Windows.Forms.ColumnHeader columnHeader11;
        private System.Windows.Forms.ColumnHeader columnHeader12;
        private System.Windows.Forms.ColumnHeader columnHeader13;
        private System.Windows.Forms.ColumnHeader columnHeader14;
        private System.Windows.Forms.ColumnHeader columnHeader15;
        private System.Windows.Forms.ColumnHeader columnHeader16;
        private System.Windows.Forms.ColumnHeader columnHeader17;
        private System.Windows.Forms.ColumnHeader columnHeader18;
        private System.Windows.Forms.ColumnHeader columnHeader19;
        private System.Windows.Forms.ColumnHeader columnHeader20;
        private NBIISNET.ListViewBase listViewResultDeposito;
        private System.Windows.Forms.Label lblListViewEstornoDeposito;
        private System.Windows.Forms.ColumnHeader columnHeader21;
        private System.Windows.Forms.ColumnHeader columnHeader22;
        private System.Windows.Forms.ColumnHeader columnHeader23;
        private System.Windows.Forms.ColumnHeader columnHeader24;
        private System.Windows.Forms.ColumnHeader Estado2;
        private System.Windows.Forms.ColumnHeader columnHeader25;
        private System.Windows.Forms.ColumnHeader columnHeader26;
        private System.Windows.Forms.ColumnHeader columnHeader27;
        private System.Windows.Forms.ColumnHeader columnHeader28;
        private NBIISNET.ListViewBase listViewResultEstornoDeposito;
        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.SplitContainer splitContainer2;
    }
}

// FILE: SDCIM/ModusCI/CIActividades/SacoForm.cs
﻿using System;
using System.Data.SqlClient;
using System.Windows.Forms;
using CIConfigGlobalParameters;
using NBiis;

namespace CIActividades
{
    public enum TP_Registo_Saco
    {
        Deposito = 1,
        Estorno_Deposito = 2,
        Estorno_Documento = 3
    }

    public partial class SacoForm : Form
    {

        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public CIMenuInterface m_oMenuInterface;

        public SacoForm(CIConfigGP.CIGlobalParameters oParameters, CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }
        private void SacoForm_Load(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Maximized;
            m_oMenuInterface.sacoEnable(false);
            this.Search();
        }

        private void buttonPesquisa_Click(object sender, EventArgs e)
        {
            this.Search();
        }

        private void Search()
        {
            string padleft = "";
            if (this.textBoxBalcao.Text.Length > 0 && this.textBoxBalcao.Text.Length < 4)
            {
                padleft = textBoxBalcao.Text.PadLeft(4, '0');
                this.textBoxBalcao.Text = padleft;
            }
            this.listViewResultDeposito.MyClear();
            this.listViewResultEstornoDeposito.MyClear();
            this.listViewResultEstornoDocumento.MyClear();
            String sfiltros = this.filtros();
            this.RefreshListas(sfiltros);
        }

        private String filtros()
        {
            String whereClause = "";

            whereClause = " REM_DATA >='" + dtpBeginDate.Value.ToString(m_oParameters.DateSysFmt) + "'";
            whereClause += " AND REM_DATA <='" + dtpEndDate.Value.ToString(m_oParameters.DateSysFmt) + "'";
            if (textBoxBalcao.Text != "")
            {
                whereClause += " AND REM_BALCAO = " + textBoxBalcao.Text;
            }

            if (textBoxDeposito.Text != "")
            {
                if (whereClause != "")
                    whereClause += " AND ";
                whereClause += " REM_SEQUENCIA = " + textBoxDeposito.Text;
            }

            if (textBoxRemessa.Text != "")
            {
                if (whereClause != "")
                    whereClause += " AND ";
                whereClause += " REM_NUMERO = " + textBoxRemessa.Text;
            }

            if (whereClause.Length > 0)
                return " WHERE " + whereClause;
            else
                return whereClause;
        }

        private void RefreshListas(String whereClause)
        {
            SqlDataReader dr = null;
            String sQuery = "SELECT saco.[REM_PAIS], saco.[REM_BANCO], saco.[REM_BALCAO], saco.[REM_SEQUENCIA], sacoEstado.ID AS 'STATUS_ID', sacoEstado.[NM_SACO_STATUS], saco.[REM_DATA], saco.[REM_OPERADOR], saco.[REM_NUMERO], saco.[REM_APLICACAO], saco.[REM_TIPO_ID], saco.[REM_QT_DOCS], saco.[REM_MT_DOCS], saco.[REM_NIB], saco.[DOC_ZONA5], saco.[DOC_ZONA4], saco.[DOC_ZONA3], saco.[DOC_ZONA2], saco.[DOC_ZONA1], saco.[DOC_DATADIGIT], saco.[DOC_NSEQ], saco.[DOC_MAQUINA], saco.[TP_REGISTO], RemTipoBalc.REMTIPOBALCAO_ABR";
            String tableQuery = " FROM dbo.SACO_DEP_REM as saco ";
            sQuery += tableQuery;
            sQuery += "inner join [dbo].[SACO_STATUS] as sacoEstado on sacoEstado.ID  = saco.REM_STATUS_ID";
            sQuery += " LEFT JOIN [dbo].[REMESSA_TIPO_BALCAO] as RemTipoBalc ON  saco.[REM_TIPO_ID] = RemTipoBalc.REMTIPOBALCAO_ID";
            sQuery += whereClause;
            try
            {
                dr = m_oParameters.DirectSqlDataReader(sQuery);
                while (dr.Read())
                {
                    switch (Convert.ToInt32(dr["TP_REGISTO"]))
                    {
                        case 1:
                            ListViewSacoDetalhe oSd = new ListViewSacoDetalhe(dr);
                            ListViewItem olvItem = oSd.MakeListViewItem(m_oParameters.DateFormat);
                            olvItem.Tag = oSd;
                            listViewResultDeposito.Items.Add(olvItem);
                            break;
                        case 2:
                            ListViewEstornoDeposito oEdp = new ListViewEstornoDeposito(dr);
                            ListViewItem olvItem2 = oEdp.MakeListViewItem(m_oParameters.DateFormat);
                            olvItem2.Tag = oEdp;
                            listViewResultEstornoDeposito.Items.Add(olvItem2);
                            break;
                        case 3:
                            ListViewEstornoDocumento oEdc = new ListViewEstornoDocumento(dr);
                            ListViewItem olvItem3 = oEdc.MakeListViewItem(m_oParameters.DateFormat);
                            olvItem3.Tag = oEdc;
                            listViewResultEstornoDocumento.Items.Add(olvItem3);
                            break;
                    }
                }
                this.lblCountListViewEstornoDocumento.Text = listViewResultEstornoDocumento.Items.Count == 0 ? "Estorno Documento" :
                                                    listViewResultEstornoDocumento.Items.Count.ToString() + " Estorno Documento";
                this.lblCountListViewDepositos.Text = listViewResultDeposito.Items.Count == 0 ? "Depósito" :
                                                    listViewResultDeposito.Items.Count.ToString() + " Depósito";
                this.lblListViewEstornoDeposito.Text = listViewResultEstornoDeposito.Items.Count == 0 ? "Estorno Depósito" :
                                                     listViewResultEstornoDeposito.Items.Count.ToString() + " Estorno Depósito";
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "RefreshListas()", 1);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dr != null)
                {
                    dr.Close();
                }
            }
        }
       
        private void textBoxBalcao_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(textBoxBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                textBoxBalcao.Text.Remove(textBoxBalcao.Text.Length - 1);
                textBoxBalcao.Text = "";
            }
            if (textBoxBalcao.Text.Length >= 4)
            {
                textBoxBalcao.MaxLength = 4;
            }
        }

        private void textBoxDeposito_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(textBoxDeposito.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                textBoxDeposito.Text.Remove(textBoxDeposito.Text.Length - 1);
                textBoxDeposito.Text = "";
            }
            if (textBoxDeposito.Text.Length >= 7)
            {
                textBoxDeposito.MaxLength = 7;
            }
        }

        private void textBoxRemessa_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(textBoxRemessa.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                textBoxRemessa.Text.Remove(textBoxRemessa.Text.Length - 1);
                textBoxRemessa.Text = "";
            }
            if (textBoxRemessa.Text.Length >= 6)
            {
                textBoxRemessa.MaxLength = 6;
            }
        }   

        private void toolStripButtonExitJanela_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void SacoForm_Leave(object sender, EventArgs e)
        {
            this.m_oMenuInterface.sacoEnable(true);
        }  
    }
}

// FILE: SDCIM/ModusCI/CIActividades/SacoForm.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButtonExitJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFYSURBVFhH1ZGLrgMhCET76fvnW0fBIi+1tr25JGdRQGaS
        fWzGfchx3Nd1LYN5BL78tm45CCMSgdkuTneqH4UR8sDcIE416m1HfdyOcwOYMeJUp/529AVAC0rQd8Wp
        RzPbYf6jB3qhOPVpbjvaUl4cmDBzmo8YSEwMc7hrEgPtcUZZishM8Nx7BuTyBES/i6UfM7Aag9Br8VjX
        rBjYwi62PUlqQA9rpLAUoKXnBmZMxF0D/BZnukcGZjEVNwbKGVFr6FH/zIBapOlzJNxryHSm2nZMxUGd
        YwN8d96WvB3DQi3M1L40oDky0EAYYQa9bxrgMMIMet8yIKMJRfzEAIto/rOB9ngVKSqRPS3ehCPwwYKE
        KjDLZQ8ycMVpdmDFgCvm5PKpZ7AkDmYGIjE3OwZQQz8kM+CKJLl86hksiYPIQCSSZmEAZ9SneAbc5Qu5
        fF5wbUY38Fc87icdVRQJ1bFuoAAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>

// FILE: SDCIM/ModusCI/CIActividades/Tibco.cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NBiis.Generic;
using System.Collections;
using CIConfigGP;
using System.Windows.Forms;

namespace CIActividades
{
    /// <summary>
    /// SUPBACKOFF 30
    /// </summary>
    public class Tibco
    {
        public void Insert_TibcoCancelaChaveDocumento(PesquisaDocumentoENVM oDoc, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Operativa", 8));
            oParams.Add(new GeneralDBParameters("@TipoProduto", 4));
            oParams.Add(new GeneralDBParameters("@Solucao", "SIDOC"));
            oParams.Add(new GeneralDBParameters("@Refarq", oDoc.m_sDOCENV_REFARQ));
            oParams.Add(new GeneralDBParameters("@DocEnv_id", oDoc.m_sDOCENV_ID));
            //SDCIM 7
            oParams.Add(new GeneralDBParameters("@DocOrigem_ID", oDoc.m_sDocOrigemID));
            //SDCIM 7
            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Insert_TibcoCancelaChaveDocumento]", ref oParams);
        }

        public void Insert_TibcoCancelaChaveDocumento(PesquisaDocumento oDoc, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Operativa", 8));
            oParams.Add(new GeneralDBParameters("@TipoProduto", oDoc.m_sREMPROC_TIPOPROD));
            oParams.Add(new GeneralDBParameters("@Solucao", "SIDOC"));
            oParams.Add(new GeneralDBParameters("@Refarq", oDoc.m_sREFARQ));
            oParams.Add(new GeneralDBParameters("@Doc_id", oDoc.m_sDOC_ID));
            //SDCIM 7
            oParams.Add(new GeneralDBParameters("@DocOrigem_ID", oDoc.m_sDocOrigemID));
            //SDCIM 7
            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Insert_TibcoCancelaChaveDocumento]", ref oParams);
        }

        public void Insert_TibcoCancelaEnvioDocumento(PesquisaDocumentoACOM oDoc, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Operativa", 8));
            oParams.Add(new GeneralDBParameters("@TipoProduto", oDoc.m_sLOTEACOM_PRODUTO));
            oParams.Add(new GeneralDBParameters("@Solucao", "SIDOC"));
            oParams.Add(new GeneralDBParameters("@Refarq", oDoc.m_sREFARQ));
            oParams.Add(new GeneralDBParameters("@Docacom_id", oDoc.m_sDOCACOM_ID));
            ////SDCIM 7
            //oParams.Add(new GeneralDBParameters("@DocOrigem_ID", oDoc.m_sDocOrigemID));
            ////SDCIM 7
            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Insert_TibcoCancelaEnvioDocumento]", ref oParams);
        }
                
        public void Confirma_TibcoCancelaChaveDocumento(string sCANCELADO, int iEstado, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Cancelado", sCANCELADO));
            oParams.Add(new GeneralDBParameters("@Estado", iEstado));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Update_ConfirmaTibcoCancelaChaveDocumento]", ref oParams);
        }

        public void Confirma_TibcoCancelaEnvioDocumento(string sCANCELADO, int iEstado, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Cancelado", sCANCELADO));
            oParams.Add(new GeneralDBParameters("@Estado", iEstado));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Update_ConfirmaTibcoCancelaEnvioDocumento]", ref oParams);
        }

        public void Confirma_TibcoNotificaEnvioDocumentoForaPrazo(string sNotificado, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Doc_notificado", sNotificado));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Update_ConfirmaTibcoNotificaEnvioDocumentoForaPrazo]", ref oParams);
        }

        public void Anula_TibcoNotificaEnvioDocumentoForaPrazo(string sNotificado, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Doc_notificado", sNotificado));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Delete_TibcoNotificaEnvioDocumentoForaPrazo]", ref oParams);
        }

        public void Insert_TibcoNotificaEnvioDocumentoForaPrazo(PesquisaDocumentoACOM oDoc, CIGlobalParameters m_oParameters)
        {
            string sQuery = "select count(*) from dbo.TIBCO_NOTIFICA_ENVIO_DOCUMENTO_FORA_PRAZO where notifica_refarq='" + oDoc.m_sREFARQ + "'";
            int iCount = (int)m_oParameters.DirectSqlScalar(sQuery);

            if (iCount > 0)
            {
                string sMsg = "Já existe " + iCount.ToString() + " documento(s) com a REFARQ:" + oDoc.m_sREFARQ;
                sMsg += "\nna tabela de notificação de envio fora de prazo";
                sMsg += "\n(dbo.TIBCO_NOTIFICA_ENVIO_DOCUMENTO_FORA_PRAZO)";
                sMsg += "\nPretende inserir de novo?";

                if (MessageBox.Show(sMsg, "Notifica Envio Fora de Prazo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    throw new Exception("Notificação de envio fora de prazo abortada!!!");
                }
            }

            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@DocACOM_id", oDoc.m_sDOCACOM_ID));
            oParams.Add(new GeneralDBParameters("@Operativa", "8"));
            oParams.Add(new GeneralDBParameters("@TipoProduto", "4"));
            oParams.Add(new GeneralDBParameters("@SubProduto", "001"));
            oParams.Add(new GeneralDBParameters("@Solucao", "SIDOC"));
            //oParams.Add(new GeneralDBParameters("@Operador", null));
            oParams.Add(new GeneralDBParameters("@Balcao", oDoc.m_sDOCACOM_BALCAO));
            //oParams.Add(new GeneralDBParameters("@Maquina", null));
            //oParams.Add(new GeneralDBParameters("@NumLote", null));
            //oParams.Add(new GeneralDBParameters("@Sequencia", null));
            oParams.Add(new GeneralDBParameters("@DataCompensacao", oDoc.m_dtFICH_DATA));
            //oParams.Add(new GeneralDBParameters("@DataRemessa", oDoc.m_dtFICH_DATA));
            //oParams.Add(new GeneralDBParameters("@NumRemessa", 0));
            oParams.Add(new GeneralDBParameters("@TipoRemessa", 1));
            oParams.Add(new GeneralDBParameters("@ChaveHost", oDoc.m_sDOCACOM_CHAVEH));
            oParams.Add(new GeneralDBParameters("@Refarq", oDoc.m_sREFARQ));
            oParams.Add(new GeneralDBParameters("@ZIB", oDoc.m_sDOCACOM_ZONA5));
            oParams.Add(new GeneralDBParameters("@NumConta", oDoc.m_sDOCACOM_ZONA4));
            oParams.Add(new GeneralDBParameters("@NumCheque", oDoc.m_sDOCACOM_ZONA3));
            oParams.Add(new GeneralDBParameters("@Montante", oDoc.m_dDOCACOM_IMPORT));
            oParams.Add(new GeneralDBParameters("@TipoCheque", oDoc.m_sDOCACOM_ZONA1));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Insert_TibcoNotificaEnvioDocumentoForaPrazo]", ref oParams);
        }

        public void Delete_TibcoCancelaEnvioDocumento(string sCANCELADO, CIGlobalParameters m_oParameters)
        {
            ArrayList oParams = new ArrayList();
            oParams.Add(new GeneralDBParameters("@Cancelado", sCANCELADO));

            m_oParameters.DirectStoredProcedureNonQuery("[dbo].[Delete_TibcoCancelaEnvioDocumento]", ref oParams);
        }


    }
}


// FILE: SDCIM/ModusCI/CIActividades/TranchesDetalhe.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace CIActividades
{
    class TranchesDetalhe
    {
        public string m_sREMIN_ID;
        public string m_sTRANOUT_ID;
        // m_ID

        public DateTime m_dtREMPROC_TIMER;

        public DateTime m_dtTRANOUT_TIMER;
        public DateTime m_dtREMIN_DATA;
        public int m_iREMINSTAT_ID;
        public string m_sREMINSTAT_ABR;
        public int m_iTRANOUTSTAT_ID;
        public string m_sTRANOUTSTAT_ABR;
        public long m_lREMIN_NUMERO;
        public int m_iTRANOUT_NUMERO;

        public int m_iREMIN_QT_DOCS;
        public decimal m_dREMIN_MT_DOCS;
        public int m_iTRANOUT_QT_DOCS;
        public decimal m_dTRANOUT_MT_DOCS;
        public string m_sREMPROC_ERRO;
        public string m_sTRANOUT_ERRO;
        //-----------------------------------------


        public string m_sREMIN_PAIS;
        public int m_iREMIN_BANCO;
        public int m_iREMIN_BALCAO;
        public string m_sBALCAO_ABR;



        public string m_sREMPROC_CHAVEH;
        public string m_sREMPROC_CHAVEHEXT;


        private void InitVars()
        {
            m_dtREMIN_DATA=DateTime.MinValue;
            m_sREMIN_ID="-1";
            m_sTRANOUT_ID="";
            m_sREMIN_PAIS="PT  ";
            m_iREMIN_BANCO=35;
            m_iREMIN_BALCAO=-1;
            m_sBALCAO_ABR="";
            m_lREMIN_NUMERO=-1;
            m_iTRANOUTSTAT_ID=0;
            m_iREMINSTAT_ID = 0;
            m_sREMINSTAT_ABR = "";
            m_sTRANOUTSTAT_ABR="";
            m_iTRANOUT_NUMERO=-1;
            m_iTRANOUT_QT_DOCS=0;
            m_dTRANOUT_MT_DOCS=0;
            m_iREMIN_QT_DOCS = 0;
            m_dREMIN_MT_DOCS = 0;
            m_sREMPROC_CHAVEH = "";
            m_sREMPROC_CHAVEHEXT = "";
            m_sREMPROC_ERRO= "";
            m_dtREMPROC_TIMER = DateTime.MinValue;
            m_sTRANOUT_ERRO ="";
            m_dtTRANOUT_TIMER = DateTime.MinValue;
        }

        public TranchesDetalhe()
        {
            InitVars();
        }

        public TranchesDetalhe(SqlDataReader dr)
        {
            InitVars();

            try
            {
                m_dtREMIN_DATA = Convert.ToDateTime(dr["REMIN_DATA"]);
                m_sREMIN_ID = Convert.ToString(dr["REMIN_ID"]);
                m_iREMINSTAT_ID = Convert.ToInt32(dr["REMINSTAT_ID"]);
                m_sREMINSTAT_ABR = Convert.ToString(dr["REMINSTAT_ABR"]);
                m_sREMIN_PAIS = Convert.ToString(dr["REMIN_PAIS"]);
                m_iREMIN_BANCO = Convert.ToInt32(dr["REMIN_BANCO"]);
                m_iREMIN_BALCAO = Convert.ToInt32(dr["REMIN_BALCAO"]);
                m_iREMIN_QT_DOCS = Convert.ToInt32(dr["REMIN_QT_DOCS"]);
                m_dREMIN_MT_DOCS = Convert.ToDecimal(dr["REMIN_MT_DOCS"]);
                m_sREMPROC_CHAVEH = Convert.ToString(dr["REMPROC_CHAVEH"]);
                m_sREMPROC_CHAVEHEXT = Convert.ToString(dr["REMPROC_CHAVEHEXT"]);
                m_sREMPROC_ERRO = Convert.ToString(dr["REMPROC_ERRO"]);
                m_dtREMPROC_TIMER = Convert.ToDateTime(dr["REMPROC_TIMER"]);
                
    
                try
                {
                    m_sBALCAO_ABR = Convert.ToString(dr["BALCAO_ABR"]);
                }
                catch 
                {
                    m_sBALCAO_ABR = m_iREMIN_BALCAO.ToString();
                }

                m_lREMIN_NUMERO = Convert.ToInt64(dr["REMIN_NUMERO"]);

                try
                {
                    m_sTRANOUT_ID = Convert.ToString(dr["TRANOUT_ID"]);
                    m_iTRANOUTSTAT_ID = Convert.ToInt32(dr["TRANOUTSTAT_ID"]);
                    m_sTRANOUTSTAT_ABR = Convert.ToString(dr["TRANOUTSTAT_ABR"]);
                    m_iTRANOUT_QT_DOCS = Convert.ToInt32(dr["TRANOUT_QT_DOCS"]);
                    m_dTRANOUT_MT_DOCS = Convert.ToDecimal(dr["TRANOUT_MT_DOCS"]);
                    m_iTRANOUT_NUMERO = Convert.ToInt32(dr["TRANOUT_NUMERO"]);
                    m_sTRANOUT_ERRO = Convert.ToString(dr["TRANOUT_ERRO"]);
                    m_dtTRANOUT_TIMER = Convert.ToDateTime(dr["TRANOUT_TIMER"]);
                }
                catch 
                {
                
                }

            }
            catch
            { 
            }
        }
        public ListViewItem MakeListViewItemDetalheTranches(string sDateFormat,string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_sREMIN_ID;
            olvItem.SubItems.Add(m_sTRANOUT_ID);
            olvItem.SubItems.Add(m_dtREMIN_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_sREMIN_PAIS);//esconder
            olvItem.SubItems.Add(m_iREMIN_BANCO.ToString());//esconder
            olvItem.SubItems.Add(m_iREMIN_BALCAO.ToString()+ " " + m_sBALCAO_ABR);
            olvItem.SubItems.Add(m_lREMIN_NUMERO.ToString());
            olvItem.SubItems.Add(m_iREMINSTAT_ID.ToString()+ " " + m_sREMINSTAT_ABR);
            olvItem.SubItems.Add(m_sREMPROC_CHAVEH);
            olvItem.SubItems.Add(m_sREMPROC_CHAVEHEXT);
            olvItem.SubItems.Add(m_sREMPROC_ERRO);
            olvItem.SubItems.Add(m_dtREMPROC_TIMER.ToString(sDateTimeFormat));


            if (m_iTRANOUT_NUMERO > 0)
            {
                olvItem.SubItems.Add(m_iTRANOUT_NUMERO.ToString());
                olvItem.SubItems.Add(m_iTRANOUTSTAT_ID + " " + m_sTRANOUTSTAT_ABR);
                olvItem.SubItems.Add(m_sTRANOUT_ERRO);
                olvItem.SubItems.Add(m_dtTRANOUT_TIMER.ToString(sDateTimeFormat));
            }
            else
            {
                olvItem.SubItems.Add("");
                olvItem.SubItems.Add("");
                olvItem.SubItems.Add("");
                olvItem.SubItems.Add("");
            }
            olvItem.SubItems.Add(m_iTRANOUT_QT_DOCS.ToString());
            olvItem.SubItems.Add(m_dTRANOUT_MT_DOCS.ToString("0.00"));
            olvItem.SubItems.Add(m_iREMIN_QT_DOCS.ToString());
            olvItem.SubItems.Add(m_dREMIN_MT_DOCS.ToString("0.00"));

            return olvItem;
        }

    }
}


// FILE: SDCIM/ModusCI/CIActividades/TranchesResumo.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace CIActividades
{
    class TranchesResumo
    {
        public DateTime m_dtTRANOUT_DATA;
        public DateTime m_dtREMIN_DATA;
        public int m_iREMINSTAT_ID;
        public string m_sREMINSTAT_ABR;
        public int m_iTRANOUTSTAT_ID;
        public string m_sTRANOUTSTAT_ABR;
        public int m_iTRANOUT_QT;
        public int m_iTRANOUT_QT_DOCS;
        public decimal m_dTRANOUT_MT_DOCS;
        public int m_iLOTEENV_ANOMAL;

        private void InitVars()
        {
            m_dtTRANOUT_DATA = DateTime.MinValue;
            m_dtREMIN_DATA = DateTime.MinValue;
            m_iREMINSTAT_ID = -1;
            m_iTRANOUTSTAT_ID = -1;
            m_sTRANOUTSTAT_ABR = "ND";
            m_iTRANOUT_QT = 0;
            m_iTRANOUT_QT_DOCS = 0;
            m_dTRANOUT_MT_DOCS = 0;
            m_iLOTEENV_ANOMAL = 0;
        }

        public TranchesResumo()
        {
            InitVars();
        }

        public TranchesResumo(SqlDataReader dr)
        {
            InitVars();

            try
            {
                m_dtTRANOUT_DATA = Convert.ToDateTime(dr["TRANOUT_DATA"]);
                m_dtREMIN_DATA = Convert.ToDateTime(dr["REMIN_DATA"]);
                m_iREMINSTAT_ID = Convert.ToInt32(dr["REMINSTAT_ID"]);
                m_sREMINSTAT_ABR = Convert.ToString(dr["REMINSTAT_ABR"]);
                m_iTRANOUTSTAT_ID = Convert.ToInt32(dr["TRANOUTSTAT_ID"]);
                m_sTRANOUTSTAT_ABR = Convert.ToString(dr["TRANOUTSTAT_ABR"]);
                m_iTRANOUT_QT = Convert.ToInt32(dr["TRANOUT_QT"]);
                m_iTRANOUT_QT_DOCS = Convert.ToInt32(dr["TRANOUT_QT_DOCS"]);
                m_dTRANOUT_MT_DOCS = Convert.ToDecimal(dr["TRANOUT_MT_DOCS"]);
                m_iLOTEENV_ANOMAL = Convert.ToInt16(dr["LOTEENV_ANOMAL"]);
            }
            catch
            { 
            }
        }

        public ListViewItem MakeListViewItemResumoTranches(string sDateFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_dtTRANOUT_DATA.ToString(sDateFormat);
            olvItem.SubItems.Add(m_dtREMIN_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_iREMINSTAT_ID + " " + m_sREMINSTAT_ABR);
            olvItem.SubItems.Add(m_iTRANOUTSTAT_ID + " " + m_sTRANOUTSTAT_ABR);
            olvItem.SubItems.Add(m_iTRANOUT_QT.ToString().PadLeft(4, ' '));
            olvItem.SubItems.Add(m_iTRANOUT_QT_DOCS.ToString().PadLeft(6, ' '));
            string montanteToInsert = this.m_dTRANOUT_MT_DOCS.ToString().Equals("0") ? this.m_dTRANOUT_MT_DOCS.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dTRANOUT_MT_DOCS).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dTRANOUT_MT_DOCS).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);

            return olvItem;
        }

    }
}


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/Properties/Settings.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIServico.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string P {
            get {
                return ((string)(this["P"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string S {
            get {
                return ((string)(this["S"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("999")]
        public string A {
            get {
                return ((string)(this["A"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SDC6001SQL28\\S2K081")]
        public string H {
            get {
                return ((string)(this["H"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDCSDCIMA01")]
        public string D {
            get {
                return ((string)(this["D"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLPRDVS301")]
        public string GCAAH {
            get {
                return ((string)(this["GCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSPGCCALX")]
        public string GCAAD {
            get {
                return ((string)(this["GCAAD"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLDEVBS301\\GCCAA")]
        public string DVPGCAAH {
            get {
                return ((string)(this["DVPGCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDGCCALX")]
        public string DVPGCAAD {
            get {
                return ((string)(this["DVPGCAAD"]));
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/Properties/Settings.settings
﻿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="My" GeneratedClassName="MySettings" UseMySettingsClassName="true">
  <Profiles />
  <Settings>
    <Setting Name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" Type="(Web Service URL)" Scope="Application">
      <Value Profile="(Default)">http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</Value>
    </Setting>
  </Settings>
</SettingsFile>

// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/CIComumInterface.cs
﻿using System;
using System.Collections.Generic;
using System.Text;

namespace CIConfigGlobalParameters
{
    public interface CIComumInterface
    {
        void ErrorMessage(string sMessage);
        void WarningMessage(string sMessage);
        void InfoMessage(string sMessage, string sHeader);
        void InfoMessageCount(string sMessage);

    }
}


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/CIConfigGlobalParameters.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{775F4662-F2F6-4270-ADAD-531E54F2979F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIConfigGlobalParameters</RootNamespace>
    <AssemblyName>CIConfigGlobalParameters</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="CIComumInterface.cs" />
    <Compile Include="CIGlobalParameters.cs" />
    <Compile Include="CIMenuInterface.cs" />
    <Compile Include="ConvertImage.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="User.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/CIGlobalParameters.cs
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using NBiis.Generic;
using NBiis;

namespace CIConfigGP
{
    public class CIGlobalParameters : ConfigGlobalParameters
    {
        public CIConfigGP.User UserLogged;

        protected bool m_bServicoActivo;

        public int m_iTempoEntreIteracoesFicheiros;
        public int m_iTempoEntreIteracoes;
        public int m_iMaxDocsTranche;

        public string m_sSintaxFilesToImportENVM;
        public string m_sSintaxFilesToImportACOM;
        public string m_sFilePathENVM;
        public string m_sFilePathACOM;
        public string m_sFileBackupPath;
        public int m_iParagemHoraInicio;
        public int m_iParagemHoraFim;
        public int m_iParagemMinutoInicio;
        public int m_iParagemMinutoFim;
        public int m_iMaxDias;
        public int m_iMinDias;

        
        public int m_iHorasEsperaEnvm;
        public int m_iHorasEsperaRemessa;
        public int m_iParagemAlertaHoraInicio;
        public int m_iParagemAlertaMinutoInicio;
        public int m_iParagemAlertaHoraFim;
        public int m_iParagemAlertaMinutoFim;
        public int m_iPercentagemAlerta;
        public DateTime m_dtLastLoadParameters;

        public CIGlobalParameters()
            : base()
        {
            m_dtLastLoadParameters = DateTime.Now.AddMinutes(-6);
            LoadUser();
            LoadParameters();
        }

        public CIGlobalParameters(string sPrefixo)
            : base(sPrefixo)
        {
            m_dtLastLoadParameters = DateTime.Now.AddMinutes(-6);
            LoadUser();
            LoadParameters();
        }

        public virtual void LoadParameters()
        {
            if (m_dtLastLoadParameters.AddMinutes(5) > DateTime.Now)
            {
                return;
            }
            m_dtLastLoadParameters = DateTime.Now;

            m_sSintaxFilesToImportACOM = GetProfileString("Ficheiros", "Sintaxe", "ACOM", "acom.*");
            m_sSintaxFilesToImportENVM = GetProfileString("Ficheiros", "Sintaxe", "ENVM", "envm.*");
            m_sFilePathENVM = GetProfileString("Ficheiros", "PATHS", "ENVM", "c:\\tmp\\");
            m_sFilePathACOM = GetProfileString("Ficheiros", "PATHS", "ACOM", "c:\\tmp\\");
            m_sFileBackupPath = GetProfileString("Ficheiros", "PATHS", "Backup", "c:\\");

            LoadParametersVariaveis();
            
        }

        public virtual void LoadParametersVariaveis()
        {
            m_iTempoEntreIteracoesFicheiros = GetProfileInt("CI", "Tempos", "TempoEntreIteracoesFicheiros", 2);
            m_iTempoEntreIteracoes = GetProfileInt("CI", "Tempos", "TempoEntreIteracoes", 2);
            m_iMaxDocsTranche = GetProfileInt("CI", "Quantidades", "MaxDocsTranche", 10);
            m_iParagemHoraInicio = GetProfileInt("CI", "Paragem", "HoraInicio", 15);
            m_iParagemHoraFim = GetProfileInt("CI", "Paragem", "HoraFim", 16);
            m_iParagemMinutoInicio = GetProfileInt("CI", "Paragem", "MinutoInicio", 6);
            m_iParagemMinutoFim = GetProfileInt("CI", "Paragem", "MinutoFim", 7);
            m_iMaxDias = GetProfileInt("CI", "RemessaValida", "MaxDias", 7);
            m_iMinDias = GetProfileInt("CI", "RemessaValida", "MinDias", -30);
            m_iHorasEsperaEnvm = GetProfileInt("CI", "ALERTAS", "MaxHorasEsperaENVM", 2);
            m_iHorasEsperaRemessa = GetProfileInt("CI", "ALERTAS", "MaxHorasEsperaRemessaCI", 2);
            m_iParagemAlertaHoraInicio = GetProfileInt("CI", "ALERTAS", "HoraInicio", 15);
            m_iParagemAlertaHoraFim = GetProfileInt("CI", "ALERTAS", "HoraFim", 16);
            m_iParagemAlertaMinutoInicio = GetProfileInt("CI", "ALERTAS", "MinutoInicio", 6);
            m_iParagemAlertaMinutoFim = GetProfileInt("CI", "ALERTAS", "MinutoFim", 7);
            m_iPercentagemAlerta = GetProfileInt("CI", "ALERTAS", "ParamPercentagem", 1);
            //m_bServicoActivo = Convert.ToBoolean(GetProfileInt("CIServicos", "Control", "ServiçoON", 1);

            m_bServicoActivo = (GetProfileString("CIServicos", "Control", "ServiçoON", "1.0.0.0").CompareTo(System.Windows.Forms.Application.ProductVersion)<=0);
            //m_bServicoActivo = Convert.ToBoolean(GetProfileInt("CIServicos", System.Windows.Forms.Application.ProductVersion, "ServiçoON", 1));
            
        }


        //public void Para()//isto e para passar para o serviço
        //{
        //    if (HoradeParagem())
        //    {
        //        MessageBox.Show("PAROU", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //    }

        //}

        public bool HoradeParagem()
        {
            if (!m_bServicoActivo)
            {
                return true;
            }
           // LoadParametersVariaveis();
            DateTime dtInicioParagem = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, m_iParagemHoraInicio, m_iParagemMinutoInicio, 0);
            DateTime dtFimParagem = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, m_iParagemHoraFim, m_iParagemMinutoFim, 0);
            
            if (dtInicioParagem > dtFimParagem) //isto necessita de verificação 
            {
                if (dtInicioParagem < DateTime.Now)
                {
                    dtFimParagem = dtFimParagem.AddDays(+1);
                }

                if (dtFimParagem > DateTime.Now)
                {
                    dtInicioParagem = dtInicioParagem.AddDays(-1);
                }
            }


            return (DateTime.Now > dtInicioParagem && DateTime.Now < dtFimParagem);
        }

        protected virtual void LoadUser()
        {
            LoginName = System.Windows.Forms.SystemInformation.UserName;

            UserLogged = new User(this,LoginName);
        }

        public virtual void EnviarAlertaSituacao(int iSituacao, string sMensagem)
        {
            try
            {
                string sSPName = "dbo.Insert_Alerta";
                ArrayList oParam = new ArrayList();

                oParam.Add(new GeneralDBParameters("@SITUACAO_ID", iSituacao));
                oParam.Add(new GeneralDBParameters("@AL_TEXT", UserLogged.m_sUserName + ": " + sMensagem));

                DirectStoredProcedureNonQuery(sSPName, ref oParam);

            }
            catch
            { 
            }
        }

        public void InitGenericLog()
        {
            OpenConnection();
            IDbConnection oConn = DataBase;
            GenericLog.GenLogInicializacao(ref oConn, Sistema, Aplicativo, LoginName);
            GenericLog.RegistarApplicacaoLog();
            CloseConnection();
        }

        public string GetTempFileName(string sFixedPart)
        {
            string sTempFileName = Environment.GetEnvironmentVariable("temp");
            //sTempFileName += "\\" + Application.ProductName + "_" + sFixedPart + "_" + System.Threading.Thread.CurrentThread.ManagedThreadId.ToString() + "_" + DateTime.Now.Ticks.ToString() + "_";
            sTempFileName += "\\" + Application.ProductName + "_" + sFixedPart + "_" + System.Threading.Thread.CurrentThread.ManagedThreadId.ToString();
            return sTempFileName;
        }

    }
}


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/CIMenuInterface.cs
﻿
using System.Windows.Forms;

namespace CIConfigGlobalParameters
{
    public interface CIMenuInterface
    {
        Form GetMainForm();
        void alertasToolStripMenuItemEnable(bool bEnable);
        void processarEnvmEnable(bool bEnable);
        void processaAcomEnable(bool bEnable);
        void actividadesEnable(bool bEnable);
        void sacoEnable(bool bEnable);
        void actividadeBalcaoEnable(bool bEnable);
        void controloBalcaoAcoesEnable(bool bEnable);
        void consultasEnable(bool bEnable);
        void PesquisasEnable(bool bEnable);
        void balcoesEnable(bool bEnable);
        void utilizadoresEnable(bool bEnable);
        void configuracaoEnable(bool bEnable);
        void ControloMDIsFormMenuItemEnable(bool bEnable);
        void enablePesqFicheiroAcom(bool bEnable);
    }
}


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/ConvertImage.cs
﻿using System;
using System.Collections.Generic;
using System.Text;

using System.Runtime.InteropServices;

namespace CIConfigGlobalParameters
{
    public class ConvertImage
    {
        [DllImport("NBImageConverter.DLL")]
        unsafe static extern public bool ConvertJPEGToGrayScale(String sImageSource, String sImageDest, long lQualidade, long lDPI, long lContrast, long lBrightness);
        
        [DllImport("NBImageConverter.DLL")]
        unsafe static extern public String GetLastErrorMessage();

        public static void _ConvertJPEGToGrayScale(String sImageSource, String sImageDest, long lQualidade, long lDPI, long lContrast, long lBrightness)
        {
            if (!ConvertJPEGToGrayScale(sImageSource, sImageDest, lQualidade, lDPI, lContrast, lBrightness))
            {
                String sErro = GetLastErrorMessage();

                throw new Exception(sErro);
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/User.cs
﻿using System;
using System.Collections.Generic;
using System.Text;

using System.Data.SqlClient;

using NBiis.Generic;
using NBiis;

namespace CIConfigGP
{
    public class User
    {
        public string m_sUserName;
        public string m_sUserFullName;
        public string m_sGroupName;
        public int m_iUserGroup;

        private CIConfigGP.CIGlobalParameters m_oParameters;

        public User(SqlDataReader dr)
        {
            m_sUserName = Convert.ToString(dr["LOGIN_NAME"]);
            m_sUserFullName = Convert.ToString(dr["USER_FULLNAME"]);

            m_sGroupName = Convert.ToString(dr["GROUP_NAME"]);

            m_iUserGroup = Convert.ToInt16(dr["GROUP_ID"]);
        }

        public User(CIConfigGP.CIGlobalParameters oParameters, string sLoginName)
        {
            m_oParameters = oParameters;
            
            m_sUserName = sLoginName;
            m_sUserFullName = GetUserFullName(sLoginName);

           
            m_iUserGroup = GetUserGroup(sLoginName);
            m_sGroupName = GetGroupName(sLoginName);
        }

        public string GetUserFullName(string sLoginName)
        {
            try
            {
                string sUserFullName, sQuery;
                sQuery = "select USER_FULLNAME from VW_PASSWD_GROUP where LOGIN_NAME='" + sLoginName + "'";

                sUserFullName = (string)m_oParameters.DirectSqlScalar(sQuery);

                if (sUserFullName == null)
                {
                    return sLoginName;
                }

                return sUserFullName;
            }
            catch
            {
                return sLoginName;
            }
        }

      
        public int GetUserGroup(string sLoginName)
        {
            try
            {
                string sQuery;
                int iGroup;
                sQuery = "select GROUP_ID from VW_PASSWD_GROUP where LOGIN_NAME='" + sLoginName + "'";

                iGroup = (int)m_oParameters.DirectSqlScalar(sQuery);

                return iGroup;
            }
            catch
            {
                return 99;
            }
        }

       
        public string GetGroupName(string sLoginName)
        {
            try
            {
                string sGroupName, sQuery;
                sQuery = "select GROUP_NAME from VW_PASSWD_GROUP where LOGIN_NAME='" + sLoginName + "'";

                sGroupName = (string)m_oParameters.DirectSqlScalar(sQuery);

                if (sGroupName == null)
                {
                    return "guest";
                }

                return sGroupName;
            }
            catch
            {
                return "guest";
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIConfigGlobalParameters/app.config
<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="MDIWebTransmCI.My.MySettings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <system.diagnostics>
        <sources>
            <!-- This section defines the logging configuration for My.Application.Log -->
            <source name="DefaultSource" switchName="DefaultSwitch">
                <listeners>
                    <add name="FileLog"/>
                    <!-- Uncomment the below section to write to the Application Event Log -->
                    <!--<add name="EventLog"/>-->
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="DefaultSwitch" value="Information"/>
        </switches>
        <sharedListeners>
            <add name="FileLog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" initializeData="FileLogWriter"/>
            <!-- Uncomment the below section and replace APPLICATION_NAME with the name of your application to write to the Application Event Log -->
            <!--<add name="EventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="APPLICATION_NAME"/> -->
        </sharedListeners>
    </system.diagnostics>
    <applicationSettings>
        <MDIWebTransmCI.My.MySettings>
            <setting name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" serializeAs="String">
                <value>http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</value>
            </setting>
        </MDIWebTransmCI.My.MySettings>
    </applicationSettings>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>


// FILE: SDCIM/ModusCI/CIConfiguration/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIConfiguration/Properties/Resources.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryForm.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("QueryForm.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIConfiguration/Properties/Resources.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIConfiguration/Balcao.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace CIConfiguration
{
    public class Balcao
    {
        public string m_sPais;        // Default "PT"
        public int m_iBanco;          // Default 35
        public int m_iCodigo;
        public string m_sAbrev;
        public string m_sDescricao;
        public bool m_bEnviaFisicos;
        public bool m_bOperaDevolvidos;
        public int m_iOperacao;      // 0/1/2/3 - Nada a fazer/Insere/Apaga/Actualiza
        public string m_sOperacao;
        public int m_iEfectuado;      // 0/1 - Não Efectuado/Efectuado
        public DateTime m_dtTimer;
        public string m_sErro;
        public string m_sChaveWS;

        public Balcao()
        {
            m_sPais = "PT";
            m_iBanco = 35;
            m_iCodigo = -1;
            m_sAbrev = "";
            m_sDescricao = "";
            m_bEnviaFisicos = true;
            m_bOperaDevolvidos = false;
            m_iOperacao = 0;
            m_iEfectuado = 0;
            m_dtTimer = DateTime.Now;
            m_sErro = "";
            m_sOperacao = "";
            m_sChaveWS = "";
        }

        public Balcao(SqlDataReader dr)
        {
            m_sPais             = Convert.ToString(dr["BALCAO_PAIS"]);
            m_iBanco            = Convert.ToInt16(dr["BALCAO_BANCO"]);
            m_iCodigo           = Convert.ToInt16(dr["BALCAO_CODIGO"]);
            m_sAbrev            = Convert.ToString(dr["BALCAO_ABR"]);
            m_sDescricao        = Convert.ToString(dr["BALCAO_DESC"]);
            m_bEnviaFisicos     = Convert.ToBoolean(dr["BALCAO_ENVFISICOS"]);
            m_bOperaDevolvidos  = Convert.ToBoolean(dr["BALCAO_OPERDEVOLV"]);
            m_iOperacao         = Convert.ToInt16(dr["BALCAO_OPERACAO"]);
            m_sOperacao         = Convert.ToString(dr["OPERACAO_ABR"]);
            m_iEfectuado        = Convert.ToInt16(dr["BALCAO_EFECTUADO"]);
            m_dtTimer           = Convert.ToDateTime(dr["BALCAO_TIMER"]);
            m_sErro = Convert.ToString(dr["BALCAO_ERRO"]);
            m_sChaveWS = Convert.ToString(dr["CHAVE_WEBSERVICE"]);
        }

        //public Balcao(string sPais,
        //                int iBanco,
        //                int iCodigo,
        //                string sAbrev,
        //                string sDescricao,
        //                bool bEnviaFisicos,
        //                bool bOperaDevolvidos,
        //                int iOperacao,
        //                string sOperacao,
        //                int iEfectuado,
        //                DateTime dtTimer,
        //                string sErro)
        //{
        //    m_sPais = sPais;
        //    m_iBanco = iBanco;
        //    m_iCodigo = iCodigo;
        //    m_sAbrev = sAbrev;
        //    m_sDescricao = sDescricao;
        //    m_bEnviaFisicos = bEnviaFisicos;
        //    m_bOperaDevolvidos = bOperaDevolvidos;
        //    m_iOperacao = iOperacao;
        //    m_sOperacao = sOperacao;
        //    m_iEfectuado = iEfectuado;
        //    m_dtTimer = dtTimer;
        //    m_sErro = sErro;
        //}

        public ListViewItem MakeListViewItemBalcao(string sDateTimeSysFmt)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = m_sPais;
            olvItem.SubItems.Add(m_iBanco.ToString());
            olvItem.SubItems.Add(m_iCodigo.ToString("0000"));
            olvItem.SubItems.Add(m_sAbrev);
            olvItem.SubItems.Add(m_sDescricao);
            olvItem.SubItems.Add(m_bEnviaFisicos.ToString());
            olvItem.SubItems.Add(m_bOperaDevolvidos.ToString());
            olvItem.SubItems.Add(m_sOperacao);
            olvItem.SubItems.Add(m_iEfectuado.ToString());
            olvItem.SubItems.Add(m_dtTimer.ToString(sDateTimeSysFmt));
            olvItem.SubItems.Add(m_sErro);
            olvItem.SubItems.Add(m_sChaveWS);

            return olvItem;
        }
    }
}


// FILE: SDCIM/ModusCI/CIConfiguration/BalcaoForm.Designer.cs
﻿using NBIISNET;

namespace CIConfiguration
{
    partial class BalcaoForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.balcoesEnable(true);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BalcaoForm));
            this.listViewBalcoes = new NBIISNET.ListViewBase();
            this.columnHeader15 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader21 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader18 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader20 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader6 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader7 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader13 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripBalcao = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripInserir = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripActualizar = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripSeparator();
            this.pendenteToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.efectuadoToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.btInsertBalcao = new System.Windows.Forms.Button();
            this.btUpdateBalcao = new System.Windows.Forms.Button();
            this.btRefresh = new System.Windows.Forms.Button();
            this.listViewMaquinas = new NBIISNET.ListViewBase();
            this.columnHeader8 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader9 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader10 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader11 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader12 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader16 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader17 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader19 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader22 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader14 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuMaquina = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripInserirMaquina = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripActualizarMaquina = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem2 = new System.Windows.Forms.ToolStripSeparator();
            this.pendenteToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.efectuadoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.textBoxBalcao = new System.Windows.Forms.TextBox();
            this.comboBoxPaisBanco = new System.Windows.Forms.ComboBox();
            this.textBoxAbrv = new System.Windows.Forms.TextBox();
            this.textBoxDescricao = new System.Windows.Forms.TextBox();
            this.textBoxMaqSeqBalcao = new System.Windows.Forms.TextBox();
            this.textBoxMaqModelo = new System.Windows.Forms.TextBox();
            this.textBoxMaqIQA = new System.Windows.Forms.TextBox();
            this.comboBoxFisicos = new System.Windows.Forms.ComboBox();
            this.comboBoxDevolvidos = new System.Windows.Forms.ComboBox();
            this.btInsertMaq = new System.Windows.Forms.Button();
            this.btUpdateMaq = new System.Windows.Forms.Button();
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.buttonExitJanela = new System.Windows.Forms.Button();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.label8 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.label10 = new System.Windows.Forms.Label();
            this.label9 = new System.Windows.Forms.Label();
            this.btnLimparMaquina = new System.Windows.Forms.Button();
            this.btnPesquisar = new System.Windows.Forms.Button();
            this.txtBalcao = new System.Windows.Forms.TextBox();
            this.lblBalcão = new System.Windows.Forms.Label();
            this.btnLimparBalcao = new System.Windows.Forms.Button();
            this.contextMenuStripBalcao.SuspendLayout();
            this.contextMenuMaquina.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            this.SuspendLayout();
            // 
            // listViewBalcoes
            // 
            this.listViewBalcoes.AllowColumnReorder = true;
            this.listViewBalcoes.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewBalcoes.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader15,
            this.columnHeader21,
            this.columnHeader18,
            this.columnHeader20,
            this.columnHeader1,
            this.columnHeader2,
            this.columnHeader3,
            this.columnHeader4,
            this.columnHeader5,
            this.columnHeader6,
            this.columnHeader7,
            this.columnHeader13});
            this.listViewBalcoes.ContextMenuStrip = this.contextMenuStripBalcao;
            this.listViewBalcoes.EnableExportar = true;
            this.listViewBalcoes.FullRowSelect = true;
            this.listViewBalcoes.GridLines = true;
            this.listViewBalcoes.HideSelection = false;
            this.listViewBalcoes.Location = new System.Drawing.Point(3, 16);
            this.listViewBalcoes.MultiSelect = false;
            this.listViewBalcoes.Name = "listViewBalcoes";
            this.listViewBalcoes.Size = new System.Drawing.Size(1019, 153);
            this.listViewBalcoes.TabIndex = 9;
            this.listViewBalcoes.TabStop = false;
            this.listViewBalcoes.UseCompatibleStateImageBehavior = false;
            this.listViewBalcoes.View = System.Windows.Forms.View.Details;
            this.listViewBalcoes.SelectedIndexChanged += new System.EventHandler(this.listViewBalcoes_SelectedIndexChanged);
            // 
            // columnHeader15
            // 
            this.columnHeader15.Text = "País";
            this.columnHeader15.Width = 42;
            // 
            // columnHeader21
            // 
            this.columnHeader21.Text = "Banco";
            this.columnHeader21.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader21.Width = 52;
            // 
            // columnHeader18
            // 
            this.columnHeader18.Text = "Balcão";
            this.columnHeader18.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader18.Width = 51;
            // 
            // columnHeader20
            // 
            this.columnHeader20.Text = "Abrev";
            this.columnHeader20.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader20.Width = 93;
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Descrição";
            this.columnHeader1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader1.Width = 155;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Fisicos";
            this.columnHeader2.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader2.Width = 69;
            // 
            // columnHeader3
            // 
            this.columnHeader3.Text = "Devolvidos";
            this.columnHeader3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader3.Width = 70;
            // 
            // columnHeader4
            // 
            this.columnHeader4.Text = "Operação";
            this.columnHeader4.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader4.Width = 85;
            // 
            // columnHeader5
            // 
            this.columnHeader5.Text = "Efectuado";
            this.columnHeader5.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader5.Width = 66;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "Timer";
            this.columnHeader6.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader6.Width = 160;
            // 
            // columnHeader7
            // 
            this.columnHeader7.Text = "Erro";
            this.columnHeader7.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader7.Width = 120;
            // 
            // columnHeader13
            // 
            this.columnHeader13.Text = "ChaveWS";
            // 
            // contextMenuStripBalcao
            // 
            this.contextMenuStripBalcao.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripInserir,
            this.toolStripActualizar,
            this.toolStripMenuItem1,
            this.pendenteToolStripMenuItem1,
            this.efectuadoToolStripMenuItem1});
            this.contextMenuStripBalcao.Name = "contextMenuStripBalcao";
            this.contextMenuStripBalcao.Size = new System.Drawing.Size(128, 98);
            // 
            // toolStripInserir
            // 
            this.toolStripInserir.Name = "toolStripInserir";
            this.toolStripInserir.Size = new System.Drawing.Size(127, 22);
            this.toolStripInserir.Text = "Inserir";
            this.toolStripInserir.Click += new System.EventHandler(this.toolStripInserir_Click);
            // 
            // toolStripActualizar
            // 
            this.toolStripActualizar.Name = "toolStripActualizar";
            this.toolStripActualizar.Size = new System.Drawing.Size(127, 22);
            this.toolStripActualizar.Text = "Actualizar";
            this.toolStripActualizar.Click += new System.EventHandler(this.toolStripActualizar_Click);
            // 
            // toolStripMenuItem1
            // 
            this.toolStripMenuItem1.Name = "toolStripMenuItem1";
            this.toolStripMenuItem1.Size = new System.Drawing.Size(124, 6);
            // 
            // pendenteToolStripMenuItem1
            // 
            this.pendenteToolStripMenuItem1.Name = "pendenteToolStripMenuItem1";
            this.pendenteToolStripMenuItem1.Size = new System.Drawing.Size(127, 22);
            this.pendenteToolStripMenuItem1.Text = "Pendente";
            this.pendenteToolStripMenuItem1.Click += new System.EventHandler(this.pendenteToolStripMenuItem1_Click);
            // 
            // efectuadoToolStripMenuItem1
            // 
            this.efectuadoToolStripMenuItem1.Name = "efectuadoToolStripMenuItem1";
            this.efectuadoToolStripMenuItem1.Size = new System.Drawing.Size(127, 22);
            this.efectuadoToolStripMenuItem1.Text = "Efectuado";
            this.efectuadoToolStripMenuItem1.Click += new System.EventHandler(this.efectuadoToolStripMenuItem1_Click);
            // 
            // btInsertBalcao
            // 
            this.btInsertBalcao.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.btInsertBalcao.Location = new System.Drawing.Point(745, 186);
            this.btInsertBalcao.Name = "btInsertBalcao";
            this.btInsertBalcao.Size = new System.Drawing.Size(75, 23);
            this.btInsertBalcao.TabIndex = 7;
            this.btInsertBalcao.Text = "Inserir";
            this.btInsertBalcao.UseVisualStyleBackColor = true;
            this.btInsertBalcao.Click += new System.EventHandler(this.btInsert_Click);
            // 
            // btUpdateBalcao
            // 
            this.btUpdateBalcao.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.btUpdateBalcao.Location = new System.Drawing.Point(826, 186);
            this.btUpdateBalcao.Name = "btUpdateBalcao";
            this.btUpdateBalcao.Size = new System.Drawing.Size(75, 23);
            this.btUpdateBalcao.TabIndex = 8;
            this.btUpdateBalcao.Text = "Actualizar";
            this.btUpdateBalcao.UseVisualStyleBackColor = true;
            this.btUpdateBalcao.Click += new System.EventHandler(this.btUpdate_Click);
            // 
            // btRefresh
            // 
            this.btRefresh.Image = ((System.Drawing.Image)(resources.GetObject("btRefresh.Image")));
            this.btRefresh.Location = new System.Drawing.Point(13, 12);
            this.btRefresh.Name = "btRefresh";
            this.btRefresh.Size = new System.Drawing.Size(49, 45);
            this.btRefresh.TabIndex = 14;
            this.toolTip1.SetToolTip(this.btRefresh, "Refresh");
            this.btRefresh.UseVisualStyleBackColor = true;
            this.btRefresh.Click += new System.EventHandler(this.btRefresh_Click);
            // 
            // listViewMaquinas
            // 
            this.listViewMaquinas.AllowColumnReorder = true;
            this.listViewMaquinas.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewMaquinas.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader8,
            this.columnHeader9,
            this.columnHeader10,
            this.columnHeader11,
            this.columnHeader12,
            this.columnHeader16,
            this.columnHeader17,
            this.columnHeader19,
            this.columnHeader22,
            this.columnHeader14});
            this.listViewMaquinas.ContextMenuStrip = this.contextMenuMaquina;
            this.listViewMaquinas.EnableExportar = true;
            this.listViewMaquinas.FullRowSelect = true;
            this.listViewMaquinas.GridLines = true;
            this.listViewMaquinas.HideSelection = false;
            this.listViewMaquinas.Location = new System.Drawing.Point(3, 17);
            this.listViewMaquinas.MultiSelect = false;
            this.listViewMaquinas.Name = "listViewMaquinas";
            this.listViewMaquinas.Size = new System.Drawing.Size(1019, 193);
            this.listViewMaquinas.TabIndex = 14;
            this.listViewMaquinas.TabStop = false;
            this.listViewMaquinas.UseCompatibleStateImageBehavior = false;
            this.listViewMaquinas.View = System.Windows.Forms.View.Details;
            this.listViewMaquinas.SelectedIndexChanged += new System.EventHandler(this.listViewMaquinas_SelectedIndexChanged);
            // 
            // columnHeader8
            // 
            this.columnHeader8.Text = "MaqID";
            this.columnHeader8.Width = 52;
            // 
            // columnHeader9
            // 
            this.columnHeader9.Text = "País/Banco/Balcão";
            this.columnHeader9.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader9.Width = 115;
            // 
            // columnHeader10
            // 
            this.columnHeader10.Text = "SeqBalcão";
            this.columnHeader10.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader10.Width = 70;
            // 
            // columnHeader11
            // 
            this.columnHeader11.Text = "Modelo";
            this.columnHeader11.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader11.Width = 61;
            // 
            // columnHeader12
            // 
            this.columnHeader12.Text = "IQA";
            this.columnHeader12.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader12.Width = 42;
            // 
            // columnHeader16
            // 
            this.columnHeader16.Text = "Operação";
            this.columnHeader16.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader16.Width = 66;
            // 
            // columnHeader17
            // 
            this.columnHeader17.Text = "Efectuado";
            this.columnHeader17.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader17.Width = 66;
            // 
            // columnHeader19
            // 
            this.columnHeader19.Text = "Timer";
            this.columnHeader19.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader19.Width = 105;
            // 
            // columnHeader22
            // 
            this.columnHeader22.Text = "Erro";
            this.columnHeader22.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader22.Width = 312;
            // 
            // columnHeader14
            // 
            this.columnHeader14.Text = "ChaveWS";
            // 
            // contextMenuMaquina
            // 
            this.contextMenuMaquina.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripInserirMaquina,
            this.toolStripActualizarMaquina,
            this.toolStripMenuItem2,
            this.pendenteToolStripMenuItem,
            this.efectuadoToolStripMenuItem});
            this.contextMenuMaquina.Name = "contextMenuStripBalcao";
            this.contextMenuMaquina.Size = new System.Drawing.Size(128, 98);
            // 
            // toolStripInserirMaquina
            // 
            this.toolStripInserirMaquina.Name = "toolStripInserirMaquina";
            this.toolStripInserirMaquina.Size = new System.Drawing.Size(127, 22);
            this.toolStripInserirMaquina.Text = "Inserir";
            this.toolStripInserirMaquina.Click += new System.EventHandler(this.toolStripInserirMaquina_Click);
            // 
            // toolStripActualizarMaquina
            // 
            this.toolStripActualizarMaquina.Name = "toolStripActualizarMaquina";
            this.toolStripActualizarMaquina.Size = new System.Drawing.Size(127, 22);
            this.toolStripActualizarMaquina.Text = "Actualizar";
            this.toolStripActualizarMaquina.Click += new System.EventHandler(this.toolStripActualizarMaquina_Click);
            // 
            // toolStripMenuItem2
            // 
            this.toolStripMenuItem2.Name = "toolStripMenuItem2";
            this.toolStripMenuItem2.Size = new System.Drawing.Size(124, 6);
            // 
            // pendenteToolStripMenuItem
            // 
            this.pendenteToolStripMenuItem.Name = "pendenteToolStripMenuItem";
            this.pendenteToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.pendenteToolStripMenuItem.Text = "Pendente";
            this.pendenteToolStripMenuItem.Click += new System.EventHandler(this.pendenteToolStripMenuItem_Click);
            // 
            // efectuadoToolStripMenuItem
            // 
            this.efectuadoToolStripMenuItem.Name = "efectuadoToolStripMenuItem";
            this.efectuadoToolStripMenuItem.Size = new System.Drawing.Size(127, 22);
            this.efectuadoToolStripMenuItem.Text = "Efectuado";
            this.efectuadoToolStripMenuItem.Click += new System.EventHandler(this.efectuadoToolStripMenuItem_Click);
            // 
            // textBoxBalcao
            // 
            this.textBoxBalcao.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBoxBalcao.Location = new System.Drawing.Point(103, 188);
            this.textBoxBalcao.MaxLength = 4;
            this.textBoxBalcao.Name = "textBoxBalcao";
            this.textBoxBalcao.Size = new System.Drawing.Size(45, 20);
            this.textBoxBalcao.TabIndex = 2;
            this.toolTip1.SetToolTip(this.textBoxBalcao, "Balcão");
            // 
            // comboBoxPaisBanco
            // 
            this.comboBoxPaisBanco.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.comboBoxPaisBanco.Enabled = false;
            this.comboBoxPaisBanco.FormattingEnabled = true;
            this.comboBoxPaisBanco.Location = new System.Drawing.Point(9, 187);
            this.comboBoxPaisBanco.Name = "comboBoxPaisBanco";
            this.comboBoxPaisBanco.Size = new System.Drawing.Size(88, 21);
            this.comboBoxPaisBanco.TabIndex = 1;
            this.toolTip1.SetToolTip(this.comboBoxPaisBanco, "Pais - Banco");
            // 
            // textBoxAbrv
            // 
            this.textBoxAbrv.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBoxAbrv.Location = new System.Drawing.Point(154, 188);
            this.textBoxAbrv.MaxLength = 50;
            this.textBoxAbrv.Name = "textBoxAbrv";
            this.textBoxAbrv.Size = new System.Drawing.Size(147, 20);
            this.textBoxAbrv.TabIndex = 3;
            this.toolTip1.SetToolTip(this.textBoxAbrv, "Balcão abreviatura");
            // 
            // textBoxDescricao
            // 
            this.textBoxDescricao.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBoxDescricao.Location = new System.Drawing.Point(307, 188);
            this.textBoxDescricao.MaxLength = 128;
            this.textBoxDescricao.Name = "textBoxDescricao";
            this.textBoxDescricao.Size = new System.Drawing.Size(302, 20);
            this.textBoxDescricao.TabIndex = 4;
            this.toolTip1.SetToolTip(this.textBoxDescricao, "Descrição balcão");
            // 
            // textBoxMaqSeqBalcao
            // 
            this.textBoxMaqSeqBalcao.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBoxMaqSeqBalcao.Location = new System.Drawing.Point(9, 229);
            this.textBoxMaqSeqBalcao.Name = "textBoxMaqSeqBalcao";
            this.textBoxMaqSeqBalcao.Size = new System.Drawing.Size(68, 20);
            this.textBoxMaqSeqBalcao.TabIndex = 9;
            this.toolTip1.SetToolTip(this.textBoxMaqSeqBalcao, "Sequencia Balcão");
            this.textBoxMaqSeqBalcao.ReadOnlyChanged += new System.EventHandler(this.listViewBalcoes_SelectedIndexChanged);
            // 
            // textBoxMaqModelo
            // 
            this.textBoxMaqModelo.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBoxMaqModelo.Location = new System.Drawing.Point(83, 229);
            this.textBoxMaqModelo.Name = "textBoxMaqModelo";
            this.textBoxMaqModelo.Size = new System.Drawing.Size(56, 20);
            this.textBoxMaqModelo.TabIndex = 10;
            this.toolTip1.SetToolTip(this.textBoxMaqModelo, "Modelo");
            // 
            // textBoxMaqIQA
            // 
            this.textBoxMaqIQA.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.textBoxMaqIQA.Location = new System.Drawing.Point(145, 229);
            this.textBoxMaqIQA.Name = "textBoxMaqIQA";
            this.textBoxMaqIQA.Size = new System.Drawing.Size(39, 20);
            this.textBoxMaqIQA.TabIndex = 11;
            this.toolTip1.SetToolTip(this.textBoxMaqIQA, "IQA");
            // 
            // comboBoxFisicos
            // 
            this.comboBoxFisicos.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.comboBoxFisicos.Enabled = false;
            this.comboBoxFisicos.FormattingEnabled = true;
            this.comboBoxFisicos.Items.AddRange(new object[] {
            "TRUE",
            "FALSE"});
            this.comboBoxFisicos.Location = new System.Drawing.Point(615, 187);
            this.comboBoxFisicos.Name = "comboBoxFisicos";
            this.comboBoxFisicos.Size = new System.Drawing.Size(61, 21);
            this.comboBoxFisicos.TabIndex = 5;
            this.comboBoxFisicos.Text = "TRUE";
            this.toolTip1.SetToolTip(this.comboBoxFisicos, "Fisicos");
            // 
            // comboBoxDevolvidos
            // 
            this.comboBoxDevolvidos.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.comboBoxDevolvidos.Enabled = false;
            this.comboBoxDevolvidos.FormattingEnabled = true;
            this.comboBoxDevolvidos.Items.AddRange(new object[] {
            "TRUE",
            "FALSE"});
            this.comboBoxDevolvidos.Location = new System.Drawing.Point(682, 187);
            this.comboBoxDevolvidos.Name = "comboBoxDevolvidos";
            this.comboBoxDevolvidos.Size = new System.Drawing.Size(57, 21);
            this.comboBoxDevolvidos.TabIndex = 6;
            this.comboBoxDevolvidos.Text = "FALSE";
            this.toolTip1.SetToolTip(this.comboBoxDevolvidos, "Devolvidos");
            // 
            // btInsertMaq
            // 
            this.btInsertMaq.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.btInsertMaq.Location = new System.Drawing.Point(190, 227);
            this.btInsertMaq.Name = "btInsertMaq";
            this.btInsertMaq.Size = new System.Drawing.Size(75, 23);
            this.btInsertMaq.TabIndex = 12;
            this.btInsertMaq.Text = "Inserir";
            this.btInsertMaq.UseVisualStyleBackColor = true;
            this.btInsertMaq.Click += new System.EventHandler(this.btInsertMaq_Click);
            // 
            // btUpdateMaq
            // 
            this.btUpdateMaq.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.btUpdateMaq.Location = new System.Drawing.Point(271, 227);
            this.btUpdateMaq.Name = "btUpdateMaq";
            this.btUpdateMaq.Size = new System.Drawing.Size(75, 23);
            this.btUpdateMaq.TabIndex = 13;
            this.btUpdateMaq.Text = "Actualizar";
            this.btUpdateMaq.UseVisualStyleBackColor = true;
            this.btUpdateMaq.Click += new System.EventHandler(this.btUpdateMaq_Click);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(3, 0);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(52, 13);
            this.label1.TabIndex = 41;
            this.label1.Text = "Balcões";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label2.Location = new System.Drawing.Point(3, 1);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(61, 13);
            this.label2.TabIndex = 42;
            this.label2.Text = "Máquinas";
            // 
            // buttonExitJanela
            // 
            this.buttonExitJanela.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.buttonExitJanela.Image = ((System.Drawing.Image)(resources.GetObject("buttonExitJanela.Image")));
            this.buttonExitJanela.Location = new System.Drawing.Point(968, 12);
            this.buttonExitJanela.Name = "buttonExitJanela";
            this.buttonExitJanela.Size = new System.Drawing.Size(52, 45);
            this.buttonExitJanela.TabIndex = 15;
            this.buttonExitJanela.UseVisualStyleBackColor = true;
            this.buttonExitJanela.Click += new System.EventHandler(this.buttonExitJanela_Click);
            // 
            // splitContainer1
            // 
            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer1.Location = new System.Drawing.Point(4, 63);
            this.splitContainer1.Name = "splitContainer1";
            this.splitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.label8);
            this.splitContainer1.Panel1.Controls.Add(this.label7);
            this.splitContainer1.Panel1.Controls.Add(this.label6);
            this.splitContainer1.Panel1.Controls.Add(this.label5);
            this.splitContainer1.Panel1.Controls.Add(this.label4);
            this.splitContainer1.Panel1.Controls.Add(this.label3);
            this.splitContainer1.Panel1.Controls.Add(this.listViewBalcoes);
            this.splitContainer1.Panel1.Controls.Add(this.label1);
            this.splitContainer1.Panel1.Controls.Add(this.textBoxDescricao);
            this.splitContainer1.Panel1.Controls.Add(this.btInsertBalcao);
            this.splitContainer1.Panel1.Controls.Add(this.btUpdateBalcao);
            this.splitContainer1.Panel1.Controls.Add(this.textBoxBalcao);
            this.splitContainer1.Panel1.Controls.Add(this.comboBoxPaisBanco);
            this.splitContainer1.Panel1.Controls.Add(this.comboBoxDevolvidos);
            this.splitContainer1.Panel1.Controls.Add(this.textBoxAbrv);
            this.splitContainer1.Panel1.Controls.Add(this.comboBoxFisicos);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.label11);
            this.splitContainer1.Panel2.Controls.Add(this.label10);
            this.splitContainer1.Panel2.Controls.Add(this.label9);
            this.splitContainer1.Panel2.Controls.Add(this.btnLimparMaquina);
            this.splitContainer1.Panel2.Controls.Add(this.listViewMaquinas);
            this.splitContainer1.Panel2.Controls.Add(this.label2);
            this.splitContainer1.Panel2.Controls.Add(this.btUpdateMaq);
            this.splitContainer1.Panel2.Controls.Add(this.textBoxMaqSeqBalcao);
            this.splitContainer1.Panel2.Controls.Add(this.textBoxMaqModelo);
            this.splitContainer1.Panel2.Controls.Add(this.btInsertMaq);
            this.splitContainer1.Panel2.Controls.Add(this.textBoxMaqIQA);
            this.splitContainer1.Size = new System.Drawing.Size(1025, 471);
            this.splitContainer1.SplitterDistance = 215;
            this.splitContainer1.TabIndex = 43;
            // 
            // label8
            // 
            this.label8.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(679, 172);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(60, 13);
            this.label8.TabIndex = 47;
            this.label8.Text = "Devolvidos";
            // 
            // label7
            // 
            this.label7.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(612, 172);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(41, 13);
            this.label7.TabIndex = 46;
            this.label7.Text = "Físicos";
            // 
            // label6
            // 
            this.label6.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(304, 172);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(55, 13);
            this.label6.TabIndex = 45;
            this.label6.Text = "Descrição";
            // 
            // label5
            // 
            this.label5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(154, 172);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(38, 13);
            this.label5.TabIndex = 44;
            this.label5.Text = "Abrev.";
            // 
            // label4
            // 
            this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(103, 172);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(40, 13);
            this.label4.TabIndex = 43;
            this.label4.Text = "Balcão";
            // 
            // label3
            // 
            this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(8, 172);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(69, 13);
            this.label3.TabIndex = 42;
            this.label3.Text = "País - Banco";
            // 
            // label11
            // 
            this.label11.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(142, 213);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(25, 13);
            this.label11.TabIndex = 52;
            this.label11.Text = "IQA";
            // 
            // label10
            // 
            this.label10.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(80, 213);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(42, 13);
            this.label10.TabIndex = 51;
            this.label10.Text = "Modelo";
            // 
            // label9
            // 
            this.label9.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(8, 213);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(65, 13);
            this.label9.TabIndex = 50;
            this.label9.Text = "Seq. Balcão";
            // 
            // btnLimparMaquina
            // 
            this.btnLimparMaquina.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.btnLimparMaquina.Location = new System.Drawing.Point(352, 227);
            this.btnLimparMaquina.Name = "btnLimparMaquina";
            this.btnLimparMaquina.Size = new System.Drawing.Size(75, 23);
            this.btnLimparMaquina.TabIndex = 49;
            this.btnLimparMaquina.Text = "Limpar";
            this.btnLimparMaquina.UseVisualStyleBackColor = true;
            this.btnLimparMaquina.Click += new System.EventHandler(this.btnLimparMaquina_Click);
            // 
            // btnPesquisar
            // 
            this.btnPesquisar.Location = new System.Drawing.Point(158, 27);
            this.btnPesquisar.Name = "btnPesquisar";
            this.btnPesquisar.Size = new System.Drawing.Size(75, 22);
            this.btnPesquisar.TabIndex = 44;
            this.btnPesquisar.Text = "Pesquisar";
            this.btnPesquisar.UseVisualStyleBackColor = true;
            this.btnPesquisar.Click += new System.EventHandler(this.btnPesquisar_Click);
            // 
            // txtBalcao
            // 
            this.txtBalcao.Location = new System.Drawing.Point(114, 27);
            this.txtBalcao.MaxLength = 4;
            this.txtBalcao.Name = "txtBalcao";
            this.txtBalcao.Size = new System.Drawing.Size(38, 20);
            this.txtBalcao.TabIndex = 45;
            this.txtBalcao.TextChanged += new System.EventHandler(this.txtBalcao_TextChanged);
            this.txtBalcao.Leave += new System.EventHandler(this.txtBalcao_Leave);
            // 
            // lblBalcão
            // 
            this.lblBalcão.AutoSize = true;
            this.lblBalcão.Location = new System.Drawing.Point(68, 32);
            this.lblBalcão.Name = "lblBalcão";
            this.lblBalcão.Size = new System.Drawing.Size(40, 13);
            this.lblBalcão.TabIndex = 46;
            this.lblBalcão.Text = "Balcão";
            // 
            // btnLimparBalcao
            // 
            this.btnLimparBalcao.Location = new System.Drawing.Point(239, 27);
            this.btnLimparBalcao.Name = "btnLimparBalcao";
            this.btnLimparBalcao.Size = new System.Drawing.Size(75, 22);
            this.btnLimparBalcao.TabIndex = 48;
            this.btnLimparBalcao.Text = "Limpar";
            this.btnLimparBalcao.UseVisualStyleBackColor = true;
            this.btnLimparBalcao.Click += new System.EventHandler(this.btnLimparBalcao_Click);
            // 
            // BalcaoForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1032, 539);
            this.Controls.Add(this.btnLimparBalcao);
            this.Controls.Add(this.lblBalcão);
            this.Controls.Add(this.txtBalcao);
            this.Controls.Add(this.btnPesquisar);
            this.Controls.Add(this.splitContainer1);
            this.Controls.Add(this.buttonExitJanela);
            this.Controls.Add(this.btRefresh);
            this.DoubleBuffered = true;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "BalcaoForm";
            this.ShowInTaskbar = false;
            this.Text = "Configuração de Balcões/ Máquinas";
            this.Load += new System.EventHandler(this.BalcaoForm_Load);
            this.contextMenuStripBalcao.ResumeLayout(false);
            this.contextMenuMaquina.ResumeLayout(false);
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel1.PerformLayout();
            this.splitContainer1.Panel2.ResumeLayout(false);
            this.splitContainer1.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
            this.splitContainer1.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion
        
        //public System.Windows.Forms.ListView listViewBalcoes;
        public NBIISNET.ListViewBase listViewBalcoes;
        private System.Windows.Forms.ColumnHeader columnHeader15;
        private System.Windows.Forms.ColumnHeader columnHeader21;
        private System.Windows.Forms.ColumnHeader columnHeader18;
        private System.Windows.Forms.ColumnHeader columnHeader20;
        private System.Windows.Forms.Button btInsertBalcao;
        private System.Windows.Forms.Button btUpdateBalcao;
        private System.Windows.Forms.Button btRefresh;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.ColumnHeader columnHeader3;
        private System.Windows.Forms.ColumnHeader columnHeader4;
        private System.Windows.Forms.ColumnHeader columnHeader5;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.ColumnHeader columnHeader7;
        //private System.Windows.Forms.ListView listViewMaquinas;
        NBIISNET.ListViewBase listViewMaquinas;
        private System.Windows.Forms.ColumnHeader columnHeader8;
        private System.Windows.Forms.ColumnHeader columnHeader9;
        private System.Windows.Forms.ColumnHeader columnHeader10;
        private System.Windows.Forms.ColumnHeader columnHeader11;
        private System.Windows.Forms.ColumnHeader columnHeader12;
        private System.Windows.Forms.ColumnHeader columnHeader16;
        private System.Windows.Forms.ColumnHeader columnHeader17;
        private System.Windows.Forms.ColumnHeader columnHeader19;
        private System.Windows.Forms.ColumnHeader columnHeader22;
        private System.Windows.Forms.TextBox textBoxBalcao;
        private System.Windows.Forms.ComboBox comboBoxPaisBanco;
        private System.Windows.Forms.TextBox textBoxAbrv;
        private System.Windows.Forms.TextBox textBoxDescricao;
        private System.Windows.Forms.TextBox textBoxMaqSeqBalcao;
        private System.Windows.Forms.TextBox textBoxMaqModelo;
        private System.Windows.Forms.TextBox textBoxMaqIQA;
        private System.Windows.Forms.ComboBox comboBoxFisicos;
        private System.Windows.Forms.ComboBox comboBoxDevolvidos;
        private System.Windows.Forms.Button btInsertMaq;
        private System.Windows.Forms.Button btUpdateMaq;
        private System.Windows.Forms.ToolTip toolTip1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Button buttonExitJanela;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripBalcao;
        private System.Windows.Forms.ToolStripMenuItem toolStripInserir;
        private System.Windows.Forms.ToolStripMenuItem toolStripActualizar;
        private System.Windows.Forms.ContextMenuStrip contextMenuMaquina;
        private System.Windows.Forms.ToolStripMenuItem toolStripInserirMaquina;
        private System.Windows.Forms.ToolStripMenuItem toolStripActualizarMaquina;
        private System.Windows.Forms.ToolStripMenuItem pendenteToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem efectuadoToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem pendenteToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem efectuadoToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem1;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem2;
        private System.Windows.Forms.ColumnHeader columnHeader13;
        private System.Windows.Forms.ColumnHeader columnHeader14;
        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.Button btnPesquisar;
        private System.Windows.Forms.TextBox txtBalcao;
        private System.Windows.Forms.Label lblBalcão;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Button btnLimparBalcao;
        private System.Windows.Forms.Button btnLimparMaquina;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label label9;
    }
}

// FILE: SDCIM/ModusCI/CIConfiguration/BalcaoForm.cs
﻿using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;
using NBiis;
using NBiis.Generic;

namespace CIConfiguration
{
    public partial class BalcaoForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        Balcao m_oCurrBalcao;
        Maquina m_oCurrMaquina;
        ArrayList m_oParam;
        string m_sPais, m_sBanco;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;


        public BalcaoForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oCurrBalcao = new Balcao();
            m_oCurrMaquina = new Maquina();
            m_oParam = new ArrayList();
            m_oMenuInterface = oMenuInterface;
        }

        private void AddBalcao2ListView(SqlDataReader dr)
        {
            Balcao oBalcao = new Balcao(dr);

            ListViewItem olvItem = oBalcao.MakeListViewItemBalcao(m_oParameters.DateTimeSysFmt);

            olvItem.Tag = oBalcao;

            listViewBalcoes.Items.Add(olvItem);
        }

        private void AddMaquina2ListView(SqlDataReader dr)
        {
            Maquina oMaquina = new Maquina(dr);

            ListViewItem olvItem = oMaquina.MakeListViewItemMaquina(m_oParameters.DateTimeSysFmt);

            olvItem.Tag = oMaquina;

            listViewMaquinas.Items.Add(olvItem);
        }

        private void RefreshBalcoes()
        {
            listViewBalcoes.MyClear();
            this.listViewMaquinas.MyClear();
            SqlDataReader drB = null;
            string sQuery = "select * from VW_BALCAO";
            if (txtBalcao.Text.Trim() != "")
            {
                sQuery = "select * from VW_BALCAO where BALCAO_CODIGO = " + txtBalcao.Text;
            }
            try
            {
                drB = m_oParameters.DirectSqlDataReader(sQuery);
                while (drB.Read())
                {
                    AddBalcao2ListView(drB);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drB != null)
                {
                    drB.Close();
                }
            }
        }

        void LoadDatabaseValues()
        {
            string sQuery;
            DataSet dsPaisBanco = new DataSet();

            sQuery = "select pais + ' - ' + convert(varchar(4),banco) as display, pais + ',' + convert(varchar(4),banco) as valor from PAISBANCO ORDER BY ordem";
            dsPaisBanco = m_oParameters.DirectSqlDataSet(sQuery, "PaisBanco");

            comboBoxPaisBanco.DataSource = dsPaisBanco.Tables[0].DefaultView;
            comboBoxPaisBanco.DisplayMember = "display";
            comboBoxPaisBanco.ValueMember = "valor";
        }

        private void BalcaoForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

                btInsertBalcao.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                btUpdateBalcao.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                btInsertMaq.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                btUpdateMaq.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);

                contextMenuStripBalcao.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                contextMenuMaquina.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);

                RefreshBalcoes();

                LoadDatabaseValues();
                m_oMenuInterface.balcoesEnable(false);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private void btInsert_Click(object sender, EventArgs e)
        {
            string sSPName;
            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                validaCampos(true);

                sSPName = "dbo.Insert_Balcao";

                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@Pais", m_sPais));
                m_oParam.Add(new GeneralDBParameters("@Banco", Convert.ToInt16(m_sBanco)));
                m_oParam.Add(new GeneralDBParameters("@Balcao", Convert.ToInt16(textBoxBalcao.Text)));
                m_oParam.Add(new GeneralDBParameters("@Fisicos", Convert.ToBoolean(comboBoxFisicos.Text)));
                m_oParam.Add(new GeneralDBParameters("@Devolvidos", Convert.ToBoolean(comboBoxDevolvidos.Text)));
                m_oParam.Add(new GeneralDBParameters("@Balcao_Abvr", textBoxAbrv.Text));
                m_oParam.Add(new GeneralDBParameters("@balcao_Desc", textBoxDescricao.Text));

                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);

                string sSmg = "Balcão " + textBoxBalcao.Text + " inserido manualmente";
                GenericLog.GenLogRegistarAlerta(sSmg, "InsertBalcao()", 100);
                m_oParameters.EnviarAlertaSituacao(100, sSmg);
                RefreshBalcoes();
            }
            catch (Exception ex)
            {
                if (ex.Message.IndexOf("duplicate key") > 0)
                    MessageBox.Show("Balcão Já Existente!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                else
                    MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void btUpdate_Click(object sender, EventArgs e)
        {
            string sSPName;
            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                validaCampos(true);

                sSPName = "dbo.Update_Balcao";

                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@Pais", m_sPais));
                m_oParam.Add(new GeneralDBParameters("@Banco", Convert.ToInt16(m_sBanco)));
                m_oParam.Add(new GeneralDBParameters("@Balcao", Convert.ToInt16(textBoxBalcao.Text)));
                m_oParam.Add(new GeneralDBParameters("@Fisicos", Convert.ToBoolean(comboBoxFisicos.Text)));
                m_oParam.Add(new GeneralDBParameters("@Devolvidos", Convert.ToBoolean(comboBoxDevolvidos.Text)));
                m_oParam.Add(new GeneralDBParameters("@Balcao_Abvr", textBoxAbrv.Text));
                m_oParam.Add(new GeneralDBParameters("@balcao_Desc", textBoxDescricao.Text));

                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                RefreshBalcoes();
            }
            catch (Exception ex)
            {
                if (ex.Message.IndexOf("duplicate key") > 0)
                    MessageBox.Show("Balcão Já Existente!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                else
                    MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void validaCampos(bool bOnlyBalcao)
        {
            string[] sValores = comboBoxPaisBanco.SelectedValue.ToString().Split(',');
            m_sPais = sValores[0];
            m_sBanco = sValores[1];

            if (textBoxBalcao.Text.Trim().Length == 0 || textBoxAbrv.Text.Trim().Length == 0 || textBoxDescricao.Text.Trim().Length == 0)
            {
                throw new Exception("Preencha os campos do balcão em branco");
            }

            if (bOnlyBalcao) return;

            if (this.m_oCurrBalcao.m_iCodigo.Equals(9601) || this.m_oCurrBalcao.m_iCodigo.Equals(9604) && (
                textBoxMaqSeqBalcao.Text.Trim().Length == 0 || textBoxMaqModelo.Text.Trim().Length == 0 || textBoxMaqIQA.Text.Trim().Length == 0))
            {
                throw new Exception("Preencha os campos da máquina em branco");
            }
        }

        private void btDelete_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Não é permitido apagar balcões!!!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        private void btRefresh_Click(object sender, EventArgs e)
        {
            this.txtBalcao.Text = String.Empty;
            RefreshBalcoes();
        }

        private void RefreshMaquinas()
        {
            listViewMaquinas.MyClear();
            SqlDataReader drM = null;
            string sQuery = "select * from VW_MAQUINA where ";
            sQuery += "BALCAO_PAIS='" + m_oCurrBalcao.m_sPais + "' and ";
            sQuery += "BALCAO_BANCO=" + m_oCurrBalcao.m_iBanco + " and ";
            sQuery += "BALCAO_CODIGO=" + m_oCurrBalcao.m_iCodigo + "";
            try
            {
                drM = m_oParameters.DirectSqlDataReader(sQuery);
                while (drM.Read())
                {
                    AddMaquina2ListView(drM);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drM != null)
                {
                    drM.Close();
                }
            }
        }

        private void DisplaySelectedBalcao()
        {
            try
            {
                if (listViewBalcoes.SelectedItems.Count != 1)
                    return;
                m_oCurrBalcao = (Balcao)listViewBalcoes.GetTag();
                comboBoxPaisBanco.Text = m_oCurrBalcao.m_sPais + " - " + m_oCurrBalcao.m_iBanco.ToString();
                textBoxBalcao.Text = m_oCurrBalcao.m_iCodigo.ToString();
                textBoxAbrv.Text = m_oCurrBalcao.m_sAbrev;
                textBoxDescricao.Text = m_oCurrBalcao.m_sDescricao;
                comboBoxFisicos.Text = m_oCurrBalcao.m_bEnviaFisicos.ToString();
                comboBoxDevolvidos.Text = m_oCurrBalcao.m_bOperaDevolvidos.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void listViewBalcoes_SelectedIndexChanged(object sender, EventArgs e)
        {
            DisplaySelectedBalcao();
            RefreshMaquinas();
            textBoxMaqModelo.Text = "";
            textBoxMaqIQA.Text = "";
            textBoxMaqSeqBalcao.Text = "";
            if (this.m_oCurrBalcao.m_iCodigo.Equals(9601) || this.m_oCurrBalcao.m_iCodigo.Equals(9604))
            {
                EnableControlsToGCCA(true);
            }
            else
            {
                EnableControlsToGCCA(false);
            }
        }

        private void EnableControlsToGCCA(Boolean enabled)
        {
            this.textBoxMaqSeqBalcao.Enabled = enabled;
            this.textBoxMaqModelo.Enabled = enabled;
            this.textBoxMaqIQA.Enabled = enabled;
            this.btnLimparMaquina.Enabled = enabled;
            this.btUpdateMaq.Enabled = enabled;
            this.toolStripInserirMaquina.Enabled = enabled;
            this.toolStripActualizarMaquina.Enabled = enabled;
        }

        private void DisplaySelectedMaquina()
        {
            try
            {
                if (listViewMaquinas.SelectedItems.Count != 1)
                    return;

                m_oCurrMaquina = (Maquina)listViewMaquinas.GetTag();
                textBoxMaqSeqBalcao.Text = m_oCurrMaquina.m_iMAQ_SEQBALCAO.ToString();
                textBoxMaqModelo.Text = m_oCurrMaquina.m_iMAQ_MODELO.ToString();
                textBoxMaqIQA.Text = m_oCurrMaquina.m_iMAQ_IQA.ToString();

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "BalcaoForm.cs", 17);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void listViewMaquinas_SelectedIndexChanged(object sender, EventArgs e)
        {
            DisplaySelectedMaquina();
        }

        private void btInsertMaq_Click(object sender, EventArgs e)
        {
            string sSPName;

            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                validaCampos(false);
                if (this.m_oCurrBalcao.m_iCodigo.Equals(9601) || this.m_oCurrBalcao.m_iCodigo.Equals(9604))
                {
                    if (Int32.Parse(textBoxMaqSeqBalcao.Text) < 1999)
                    {
                        sSPName = "dbo.Insert_Maquina";
                        m_oParam.Clear();
                        m_oParam.Add(new GeneralDBParameters("@Pais", m_sPais));
                        m_oParam.Add(new GeneralDBParameters("@Banco", Convert.ToInt16(m_sBanco)));
                        m_oParam.Add(new GeneralDBParameters("@Balcao", Convert.ToInt16(textBoxBalcao.Text)));
                        m_oParam.Add(new GeneralDBParameters("@SeqBalcao", Convert.ToInt16(textBoxMaqSeqBalcao.Text)));
                        m_oParam.Add(new GeneralDBParameters("@Modelo", Convert.ToInt16(textBoxMaqModelo.Text)));
                        m_oParam.Add(new GeneralDBParameters("@IQA", Convert.ToInt16(textBoxMaqIQA.Text)));
                        m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                        string sSmg = "Maquina " + textBoxMaqSeqBalcao.Text + " do balcão " + textBoxBalcao.Text + " inserida manualmente";
                        GenericLog.GenLogRegistarAlerta(sSmg, "InsertMaquina()", 100);
                        m_oParameters.EnviarAlertaSituacao(100, sSmg);
                    }
                    else
                    {
                        MessageBox.Show("O campo SeqBalcao tem de ser inferior a 2000");
                    }
                }
                else
                {
                    sSPName = "Insert_MaquinaBalcao";
                    m_oParam.Clear();
                    m_oParam.Add(new GeneralDBParameters("@REMBALCAO_DATA_IN", DateTime.Now.ToString("yyyy-MM-dd")));
                    m_oParam.Add(new GeneralDBParameters("@BALCAO_PAIS_IN", this.m_oCurrBalcao.m_sPais));
                    m_oParam.Add(new GeneralDBParameters("@BALCAO_EMPRESA_IN", "CGD"));
                    m_oParam.Add(new GeneralDBParameters("@BALCAO_BANCO_IN", this.m_oCurrBalcao.m_iBanco));
                    m_oParam.Add(new GeneralDBParameters("@BALCAO_CODIGO_IN", this.m_oCurrBalcao.m_iCodigo));
                    m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                    string sSmg = "Maquina " + textBoxMaqSeqBalcao.Text + " do balcão " + textBoxBalcao.Text + " inserida manualmente";
                    GenericLog.GenLogRegistarAlerta(sSmg, "InsertMaquina()", 100);
                    m_oParameters.EnviarAlertaSituacao(100, sSmg);
                }
                RefreshMaquinas();
            }
            catch (Exception ex)
            {
                if (ex.Message.IndexOf("duplicate key") > 0)
                    MessageBox.Show("Maquina Já Existente!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                else
                    MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void btUpdateMaq_Click(object sender, EventArgs e)
        {
            string sSPName;
            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                validaCampos(false);
                sSPName = "dbo.Update_Maquina";
                if (textBoxAbrv.Text.Contains("GCAA"))
                {
                    if (Int32.Parse(textBoxMaqSeqBalcao.Text) < 1999)
                    {
                        m_oParam.Clear();
                        m_oParam.Add(new GeneralDBParameters("@Maq_ID", Convert.ToInt64(m_oCurrMaquina.m_lMAQ_ID)));
                        m_oParam.Add(new GeneralDBParameters("@SeqBalcao", Convert.ToInt16(textBoxMaqSeqBalcao.Text)));
                        m_oParam.Add(new GeneralDBParameters("@Modelo", Convert.ToInt16(textBoxMaqModelo.Text)));
                        m_oParam.Add(new GeneralDBParameters("@IQA", Convert.ToInt16(textBoxMaqIQA.Text)));
                    }
                }
                else
                {
                    m_oParam.Clear();
                    m_oParam.Add(new GeneralDBParameters("@Maq_ID", Convert.ToInt64(m_oCurrMaquina.m_lMAQ_ID)));
                    m_oParam.Add(new GeneralDBParameters("@SeqBalcao", Convert.ToInt16(-1)));
                    m_oParam.Add(new GeneralDBParameters("@Modelo", Convert.ToInt16(textBoxMaqModelo.Text)));
                    m_oParam.Add(new GeneralDBParameters("@IQA", Convert.ToInt16(textBoxMaqIQA.Text)));
                }
                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                RefreshMaquinas();
            }
            catch (Exception ex)
            {
                if (ex.Message.IndexOf("duplicate key") > 0)
                    MessageBox.Show("Maquina Já Existente!", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                else
                    MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void buttonExitJanela_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void ActualizarOperacaoEfectuadoBalcao(int iOperacao, int iEfectuado)
        {
            try
            {
                string sSPName;
                sSPName = "dbo.Update_BalcaoEfectuado";
                GenericLog.GenLogRegistarAlerta(sSPName, "BalcaoForm.cs", 14);

                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@Pais", m_oCurrBalcao.m_sPais));
                m_oParam.Add(new GeneralDBParameters("@Banco", m_oCurrBalcao.m_iBanco));
                m_oParam.Add(new GeneralDBParameters("@Balcao", m_oCurrBalcao.m_iCodigo));
                m_oParam.Add(new GeneralDBParameters("@Operacao", iOperacao));
                m_oParam.Add(new GeneralDBParameters("@Efectuado", iEfectuado));

                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);

                string sMsg = sSPName + " " + m_oCurrBalcao.m_sPais + "/" + m_oCurrBalcao.m_iBanco.ToString() + "/" + m_oCurrBalcao.m_iCodigo;
                sMsg += " Operacao:" + iOperacao.ToString() + " Efectuado:" + iEfectuado.ToString();

                GenericLog.GenLogRegistarAlerta(sMsg, "ActualizarOperacaoEfectuadoBalcao()", 100);

                RefreshBalcoes();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        private void ActualizarOperacaoEfectuadoMaquina(int iOperacao, int iEfectuado)
        {
            try
            {
                string sSPName;
                sSPName = "dbo.Update_MaquinaEfectuado";
                GenericLog.GenLogRegistarAlerta(sSPName, "BalcaoForm.cs", 14);

                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@Maq_ID", m_oCurrMaquina.m_lMAQ_ID));
                m_oParam.Add(new GeneralDBParameters("@Operacao", iOperacao));
                m_oParam.Add(new GeneralDBParameters("@Efectuado", iEfectuado));

                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);

                string sMsg = sSPName + " " + m_oCurrMaquina.m_lMAQ_ID.ToString();
                sMsg += " Operacao:" + iOperacao.ToString() + " Efectuado:" + iEfectuado.ToString();

                GenericLog.GenLogRegistarAlerta(sMsg, "ActualizarOperacaoEfectuadoMaquina()", 100);

                RefreshMaquinas();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void toolStripInserir_Click(object sender, EventArgs e)
        {
            if (listViewBalcoes.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrBalcao = (Balcao)listViewBalcoes.GetTag();
            ActualizarOperacaoEfectuadoBalcao(1, m_oCurrBalcao.m_iEfectuado);
        }

        private void toolStripActualizar_Click(object sender, EventArgs e)
        {
            if (listViewBalcoes.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrBalcao = (Balcao)listViewBalcoes.GetTag();
            ActualizarOperacaoEfectuadoBalcao(3, m_oCurrBalcao.m_iEfectuado);
        }

        private void toolStripInserirMaquina_Click(object sender, EventArgs e)
        {
            if (listViewMaquinas.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrMaquina = (Maquina)listViewMaquinas.GetTag();
            ActualizarOperacaoEfectuadoMaquina(1, m_oCurrMaquina.m_iMAQ_EFECTUADO);
        }

        private void toolStripActualizarMaquina_Click(object sender, EventArgs e)
        {
            if (listViewMaquinas.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrMaquina = (Maquina)listViewMaquinas.GetTag();
            ActualizarOperacaoEfectuadoMaquina(3, m_oCurrMaquina.m_iMAQ_EFECTUADO);
        }

        private void pendenteToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (listViewBalcoes.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrBalcao = (Balcao)listViewBalcoes.GetTag();
            ActualizarOperacaoEfectuadoBalcao(m_oCurrBalcao.m_iOperacao, 0);
        }

        private void efectuadoToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (listViewBalcoes.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrBalcao = (Balcao)listViewBalcoes.GetTag();
            ActualizarOperacaoEfectuadoBalcao(m_oCurrBalcao.m_iOperacao, 2);
        }

        private void pendenteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewMaquinas.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrMaquina = (Maquina)listViewMaquinas.GetTag();
            ActualizarOperacaoEfectuadoMaquina(m_oCurrMaquina.m_iMAQ_OPERACAO, 0);
        }

        private void efectuadoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewMaquinas.SelectedItems.Count != 1)
                return;

            if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return;
            }

            m_oCurrMaquina = (Maquina)listViewMaquinas.GetTag();
            ActualizarOperacaoEfectuadoMaquina(m_oCurrMaquina.m_iMAQ_OPERACAO, 2);
        }
        //SDCIM 7 
        private void btnPesquisar_Click(object sender, EventArgs e)
        {
            this.RefreshBalcoes();
        }
        private void txtBalcao_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txtBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txtBalcao.Text.Remove(txtBalcao.Text.Length - 1);
                txtBalcao.Text = "";
            }
        }

        private void txtBalcao_Leave(object sender, EventArgs e)
        {
            if (this.txtBalcao.Text.Trim() != String.Empty)
                this.txtBalcao.Text = this.txtBalcao.Text.PadLeft(4, '0');
        }

        private void btnLimparBalcao_Click(object sender, EventArgs e)
        {
            this.comboBoxPaisBanco.SelectedIndex = 0;
            this.textBoxAbrv.Text = String.Empty;
            this.textBoxBalcao.Text = String.Empty;
            this.textBoxDescricao.Text = String.Empty;
            this.comboBoxDevolvidos.SelectedIndex = 1;
            this.comboBoxFisicos.SelectedIndex = 0;
            this.textBoxMaqIQA.Text = String.Empty;
            this.textBoxMaqModelo.Text = String.Empty;
            this.textBoxMaqSeqBalcao.Text = String.Empty;
            this.listViewMaquinas.MyClear();
            this.txtBalcao.Text = String.Empty;
            this.RefreshBalcoes();
            m_oCurrBalcao = new Balcao();
            m_oCurrMaquina = new Maquina();
        }

        private void btnLimparMaquina_Click(object sender, EventArgs e)
        {
            this.textBoxMaqIQA.Text = String.Empty;
            this.textBoxMaqModelo.Text = String.Empty;
            this.textBoxMaqSeqBalcao.Text = String.Empty;
            m_oCurrMaquina = new Maquina();
        }
        //SDCIM 7
    }
}

// FILE: SDCIM/ModusCI/CIConfiguration/BalcaoForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="contextMenuStripBalcao.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>109, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btRefresh.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB8klEQVRYR8WUAZLDMAgD+/Q8rT/LIRlh
        QpzYl2nvYDRuDGFlt9PXSmzbttuyJO/9XAR8M40S+6hbvt/vr5i4hiO9TrjlR03E6a/ST88+y2+YmJ4e
        kKxqglOehLsX6pxt+EHVhE2JvdS3HPPvft+PckhAkdxzU60+j3B8lajBHA3uHC7JSDaRbwTzlyJMVCMF
        Ttlnwa9M6NnW9TiYEFirDOiznrMcSlNtxq+jDwMgw4vi5FUNfHv6aBrKhnD4ACqdrj/LZmT4yIg13uTE
        xC0cIrBB9ZUeTGjzNouJgMGE9tN6Uofas8/LMTVhtRn0Ep5Pbck+/4MCm7F6C49NuIGjCc6MYOE22ZMg
        boJrlqCSH+4AR5Y/pbY5y5GJkTIcqxs4mUCvR9soyRdQ41CtbTiHCJil/oC3GRXOFb0e7aWa3LcXZYTy
        wVKFxyzUEtz2TjfQ+i9+hBrG/QSsqnD1y6g9Y/7sBhDuPF19D9tN0KxsIIx0OF7marUBXPVyC71I9VqF
        236GI9N7M/ncFgFJA+nUVtR63Vaezlf1ryR6pWoAwQ0vCq5rY00rgW5iFY68gyNiOJTglyaewO8MIDS8
        wqsJ9ISRWa7CFTHYhw9NtHrvvcoEhqZwBRoPRsZSNAjy3EMtg59EGO0n/fsot/U/kUwsxuv1A+gblzDJ
        MIAaAAAAAElFTkSuQmCC
</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="contextMenuMaquina.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>280, 17</value>
  </metadata>
  <data name="buttonExitJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAABWElEQVRYR9WRi64DIQhE++n751tHwSIv
        tba9uSRnUUBmkn1sxn3IcdzXdS2DeQS+/LZuOQgjEoHZLk53qh+FEfLA3CBONeptR33cjnMDmDHiVKf+
        dvQFQAtK0HfFqUcz22H+owd6oTj1aW472lJeHJgwc5qPGEhMDHO4axID7XFGWYrITPDcewbk8gREv4ul
        HzOwGoPQa/FY16wY2MIutj1JakAPa6SwFKCl5wZmTMRdA/wWZ7pHBmYxFTcGyhlRa+hR/8yAWqTpcyTc
        a8h0ptp2TMVBnWMDfHfelrwdw0ItzNS+NKA5MtBAGGEGvW8a4DDCDHrfMiCjCUX8xACLaP6zgfZ4FSkq
        kT0t3oQj8MGChCowy2UPMnDFaXZgxYAr5uTyqWewJA5mBiIxNzsGUEM/JDPgiiS5fOoZLImDyEAkkmZh
        AGfUp3gG3OULuXxecG1GN/BXPO4nHVUUCdWxbqAAAAAASUVORK5CYII=
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIConfiguration/CIConfigForm.Designer.cs
﻿namespace CIConfiguration
{
    partial class CIConfigForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
            m_oMenuInterface.configuracaoEnable(true);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CIConfigForm));
            this.label1 = new System.Windows.Forms.Label();
            this.maskedTextBoxIteracao = new System.Windows.Forms.MaskedTextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.maskedTextBoxMaxDocsTranche = new System.Windows.Forms.MaskedTextBox();
            this.listViewSituacoesAccoes = new NBIISNET.ListViewBase();
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewAccoes = new NBIISNET.ListViewBase();
            this.columnHeader7 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader8 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader6 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.btLigar = new System.Windows.Forms.Button();
            this.btDesligar = new System.Windows.Forms.Button();
            this.label3 = new System.Windows.Forms.Label();
            this.maskedTextBoxFimTemp = new System.Windows.Forms.MaskedTextBox();
            this.maskedTextBoxInicioTemp = new System.Windows.Forms.MaskedTextBox();
            this.buttonActualizar = new System.Windows.Forms.Button();
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.listViewBaseSituacoes = new NBIISNET.ListViewBase();
            this.columnHeader9 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader10 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewAccaoParam1 = new NBIISNET.ListViewBase();
            this.columnHeader16 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader26 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader27 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewAccaoParam2 = new NBIISNET.ListViewBase();
            this.columnHeader11 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader12 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader13 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader14 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader19 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.groupBox4 = new System.Windows.Forms.GroupBox();
            this.maskedTextBoxPercentagemAlerta = new System.Windows.Forms.MaskedTextBox();
            this.label11 = new System.Windows.Forms.Label();
            this.btActualizarAlertas = new System.Windows.Forms.Button();
            this.maskedTextBoxHoraEsperaRemin = new System.Windows.Forms.MaskedTextBox();
            this.maskedTextBoxHoraEsperaEnvm = new System.Windows.Forms.MaskedTextBox();
            this.maskedTextBoxHoraFim = new System.Windows.Forms.MaskedTextBox();
            this.maskedTextBoxHoraIni = new System.Windows.Forms.MaskedTextBox();
            this.label10 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.label9 = new System.Windows.Forms.Label();
            this.label8 = new System.Windows.Forms.Label();
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.label4 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.maskedTextBoxMinDias = new System.Windows.Forms.MaskedTextBox();
            this.maskedTextBoxMaxDias = new System.Windows.Forms.MaskedTextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.toolStripButton1 = new System.Windows.Forms.ToolStripButton();
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.toolStripButton2 = new System.Windows.Forms.ToolStripButton();
            this.groupBox1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.groupBox4.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.toolStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.BackColor = System.Drawing.SystemColors.Control;
            this.label1.Location = new System.Drawing.Point(95, 9);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(180, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "Tempo entre cada iteração (minutos)";
            // 
            // maskedTextBoxIteracao
            // 
            this.maskedTextBoxIteracao.AllowDrop = true;
            this.maskedTextBoxIteracao.Location = new System.Drawing.Point(277, 6);
            this.maskedTextBoxIteracao.Mask = "000";
            this.maskedTextBoxIteracao.Name = "maskedTextBoxIteracao";
            this.maskedTextBoxIteracao.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxIteracao.TabIndex = 1;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.BackColor = System.Drawing.SystemColors.Control;
            this.label2.Location = new System.Drawing.Point(321, 9);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(147, 13);
            this.label2.TabIndex = 3;
            this.label2.Text = "Max Documentos por tranche";
            // 
            // maskedTextBoxMaxDocsTranche
            // 
            this.maskedTextBoxMaxDocsTranche.Location = new System.Drawing.Point(469, 6);
            this.maskedTextBoxMaxDocsTranche.Mask = "000";
            this.maskedTextBoxMaxDocsTranche.Name = "maskedTextBoxMaxDocsTranche";
            this.maskedTextBoxMaxDocsTranche.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxMaxDocsTranche.TabIndex = 2;
            // 
            // listViewSituacoesAccoes
            // 
            this.listViewSituacoesAccoes.AllowColumnReorder = true;
            this.listViewSituacoesAccoes.AutoArrange = false;
            this.listViewSituacoesAccoes.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader1,
            this.columnHeader3,
            this.columnHeader2,
            this.columnHeader4});
            this.listViewSituacoesAccoes.EnableExportar = true;
            this.listViewSituacoesAccoes.FullRowSelect = true;
            this.listViewSituacoesAccoes.GridLines = true;
            this.listViewSituacoesAccoes.HideSelection = false;
            this.listViewSituacoesAccoes.Location = new System.Drawing.Point(15, 48);
            this.listViewSituacoesAccoes.MultiSelect = false;
            this.listViewSituacoesAccoes.Name = "listViewSituacoesAccoes";
            this.listViewSituacoesAccoes.Size = new System.Drawing.Size(292, 329);
            this.listViewSituacoesAccoes.TabIndex = 15;
            this.listViewSituacoesAccoes.TabStop = false;
            this.listViewSituacoesAccoes.UseCompatibleStateImageBehavior = false;
            this.listViewSituacoesAccoes.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Situacao ID";
            this.columnHeader1.Width = 58;
            // 
            // columnHeader3
            // 
            this.columnHeader3.Text = "Situação Desc";
            this.columnHeader3.Width = 88;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Acção ID";
            this.columnHeader2.Width = 45;
            // 
            // columnHeader4
            // 
            this.columnHeader4.Text = "Acção Desc";
            this.columnHeader4.Width = 94;
            // 
            // listViewAccoes
            // 
            this.listViewAccoes.AllowColumnReorder = true;
            this.listViewAccoes.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader7,
            this.columnHeader8,
            this.columnHeader6});
            this.listViewAccoes.EnableExportar = true;
            this.listViewAccoes.FullRowSelect = true;
            this.listViewAccoes.GridLines = true;
            this.listViewAccoes.HideSelection = false;
            this.listViewAccoes.Location = new System.Drawing.Point(418, 19);
            this.listViewAccoes.MultiSelect = false;
            this.listViewAccoes.Name = "listViewAccoes";
            this.listViewAccoes.Size = new System.Drawing.Size(251, 159);
            this.listViewAccoes.TabIndex = 16;
            this.listViewAccoes.TabStop = false;
            this.listViewAccoes.UseCompatibleStateImageBehavior = false;
            this.listViewAccoes.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader7
            // 
            this.columnHeader7.Text = "ID";
            this.columnHeader7.Width = 43;
            // 
            // columnHeader8
            // 
            this.columnHeader8.Text = "Acção Descrição";
            this.columnHeader8.Width = 125;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "Tipo";
            this.columnHeader6.Width = 67;
            // 
            // btLigar
            // 
            this.btLigar.Location = new System.Drawing.Point(419, 184);
            this.btLigar.Name = "btLigar";
            this.btLigar.Size = new System.Drawing.Size(250, 23);
            this.btLigar.TabIndex = 14;
            this.btLigar.Text = "&Associar Situação / Acção";
            this.btLigar.UseVisualStyleBackColor = true;
            this.btLigar.Click += new System.EventHandler(this.btLigar_Click);
            // 
            // btDesligar
            // 
            this.btDesligar.Location = new System.Drawing.Point(15, 18);
            this.btDesligar.Name = "btDesligar";
            this.btDesligar.Size = new System.Drawing.Size(292, 24);
            this.btDesligar.TabIndex = 15;
            this.btDesligar.Text = "&Desassociar Acção";
            this.btDesligar.UseVisualStyleBackColor = true;
            this.btDesligar.Click += new System.EventHandler(this.btDesligar_Click);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.BackColor = System.Drawing.SystemColors.Control;
            this.label3.Location = new System.Drawing.Point(510, 9);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(113, 13);
            this.label3.TabIndex = 24;
            this.label3.Text = "Inicio/Fim de Paragem";
            // 
            // maskedTextBoxFimTemp
            // 
            this.maskedTextBoxFimTemp.Location = new System.Drawing.Point(669, 6);
            this.maskedTextBoxFimTemp.Mask = "00:00";
            this.maskedTextBoxFimTemp.Name = "maskedTextBoxFimTemp";
            this.maskedTextBoxFimTemp.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxFimTemp.TabIndex = 4;
            this.maskedTextBoxFimTemp.ValidatingType = typeof(System.DateTime);
            // 
            // maskedTextBoxInicioTemp
            // 
            this.maskedTextBoxInicioTemp.BeepOnError = true;
            this.maskedTextBoxInicioTemp.CutCopyMaskFormat = System.Windows.Forms.MaskFormat.IncludePrompt;
            this.maskedTextBoxInicioTemp.Location = new System.Drawing.Point(624, 6);
            this.maskedTextBoxInicioTemp.Mask = "00:00";
            this.maskedTextBoxInicioTemp.Name = "maskedTextBoxInicioTemp";
            this.maskedTextBoxInicioTemp.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxInicioTemp.TabIndex = 3;
            this.maskedTextBoxInicioTemp.ValidatingType = typeof(System.DateTime);
            // 
            // buttonActualizar
            // 
            this.buttonActualizar.Location = new System.Drawing.Point(941, 3);
            this.buttonActualizar.Name = "buttonActualizar";
            this.buttonActualizar.Size = new System.Drawing.Size(75, 23);
            this.buttonActualizar.TabIndex = 7;
            this.buttonActualizar.Text = "Actualizar";
            this.buttonActualizar.UseVisualStyleBackColor = true;
            this.buttonActualizar.Click += new System.EventHandler(this.buttonActualizar_Click_1);
            // 
            // listViewBaseSituacoes
            // 
            this.listViewBaseSituacoes.AllowColumnReorder = true;
            this.listViewBaseSituacoes.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader9,
            this.columnHeader10});
            this.listViewBaseSituacoes.EnableExportar = true;
            this.listViewBaseSituacoes.FullRowSelect = true;
            this.listViewBaseSituacoes.GridLines = true;
            this.listViewBaseSituacoes.HideSelection = false;
            this.listViewBaseSituacoes.Location = new System.Drawing.Point(6, 19);
            this.listViewBaseSituacoes.MultiSelect = false;
            this.listViewBaseSituacoes.Name = "listViewBaseSituacoes";
            this.listViewBaseSituacoes.Size = new System.Drawing.Size(402, 358);
            this.listViewBaseSituacoes.TabIndex = 29;
            this.listViewBaseSituacoes.TabStop = false;
            this.listViewBaseSituacoes.UseCompatibleStateImageBehavior = false;
            this.listViewBaseSituacoes.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader9
            // 
            this.columnHeader9.Text = "Situacao ID";
            this.columnHeader9.Width = 39;
            // 
            // columnHeader10
            // 
            this.columnHeader10.Text = "Situação Desc";
            this.columnHeader10.Width = 349;
            // 
            // listViewAccaoParam1
            // 
            this.listViewAccaoParam1.AllowColumnReorder = true;
            this.listViewAccaoParam1.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader16,
            this.columnHeader26,
            this.columnHeader27});
            this.listViewAccaoParam1.EnableExportar = true;
            this.listViewAccaoParam1.FullRowSelect = true;
            this.listViewAccaoParam1.GridLines = true;
            this.listViewAccaoParam1.HideSelection = false;
            this.listViewAccaoParam1.Location = new System.Drawing.Point(6, 23);
            this.listViewAccaoParam1.MultiSelect = false;
            this.listViewAccaoParam1.Name = "listViewAccaoParam1";
            this.listViewAccaoParam1.Size = new System.Drawing.Size(390, 169);
            this.listViewAccaoParam1.TabIndex = 30;
            this.listViewAccaoParam1.TabStop = false;
            this.listViewAccaoParam1.UseCompatibleStateImageBehavior = false;
            this.listViewAccaoParam1.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader16
            // 
            this.columnHeader16.Text = "Tipo Acção Desc";
            this.columnHeader16.Width = 89;
            // 
            // columnHeader26
            // 
            this.columnHeader26.Text = "Tipo Acção Name";
            this.columnHeader26.Width = 102;
            // 
            // columnHeader27
            // 
            this.columnHeader27.Text = "Tipo Acção Value";
            this.columnHeader27.Width = 191;
            // 
            // listViewAccaoParam2
            // 
            this.listViewAccaoParam2.AllowColumnReorder = true;
            this.listViewAccaoParam2.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader11,
            this.columnHeader12,
            this.columnHeader13,
            this.columnHeader14,
            this.columnHeader19});
            this.listViewAccaoParam2.EnableExportar = true;
            this.listViewAccaoParam2.FullRowSelect = true;
            this.listViewAccaoParam2.GridLines = true;
            this.listViewAccaoParam2.HideSelection = false;
            this.listViewAccaoParam2.Location = new System.Drawing.Point(457, 23);
            this.listViewAccaoParam2.MultiSelect = false;
            this.listViewAccaoParam2.Name = "listViewAccaoParam2";
            this.listViewAccaoParam2.Size = new System.Drawing.Size(531, 169);
            this.listViewAccaoParam2.TabIndex = 31;
            this.listViewAccaoParam2.TabStop = false;
            this.listViewAccaoParam2.UseCompatibleStateImageBehavior = false;
            this.listViewAccaoParam2.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader11
            // 
            this.columnHeader11.Text = "Tipo Acção Desc";
            this.columnHeader11.Width = 101;
            // 
            // columnHeader12
            // 
            this.columnHeader12.Text = "Acção ID";
            this.columnHeader12.Width = 62;
            // 
            // columnHeader13
            // 
            this.columnHeader13.Text = "Acção desc";
            this.columnHeader13.Width = 85;
            // 
            // columnHeader14
            // 
            this.columnHeader14.Text = "Acção Name";
            this.columnHeader14.Width = 84;
            // 
            // columnHeader19
            // 
            this.columnHeader19.Text = "Acção Value";
            this.columnHeader19.Width = 189;
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.listViewAccaoParam1);
            this.groupBox1.Controls.Add(this.listViewAccaoParam2);
            this.groupBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.groupBox1.Location = new System.Drawing.Point(12, 445);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(1004, 198);
            this.groupBox1.TabIndex = 32;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Parametrização";
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.groupBox4);
            this.groupBox2.Controls.Add(this.listViewAccoes);
            this.groupBox2.Controls.Add(this.btLigar);
            this.groupBox2.Controls.Add(this.listViewBaseSituacoes);
            this.groupBox2.Location = new System.Drawing.Point(12, 56);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(675, 383);
            this.groupBox2.TabIndex = 33;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Situação / Acção";
            // 
            // groupBox4
            // 
            this.groupBox4.Controls.Add(this.maskedTextBoxPercentagemAlerta);
            this.groupBox4.Controls.Add(this.label11);
            this.groupBox4.Controls.Add(this.btActualizarAlertas);
            this.groupBox4.Controls.Add(this.maskedTextBoxHoraEsperaRemin);
            this.groupBox4.Controls.Add(this.maskedTextBoxHoraEsperaEnvm);
            this.groupBox4.Controls.Add(this.maskedTextBoxHoraFim);
            this.groupBox4.Controls.Add(this.maskedTextBoxHoraIni);
            this.groupBox4.Controls.Add(this.label10);
            this.groupBox4.Controls.Add(this.label7);
            this.groupBox4.Controls.Add(this.label9);
            this.groupBox4.Controls.Add(this.label8);
            this.groupBox4.Location = new System.Drawing.Point(419, 213);
            this.groupBox4.Name = "groupBox4";
            this.groupBox4.Size = new System.Drawing.Size(250, 164);
            this.groupBox4.TabIndex = 42;
            this.groupBox4.TabStop = false;
            this.groupBox4.Text = "Alertas";
            // 
            // maskedTextBoxPercentagemAlerta
            // 
            this.maskedTextBoxPercentagemAlerta.AllowDrop = true;
            this.maskedTextBoxPercentagemAlerta.Location = new System.Drawing.Point(155, 98);
            this.maskedTextBoxPercentagemAlerta.Mask = "000";
            this.maskedTextBoxPercentagemAlerta.Name = "maskedTextBoxPercentagemAlerta";
            this.maskedTextBoxPercentagemAlerta.Size = new System.Drawing.Size(30, 20);
            this.maskedTextBoxPercentagemAlerta.TabIndex = 12;
            this.maskedTextBoxPercentagemAlerta.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.BackColor = System.Drawing.SystemColors.Control;
            this.label11.Location = new System.Drawing.Point(6, 101);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(143, 13);
            this.label11.TabIndex = 45;
            this.label11.Text = "% de imagens sem qualidade";
            // 
            // btActualizarAlertas
            // 
            this.btActualizarAlertas.Location = new System.Drawing.Point(86, 126);
            this.btActualizarAlertas.Name = "btActualizarAlertas";
            this.btActualizarAlertas.Size = new System.Drawing.Size(66, 22);
            this.btActualizarAlertas.TabIndex = 13;
            this.btActualizarAlertas.Text = "Actualizar";
            this.btActualizarAlertas.UseVisualStyleBackColor = true;
            this.btActualizarAlertas.Click += new System.EventHandler(this.btActualizarAlertas_Click);
            // 
            // maskedTextBoxHoraEsperaRemin
            // 
            this.maskedTextBoxHoraEsperaRemin.AllowDrop = true;
            this.maskedTextBoxHoraEsperaRemin.Location = new System.Drawing.Point(138, 71);
            this.maskedTextBoxHoraEsperaRemin.Mask = "000";
            this.maskedTextBoxHoraEsperaRemin.Name = "maskedTextBoxHoraEsperaRemin";
            this.maskedTextBoxHoraEsperaRemin.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxHoraEsperaRemin.TabIndex = 11;
            this.maskedTextBoxHoraEsperaRemin.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // maskedTextBoxHoraEsperaEnvm
            // 
            this.maskedTextBoxHoraEsperaEnvm.AllowDrop = true;
            this.maskedTextBoxHoraEsperaEnvm.Location = new System.Drawing.Point(117, 44);
            this.maskedTextBoxHoraEsperaEnvm.Mask = "000";
            this.maskedTextBoxHoraEsperaEnvm.Name = "maskedTextBoxHoraEsperaEnvm";
            this.maskedTextBoxHoraEsperaEnvm.Size = new System.Drawing.Size(32, 20);
            this.maskedTextBoxHoraEsperaEnvm.TabIndex = 10;
            this.maskedTextBoxHoraEsperaEnvm.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // maskedTextBoxHoraFim
            // 
            this.maskedTextBoxHoraFim.Location = new System.Drawing.Point(170, 15);
            this.maskedTextBoxHoraFim.Mask = "00:00";
            this.maskedTextBoxHoraFim.Name = "maskedTextBoxHoraFim";
            this.maskedTextBoxHoraFim.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxHoraFim.TabIndex = 9;
            this.maskedTextBoxHoraFim.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.maskedTextBoxHoraFim.ValidatingType = typeof(System.DateTime);
            // 
            // maskedTextBoxHoraIni
            // 
            this.maskedTextBoxHoraIni.BeepOnError = true;
            this.maskedTextBoxHoraIni.CutCopyMaskFormat = System.Windows.Forms.MaskFormat.IncludePrompt;
            this.maskedTextBoxHoraIni.Location = new System.Drawing.Point(125, 15);
            this.maskedTextBoxHoraIni.Mask = "00:00";
            this.maskedTextBoxHoraIni.Name = "maskedTextBoxHoraIni";
            this.maskedTextBoxHoraIni.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxHoraIni.TabIndex = 8;
            this.maskedTextBoxHoraIni.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.maskedTextBoxHoraIni.ValidatingType = typeof(System.DateTime);
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.BackColor = System.Drawing.SystemColors.Control;
            this.label10.Location = new System.Drawing.Point(6, 74);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(126, 13);
            this.label10.TabIndex = 41;
            this.label10.Text = "Horas Espera Remessas ";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.BackColor = System.Drawing.SystemColors.Control;
            this.label7.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label7.Location = new System.Drawing.Point(158, 14);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(13, 20);
            this.label7.TabIndex = 39;
            this.label7.Text = "/";
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.BackColor = System.Drawing.SystemColors.Control;
            this.label9.Location = new System.Drawing.Point(6, 47);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(105, 13);
            this.label9.TabIndex = 40;
            this.label9.Text = "Horas Espera ENVM";
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.BackColor = System.Drawing.SystemColors.Control;
            this.label8.Location = new System.Drawing.Point(6, 18);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(113, 13);
            this.label8.TabIndex = 36;
            this.label8.Text = "Inicio/Fim de Paragem";
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.btDesligar);
            this.groupBox3.Controls.Add(this.listViewSituacoesAccoes);
            this.groupBox3.Location = new System.Drawing.Point(693, 56);
            this.groupBox3.Name = "groupBox3";
            this.groupBox3.Size = new System.Drawing.Size(323, 383);
            this.groupBox3.TabIndex = 34;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = "Associações";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.BackColor = System.Drawing.SystemColors.Control;
            this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label4.Location = new System.Drawing.Point(657, 5);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(13, 20);
            this.label4.TabIndex = 35;
            this.label4.Text = "/";
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.BackColor = System.Drawing.SystemColors.Control;
            this.label5.Location = new System.Drawing.Point(710, 9);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(73, 13);
            this.label5.TabIndex = 36;
            this.label5.Text = "Min/Max Dias";
            // 
            // maskedTextBoxMinDias
            // 
            this.maskedTextBoxMinDias.Location = new System.Drawing.Point(783, 6);
            this.maskedTextBoxMinDias.Mask = "000";
            this.maskedTextBoxMinDias.Name = "maskedTextBoxMinDias";
            this.maskedTextBoxMinDias.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxMinDias.TabIndex = 5;
            // 
            // maskedTextBoxMaxDias
            // 
            this.maskedTextBoxMaxDias.Location = new System.Drawing.Point(828, 6);
            this.maskedTextBoxMaxDias.Mask = "000";
            this.maskedTextBoxMaxDias.Name = "maskedTextBoxMaxDias";
            this.maskedTextBoxMaxDias.Size = new System.Drawing.Size(35, 20);
            this.maskedTextBoxMaxDias.TabIndex = 6;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.BackColor = System.Drawing.SystemColors.Control;
            this.label6.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label6.Location = new System.Drawing.Point(817, 6);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(13, 20);
            this.label6.TabIndex = 37;
            this.label6.Text = "/";
            // 
            // toolStripButton1
            // 
            this.toolStripButton1.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButton1.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButton1.Image")));
            this.toolStripButton1.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButton1.Margin = new System.Windows.Forms.Padding(0, 1, 5, 2);
            this.toolStripButton1.Name = "toolStripButton1";
            this.toolStripButton1.Size = new System.Drawing.Size(36, 36);
            this.toolStripButton1.Text = "toolStripButton1";
            this.toolStripButton1.Click += new System.EventHandler(this.toolStripButton1_Click);
            // 
            // toolStrip1
            // 
            this.toolStrip1.AccessibleRole = System.Windows.Forms.AccessibleRole.Separator;
            this.toolStrip1.AllowDrop = true;
            this.toolStrip1.ImageScalingSize = new System.Drawing.Size(32, 32);
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButton1,
            this.toolStripButton2});
            this.toolStrip1.Location = new System.Drawing.Point(0, 0);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Padding = new System.Windows.Forms.Padding(0);
            this.toolStrip1.Size = new System.Drawing.Size(1028, 39);
            this.toolStrip1.TabIndex = 23;
            this.toolStrip1.Text = "toolStrip1";
            // 
            // toolStripButton2
            // 
            this.toolStripButton2.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButton2.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButton2.Image")));
            this.toolStripButton2.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButton2.Name = "toolStripButton2";
            this.toolStripButton2.Size = new System.Drawing.Size(36, 36);
            this.toolStripButton2.Text = "toolStripButton2";
            this.toolStripButton2.Click += new System.EventHandler(this.toolStripButton2_Click);
            // 
            // CIConfigForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1028, 655);
            this.Controls.Add(this.maskedTextBoxMaxDias);
            this.Controls.Add(this.maskedTextBoxMinDias);
            this.Controls.Add(this.maskedTextBoxFimTemp);
            this.Controls.Add(this.maskedTextBoxInicioTemp);
            this.Controls.Add(this.label6);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.groupBox3);
            this.Controls.Add(this.groupBox2);
            this.Controls.Add(this.buttonActualizar);
            this.Controls.Add(this.maskedTextBoxIteracao);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.maskedTextBoxMaxDocsTranche);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.toolStrip1);
            this.Controls.Add(this.groupBox1);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "CIConfigForm";
            this.ShowInTaskbar = false;
            this.Text = "Configuração";
            this.Load += new System.EventHandler(this.CIConfigForm_Load);
            this.groupBox1.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.groupBox4.ResumeLayout(false);
            this.groupBox4.PerformLayout();
            this.groupBox3.ResumeLayout(false);
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxIteracao;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxMaxDocsTranche;
        private NBIISNET.ListViewBase listViewSituacoesAccoes;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.ColumnHeader columnHeader3;
        private System.Windows.Forms.ColumnHeader columnHeader4;
        private NBIISNET.ListViewBase listViewAccoes;
        private System.Windows.Forms.ColumnHeader columnHeader7;
        private System.Windows.Forms.ColumnHeader columnHeader8;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.Button btLigar;
        private System.Windows.Forms.Button btDesligar;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Button buttonActualizar;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxFimTemp;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxInicioTemp;
        private System.Windows.Forms.ToolTip toolTip1;
        private NBIISNET.ListViewBase listViewBaseSituacoes;
        private System.Windows.Forms.ColumnHeader columnHeader9;
        private System.Windows.Forms.ColumnHeader columnHeader10;
        private NBIISNET.ListViewBase listViewAccaoParam1;
        private System.Windows.Forms.ColumnHeader columnHeader16;
        private System.Windows.Forms.ColumnHeader columnHeader26;
        private System.Windows.Forms.ColumnHeader columnHeader27;
        private NBIISNET.ListViewBase listViewAccaoParam2;
        private System.Windows.Forms.ColumnHeader columnHeader11;
        private System.Windows.Forms.ColumnHeader columnHeader12;
        private System.Windows.Forms.ColumnHeader columnHeader13;
        private System.Windows.Forms.ColumnHeader columnHeader14;
        private System.Windows.Forms.ColumnHeader columnHeader19;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxMinDias;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxMaxDias;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.ToolStripButton toolStripButton1;
        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.ToolStripButton toolStripButton2;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxHoraFim;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxHoraIni;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.GroupBox groupBox4;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxHoraEsperaRemin;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxHoraEsperaEnvm;
        private System.Windows.Forms.Button btActualizarAlertas;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.MaskedTextBox maskedTextBoxPercentagemAlerta;
    }
}

// FILE: SDCIM/ModusCI/CIConfiguration/CIConfigForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using Alerta;
using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIConfiguration
{
    public partial class CIConfigForm : Form
    {

        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        protected int m_iLastSituacao;


        public CIConfigForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        private void DisableButtons()
        {
            btLigar.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
            btDesligar.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
            buttonActualizar.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
            btActualizarAlertas.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);

        }

        private void CIConfigForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
                m_oMenuInterface.configuracaoEnable(false);
                LoadParametros();

                DisableButtons();
                

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "CIConfigForm.cs", 19);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private void AddSituacao2ListViews(SqlDataReader dr)
        {
            SituacaoAccao oAlertaSit = new SituacaoAccao(dr);

            if (m_iLastSituacao != oAlertaSit.m_iSITUACAO_ID)
            {
                ListViewItem oItemSituacao = oAlertaSit.MakeListViewItemSituacao();
                oItemSituacao.Tag = oAlertaSit;
                listViewBaseSituacoes.Items.Add(oItemSituacao);
                m_iLastSituacao = oAlertaSit.m_iSITUACAO_ID;
            }

            ListViewItem oItemSituacaoAccao = oAlertaSit.MakeListViewItemSituacaoAccao();
            oItemSituacaoAccao.Tag = oAlertaSit;
            listViewSituacoesAccoes.Items.Add(oItemSituacaoAccao);
        }

        private void RefreshSituacoesAccoes()
        {
            string sQuery = "SELECT * FROM  VW_AL_SITUACAO_ACCAO order by SITUACAO_ID, ACC_id";
            SqlDataReader drS = null;

            try
            {
                listViewBaseSituacoes.MyClear();
                listViewSituacoesAccoes.MyClear();

                drS = m_oParameters.DirectSqlDataReader(sQuery);
                while (drS.Read())
                {
                    AddSituacao2ListViews(drS);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drS != null)
                {
                    drS.Close();
                }
            }
        }

        private void AddAccao2ListView(SqlDataReader dr)
        {
            Accao oAccao= new Accao(dr);

            ListViewItem olvItem = oAccao.MakeListViewItemAccao();

            olvItem.Tag = oAccao;

            listViewAccoes.Items.Add(olvItem);
        }

        private void RefreshAccoes()
        {

            string sQuery = "select * from VW_AL_ACCAO_TIPO order by ACC_ID";
            
            SqlDataReader drA = null;

            try
            {
                listViewAccoes.MyClear();

                drA = m_oParameters.DirectSqlDataReader(sQuery);
                while (drA.Read())
                {
                    AddAccao2ListView(drA);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drA != null)
                {
                    drA.Close();
                }
            }
        }

        private void RefreshParametros()
        {
            try
            {
                maskedTextBoxIteracao.Text = m_oParameters.m_iTempoEntreIteracoes.ToString();
                maskedTextBoxMaxDocsTranche.Text = m_oParameters.m_iMaxDocsTranche.ToString();
                maskedTextBoxInicioTemp.Text = m_oParameters.m_iParagemHoraInicio.ToString("00") + ":" + m_oParameters.m_iParagemMinutoInicio.ToString("00");
                maskedTextBoxFimTemp.Text = m_oParameters.m_iParagemHoraFim.ToString("00") + ":" + m_oParameters.m_iParagemMinutoFim.ToString("00");
                maskedTextBoxMinDias.Text = m_oParameters.m_iMinDias.ToString();
                maskedTextBoxMaxDias.Text = m_oParameters.m_iMaxDias.ToString();
                maskedTextBoxHoraIni.Text = m_oParameters.m_iParagemAlertaHoraInicio.ToString("00") + ":" + m_oParameters.m_iParagemAlertaMinutoInicio.ToString("00");
                maskedTextBoxHoraFim.Text = m_oParameters.m_iParagemAlertaHoraFim.ToString("00") + ":" + m_oParameters.m_iParagemAlertaMinutoFim.ToString("00");
                maskedTextBoxHoraEsperaEnvm.Text = m_oParameters.m_iHorasEsperaEnvm.ToString();
                maskedTextBoxHoraEsperaRemin.Text = m_oParameters.m_iHorasEsperaRemessa.ToString();
                maskedTextBoxPercentagemAlerta.Text = m_oParameters.m_iPercentagemAlerta.ToString();

            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadParametros()
        {
            m_iLastSituacao = -1;
            RefreshParametros();
            criaListaParametros1();
            criaListaParametros2();
            RefreshSituacoesAccoes();
            RefreshAccoes();
        }

        private void btLigar_Click(object sender, EventArgs e)
        {
            if (listViewBaseSituacoes.SelectedItems.Count != 1 || listViewAccoes.SelectedItems.Count != 1)
            {
                MessageBox.Show("Tem de selecionar uma situação e uma acção", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                int iSituacao, iAccao;
                iSituacao = ((SituacaoAccao)listViewBaseSituacoes.GetTag()).m_iSITUACAO_ID;
                iAccao = ((Accao)listViewAccoes.GetTag()).m_iACC_ID;

                string sQuery = "insert into ALERTA_SITUACAO_ACCAO (SITUACAO_ID, ACC_ID) values (" + iSituacao.ToString() + "," + iAccao + ")";

                m_oParameters.DirectSqlNonQuery(sQuery);

                string sMsg = "Ligada a Situação:" + iSituacao.ToString() + " a Acção: " + iAccao.ToString();
                GenericLog.GenLogRegistarAlerta(sMsg, "ligarSituacao()", 100);
                m_oParameters.EnviarAlertaSituacao(100, sMsg);
                MessageBox.Show(sMsg, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            
                LoadParametros();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btDesligar_Click(object sender, EventArgs e)
        {
            if (listViewSituacoesAccoes.SelectedItems.Count != 1)
            {
                MessageBox.Show("Tem de selecionar uma situação", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                int iSituacao, iAccao;
                iSituacao = ((SituacaoAccao)listViewSituacoesAccoes.GetTag()).m_iSITUACAO_ID;
                iAccao = ((SituacaoAccao)listViewSituacoesAccoes.GetTag()).m_oAccao.m_iACC_ID;

                string sQuery = "delete ALERTA_SITUACAO_ACCAO where SITUACAO_ID=" + iSituacao.ToString() + " and ACC_ID=" + iAccao.ToString();

                m_oParameters.DirectSqlNonQuery(sQuery);

                string sMsg = "Desligada a Situação:" + iSituacao.ToString() + " da Acção: " + iAccao.ToString();
                GenericLog.GenLogRegistarAlerta(sMsg, "CIConfigForm.cs", 100);
                m_oParameters.EnviarAlertaSituacao(100, sMsg);
                MessageBox.Show(sMsg, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

                LoadParametros();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void buttonActualizar_Click_1(object sender, EventArgs e)
        {
            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                string sMsgTempoIter, sMsgMaxDocs, sMsgDias;
                m_oParameters.m_iTempoEntreIteracoes = Convert.ToInt16(maskedTextBoxIteracao.Text);
                m_oParameters.WriteProfileInt("CI", "Tempos", "TempoEntreIteracoes", m_oParameters.m_iTempoEntreIteracoes);

                sMsgTempoIter = "Tempo entre Iterações actualizado para " + m_oParameters.m_iTempoEntreIteracoes.ToString();
                GenericLog.GenLogRegistarAlerta(sMsgTempoIter, "CIConfigForm.cs", 23);

                m_oParameters.m_iMaxDocsTranche = Convert.ToInt16(maskedTextBoxMaxDocsTranche.Text);
                m_oParameters.WriteProfileInt("CI", "Quantidades", "MaxDocsTranche", m_oParameters.m_iMaxDocsTranche);

                sMsgMaxDocs = "Max docs Tranche actualizado para " + m_oParameters.m_iMaxDocsTranche.ToString();
                GenericLog.GenLogRegistarAlerta(sMsgMaxDocs, "CIConfigForm.cs", 24);

                m_oParameters.m_iMinDias = Convert.ToInt16(maskedTextBoxMinDias.Text);
                m_oParameters.WriteProfileInt("CI", "RemessaValida", "MinDias", m_oParameters.m_iMinDias);
                m_oParameters.m_iMaxDias = Convert.ToInt16(maskedTextBoxMaxDias.Text);
                m_oParameters.WriteProfileInt("CI", "RemessaValida", "MaxDias", m_oParameters.m_iMaxDias);
                sMsgDias = "Diferença entre dias alterada para Min = " + m_oParameters.m_iMinDias.ToString() + " Max = " + m_oParameters.m_iMaxDias.ToString();
                GenericLog.GenLogRegistarAlerta(sMsgDias, "CIConfigForm.cs", 25);

                m_oParameters.m_iParagemHoraInicio = int.Parse(maskedTextBoxInicioTemp.Text.Substring(0, 2));
                m_oParameters.m_iParagemMinutoInicio = int.Parse(maskedTextBoxInicioTemp.Text.Substring(3, 2));
                m_oParameters.m_iParagemHoraFim = int.Parse(maskedTextBoxFimTemp.Text.Substring(0, 2));
                m_oParameters.m_iParagemMinutoFim = int.Parse(maskedTextBoxFimTemp.Text.Substring(3, 2));
                m_oParameters.WriteProfileInt("CI", "Paragem", "HoraInicio", m_oParameters.m_iParagemHoraInicio);
                m_oParameters.WriteProfileInt("CI", "Paragem", "MinutoInicio", m_oParameters.m_iParagemMinutoInicio);
                m_oParameters.WriteProfileInt("CI", "Paragem", "HoraFim", m_oParameters.m_iParagemHoraFim);
                m_oParameters.WriteProfileInt("CI", "Paragem", "MinutoFim", m_oParameters.m_iParagemMinutoFim);
               
                m_oParameters.HoradeParagem();

                string sMSGHoraParagem = "Hora de paragem alterada para das: " + m_oParameters.m_iParagemHoraInicio.ToString() + ":" + m_oParameters.m_iParagemMinutoInicio.ToString();
                sMSGHoraParagem += " até as " + m_oParameters.m_iParagemHoraFim.ToString() + ":" + m_oParameters.m_iParagemMinutoFim.ToString();

                GenericLog.GenLogRegistarAlerta(sMSGHoraParagem, "HoraParagem()", 26);
                m_oParameters.EnviarAlertaSituacao(100, sMSGHoraParagem);

                MessageBox.Show(sMSGHoraParagem, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            LoadParametros();
        }

        private void criaListaParametros1()
        {
            string sQuery = "select * from VW_AL_ACCAO_PARAM1 ";
            sQuery += " order by TIPACC_ID, ACC_ID, TIPACCP_NAME, TIPACCP_VALUE";

            SqlDataReader drP = null;

            try
            {
                listViewAccaoParam1.MyClear();

                drP = m_oParameters.DirectSqlDataReader(sQuery);
                while (drP.Read())
                {
                    AddParam2ListView1(drP);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drP != null)
                {
                    drP.Close();
                }
            }
        }

        private void criaListaParametros2()
        {
            string sQuery = "select * from VW_AL_ACCAO_PARAM2 ";
            sQuery += " order by TIPACC_ID, ACC_ID, ACCP_NAME, ACCP_VALUE";

            SqlDataReader drP = null;

            try
            {
                listViewAccaoParam2.MyClear();

                drP = m_oParameters.DirectSqlDataReader(sQuery);
                while (drP.Read())
                {
                    AddParam2ListView2(drP);
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "AlertasForm.cs", 28);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drP != null)
                {
                    drP.Close();
                }
            }
        }

        private void AddParam2ListView1(SqlDataReader dr)
        {
            AccaoParam oAccP = new AccaoParam(dr);

            ListViewItem olvItem = oAccP.MakeListViewItemParam1();

            olvItem.Tag = oAccP;

            listViewAccaoParam1.Items.Add(olvItem);

        }

        private void AddParam2ListView2(SqlDataReader dr)
        {
            AccaoParam oAccP = new AccaoParam(dr);

            ListViewItem olvItem = oAccP.MakeListViewItemParam2();

            olvItem.Tag = oAccP;

            listViewAccaoParam2.Items.Add(olvItem);
        }


        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void btActualizarAlertas_Click(object sender, EventArgs e)
        {
            try
            {
                if (MessageBox.Show("Tem a certeza?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    return;
                }

                m_oParameters.m_iHorasEsperaEnvm = Convert.ToInt16(maskedTextBoxHoraEsperaEnvm.Text);
                m_oParameters.WriteProfileInt("CI", "ALERTAS", "MaxHorasEsperaENVM", m_oParameters.m_iHorasEsperaEnvm);
                m_oParameters.m_iHorasEsperaRemessa = Convert.ToInt16(maskedTextBoxHoraEsperaRemin.Text);
                m_oParameters.WriteProfileInt("CI", "ALERTAS", "MaxHorasEsperaRemessaCI", m_oParameters.m_iHorasEsperaRemessa);

                m_oParameters.m_iParagemAlertaHoraInicio = int.Parse(maskedTextBoxInicioTemp.Text.Substring(0, 2));
                m_oParameters.m_iParagemAlertaMinutoInicio = int.Parse(maskedTextBoxInicioTemp.Text.Substring(3, 2));
                m_oParameters.m_iParagemAlertaHoraFim = int.Parse(maskedTextBoxFimTemp.Text.Substring(0, 2));
                m_oParameters.m_iParagemAlertaMinutoFim = int.Parse(maskedTextBoxFimTemp.Text.Substring(3, 2));
                m_oParameters.WriteProfileInt("CI", "ALERTAS", "HoraInicio", m_oParameters.m_iParagemAlertaHoraInicio);
                m_oParameters.WriteProfileInt("CI", "ALERTAS", "MinutoInicio", m_oParameters.m_iParagemAlertaMinutoInicio);
                m_oParameters.WriteProfileInt("CI", "ALERTAS", "HoraFim", m_oParameters.m_iParagemAlertaHoraFim);
                m_oParameters.WriteProfileInt("CI", "ALERTAS", "MinutoFim", m_oParameters.m_iParagemAlertaMinutoFim);

                m_oParameters.m_iPercentagemAlerta = int.Parse(maskedTextBoxPercentagemAlerta.Text);
                m_oParameters.WriteProfileInt("CI", "ALERTAS", "ParamPercentagem", m_oParameters.m_iPercentagemAlerta);

                string sMsg = "Parametros de Alertas Alterados";
                GenericLog.GenLogRegistarAlerta(sMsg, "ActualizarParametrosAlertas()", 100);
                m_oParameters.EnviarAlertaSituacao(100, sMsg);
                MessageBox.Show(sMsg, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
         }
    }
}

// FILE: SDCIM/ModusCI/CIConfiguration/CIConfigForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButton1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHySURBVFhHxZQBksMwCAP79DytP8shGWFCnNiXae9gNG4M
        YWW309dKbNu227Ik7/1cBHwzjRL7qFu+3++vmLiGI71OuOVHTcTpr9JPzz7Lb5iYnh6QrGqCU56Euxfq
        nG34QdWETYm91Lcc8+9+349ySECR3HNTrT6PcHyVqMEcDe4cLslINpFvBPOXIkxUIwVO2WfBr0zo2db1
        OJgQWKsM6LOesxxKU23Gr6MPAyDDi+LkVQ18e/poGsqGcPgAKp2uP8tmZPjIiDXe5MTELRwisEH1lR5M
        aPM2i4mAwYT203pSh9qzz8sxNWG1GfQSnk9tyT7/gwKbsXoLj024gaMJzoxg4TbZkyBugmuWoJIf7gBH
        lj+ltjnLkYmRMhyrGziZQK9H2yjJF1DjUK1tOIcImKX+gLcZFc4VvR7tpZrctxdlhPLBUoXHLNQS3PZO
        N9D6L36EGsb9BKyqcPXLqD1j/uwGEO48XX0P203QrGwgjHQ4XuZqtQFc9XILvUj1WoXbfoYj03sz+dwW
        AUkD6dRW1HrdVp7OV/WvJHqlagDBDS8KrmtjTSuBbmIVjryDI2I4lOCXJp7A7wwgNLzCqwn0hJFZrsIV
        MdiHD020eu+9ygSGpnAFGg9GxlI0CPLcQy2Dn0QY7Sf9+yi39T+RTCzG6/UD6BuXMMkwgBoAAAAASUVO
        RK5CYII=
</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>109, 17</value>
  </metadata>
  <data name="toolStripButton2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFYSURBVFhH1ZGLrgMhCET76fvnW0fBIi+1tr25JGdRQGaS
        fWzGfchx3Nd1LYN5BL78tm45CCMSgdkuTneqH4UR8sDcIE416m1HfdyOcwOYMeJUp/529AVAC0rQd8Wp
        RzPbYf6jB3qhOPVpbjvaUl4cmDBzmo8YSEwMc7hrEgPtcUZZishM8Nx7BuTyBES/i6UfM7Aag9Br8VjX
        rBjYwi62PUlqQA9rpLAUoKXnBmZMxF0D/BZnukcGZjEVNwbKGVFr6FH/zIBapOlzJNxryHSm2nZMxUGd
        YwN8d96WvB3DQi3M1L40oDky0EAYYQa9bxrgMMIMet8yIKMJRfzEAIto/rOB9ngVKSqRPS3ehCPwwYKE
        KjDLZQ8ycMVpdmDFgCvm5PKpZ7AkDmYGIjE3OwZQQz8kM+CKJLl86hksiYPIQCSSZmEAZ9SneAbc5Qu5
        fF5wbUY38Fc87icdVRQJ1bFuoAAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIConfiguration/CIConfiguration.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{84354208-75AC-4D71-A00A-95232EF2C59C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIConfiguration</RootNamespace>
    <AssemblyName>CIConfiguration</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Balcao.cs" />
    <Compile Include="BalcaoForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="BalcaoForm.Designer.cs">
      <DependentUpon>BalcaoForm.cs</DependentUpon>
    </Compile>
    <Compile Include="CIConfigForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CIConfigForm.Designer.cs">
      <DependentUpon>CIConfigForm.cs</DependentUpon>
    </Compile>
    <Compile Include="Config.cs" />
    <Compile Include="Maquina.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="UtilizadoresForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="UtilizadoresForm.Designer.cs">
      <DependentUpon>UtilizadoresForm.cs</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Alerta\Alerta.csproj">
      <Project>{763022EF-042B-4160-AFFF-9E59EF4B02A5}</Project>
      <Name>Alerta</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="BalcaoForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>BalcaoForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="CIConfigForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>CIConfigForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <SubType>Designer</SubType>
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="UtilizadoresForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>UtilizadoresForm.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIConfiguration/Config.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIConfiguration
{
    public class Config
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        //protected Form m_oMainForm;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public Config(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            m_oParameters = oParameters;
           // m_oMainForm = oMainForm;
            m_oMenuInterface = oMenuInterface;
     
        }

        public void BalcaoConfig()
        {
            BalcaoForm oForm = new BalcaoForm(m_oParameters, m_oMenuInterface);
            oForm.MdiParent = m_oMenuInterface.GetMainForm();
            oForm.Show();
        }

        public void UtilizadorConfig()
        {
            UtilizadoresForm oForm = new UtilizadoresForm(m_oParameters, m_oMenuInterface);
            oForm.MdiParent = m_oMenuInterface.GetMainForm();
            oForm.Show();
        }

        public void CIConfiguracao()
        {
            CIConfigForm oForm = new CIConfigForm(m_oParameters, m_oMenuInterface);
            oForm.MdiParent = m_oMenuInterface.GetMainForm();
            oForm.Show();
        }
    }
}


// FILE: SDCIM/ModusCI/CIConfiguration/Maquina.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

namespace CIConfiguration
{
    class Maquina
    {
        public long m_lMAQ_ID;          // Chave
        public string m_sBALCAO_PAIS;  // Ligação ao Balcão
        public int m_iBALCAO_BANCO;    // Ligação ao Balcão
        public int m_iBALCAO_CODIGO;   // Ligação ao Balcão
        public int m_iMAQ_SEQBALCAO;
        public int m_iMAQ_MODELO;
        public int m_iMAQ_IQA;
        public int m_iMAQ_OPERACAO;
        public string m_sOperacao;
        public int m_iMAQ_EFECTUADO;
        public DateTime m_dtMAQ_TIMER;
        public string m_sMAQ_ERRO;
        public string m_sChaveWS;

        public Maquina()
        {
            m_lMAQ_ID=-1;
            m_sBALCAO_PAIS="PT";
            m_iBALCAO_BANCO=35;
            m_iBALCAO_CODIGO=-1;
            m_iMAQ_SEQBALCAO=-1;
            m_iMAQ_MODELO=-1;
            m_iMAQ_IQA=0;
            m_iMAQ_OPERACAO=0;
            m_iMAQ_EFECTUADO=0;
            m_dtMAQ_TIMER = DateTime.Now;
            m_sMAQ_ERRO="";
            m_sOperacao = "";
            m_sChaveWS = "";
        }

        public Maquina(SqlDataReader dr)
        {
            m_lMAQ_ID = Convert.ToInt64(dr["MAQ_ID"]);
            m_sBALCAO_PAIS = Convert.ToString(dr["BALCAO_PAIS"]);
            m_iBALCAO_BANCO = Convert.ToInt16(dr["BALCAO_BANCO"]);
            m_iBALCAO_CODIGO = Convert.ToInt16(dr["BALCAO_CODIGO"]);
            m_iMAQ_SEQBALCAO = Convert.ToInt16(dr["MAQ_SEQBALCAO"]);
            m_iMAQ_MODELO = Convert.ToInt16(dr["MAQ_MODELO"]);
            m_iMAQ_IQA = Convert.ToInt16(dr["MAQ_IQA"]);
            m_iMAQ_OPERACAO = Convert.ToInt16(dr["MAQ_OPERACAO"]);
            m_sOperacao = Convert.ToString(dr["OPERACAO_ABR"]);
            m_iMAQ_EFECTUADO = Convert.ToInt16(dr["MAQ_EFECTUADO"]);
            m_dtMAQ_TIMER = Convert.ToDateTime(dr["MAQ_TIMER"]);
            m_sMAQ_ERRO = Convert.ToString(dr["MAQ_ERRO"]);
            m_sChaveWS = Convert.ToString(dr["CHAVE_WEBSERVICE"]);
        }

        public ListViewItem MakeListViewItemMaquina(string sDateTimeSysFmt)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lMAQ_ID.ToString();
            olvItem.SubItems.Add(m_sBALCAO_PAIS + " " + m_iBALCAO_BANCO.ToString("0000") + "." + m_iBALCAO_CODIGO.ToString("0000"));
            olvItem.SubItems.Add(m_iMAQ_SEQBALCAO.ToString());
            olvItem.SubItems.Add(m_iMAQ_MODELO.ToString());
            olvItem.SubItems.Add(m_iMAQ_IQA.ToString());
            olvItem.SubItems.Add(m_sOperacao);
            olvItem.SubItems.Add(m_iMAQ_EFECTUADO.ToString());
            olvItem.SubItems.Add(m_dtMAQ_TIMER.ToString(sDateTimeSysFmt));
            olvItem.SubItems.Add(m_sMAQ_ERRO);
            olvItem.SubItems.Add(m_sChaveWS);

            return olvItem;
        }


    }
}


// FILE: SDCIM/ModusCI/CIConfiguration/UtilizadoresForm.Designer.cs
﻿namespace CIConfiguration
{
    partial class UtilizadoresForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.utilizadoresEnable(true);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UtilizadoresForm));
            this.btRefresh = new System.Windows.Forms.Button();
            this.btDelete = new System.Windows.Forms.Button();
            this.btUpdate = new System.Windows.Forms.Button();
            this.btInsert = new System.Windows.Forms.Button();
            this.listViewUsers = new NBIISNET.ListViewBase();
            this.columnHeader1 = new System.Windows.Forms.ColumnHeader();
            this.columnHeader5 = new System.Windows.Forms.ColumnHeader();
            this.columnHeader6 = new System.Windows.Forms.ColumnHeader();
            this.textBoxLogin = new System.Windows.Forms.TextBox();
            this.textBoxFullName = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.comboBoxUserGroup = new System.Windows.Forms.ComboBox();
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.buttonExitJanela = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // btRefresh
            // 
            this.btRefresh.Image = ((System.Drawing.Image)(resources.GetObject("btRefresh.Image")));
            this.btRefresh.Location = new System.Drawing.Point(172, 47);
            this.btRefresh.Name = "btRefresh";
            this.btRefresh.Size = new System.Drawing.Size(56, 42);
            this.btRefresh.TabIndex = 7;
            this.toolTip1.SetToolTip(this.btRefresh, "Refresh");
            this.btRefresh.UseVisualStyleBackColor = true;
            this.btRefresh.Click += new System.EventHandler(this.btRefresh_Click);
            // 
            // btDelete
            // 
            this.btDelete.Location = new System.Drawing.Point(505, 446);
            this.btDelete.Name = "btDelete";
            this.btDelete.Size = new System.Drawing.Size(75, 23);
            this.btDelete.TabIndex = 6;
            this.btDelete.Text = "Apagar";
            this.btDelete.UseVisualStyleBackColor = true;
            this.btDelete.Click += new System.EventHandler(this.btDelete_Click);
            // 
            // btUpdate
            // 
            this.btUpdate.Location = new System.Drawing.Point(411, 446);
            this.btUpdate.Name = "btUpdate";
            this.btUpdate.Size = new System.Drawing.Size(75, 23);
            this.btUpdate.TabIndex = 5;
            this.btUpdate.Text = "Actualizar";
            this.btUpdate.UseVisualStyleBackColor = true;
            this.btUpdate.Click += new System.EventHandler(this.btUpdate_Click);
            // 
            // btInsert
            // 
            this.btInsert.Location = new System.Drawing.Point(318, 446);
            this.btInsert.Name = "btInsert";
            this.btInsert.Size = new System.Drawing.Size(75, 23);
            this.btInsert.TabIndex = 4;
            this.btInsert.Text = "Inserir";
            this.btInsert.UseVisualStyleBackColor = true;
            this.btInsert.Click += new System.EventHandler(this.btInsert_Click);
            // 
            // listViewUsers
            // 
            this.listViewUsers.AllowColumnReorder = true;
            this.listViewUsers.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader1,
            this.columnHeader5,
            this.columnHeader6});
            this.listViewUsers.EnableExportar = true;
            this.listViewUsers.FullRowSelect = true;
            this.listViewUsers.GridLines = true;
            this.listViewUsers.HideSelection = false;
            this.listViewUsers.Location = new System.Drawing.Point(172, 95);
            this.listViewUsers.MultiSelect = false;
            this.listViewUsers.Name = "listViewUsers";
            this.listViewUsers.Size = new System.Drawing.Size(563, 280);
            this.listViewUsers.TabIndex = 17;
            this.listViewUsers.TabStop = false;
            this.listViewUsers.UseCompatibleStateImageBehavior = false;
            this.listViewUsers.View = System.Windows.Forms.View.Details;
            this.listViewUsers.SelectedIndexChanged += new System.EventHandler(this.listViewUsers_SelectedIndexChanged);
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Login";
            this.columnHeader1.Width = 80;
            // 
            // columnHeader5
            // 
            this.columnHeader5.Text = "Nome Completo";
            this.columnHeader5.Width = 298;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "Perfil";
            this.columnHeader6.Width = 176;
            // 
            // textBoxLogin
            // 
            this.textBoxLogin.Location = new System.Drawing.Point(172, 403);
            this.textBoxLogin.Name = "textBoxLogin";
            this.textBoxLogin.Size = new System.Drawing.Size(85, 20);
            this.textBoxLogin.TabIndex = 1;
            // 
            // textBoxFullName
            // 
            this.textBoxFullName.Location = new System.Drawing.Point(263, 403);
            this.textBoxFullName.Name = "textBoxFullName";
            this.textBoxFullName.Size = new System.Drawing.Size(294, 20);
            this.textBoxFullName.TabIndex = 2;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(169, 390);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(33, 13);
            this.label1.TabIndex = 28;
            this.label1.Text = "Login";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(260, 387);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(82, 13);
            this.label3.TabIndex = 30;
            this.label3.Text = "Nome Completo";
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(560, 387);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(50, 13);
            this.label5.TabIndex = 32;
            this.label5.Text = "Group ID";
            // 
            // comboBoxUserGroup
            // 
            this.comboBoxUserGroup.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboBoxUserGroup.FormattingEnabled = true;
            this.comboBoxUserGroup.Location = new System.Drawing.Point(564, 403);
            this.comboBoxUserGroup.Name = "comboBoxUserGroup";
            this.comboBoxUserGroup.Size = new System.Drawing.Size(171, 21);
            this.comboBoxUserGroup.TabIndex = 3;
            // 
            // buttonExitJanela
            // 
            this.buttonExitJanela.Image = ((System.Drawing.Image)(resources.GetObject("buttonExitJanela.Image")));
            this.buttonExitJanela.Location = new System.Drawing.Point(234, 47);
            this.buttonExitJanela.Name = "buttonExitJanela";
            this.buttonExitJanela.Size = new System.Drawing.Size(53, 42);
            this.buttonExitJanela.TabIndex = 8;
            this.buttonExitJanela.UseVisualStyleBackColor = true;
            this.buttonExitJanela.Click += new System.EventHandler(this.buttonExitJanela_Click);
            // 
            // UtilizadoresForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(933, 547);
            this.Controls.Add(this.buttonExitJanela);
            this.Controls.Add(this.comboBoxUserGroup);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.textBoxFullName);
            this.Controls.Add(this.textBoxLogin);
            this.Controls.Add(this.btRefresh);
            this.Controls.Add(this.btDelete);
            this.Controls.Add(this.btUpdate);
            this.Controls.Add(this.btInsert);
            this.Controls.Add(this.listViewUsers);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "UtilizadoresForm";
            this.ShowInTaskbar = false;
            this.Text = "Utilizadores";
            this.Load += new System.EventHandler(this.UtilizadoresForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button btRefresh;
        private System.Windows.Forms.Button btDelete;
        private System.Windows.Forms.Button btUpdate;
        private System.Windows.Forms.Button btInsert;
        public NBIISNET.ListViewBase listViewUsers;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader5;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.TextBox textBoxLogin;
        private System.Windows.Forms.TextBox textBoxFullName;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.ComboBox comboBoxUserGroup;
        private System.Windows.Forms.ToolTip toolTip1;
        private System.Windows.Forms.Button buttonExitJanela;
    }
}

// FILE: SDCIM/ModusCI/CIConfiguration/UtilizadoresForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using System.Collections;

namespace CIConfiguration
{
    public partial class UtilizadoresForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;
        protected CIConfigGP.User m_oCurrUser;

        public UtilizadoresForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        private void UtilizadoresForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

                btDelete.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                btInsert.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                btUpdate.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                m_oMenuInterface.utilizadoresEnable(false);
                RefreshUsers();
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "UtilizadoresForm.cs", 29);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }
        private void RefreshUsers()
        {
            listViewUsers.MyClear();

            SqlDataReader drU = null;
            string sQuery = "select * from VW_PASSWD_GROUP order by GROUP_ID";

            try
            {
                comboBoxUserGroup.DataSource = null;
                comboBoxUserGroup.Items.Clear();
                textBoxFullName.Text = "";
                textBoxLogin.Text = "";

                preenheComboBox();

                drU = m_oParameters.DirectSqlDataReader(sQuery);
                while (drU.Read())
                {
                    AddUser2ListView(drU);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (drU != null)
                {
                    drU.Close();
                }
            }
        }

        private ListViewItem MakeListViewItemUser(CIConfigGP.User oUser)
        {
            ListViewItem olvItem = new ListViewItem();
            olvItem.Text = oUser.m_sUserName;
            olvItem.SubItems.Add(oUser.m_sUserFullName);
            olvItem.SubItems.Add(oUser.m_sGroupName);

            return olvItem;
        }

        private void AddUser2ListView(SqlDataReader dr)
        {
            CIConfigGP.User oUser = new CIConfigGP.User(dr);

            ListViewItem olvItem = MakeListViewItemUser(oUser);

            olvItem.Tag = oUser;

            listViewUsers.Items.Add(olvItem);
        }

        private void preenheComboBox()
        {
            DataSet ds = null;

            if (comboBoxUserGroup.Items.Count > 0)
            {
                return;
            }

            try
            {
                string sComm = "select * from dbo.VW_GRUPO";

                ds = m_oParameters.DirectSqlDataSet(sComm, "GRUPO");
                comboBoxUserGroup.DataSource = ds.Tables[0];
                comboBoxUserGroup.DisplayMember = "GROUP_NAME";
                comboBoxUserGroup.ValueMember = "GROUP_ID";
            }
            finally
            {
                if (ds != null)
                {
                    ds.Dispose();
                    ds = null;
                }
            }
        }

        private void DisplaySelectedUser()
        {
            ArrayList aoItems = new ArrayList();

            DataTable dt = null;

            int iSelected=0;

            try
            {
                if (listViewUsers.SelectedItems.Count != 1)
                    return;

                m_oCurrUser = (CIConfigGP.User)listViewUsers.GetTag();
                textBoxLogin.Text = m_oCurrUser.m_sUserName;
                textBoxFullName.Text = m_oCurrUser.m_sUserFullName;

                preenheComboBox();

                dt = (DataTable)comboBoxUserGroup.DataSource;
                for (int iIndex = 0; iIndex < dt.Rows.Count; iIndex++ )
                {
                    if (dt.Rows[iIndex]["GROUP_ID"].ToString() == m_oCurrUser.m_iUserGroup.ToString())
                    {
                        iSelected = iIndex;
                    }
                }

                if (comboBoxUserGroup.Items.Count > 0)
                {
                    comboBoxUserGroup.SelectedIndex = iSelected;
                }
   
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void listViewUsers_SelectedIndexChanged(object sender, EventArgs e)
        {
            DisplaySelectedUser();
        }

        private void btRefresh_Click(object sender, EventArgs e)
        {
            RefreshUsers();
        }

        private void btInsert_Click(object sender, EventArgs e)
        {
            try
            {   
                ArrayList oParam = new ArrayList();
                string sSpNome = "dbo.Insert_Utilizadores";

                oParam.Add(new GeneralDBParameters("@LoginName", textBoxLogin.Text));

                oParam.Add(new GeneralDBParameters("@GroupId", comboBoxUserGroup.SelectedValue.ToString()));
                oParam.Add(new GeneralDBParameters("@UserFullName", textBoxFullName.Text));
                if(MessageBox.Show("Tem a certeza que deseja inserir o utilizador " + textBoxLogin.Text, Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question)==DialogResult.Yes)
                {
                    m_oParameters.DirectStoredProcedureNonQuery(sSpNome, ref oParam);
                    MessageBox.Show("Utilizador inserido com sucesso", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                RefreshUsers();
                string sSmg = "User: " + textBoxLogin.Text + " Perfil: " + comboBoxUserGroup.SelectedValue.ToString() + " Inserido";
                GenericLog.GenLogRegistarAlerta(sSmg, "InsertUser()", 100);
                m_oParameters.EnviarAlertaSituacao(100, sSmg);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            
        }

        private void btUpdate_Click(object sender, EventArgs e)
        {
            try
            {
                ArrayList oParam = new ArrayList();
                string sSpNome = "dbo.Update_Utilizadores";
    

                oParam.Add(new GeneralDBParameters("@LoginName", textBoxLogin.Text));
                oParam.Add(new GeneralDBParameters("@GroupId", comboBoxUserGroup.SelectedValue.ToString()));
                oParam.Add(new GeneralDBParameters("@UserFullName", textBoxFullName.Text));
                if (MessageBox.Show("Tem a certeza que deseja actualizar o utilizador" + textBoxLogin.Text, Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) ==DialogResult.Yes)
                {
                    m_oParameters.DirectStoredProcedureNonQuery(sSpNome, ref oParam);
                }
                RefreshUsers();

                string sSmg = "User: " + textBoxLogin.Text + " Perfil: " + comboBoxUserGroup.SelectedValue.ToString() + " alterado";
                GenericLog.GenLogRegistarAlerta(sSmg, "UpdateUser()", 100);
                m_oParameters.EnviarAlertaSituacao(100, sSmg);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btDelete_Click(object sender, EventArgs e)
        {
            try
            {                
                ArrayList oParam = new ArrayList();
                string sSpNome = "dbo.Delete_Utilizadores";

                if (MessageBox.Show("Tem a certeza que deseja eleminar o utilizador" + textBoxLogin.Text, Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) 
                {
                    oParam.Add(new GeneralDBParameters("@LoginName", textBoxLogin.Text));
                    m_oParameters.DirectStoredProcedureNonQuery(sSpNome, ref oParam);
                }
                RefreshUsers();

                string sSmg = "User: " + textBoxLogin.Text + " Perfil: " + comboBoxUserGroup.SelectedValue.ToString() + " Removido";
                GenericLog.GenLogRegistarAlerta(sSmg, "DeleteUser()", 100);
                m_oParameters.EnviarAlertaSituacao(100, sSmg);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void buttonExitJanela_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

    }
}

// FILE: SDCIM/ModusCI/CIConfiguration/UtilizadoresForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btRefresh.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAitJREFUWEe9Vguu
        wzAI69F7tN2sLyGYGEI+r5rWqtLWZdgBY3JdB9d9309ZdvTo2oOoh0sM/C4Esru+r+TK/fl85PO3STzX
        DLzCVvDyu4B/m4TtPt97I4YdA/zLJLa7ryT5iZk4rPS4bLv7RJQgAhLX1cmRiI85bXd/PU9JOD1KCkRE
        mvLuNoEeoR/tvtZfxPlIcDxCSHUhcUgblcgRgbrI9T6LUFUPcAG0LmhkMhKv2nMwIPQ87V6I8PdQkhoD
        /nC8e1rYaxzBGZgysNLFjMDaYrXGbqcTcEt/kgWAZy45s5n2XmxWaxuA09rHzpA50sSHkjoSW8UnJGyn
        1AVGMhKgrsDMUE/oFdmSKFnYgabplw5pk9S1pBqUMdgS0Cy8JpH5QjMtu9Y6iGXQ3ocHLFsxy4DE86a0
        JzAjkQjTWlGccOGMrbXlSgkMhxEV3aorJJaQAniiARrZnYAED7cEKwHckUwDQ+2cAUxIEOX0l3fjbNAM
        pCJEMPWBweEigbi+1niR/syebfzSDKAShdGbEYBdE7iV2Oy6nx2dH7gs8G7Qw1kmpDzqlihh+K+CpHaf
        OyIFlDRp7bogSVxox4mIB00FvQxzQV4oAYDjeAUB9UzV9moKP75BoGfVD0g3/2PNCsxA4g24bjCbisIG
        JNzplo5VIGH+fkJil/p4UIjHsUiGu2Q7RyjtRDpCjt9rYEckV/doZJMumKZ8T2W/wll2I/D7K2Tr9wRY
        wP9B/wPoG5cwg444zQAAAABJRU5ErkJggg==
</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="buttonExitJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAVFJREFUWEe9l4sS
        hCAIRevP+/N2UTBUHhpaM63NVtwjItB5zB333OPd02fw/eO+rmv4/IvdcMAvXMO7nwFU4ln4O4BOPAiQ
        6NF1rvtF8TAAGiA3anGgiocBIIiYEQnAFF8C4ECkZaKIB8H2DAThY9iAiABQkOlj2s24nxWIGAA3blxb
        EEsAcKLuUK31s7avY6Be40FvlCBbAiBFLf+vhaJ7KI45PuCBnOnMIOy2GBMXAcheA/umGPUza8Q7AKqC
        ALEMQHA7z4jVLuBxsQTAEd+/BAPFKJIHvLgYKse7AQhS7Qd2AnAPjW3XxdWwBtAy5cZyvB3AL8c8SwY8
        oGRbSMHQtxtn6uupv9dGoyNKE5Ds52Z3gXj+8BBbMtO+BzA08+fLRypYtnctgClxwQOeZ9OSaACz4vjt
        VzwwJK4BvBIvxnBWTlCXgCwecBoSr2EJ3P8B7HIFGlBzdMgAAAAASUVORK5CYII=
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIControlo/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIControlo/Properties/Resources.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryForm.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("QueryForm.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIControlo/Properties/Resources.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIControlo/Properties/Settings.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIServico.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string P {
            get {
                return ((string)(this["P"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string S {
            get {
                return ((string)(this["S"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("999")]
        public string A {
            get {
                return ((string)(this["A"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SDC6001SQL28\\S2K081")]
        public string H {
            get {
                return ((string)(this["H"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDCSDCIMA01")]
        public string D {
            get {
                return ((string)(this["D"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLPRDVS301")]
        public string GCAAH {
            get {
                return ((string)(this["GCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSPGCCALX")]
        public string GCAAD {
            get {
                return ((string)(this["GCAAD"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLDEVBS301\\GCCAA")]
        public string DVPGCAAH {
            get {
                return ((string)(this["DVPGCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDGCCALX")]
        public string DVPGCAAD {
            get {
                return ((string)(this["DVPGCAAD"]));
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIControlo/Properties/Settings.settings
﻿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="My" GeneratedClassName="MySettings" UseMySettingsClassName="true">
  <Profiles />
  <Settings>
    <Setting Name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" Type="(Web Service URL)" Scope="Application">
      <Value Profile="(Default)">http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</Value>
    </Setting>
  </Settings>
</SettingsFile>

// FILE: SDCIM/ModusCI/CIControlo/CIControlo.DVP.exe.config
<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="CIControlo.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIControlo.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>SDC6001SQL28\S2K081</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSDCSDCIMA01</value>
            </setting>
            <setting name="UseBaseDados" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="GCAA9601H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9601D" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="GCAA9604H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9604D" serializeAs="String">
                <value>BDSPGCCAPT</value>
            </setting>
            <setting name="PRDH" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="PRDD" serializeAs="String">
                <value>BDSPCSDCIMA01</value>
            </setting>
            <setting name="QUAH" serializeAs="String">
                <value>SQC6001SQL17\S2K082</value>
            </setting>
            <setting name="QUAD" serializeAs="String">
                <value>BDSQCSDCIMA01</value>
            </setting>
            <setting name="DVPH" serializeAs="String">
                <value>SDC6001SQL28\S2K081</value>
            </setting>
            <setting name="DVPD" serializeAs="String">
                <value>BDSDCSDCIMA01</value>
            </setting>
        </CIControlo.Properties.Settings>
    </applicationSettings>
<startup useLegacyV2RuntimeActivationPolicy="true">
	<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
</startup>
</configuration>




// FILE: SDCIM/ModusCI/CIControlo/CIControlo.PRD.exe.config
<?xml version="1.0"?>
<configuration>
  <configSections>
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
      <section name="CIControlo.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
    </sectionGroup>
  </configSections>
  <applicationSettings>
    <CIControlo.Properties.Settings>
      <setting name="P" serializeAs="String">
        <value>1</value>
      </setting>
      <setting name="S" serializeAs="String">
        <value>1</value>
      </setting>
      <setting name="A" serializeAs="String">
        <value>1</value>
      </setting>
      <setting name="H" serializeAs="String">
        <value>VPC6001SQL111\S2K081</value>
      </setting>
      <setting name="D" serializeAs="String">
        <value>BDSPCSDCIMA01</value>
      </setting>
      <setting name="UseBaseDados" serializeAs="String">
        <value>1</value>
      </setting>
      <setting name="GCAA9601H" serializeAs="String">
        <value>VPC6001SQL111\S2K081</value>
      </setting>
      <setting name="GCAA9601D" serializeAs="String">
        <value>BDSPGCCALX</value>
      </setting>
      <setting name="GCAA9604H" serializeAs="String">
        <value>VPC6001SQL111\S2K081</value>
      </setting>
      <setting name="GCAA9604D" serializeAs="String">
        <value>BDSPGCCAPT</value>
      </setting>
      <setting name="PRDH" serializeAs="String">
        <value>VPC6001SQL111\S2K081</value>
      </setting>
      <setting name="PRDD" serializeAs="String">
        <value>BDSPCSDCIMA01</value>
      </setting>
      <setting name="QUAH" serializeAs="String">
        <value>SQC6001SQL17\S2K082</value>
      </setting>
      <setting name="QUAD" serializeAs="String">
        <value>BDSQCSDCIMA01</value>
      </setting>
      <setting name="DVPH" serializeAs="String">
        <value>SDC6001SQL28\S2K081</value>
      </setting>
      <setting name="DVPD" serializeAs="String">
        <value>BDSDCSDCIMA01</value>
      </setting>
    </CIControlo.Properties.Settings>
  </applicationSettings>
  <startup useLegacyV2RuntimeActivationPolicy="true">
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
  </startup>
</configuration>




// FILE: SDCIM/ModusCI/CIControlo/CIControlo.QLD.exe.config
<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="CIControlo.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIControlo.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>SQC6001SQL17\S2K082</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSQCSDCIMA01</value>
            </setting>
            <setting name="UseBaseDados" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="GCAA9601H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9601D" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="GCAA9604H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9604D" serializeAs="String">
                <value>BDSPGCCAPT</value>
            </setting>
            <setting name="PRDH" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="PRDD" serializeAs="String">
                <value>BDSPCSDCIMA01</value>
            </setting>
            <setting name="QUAH" serializeAs="String">
                <value>SQC6001SQL17\S2K082</value>
            </setting>
            <setting name="QUAD" serializeAs="String">
                <value>BDSQCSDCIMA01</value>
            </setting>
            <setting name="DVPH" serializeAs="String">
                <value>SDC6001SQL28\S2K081</value>
            </setting>
            <setting name="DVPD" serializeAs="String">
                <value>BDSDCSDCIMA01</value>
            </setting>
        </CIControlo.Properties.Settings>
    </applicationSettings>
<startup useLegacyV2RuntimeActivationPolicy="true">
	<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
</startup>
</configuration>




// FILE: SDCIM/ModusCI/CIControlo/CIControlo.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7AE1DE61-8341-4A18-8071-1222AA96117B}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIControlo</RootNamespace>
    <AssemblyName>CIControlo</AssemblyName>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <ApplicationIcon>CHART5_small.ICO</ApplicationIcon>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>1</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>none</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="CIControloParameters.cs" />
    <Compile Include="CIMainForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="CIMainForm.Designer.cs">
      <DependentUpon>CIMainForm.cs</DependentUpon>
    </Compile>
    <Compile Include="ImportGCAAForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ImportGCAAForm.Designer.cs">
      <DependentUpon>ImportGCAAForm.cs</DependentUpon>
    </Compile>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <EmbeddedResource Include="CIMainForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>CIMainForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ImportGCAAForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>ImportGCAAForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="app.config" />
    <None Include="CIControlo.DVP.exe.config" />
    <None Include="CIControlo.PRD.exe.config" />
    <None Include="CIControlo.QLD.exe.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="Settings.cs" />
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.2.0">
      <Visible>False</Visible>
      <ProductName>.NET Framework 2.0</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIActividades\CIActividades.csproj">
      <Project>{6FFF83BB-F585-43A4-B446-46F0EE79D42E}</Project>
      <Name>CIActividades</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfiguration\CIConfiguration.csproj">
      <Project>{84354208-75AC-4D71-A00A-95232EF2C59C}</Project>
      <Name>CIConfiguration</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIFicheirosControlo\CIFicheirosControlo.csproj">
      <Project>{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}</Project>
      <Name>CIFicheirosControlo</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIFicheiro\CIFicheiro.csproj">
      <Project>{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}</Project>
      <Name>CIFicheiro</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIReports\CIReports.csproj">
      <Project>{BE6BD596-18AE-40B6-846E-6A8A09571A1A}</Project>
      <Name>CIReports</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIServTester\CIServTester.csproj">
      <Project>{8D5B89F8-7C35-4848-BC4E-279A0723130C}</Project>
      <Name>CIServTester</Name>
    </ProjectReference>
    <ProjectReference Include="..\MDIsControlo\MDIsControlo.csproj">
      <Project>{D3BC3C16-AE19-4664-AC69-E5282998467B}</Project>
      <Name>MDIsControlo</Name>
    </ProjectReference>
    <ProjectReference Include="..\QueryForm\QueryForm.csproj">
      <Project>{37DD4474-F8FC-4789-9D9D-160BD744E079}</Project>
      <Name>QueryForm</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Content Include="CHART5_small.ICO" />
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <PropertyGroup>
    <PostBuildEvent>copy CIControlo.exe.config ..\..\..\Deploy
</PostBuildEvent>
    <PreBuildEvent>copy ..\..\..\Icons\doc_rear.jpg .
copy ..\..\..\Icons\doc_front.jpg .
</PreBuildEvent>
  </PropertyGroup>
</Project>

// FILE: SDCIM/ModusCI/CIControlo/CIControloParameters.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using CIConfigGP;

namespace CIControlo
{
    public class CIControloParameters : CIGlobalParameters
    {
        public CIControloParameters()
            : base()
        {
            m_bUseBaseDados = true;
        }

        public CIControloParameters(string sPrefixo)
            : base(sPrefixo)
        {
            m_bUseBaseDados = true;
        }

        protected override string ParseCommand(string sParametro)
        {
            m_bUseBaseDados = true;
            sParametro = sParametro.Replace("/", "");
            sParametro = sParametro.Replace(":", "");

            try
            {
                string sRes;
                sRes = ((string)global::CIControlo.Properties.Settings.Default[sParametro]);
                return sRes;
            }
            catch (Exception)
            {
                return "";
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIControlo/CIMainForm.Designer.cs
﻿namespace CIControlo
{
    partial class CIMainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CIMainForm));
            this.menuStripMainMenu = new System.Windows.Forms.MenuStrip();
            this.ficheiroToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.loadENVMToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.loadACOMToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripSeparator();
            this.sairToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.controloToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.resumoActividadesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.alertasToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.processamentoAutomaticoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.jobMinutoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.jobHoraToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.jobDiarioToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.consultasToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem2 = new System.Windows.Forms.ToolStripSeparator();
            this.MDIsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.pesquisasEReenviosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.cBalcaoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.sacoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.atividadesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.acoesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ficheiroACOMToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.fToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.manutençãoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.balcoesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.utilisadoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.configuracaoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.relatóriosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.listagemRemessasToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.resumoDeEnviosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.listaLotesAcomToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.resumoAcomToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.faturaçãoMensalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.janelasToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ajudaToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.créditosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem5 = new System.Windows.Forms.ToolStripSeparator();
            this.sQLToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.importarRemessaToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.toolStripButtonActividades = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonSair = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonHelp = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonAlertas = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonEnvm = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonAcom = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonListRem = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonResEnvio = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonLtAcom = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonResAcom = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonMDI = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonPesquisas2 = new System.Windows.Forms.ToolStripButton();
            this.tsbtnPesReACOM = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripButtonActividadesBalcao = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonSacoBalcao = new System.Windows.Forms.ToolStripButton();
            this.toolStripButtonAccoesBalcao = new System.Windows.Forms.ToolStripButton();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusData = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripStatusUser = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripStatusGroup = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripStatusUserFullName = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripStatusConnect = new System.Windows.Forms.ToolStripStatusLabel();
            this.timer1 = new System.Windows.Forms.Timer(this.components);
            this.btnDVPImportarRemessas = new System.Windows.Forms.Button();
            this.btnErroDeposito = new System.Windows.Forms.Button();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.menuStripMainMenu.SuspendLayout();
            this.toolStrip1.SuspendLayout();
            this.statusStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStripMainMenu
            // 
            this.menuStripMainMenu.ImeMode = System.Windows.Forms.ImeMode.NoControl;
            this.menuStripMainMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ficheiroToolStripMenuItem,
            this.controloToolStripMenuItem,
            this.manutençãoToolStripMenuItem,
            this.relatóriosToolStripMenuItem,
            this.janelasToolStripMenuItem,
            this.ajudaToolStripMenuItem});
            this.menuStripMainMenu.Location = new System.Drawing.Point(0, 0);
            this.menuStripMainMenu.MdiWindowListItem = this.janelasToolStripMenuItem;
            this.menuStripMainMenu.Name = "menuStripMainMenu";
            this.menuStripMainMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.Professional;
            this.menuStripMainMenu.Size = new System.Drawing.Size(776, 24);
            this.menuStripMainMenu.TabIndex = 3;
            this.menuStripMainMenu.Text = "menuStripMainMenu";
            // 
            // ficheiroToolStripMenuItem
            // 
            this.ficheiroToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.loadENVMToolStripMenuItem,
            this.loadACOMToolStripMenuItem,
            this.toolStripMenuItem1,
            this.sairToolStripMenuItem});
            this.ficheiroToolStripMenuItem.Name = "ficheiroToolStripMenuItem";
            this.ficheiroToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.ficheiroToolStripMenuItem.Text = "&Ficheiro";
            // 
            // loadENVMToolStripMenuItem
            // 
            this.loadENVMToolStripMenuItem.Name = "loadENVMToolStripMenuItem";
            this.loadENVMToolStripMenuItem.Size = new System.Drawing.Size(159, 22);
            this.loadENVMToolStripMenuItem.Text = "Importar &ENVM";
            this.loadENVMToolStripMenuItem.Click += new System.EventHandler(this.loadENVMToolStripMenuItem_Click);
            // 
            // loadACOMToolStripMenuItem
            // 
            this.loadACOMToolStripMenuItem.Name = "loadACOMToolStripMenuItem";
            this.loadACOMToolStripMenuItem.Size = new System.Drawing.Size(159, 22);
            this.loadACOMToolStripMenuItem.Text = "Importar &ACOM";
            this.loadACOMToolStripMenuItem.Click += new System.EventHandler(this.loadACOMToolStripMenuItem_Click);
            // 
            // toolStripMenuItem1
            // 
            this.toolStripMenuItem1.Name = "toolStripMenuItem1";
            this.toolStripMenuItem1.Size = new System.Drawing.Size(156, 6);
            // 
            // sairToolStripMenuItem
            // 
            this.sairToolStripMenuItem.Name = "sairToolStripMenuItem";
            this.sairToolStripMenuItem.Size = new System.Drawing.Size(159, 22);
            this.sairToolStripMenuItem.Text = "&Sair";
            this.sairToolStripMenuItem.Click += new System.EventHandler(this.sairToolStripMenuItem_Click);
            // 
            // controloToolStripMenuItem
            // 
            this.controloToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.resumoActividadesToolStripMenuItem,
            this.alertasToolStripMenuItem,
            this.processamentoAutomaticoToolStripMenuItem,
            this.consultasToolStripMenuItem,
            this.toolStripMenuItem2,
            this.MDIsToolStripMenuItem,
            this.pesquisasEReenviosToolStripMenuItem,
            this.cBalcaoToolStripMenuItem,
            this.ficheiroACOMToolStripMenuItem});
            this.controloToolStripMenuItem.Name = "controloToolStripMenuItem";
            this.controloToolStripMenuItem.Size = new System.Drawing.Size(66, 20);
            this.controloToolStripMenuItem.Text = "&Controlo";
            // 
            // resumoActividadesToolStripMenuItem
            // 
            this.resumoActividadesToolStripMenuItem.Name = "resumoActividadesToolStripMenuItem";
            this.resumoActividadesToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.resumoActividadesToolStripMenuItem.Text = "&Actividades";
            this.resumoActividadesToolStripMenuItem.Click += new System.EventHandler(this.resumoActividadesToolStripMenuItem_Click);
            // 
            // alertasToolStripMenuItem
            // 
            this.alertasToolStripMenuItem.Name = "alertasToolStripMenuItem";
            this.alertasToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.alertasToolStripMenuItem.Text = "A&lertas";
            this.alertasToolStripMenuItem.Click += new System.EventHandler(this.alertasToolStripMenuItem_Click);
            // 
            // processamentoAutomaticoToolStripMenuItem
            // 
            this.processamentoAutomaticoToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.jobMinutoToolStripMenuItem,
            this.jobHoraToolStripMenuItem,
            this.jobDiarioToolStripMenuItem});
            this.processamentoAutomaticoToolStripMenuItem.Name = "processamentoAutomaticoToolStripMenuItem";
            this.processamentoAutomaticoToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.processamentoAutomaticoToolStripMenuItem.Text = "Processamento Automatico";
            // 
            // jobMinutoToolStripMenuItem
            // 
            this.jobMinutoToolStripMenuItem.Name = "jobMinutoToolStripMenuItem";
            this.jobMinutoToolStripMenuItem.Size = new System.Drawing.Size(134, 22);
            this.jobMinutoToolStripMenuItem.Text = "Job Minuto";
            this.jobMinutoToolStripMenuItem.Click += new System.EventHandler(this.jobMinutoToolStripMenuItem_Click);
            // 
            // jobHoraToolStripMenuItem
            // 
            this.jobHoraToolStripMenuItem.Name = "jobHoraToolStripMenuItem";
            this.jobHoraToolStripMenuItem.Size = new System.Drawing.Size(134, 22);
            this.jobHoraToolStripMenuItem.Text = "Job Hora";
            this.jobHoraToolStripMenuItem.Click += new System.EventHandler(this.jobHoraToolStripMenuItem_Click);
            // 
            // jobDiarioToolStripMenuItem
            // 
            this.jobDiarioToolStripMenuItem.Name = "jobDiarioToolStripMenuItem";
            this.jobDiarioToolStripMenuItem.Size = new System.Drawing.Size(134, 22);
            this.jobDiarioToolStripMenuItem.Text = "Job Diario";
            this.jobDiarioToolStripMenuItem.Click += new System.EventHandler(this.jobDiarioToolStripMenuItem_Click);
            // 
            // consultasToolStripMenuItem
            // 
            this.consultasToolStripMenuItem.Name = "consultasToolStripMenuItem";
            this.consultasToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.consultasToolStripMenuItem.Text = "Consultas SIBS";
            this.consultasToolStripMenuItem.Click += new System.EventHandler(this.consultasToolStripMenuItem_Click);
            // 
            // toolStripMenuItem2
            // 
            this.toolStripMenuItem2.Name = "toolStripMenuItem2";
            this.toolStripMenuItem2.Size = new System.Drawing.Size(218, 6);
            // 
            // MDIsToolStripMenuItem
            // 
            this.MDIsToolStripMenuItem.Name = "MDIsToolStripMenuItem";
            this.MDIsToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.MDIsToolStripMenuItem.Text = "MDIs";
            this.MDIsToolStripMenuItem.Click += new System.EventHandler(this.MDIsToolStripMenuItem_Click);
            // 
            // pesquisasEReenviosToolStripMenuItem
            // 
            this.pesquisasEReenviosToolStripMenuItem.Name = "pesquisasEReenviosToolStripMenuItem";
            this.pesquisasEReenviosToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.pesquisasEReenviosToolStripMenuItem.Text = "Pesquisas e Reenvios";
            this.pesquisasEReenviosToolStripMenuItem.Click += new System.EventHandler(this.pesquisasEReenviosToolStripMenuItem_Click);
            // 
            // cBalcaoToolStripMenuItem
            // 
            this.cBalcaoToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.sacoToolStripMenuItem,
            this.atividadesToolStripMenuItem,
            this.acoesToolStripMenuItem});
            this.cBalcaoToolStripMenuItem.Name = "cBalcaoToolStripMenuItem";
            this.cBalcaoToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.cBalcaoToolStripMenuItem.Text = "Controlo Balcão";
            // 
            // sacoToolStripMenuItem
            // 
            this.sacoToolStripMenuItem.Name = "sacoToolStripMenuItem";
            this.sacoToolStripMenuItem.Size = new System.Drawing.Size(182, 22);
            this.sacoToolStripMenuItem.Text = "Depósitos / Estornos";
            this.sacoToolStripMenuItem.Click += new System.EventHandler(this.sacoToolStripMenuItem_Click);
            // 
            // atividadesToolStripMenuItem
            // 
            this.atividadesToolStripMenuItem.Name = "atividadesToolStripMenuItem";
            this.atividadesToolStripMenuItem.Size = new System.Drawing.Size(182, 22);
            this.atividadesToolStripMenuItem.Text = "Actividades";
            this.atividadesToolStripMenuItem.Click += new System.EventHandler(this.atividadesToolStripMenuItem_Click_1);
            // 
            // acoesToolStripMenuItem
            // 
            this.acoesToolStripMenuItem.Name = "acoesToolStripMenuItem";
            this.acoesToolStripMenuItem.Size = new System.Drawing.Size(182, 22);
            this.acoesToolStripMenuItem.Text = "Acções";
            this.acoesToolStripMenuItem.Click += new System.EventHandler(this.acoesToolStripMenuItem_Click);
            // 
            // ficheiroACOMToolStripMenuItem
            // 
            this.ficheiroACOMToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fToolStripMenuItem1});
            this.ficheiroACOMToolStripMenuItem.Name = "ficheiroACOMToolStripMenuItem";
            this.ficheiroACOMToolStripMenuItem.Size = new System.Drawing.Size(221, 22);
            this.ficheiroACOMToolStripMenuItem.Text = "Ficheiro ACOM";
            // 
            // fToolStripMenuItem1
            // 
            this.fToolStripMenuItem1.Name = "fToolStripMenuItem1";
            this.fToolStripMenuItem1.Size = new System.Drawing.Size(184, 22);
            this.fToolStripMenuItem1.Text = "Pesquisas e Reenvios";
            this.fToolStripMenuItem1.Click += new System.EventHandler(this.FichACOMPesToolStripMenuItem_Click);
            // 
            // manutençãoToolStripMenuItem
            // 
            this.manutençãoToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.balcoesToolStripMenuItem,
            this.utilisadoToolStripMenuItem,
            this.configuracaoToolStripMenuItem});
            this.manutençãoToolStripMenuItem.Name = "manutençãoToolStripMenuItem";
            this.manutençãoToolStripMenuItem.Size = new System.Drawing.Size(86, 20);
            this.manutençãoToolStripMenuItem.Text = "&Manutenção";
            // 
            // balcoesToolStripMenuItem
            // 
            this.balcoesToolStripMenuItem.Name = "balcoesToolStripMenuItem";
            this.balcoesToolStripMenuItem.Size = new System.Drawing.Size(160, 22);
            this.balcoesToolStripMenuItem.Text = "&Balcões/Leitores";
            this.balcoesToolStripMenuItem.Click += new System.EventHandler(this.balcoesToolStripMenuItem_Click);
            // 
            // utilisadoToolStripMenuItem
            // 
            this.utilisadoToolStripMenuItem.Name = "utilisadoToolStripMenuItem";
            this.utilisadoToolStripMenuItem.Size = new System.Drawing.Size(160, 22);
            this.utilisadoToolStripMenuItem.Text = "&Utilizadores";
            this.utilisadoToolStripMenuItem.Click += new System.EventHandler(this.utilisadoToolStripMenuItem_Click);
            // 
            // configuracaoToolStripMenuItem
            // 
            this.configuracaoToolStripMenuItem.Name = "configuracaoToolStripMenuItem";
            this.configuracaoToolStripMenuItem.Size = new System.Drawing.Size(160, 22);
            this.configuracaoToolStripMenuItem.Text = "&Configuração";
            this.configuracaoToolStripMenuItem.Click += new System.EventHandler(this.configuracaoToolStripMenuItem_Click);
            // 
            // relatóriosToolStripMenuItem
            // 
            this.relatóriosToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.listagemRemessasToolStripMenuItem,
            this.resumoDeEnviosToolStripMenuItem,
            this.listaLotesAcomToolStripMenuItem,
            this.resumoAcomToolStripMenuItem,
            this.faturaçãoMensalToolStripMenuItem});
            this.relatóriosToolStripMenuItem.Name = "relatóriosToolStripMenuItem";
            this.relatóriosToolStripMenuItem.Size = new System.Drawing.Size(71, 20);
            this.relatóriosToolStripMenuItem.Text = "&Relatórios";
            // 
            // listagemRemessasToolStripMenuItem
            // 
            this.listagemRemessasToolStripMenuItem.Name = "listagemRemessasToolStripMenuItem";
            this.listagemRemessasToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.listagemRemessasToolStripMenuItem.Text = "Listagem de Remessas";
            this.listagemRemessasToolStripMenuItem.Click += new System.EventHandler(this.ListagemRemessasToolStripMenuItem_Click);
            // 
            // resumoDeEnviosToolStripMenuItem
            // 
            this.resumoDeEnviosToolStripMenuItem.Name = "resumoDeEnviosToolStripMenuItem";
            this.resumoDeEnviosToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.resumoDeEnviosToolStripMenuItem.Text = "Resumo de Envios";
            this.resumoDeEnviosToolStripMenuItem.Click += new System.EventHandler(this.resumoDeEnviosToolStripMenuItem_Click_1);
            // 
            // listaLotesAcomToolStripMenuItem
            // 
            this.listaLotesAcomToolStripMenuItem.Name = "listaLotesAcomToolStripMenuItem";
            this.listaLotesAcomToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.listaLotesAcomToolStripMenuItem.Text = "Lista Lotes Acom ";
            this.listaLotesAcomToolStripMenuItem.Click += new System.EventHandler(this.listaLotesAcomToolStripMenuItem_Click);
            // 
            // resumoAcomToolStripMenuItem
            // 
            this.resumoAcomToolStripMenuItem.Name = "resumoAcomToolStripMenuItem";
            this.resumoAcomToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.resumoAcomToolStripMenuItem.Text = "Resumo Acom";
            this.resumoAcomToolStripMenuItem.Click += new System.EventHandler(this.resumoAcomToolStripMenuItem_Click);
            // 
            // faturaçãoMensalToolStripMenuItem
            // 
            this.faturaçãoMensalToolStripMenuItem.Name = "faturaçãoMensalToolStripMenuItem";
            this.faturaçãoMensalToolStripMenuItem.Size = new System.Drawing.Size(192, 22);
            this.faturaçãoMensalToolStripMenuItem.Text = "Faturação Mensal";
            this.faturaçãoMensalToolStripMenuItem.Click += new System.EventHandler(this.faturaçãoMensalToolStripMenuItem_Click);
            // 
            // janelasToolStripMenuItem
            // 
            this.janelasToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.tileVerticalToolStripMenuItem});
            this.janelasToolStripMenuItem.Name = "janelasToolStripMenuItem";
            this.janelasToolStripMenuItem.Size = new System.Drawing.Size(56, 20);
            this.janelasToolStripMenuItem.Text = "&Janelas";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = "cascadeToolStripMenuItem";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(151, 22);
            this.cascadeToolStripMenuItem.Text = "&Cascade";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.cascadeToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = "tileHorizontalToolStripMenuItem";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(151, 22);
            this.tileHorizontalToolStripMenuItem.Text = "Tile &Horizontal";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.tileHorizontalToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = "tileVerticalToolStripMenuItem";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(151, 22);
            this.tileVerticalToolStripMenuItem.Text = "Tile &Vertical";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.tileVerticalToolStripMenuItem_Click);
            // 
            // ajudaToolStripMenuItem
            // 
            this.ajudaToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.créditosToolStripMenuItem,
            this.toolStripMenuItem5,
            this.sQLToolStripMenuItem,
            this.importarRemessaToolStripMenuItem});
            this.ajudaToolStripMenuItem.Name = "ajudaToolStripMenuItem";
            this.ajudaToolStripMenuItem.Size = new System.Drawing.Size(50, 20);
            this.ajudaToolStripMenuItem.Text = "&Ajuda";
            // 
            // créditosToolStripMenuItem
            // 
            this.créditosToolStripMenuItem.Name = "créditosToolStripMenuItem";
            this.créditosToolStripMenuItem.Size = new System.Drawing.Size(174, 22);
            this.créditosToolStripMenuItem.Text = "&Créditos";
            this.créditosToolStripMenuItem.Click += new System.EventHandler(this.créditosToolStripMenuItem_Click);
            // 
            // toolStripMenuItem5
            // 
            this.toolStripMenuItem5.Name = "toolStripMenuItem5";
            this.toolStripMenuItem5.Size = new System.Drawing.Size(171, 6);
            // 
            // sQLToolStripMenuItem
            // 
            this.sQLToolStripMenuItem.Name = "sQLToolStripMenuItem";
            this.sQLToolStripMenuItem.Size = new System.Drawing.Size(174, 22);
            this.sQLToolStripMenuItem.Text = "Con&sultas Diversas";
            this.sQLToolStripMenuItem.Click += new System.EventHandler(this.sQLToolStripMenuItem_Click);
            // 
            // importarRemessaToolStripMenuItem
            // 
            this.importarRemessaToolStripMenuItem.Name = "importarRemessaToolStripMenuItem";
            this.importarRemessaToolStripMenuItem.Size = new System.Drawing.Size(174, 22);
            this.importarRemessaToolStripMenuItem.Text = "&Importar Remessas";
            this.importarRemessaToolStripMenuItem.Click += new System.EventHandler(this.importarRemessaToolStripMenuItem_Click);
            // 
            // toolStrip1
            // 
            this.toolStrip1.ImageScalingSize = new System.Drawing.Size(32, 32);
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButtonActividades,
            this.toolStripButtonSair,
            this.toolStripButtonHelp,
            this.toolStripButtonAlertas,
            this.toolStripButtonEnvm,
            this.toolStripButtonAcom,
            this.toolStripButtonListRem,
            this.toolStripButtonResEnvio,
            this.toolStripButtonLtAcom,
            this.toolStripButtonResAcom,
            this.toolStripButtonMDI,
            this.toolStripButtonPesquisas2,
            this.toolStripSeparator1,
            this.toolStripButtonActividadesBalcao,
            this.toolStripButtonSacoBalcao,
            this.toolStripButtonAccoesBalcao,
            this.toolStripSeparator2,
            this.tsbtnPesReACOM});
            this.toolStrip1.Location = new System.Drawing.Point(0, 24);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Size = new System.Drawing.Size(776, 39);
            this.toolStrip1.TabIndex = 5;
            this.toolStrip1.Text = "toolStrip1";
            // 
            // toolStripButtonActividades
            // 
            this.toolStripButtonActividades.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonActividades.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonActividades.Image")));
            this.toolStripButtonActividades.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonActividades.Name = "toolStripButtonActividades";
            this.toolStripButtonActividades.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonActividades.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonActividades.Text = "toolStripButton2";
            this.toolStripButtonActividades.ToolTipText = "Actividades";
            this.toolStripButtonActividades.Click += new System.EventHandler(this.toolStripButtonActividades_Click);
            // 
            // toolStripButtonSair
            // 
            this.toolStripButtonSair.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
            this.toolStripButtonSair.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonSair.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonSair.Image")));
            this.toolStripButtonSair.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonSair.Name = "toolStripButtonSair";
            this.toolStripButtonSair.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonSair.Text = "Sair";
            this.toolStripButtonSair.Click += new System.EventHandler(this.toolStripButtonSair_Click);
            // 
            // toolStripButtonHelp
            // 
            this.toolStripButtonHelp.Alignment = System.Windows.Forms.ToolStripItemAlignment.Right;
            this.toolStripButtonHelp.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonHelp.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonHelp.Image")));
            this.toolStripButtonHelp.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonHelp.Name = "toolStripButtonHelp";
            this.toolStripButtonHelp.Size = new System.Drawing.Size(36, 36);
            this.toolStripButtonHelp.Text = "Help";
            this.toolStripButtonHelp.Click += new System.EventHandler(this.toolStripButtonHelp_Click);
            // 
            // toolStripButtonAlertas
            // 
            this.toolStripButtonAlertas.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonAlertas.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonAlertas.Image")));
            this.toolStripButtonAlertas.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonAlertas.Name = "toolStripButtonAlertas";
            this.toolStripButtonAlertas.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonAlertas.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonAlertas.Text = "toolStripButton1";
            this.toolStripButtonAlertas.ToolTipText = "Alertas";
            this.toolStripButtonAlertas.Click += new System.EventHandler(this.toolStripButtonAlertas_Click);
            // 
            // toolStripButtonEnvm
            // 
            this.toolStripButtonEnvm.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonEnvm.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonEnvm.Image")));
            this.toolStripButtonEnvm.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonEnvm.Name = "toolStripButtonEnvm";
            this.toolStripButtonEnvm.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonEnvm.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonEnvm.Text = "toolStripButton4";
            this.toolStripButtonEnvm.ToolTipText = "Importar Envm";
            this.toolStripButtonEnvm.Click += new System.EventHandler(this.toolStripButtonEnvm_Click);
            // 
            // toolStripButtonAcom
            // 
            this.toolStripButtonAcom.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonAcom.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonAcom.Image")));
            this.toolStripButtonAcom.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonAcom.Name = "toolStripButtonAcom";
            this.toolStripButtonAcom.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonAcom.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonAcom.Text = "toolStripButton3";
            this.toolStripButtonAcom.ToolTipText = "Importar Acom";
            this.toolStripButtonAcom.Click += new System.EventHandler(this.toolStripButtonAcom_Click);
            // 
            // toolStripButtonListRem
            // 
            this.toolStripButtonListRem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonListRem.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonListRem.Image")));
            this.toolStripButtonListRem.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonListRem.Name = "toolStripButtonListRem";
            this.toolStripButtonListRem.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonListRem.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonListRem.Text = "Relatorio Listagem Remessas";
            this.toolStripButtonListRem.Click += new System.EventHandler(this.toolStripButtonListRem_Click);
            // 
            // toolStripButtonResEnvio
            // 
            this.toolStripButtonResEnvio.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonResEnvio.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonResEnvio.Image")));
            this.toolStripButtonResEnvio.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonResEnvio.Name = "toolStripButtonResEnvio";
            this.toolStripButtonResEnvio.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonResEnvio.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonResEnvio.Text = "Relatorio Resumo Envio";
            this.toolStripButtonResEnvio.Click += new System.EventHandler(this.toolStripButtonResEnvio_Click);
            // 
            // toolStripButtonLtAcom
            // 
            this.toolStripButtonLtAcom.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonLtAcom.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonLtAcom.Image")));
            this.toolStripButtonLtAcom.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonLtAcom.Name = "toolStripButtonLtAcom";
            this.toolStripButtonLtAcom.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonLtAcom.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonLtAcom.Text = "Relatorio Lotes Acom";
            this.toolStripButtonLtAcom.Click += new System.EventHandler(this.toolStripButtonLtAcom_Click);
            // 
            // toolStripButtonResAcom
            // 
            this.toolStripButtonResAcom.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonResAcom.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonResAcom.Image")));
            this.toolStripButtonResAcom.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonResAcom.Name = "toolStripButtonResAcom";
            this.toolStripButtonResAcom.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonResAcom.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonResAcom.Text = "Relatorio Resumo Acom";
            this.toolStripButtonResAcom.Click += new System.EventHandler(this.toolStripButtonResAcom_Click);
            // 
            // toolStripButtonMDI
            // 
            this.toolStripButtonMDI.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonMDI.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonMDI.Image")));
            this.toolStripButtonMDI.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonMDI.Name = "toolStripButtonMDI";
            this.toolStripButtonMDI.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonMDI.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonMDI.Text = "Controlo MDIs";
            this.toolStripButtonMDI.Click += new System.EventHandler(this.toolStripButtonMDI_Click);
            // 
            // toolStripButtonPesquisas2
            // 
            this.toolStripButtonPesquisas2.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonPesquisas2.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonPesquisas2.Image")));
            this.toolStripButtonPesquisas2.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonPesquisas2.Name = "toolStripButtonPesquisas2";
            this.toolStripButtonPesquisas2.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonPesquisas2.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonPesquisas2.Text = "Pesquisas e reenvios";
            this.toolStripButtonPesquisas2.Click += new System.EventHandler(this.toolStripButtonPesquisas2_Click);
            // 
            // tsbtnPesReACOM
            // 
            this.tsbtnPesReACOM.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.tsbtnPesReACOM.Image = ((System.Drawing.Image)(resources.GetObject("tsbtnPesReACOM.Image")));
            this.tsbtnPesReACOM.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.tsbtnPesReACOM.Margin = new System.Windows.Forms.Padding(2, 1, 0, 2);
            this.tsbtnPesReACOM.Name = "tsbtnPesReACOM";
            this.tsbtnPesReACOM.Size = new System.Drawing.Size(36, 36);
            this.tsbtnPesReACOM.Text = "Pesquisas e Reenvio ACOM Balcão";
            this.tsbtnPesReACOM.Click += new System.EventHandler(this.tsbtnPesReACOM_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Margin = new System.Windows.Forms.Padding(15, 0, 0, 0);
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(6, 39);
            // 
            // toolStripButtonActividadesBalcao
            // 
            this.toolStripButtonActividadesBalcao.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonActividadesBalcao.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonActividadesBalcao.Image")));
            this.toolStripButtonActividadesBalcao.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonActividadesBalcao.Name = "toolStripButtonActividadesBalcao";
            this.toolStripButtonActividadesBalcao.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonActividadesBalcao.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonActividadesBalcao.Text = "toolStripButton2";
            this.toolStripButtonActividadesBalcao.ToolTipText = "Actividades Balcão";
            this.toolStripButtonActividadesBalcao.Click += new System.EventHandler(this.toolStripButtonActividadesBalcao_Click);
            // 
            // toolStripButtonSacoBalcao
            // 
            this.toolStripButtonSacoBalcao.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonSacoBalcao.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonSacoBalcao.Image")));
            this.toolStripButtonSacoBalcao.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonSacoBalcao.Name = "toolStripButtonSacoBalcao";
            this.toolStripButtonSacoBalcao.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonSacoBalcao.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonSacoBalcao.Text = "Depósitos \\ Estornos";
            this.toolStripButtonSacoBalcao.Click += new System.EventHandler(this.toolStripButtonSacoBalcao_Click);
            // 
            // toolStripButtonAccoesBalcao
            // 
            this.toolStripButtonAccoesBalcao.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.toolStripButtonAccoesBalcao.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButtonAccoesBalcao.Image")));
            this.toolStripButtonAccoesBalcao.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButtonAccoesBalcao.Name = "toolStripButtonAccoesBalcao";
            this.toolStripButtonAccoesBalcao.Padding = new System.Windows.Forms.Padding(0, 0, 5, 0);
            this.toolStripButtonAccoesBalcao.Size = new System.Drawing.Size(41, 36);
            this.toolStripButtonAccoesBalcao.Text = "toolStripButton1";
            this.toolStripButtonAccoesBalcao.ToolTipText = "Acções Balcão";
            this.toolStripButtonAccoesBalcao.Click += new System.EventHandler(this.toolStripButtonAccoesBalcao_Click);
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusData,
            this.toolStripStatusUser,
            this.toolStripStatusGroup,
            this.toolStripStatusUserFullName,
            this.toolStripStatusConnect});
            this.statusStrip1.Location = new System.Drawing.Point(0, 415);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(776, 22);
            this.statusStrip1.TabIndex = 6;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // toolStripStatusData
            // 
            this.toolStripStatusData.Name = "toolStripStatusData";
            this.toolStripStatusData.Size = new System.Drawing.Size(144, 17);
            this.toolStripStatusData.Text = "YYYY/MM/DD HH:MM:SS";
            // 
            // toolStripStatusUser
            // 
            this.toolStripStatusUser.Name = "toolStripStatusUser";
            this.toolStripStatusUser.Size = new System.Drawing.Size(67, 17);
            this.toolStripStatusUser.Text = "Logon User";
            // 
            // toolStripStatusGroup
            // 
            this.toolStripStatusGroup.Name = "toolStripStatusGroup";
            this.toolStripStatusGroup.Size = new System.Drawing.Size(40, 17);
            this.toolStripStatusGroup.Text = "Group";
            // 
            // toolStripStatusUserFullName
            // 
            this.toolStripStatusUserFullName.Name = "toolStripStatusUserFullName";
            this.toolStripStatusUserFullName.Size = new System.Drawing.Size(87, 17);
            this.toolStripStatusUserFullName.Text = "User Full Name";
            // 
            // toolStripStatusConnect
            // 
            this.toolStripStatusConnect.Name = "toolStripStatusConnect";
            this.toolStripStatusConnect.Size = new System.Drawing.Size(86, 17);
            this.toolStripStatusConnect.Text = "Connect String";
            this.toolStripStatusConnect.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // btnDVPImportarRemessas
            // 
            this.btnDVPImportarRemessas.Enabled = false;
            this.btnDVPImportarRemessas.Location = new System.Drawing.Point(558, 1);
            this.btnDVPImportarRemessas.Name = "btnDVPImportarRemessas";
            this.btnDVPImportarRemessas.Size = new System.Drawing.Size(75, 23);
            this.btnDVPImportarRemessas.TabIndex = 8;
            this.btnDVPImportarRemessas.Text = "ImportarRemessas";
            this.btnDVPImportarRemessas.UseVisualStyleBackColor = true;
            this.btnDVPImportarRemessas.Visible = false;
            this.btnDVPImportarRemessas.Click += new System.EventHandler(this.btnDVPImportarRemessas_Click);
            // 
            // btnErroDeposito
            // 
            this.btnErroDeposito.Location = new System.Drawing.Point(639, 1);
            this.btnErroDeposito.Name = "btnErroDeposito";
            this.btnErroDeposito.Size = new System.Drawing.Size(108, 23);
            this.btnErroDeposito.TabIndex = 10;
            this.btnErroDeposito.Text = "Erros de Depositos";
            this.btnErroDeposito.UseVisualStyleBackColor = true;
            this.btnErroDeposito.Visible = false;
            this.btnErroDeposito.Click += new System.EventHandler(this.btnErroDeposito_Click);
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Margin = new System.Windows.Forms.Padding(15, 0, 0, 0);
            this.toolStripSeparator2.Name = "toolStripSeparator2";
            this.toolStripSeparator2.Size = new System.Drawing.Size(6, 39);
            // 
            // CIMainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.BackColor = System.Drawing.SystemColors.Control;
            this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
            this.ClientSize = new System.Drawing.Size(776, 437);
            this.Controls.Add(this.btnErroDeposito);
            this.Controls.Add(this.btnDVPImportarRemessas);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.toolStrip1);
            this.Controls.Add(this.menuStripMainMenu);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.IsMdiContainer = true;
            this.MainMenuStrip = this.menuStripMainMenu;
            this.Name = "CIMainForm";
            this.Text = "Concentrador de Imagens - Controlo";
            this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            this.Load += new System.EventHandler(this.CIMainForm_Load);
            this.menuStripMainMenu.ResumeLayout(false);
            this.menuStripMainMenu.PerformLayout();
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.ToolStripMenuItem ficheiroToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem controloToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem manutençãoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem janelasToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ajudaToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem créditosToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem sQLToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem loadENVMToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem loadACOMToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem resumoActividadesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem balcoesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem sairToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem5;
        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.ToolStripButton toolStripButtonSair;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripButton toolStripButtonHelp;
        private System.Windows.Forms.Timer timer1;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusData;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusUser;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusConnect;
        private System.Windows.Forms.ToolStripMenuItem configuracaoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem relatóriosToolStripMenuItem;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusGroup;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusUserFullName;
        private System.Windows.Forms.ToolStripMenuItem utilisadoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem alertasToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem importarRemessaToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem processamentoAutomaticoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem listagemRemessasToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem resumoDeEnviosToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem listaLotesAcomToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem resumoAcomToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem consultasToolStripMenuItem;
        private System.Windows.Forms.MenuStrip menuStripMainMenu;
        private System.Windows.Forms.ToolStripButton toolStripButtonActividades;
        private System.Windows.Forms.ToolStripMenuItem jobMinutoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem jobHoraToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem jobDiarioToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem2;
        private System.Windows.Forms.ToolStripMenuItem MDIsToolStripMenuItem;
        //private System.Windows.Forms.ToolStripButton toolStripButtonPesquisas;
        private System.Windows.Forms.ToolStripMenuItem pesquisasEReenviosToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton toolStripButtonPesquisas2;
        private System.Windows.Forms.ToolStripButton toolStripButtonAlertas;
        private System.Windows.Forms.ToolStripButton toolStripButtonEnvm;
        private System.Windows.Forms.ToolStripButton toolStripButtonAcom;
        private System.Windows.Forms.ToolStripButton toolStripButtonListRem;
        private System.Windows.Forms.ToolStripButton toolStripButtonResEnvio;
        private System.Windows.Forms.ToolStripButton toolStripButtonLtAcom;
        private System.Windows.Forms.ToolStripButton toolStripButtonResAcom;
        private System.Windows.Forms.ToolStripButton toolStripButtonMDI;
        private System.Windows.Forms.ToolStripMenuItem cBalcaoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem atividadesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem sacoToolStripMenuItem;
        private System.Windows.Forms.Button btnDVPImportarRemessas;
        private System.Windows.Forms.ToolStripMenuItem acoesToolStripMenuItem;
        private System.Windows.Forms.Button btnErroDeposito;
        private System.Windows.Forms.ToolStripButton toolStripButtonActividadesBalcao;
        private System.Windows.Forms.ToolStripButton toolStripButtonAccoesBalcao;
        private System.Windows.Forms.ToolStripButton toolStripButtonSacoBalcao;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripMenuItem ficheiroACOMToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem faturaçãoMensalToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton tsbtnPesReACOM;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
    }
}

// FILE: SDCIM/ModusCI/CIControlo/CIMainForm.cs
﻿/*
 * $Copyright:$
 * Copyright(c) 2008 Novabase
 * Todos os direitos reservados
 *
 * Este software e fornecido sob licenca e deve ser usado em
 * conformidade com os termos da mesma. Este software nao pode ser
 * fornecido ou disponibilizado por qualquer outra entidade. Por
 * consequinte o titulo ou dono nao podem ser transferidos.
 * 
 * Versão 1.0 - Paulo Rodrigues  20080401
 *              Criação da estrutura base
 * 
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


using NBIISNET;
using NBiis;
using NBiis.Generic;
using CIFicheirosControlo;
using CIActividades;
//using CIDepositoErro;

namespace CIControlo
{
    public partial class CIMainForm : Form, CIConfigGlobalParameters.CIMenuInterface
    {
        protected CIControloParameters m_oParameters;

        protected CIControloParameters m_oParametersGCAA9601;
        protected CIControloParameters m_oParametersGCAA9604;
        protected CIControloParameters m_oParametersGCAA;

        public CIMainForm()
        {
            InitializeComponent();
        }

        private void CIMainForm_Load(object sender, EventArgs e)
        {
            /*
             * E001212 adicionado para só os powers admin conseguirem ver
             */
            this.btnDVPImportarRemessas.Visible = false;
            this.btnDVPImportarRemessas.Enabled = false;
            this.btnErroDeposito.Visible = false;
            this.btnErroDeposito.Enabled = false;
            this.importarRemessaToolStripMenuItem.Visible = false;
            this.importarRemessaToolStripMenuItem.Enabled = false;
            try
            {
                m_oParameters = null;
                m_oParameters = new CIControloParameters();

                //if (m_oParameters.UserLogged.m_iUserGroup < 1)
                //{
                //    try
                //    {
                //        m_oParametersGCAA9601 = new CIControloParameters("GCAA9601");
                //        m_oParametersGCAA9604 = new CIControloParameters("GCAA9604");
                //        this.btnDVPImportarRemessas.Visible = true;
                //        this.btnDVPImportarRemessas.Enabled = true;
                //        this.btnErroDeposito.Visible = true;
                //        this.btnErroDeposito.Enabled = true;
                //        this.importarRemessaToolStripMenuItem.Visible = true;
                //        this.importarRemessaToolStripMenuItem.Enabled = true;
                //    }
                //    catch (Exception ex)
                //    {
                //        MessageBox.Show(this, "Erro na ligação às BDs da GCAA\n" + ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                //    }
                //}
                m_oParameters.InitGenericLog();
                //importarRemessaToolStripMenuItem.Visible = (m_oParameters.UserLogged.m_iUserGroup == 0);
                consultasToolStripMenuItem.Visible = (m_oParameters.UserLogged.m_iUserGroup == 0);
                MDIsToolStripMenuItem.Visible = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                processamentoAutomaticoToolStripMenuItem.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
                sQLToolStripMenuItem.Visible = (m_oParameters.UserLogged.m_iUserGroup < 10);
                manutençãoToolStripMenuItem.Visible = (m_oParameters.UserLogged.m_iUserGroup < 10);
                ConstroiMyTimer();
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private void Help()
        {
            try
            {
                NBIISAboutBoxDlg oHelp = new NBIISAboutBoxDlg();

                oHelp.m_ctrlAplicationIcon.Image = this.Icon.ToBitmap();
                oHelp.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void créditosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help();
        }

        private void sQLToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                QueryForm.QueryForm oObj = new QueryForm.QueryForm(m_oParameters);
                oObj.MdiParent = this;
                oObj.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Sair()
        {
            Dispose();
        }

        private void sairToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Sair();
        }

        private void cascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.LayoutMdi(MdiLayout.Cascade);
        }

        private void tileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.LayoutMdi(MdiLayout.TileHorizontal);
        }

        private void tileVerticalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.LayoutMdi(MdiLayout.TileVertical);
        }

        private void toolStripButtonHelp_Click(object sender, EventArgs e)
        {
            try
            {
                Help();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonSair_Click(object sender, EventArgs e)
        {
            Sair();
        }

        private void ConstroiMyTimer()
        {
            timer1 = new Timer();
            timer1.Interval = 500;
            timer1.Tick += new EventHandler(OnTimedEvent);
            timer1.Start();
        }

        private void OnTimedEvent(object source, EventArgs e)
        {
            PreencheStatusBar();
        }

        private void PreencheStatusBar()
        {
            this.toolStripStatusData.Text = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            this.toolStripStatusUser.Text = System.Windows.Forms.SystemInformation.UserDomainName + "\\" + System.Windows.Forms.SystemInformation.UserName;
            this.toolStripStatusUserFullName.Text = m_oParameters.UserLogged.m_sUserFullName;
            this.toolStripStatusGroup.Text = m_oParameters.UserLogged.m_sGroupName;
            this.toolStripStatusConnect.Text = "";
            if (m_oParameters.UserLogged.m_iUserGroup == 0)
            {
                this.toolStripStatusConnect.Text = m_oParameters.Host + "/" + m_oParameters.DatabaseName;
            }
        }

        private void balcoesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIConfiguration.Config oConf = new CIConfiguration.Config(m_oParameters, this);

                oConf.BalcaoConfig();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void configuracaoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIConfiguration.Config oConf = new CIConfiguration.Config(m_oParameters, this);

                oConf.CIConfiguracao();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void resumoActividadesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIActividades.Actividades oAct = new CIActividades.Actividades(m_oParameters, this);

                oAct.ControloActividades();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void utilisadoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIConfiguration.Config oConf = new CIConfiguration.Config(m_oParameters, this);
                oConf.UtilizadorConfig();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void alertasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIActividades.Actividades oAct = new CIActividades.Actividades(m_oParameters, this);
                oAct.Alertas();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void importarRemessaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //this.AbrirImportGCCAForm();
        }

        private void loadENVMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIFicheirosControlo.FicheiroFormCentralENVM oFicheiroForm = new CIFicheirosControlo.FicheiroFormCentralENVM(m_oParameters, this);
                oFicheiroForm.MdiParent = this;

                oFicheiroForm.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void loadACOMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIFicheirosControlo.FicheiroFormCentralACOM oFicheiroForm = new CIFicheirosControlo.FicheiroFormCentralACOM(m_oParameters, this);
                oFicheiroForm.MdiParent = this;
                oFicheiroForm.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ListagemRemessasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIReports.Relatorios oRep = new CIReports.Relatorios(m_oParameters, this);
                oRep.ListagemRemessas();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void resumoDeEnviosToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            try
            {
                CIReports.Relatorios oRep = new CIReports.Relatorios(m_oParameters, this);
                oRep.resumoDeEnvios();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void listaLotesAcomToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIReports.Relatorios oRep = new CIReports.Relatorios(m_oParameters, this);
                oRep.lotesAcomDetalhe();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void resumoAcomToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIReports.Relatorios oRep = new CIReports.Relatorios(m_oParameters, this);
                oRep.lotesAcomResumo();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void consultasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIActividades.ConsultasForm oConsulta = new CIActividades.ConsultasForm(m_oParameters, this);
                oConsulta.MdiParent = this;
                oConsulta.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public Form GetMainForm()
        {
            return this;
        }

        public void alertasToolStripMenuItemEnable(bool bEnable)
        {
            try
            {
                alertasToolStripMenuItem.Enabled = bEnable;
                toolStripButtonAlertas.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void processarEnvmEnable(bool bEnable)
        {
            try
            {
                loadENVMToolStripMenuItem.Enabled = bEnable;
                toolStripButtonEnvm.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void processaAcomEnable(bool bEnable)
        {
            try
            {
                loadACOMToolStripMenuItem.Enabled = bEnable;
                toolStripButtonAcom.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void PesquisasEnable(bool bEnable)
        {
            try
            {
                pesquisasEReenviosToolStripMenuItem.Enabled = bEnable;
                toolStripButtonPesquisas2.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void actividadesEnable(bool bEnable)
        {
            try
            {
                resumoActividadesToolStripMenuItem.Enabled = bEnable;
                toolStripButtonActividades.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void consultasEnable(bool bEnable)
        {
            consultasToolStripMenuItem.Enabled = bEnable;
        }

        public void balcoesEnable(bool bEnable)
        {
            balcoesToolStripMenuItem.Enabled = bEnable;
        }

        public void utilizadoresEnable(bool bEnable)
        {
            utilisadoToolStripMenuItem.Enabled = bEnable;
        }

        public void configuracaoEnable(bool bEnable)
        {
            configuracaoToolStripMenuItem.Enabled = bEnable;
        }

        private void toolStripButtonActividades_Click(object sender, EventArgs e)
        {
            try
            {
                resumoActividadesToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonAlertas_Click(object sender, EventArgs e)
        {
            try
            {
                alertasToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonEnvm_Click(object sender, EventArgs e)
        {
            try
            {
                loadENVMToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonAcom_Click(object sender, EventArgs e)
        {
            try
            {
                loadACOMToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonListRem_Click(object sender, EventArgs e)
        {
            try
            {
                ListagemRemessasToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonResEnvio_Click(object sender, EventArgs e)
        {
            try
            {
                resumoDeEnviosToolStripMenuItem_Click_1(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonLtAcom_Click(object sender, EventArgs e)
        {
            try
            {
                listaLotesAcomToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonResAcom_Click(object sender, EventArgs e)
        {
            try
            {
                resumoAcomToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void jobMinutoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                m_oParameters.DirectSqlNonQuery("exec dbo.Job_Minuto");

                string sMsg = "Processamento Automatico Efectuado Manualmente Job_Minuto";
                GenericLog.GenLogRegistarAlerta(sMsg, "Job_Minuto()", 700);
                m_oParameters.EnviarAlertaSituacao(700, sMsg);

                MessageBox.Show(sMsg, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void jobHoraToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                m_oParameters.DirectSqlNonQuery("exec dbo.Job_Hora");

                string sMsg = "Processamento Automatico Efectuado Manualmente Job_Hora";
                GenericLog.GenLogRegistarAlerta(sMsg, "Job_Hora()", 700);
                m_oParameters.EnviarAlertaSituacao(700, sMsg);

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
                MessageBox.Show(sMsg, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private void jobDiarioToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                m_oParameters.DirectSqlNonQuery("exec dbo.Job_Diario");

                string sMsg = "Processamento Automatico Efectuado Manualmente Job_Diario";
                GenericLog.GenLogRegistarAlerta(sMsg, "Job_Diario()", 700);
                m_oParameters.EnviarAlertaSituacao(700, sMsg);

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
                MessageBox.Show(sMsg, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private void ControloMDIsForm()
        {
            try
            {
                MDIsControlo.MDIsControloForm oForm = new MDIsControlo.MDIsControloForm(m_oParameters, m_oParametersGCAA9601, m_oParametersGCAA9604, this);
                oForm.MdiParent = this;
                oForm.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void MDIsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ControloMDIsForm();
        }

        private void toolStripButtonMDI_Click(object sender, EventArgs e)
        {
            ControloMDIsForm();
        }

        public void ControloMDIsFormMenuItemEnable(bool bEnable)
        {
            try
            {
                toolStripButtonMDI.Enabled = bEnable;
                MDIsToolStripMenuItem.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonPesquisas2_Click(object sender, EventArgs e)
        {
            try
            {
                pesquisasEReenviosToolStripMenuItem_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void pesquisasEReenviosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIActividades.Actividades oAct = new CIActividades.Actividades(m_oParameters, this);

                oAct.ControloPesquisas();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        //SDCIM 7  
        private void atividadesToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            try
            {
                CIActividades.Actividades oAct = new CIActividades.Actividades(m_oParameters, this);
                oAct.ControloBalcao();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        //SDCIM 7 
        public void actividadeBalcaoEnable(bool bEnable)
        {
            try
            {
                atividadesToolStripMenuItem.Enabled = bEnable;
                toolStripButtonActividadesBalcao.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }
        //SDCIM 7 
        public void acoesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIActividades.Actividades oAct = new CIActividades.Actividades(m_oParameters, this);

                oAct.ControloBalcaoAcoes();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void controloBalcaoAcoesEnable(bool bEnable)
        {
            try
            {
                acoesToolStripMenuItem.Enabled = bEnable;
                toolStripButtonAccoesBalcao.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        //SDCIM 7 
        private void sacoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIActividades.Actividades oAct = new CIActividades.Actividades(m_oParameters, this);

                oAct.ControloSaco();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        public void sacoEnable(bool bEnable)
        {
            try
            {
                sacoToolStripMenuItem.Enabled = bEnable;
                toolStripButtonSacoBalcao.Enabled = bEnable;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnDVPImportarRemessas_Click(object sender, EventArgs e)
        {
            //this.AbrirImportGCCAForm();
        }

        /// <summary>
        /// Normalização código... botões de dev apenas
        /// </summary>
        private void AbrirImportGCCAForm()
        {
            try
            {
                ImportGCAAForm oForm = new ImportGCAAForm(m_oParameters);
                oForm.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnErroDeposito_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    DepositoErroForm deForm = new DepositoErroForm(m_oParameters, this);
            //    deForm.Show();
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            //}
        }

        private void toolStripButtonActividadesBalcao_Click(object sender, EventArgs e)
        {
            try
            {
                atividadesToolStripMenuItem_Click_1(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButtonAccoesBalcao_Click(object sender, EventArgs e)
        {
            acoesToolStripMenuItem_Click(sender, e);
        }

        private void toolStripButtonSacoBalcao_Click(object sender, EventArgs e)
        {
            sacoToolStripMenuItem_Click(sender, e);
        }

        private void FichACOMPesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.openPesquisasReenviosAcomDialog();
        }

        private void faturaçãoMensalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                CIReports.Relatorios oRep = new CIReports.Relatorios(m_oParameters, this);
                oRep.FaturacaoMensal();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void tsbtnPesReACOM_Click(object sender, EventArgs e)
        {
            this.openPesquisasReenviosAcomDialog();
        }

        private void openPesquisasReenviosAcomDialog()
        {

            PesqFicheiroACOM pFichACOM = new PesqFicheiroACOM(m_oParameters, this);
            pFichACOM.MdiParent = this;
            pFichACOM.Show();
        }

        public void enablePesqFicheiroAcom(bool bEnable)
        {
            this.tsbtnPesReACOM.Enabled = bEnable;
            this.fToolStripMenuItem1.Enabled = bEnable;
        }
    }
}

// FILE: SDCIM/ModusCI/CIControlo/CIMainForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStripMainMenu.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>29, 12</value>
  </metadata>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>138, 12</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="toolStripButtonActividades.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGxSURBVFhHtZVbkoMwDARzdI6Wm+2qZcbIRjKE3UxVYyyN
        HpUP8vqjfj4gUxW/pd78jnZvVBbrKhO7vOm2bQ53zvf7XYLwefVez9muo5ZJk+dpqgU+XQJx552GUT2J
        uLdwl8fJa9iTJfSO37vuGpIyE2/pfLhOgU/xK/B6Z1NvPoNiPg6dT3zb5k17fAU+ox4uUGy6Gi6ivwKP
        4UoNkdUSxC3rzEug2CdC3uhKTRGErxoel2jx9S+LxxjkTVeokHfOeTi0+PGdqMBnnKTEJdXwD3mk1fCv
        65vDrdUSe9TDEyybUiozC3skwyvwj/WRUpkZ7JEMqcA/1s+UysygpiOWeTAc/q7F8O/r34er+BaL4Xc5
        yZpcq/nOENdn9Y7wGYM8Mf9RiKP5GeLztz3rEUH4jC4Prsz8u8XB0OLHcPxPl/BAZgSEJy7R7ufhOsnH
        HhX4jPUCgNrQ6+E68al+RnnD5QMyYwThpVgQz0583jlZYsq7vLmSc0EE4ccniMeTvHc91OuLfFtASTWr
        QPIJ4qqnYaJlvjdt12dLcPfqWmU+Kx6aZ7AIvsBjVcXzgBUP9Xr9AiJ4HlApdeyvAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="toolStripButtonSair.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACNSURBVDhPpY8BDsAgCAN9uk/jZ85CGCjiSNasE4XeXLto
        FHzV6L0H43w+nwAeyMNa5+KBPFwAQFirAD14rUJdAsxWavTFc1e/gYXXG2CNgF1L2AOkLgBgDXtA9gu7
        eOAPAOJBInKBM0A3BwtAINgHAOy/YnU884Bm/T0Qg1IbAKvr46VeGm4V65V9n8YDdYBUJKSZA9cAAAAA
        SUVORK5CYII=
</value>
  </data>
  <data name="toolStripButtonHelp.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAD/SURBVFhH7ZaBCsMgDET9dD+tf9blcLemNmqs2jHYg0Oo
        l9xtDLpwhxjD3tLbOhcu37ZtBzyBfgZNLcJlDLBOoJ9RwyUY7EWHD5c4wnF6lRgucS/8kFXAXWI0nMoL
        yOpnC0DZp28XmBkOMXxagWyZ6dGiX83UgTHhXmZ6qcJMGRgT5WVi+yyKMZpeijP5XBEYE/YysZyWeAuI
        tR0OagXk+rLEU0BsvnCgBiydqJWFusN7+IdbwRDuHyhQ1tICKRxcgyGG/wt8vYBY54cDTwGxrQkHKqCl
        tfCr1ur+53OX0stHlxHbmgLTX729/EQBsa0JJ7XfgFyvDVcwLFcnIbwAjoPPodv3z1gAAAAASUVORK5C
        YII=
</value>
  </data>
  <data name="toolStripButtonAlertas.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHrSURBVFhHzZSBbiQxCEP30/vnV+zghBCYiapKPatvQoKB
        3O7sff57/ePfl3Fq5O4EL/hiWPcrpcJcpHPhx5uyZw1PF0CyuhUKkAOjeEhn9ph5seUD7XBIJhAN8Rwg
        N/cYLmwfL7t5PF4XaCSjOIbFuCN7fP/4r5dkjoXbWSCnednkUfJquKSi2IBxgql48nABcDV8qPmOE7Qg
        wkqKC4BlsL9LxSJ7lDCNCCtpLgCWifiYJ4VPARRNmUKElTxcQCwz8WGnZJg/q6IZU4iwkosLAC9A7/Fy
        JslAqgYOLYiwkvtPoP1VyECqBgHaEGElLxdw468MB7QiwkoeLuCmdviQNVjdBlUzhxZEWElzATe8DJeG
        AQWTqqkRLYP3TwD4oDe9X0KXjVS+SejnQ3pFsz1+j9jX8HG7NlPVJLBZi3xJKDr+H4hJezxCm3aI374C
        4L0xeL2ULiVliHt7HDCFCCu5fweaX8R6mYQ9BkVDpQbuL3wkmJvhp1TABg2rUTE819r+58PzvuOpxvfH
        d19pFnoR2N4LNU2NZ05xxM9fLzALHBSIeZ6GqGk+i/uI/D5yVzYu8z5AxHysr+pwtueSkIioQTRbsDXM
        eWjPDeFM5BxVD00mlx22w6E9vwu5Jq9mZ1GlboB0kx+eP9fn8w0xVGs2x6WhiAAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonEnvm.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGUSURBVFhHxZQNsoMgDIQ5ukfzZj5DumZZghXszPscKvkh
        u9pOy/HPLBkoa8dSlg38ysQrA78w8dqAXW+YPs3CfK1yndy2ra5SeOzkdZ7FnLvFNAYAjZy/ThM5nr81
        gGLZzkGrqzMQMWuAxsC+79fehs3ex08f8+3ONAYMa6q/g7s1Je49/HBMZ8DInAITgijuubjnrMfFI2ZS
        A8bIhL6BXjziEA8eGzAyE/wG8id3enHvnTJgqAm8gbF4+52TRGXagMEmqoFU3HMhrj1RZx4YKHUgTIS4
        3kPcDYCoGxMGvMTDYCJDxVsThs+bMIAh7RPAhK4Qj/7svPUyQwN+mGkH61IhxF4zPH5gwL/zMblQ0Mc8
        76sBdRy8izH31kD+5O+EObb5X9/AmHVhx+PUAP5ceHEe5LX7OmKg+fqJhLnjpXmOtTaqj3psdQaUrln6
        ntQ4n+aywlUcxOBJjfNpjgtK0/jZc19WB1rT+7XXBNM0fvbcl9VBVtO47jXBaD7rQ26U573Gdc8JXpwH
        GhvIjfJA9x4fxx+uvndtNM0cIgAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonAcom.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGLSURBVFhHxZELEoMwCERzdI/mzVo3dIUQiMY4080wyifs
        qy2fSZVSarylZwA4L0E8B3gJYg0AZxFiHQBnASK8WU2yyM7Re6Lz1rZtNYYmV+e4yz2jsLANALQEgJN+
        CakPAdgs20J0AJpbD6oB2Pe9NuvQsWz22ZurMIP9dTYDgAgxjClzmcFe6BIAImkkXKYpn7G51DAj5ppf
        AkAZBC6PzTVXc9VtACiCwOXcXNWby+wUAOQhcHls3v7nxqJqGgCyEBUgNJeamvsZ7U8ClLqQEHrZP9Vc
        ACjtQxMA0rLLCBHJm7cQkOybAOASHYYI4UPNdT66j9lbAHLZql3swxsxlx4k+Q0A+c9zxUaqPrf7LgE8
        sWot594hQPzL54xGOfZffoFc941EcR4CoMCILtq+zFj5nvbbuogAZ6BoCxiw4eujPOvZmq8f0ST/CHmx
        X4LyuVfUtzW+j2pH9E3K515R39b8u3/+4nxpwg5livq2Fr0Heb4Amsnv9IJcL0BsWLEW9aCs52v+vZTy
        +QI4oulukhzt8QAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonListRem.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFOSURBVFhHxVQBDsMgCOzTfVp/1vWkBGRY0Ul2CTmBK15Y
        1+MyOI4jPTRcA+d54kSFjYy5IQPewzs4bCBqopRylVsLjuhltqDNbrSid8blmkf6sIFSgiagha5qnb7i
        77mENrsBAX4rFo8CBry6DcybMsAByRvDwFtfx5SBJ3vnWys/QS24vGjAH6aZXz4wR0+fsoH2bwj0TaRs
        AGCzdDHgm0jZABhDK5tLbZ6+AeT6Ur0RIH0DgL707xvwdGEDXjzdTu87J7T1aQNPpcnlTDlvgOus476u
        LxhohyCXMyDvANd139a2bkCHV9fPcWx9Bzi3G6hVhxFLG5Czn9t3AHU+23zBALV1LmegvwEvX9oAS3Td
        hu5rPUF0YQP64zJi3gChz1MfIjLQH6Y5anbBQM2GnLYBfmA3hwzwA9L+jTFrycDumDKQFUMDAERZ0eK6
        PgNGUB7TeyxHAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="toolStripButtonResEnvio.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF2SURBVFhHxVSBlsMgCOun+2n9s16jzRkQrd3qXd5jEKCY
        4rbtcNi2bbkpQgH7viMqiRc95k4JiB5+w08LmBWRUjrS2Qs/019nV1h2wjaNPQ5Xf9c/LSClSRHoRV/u
        Deri27kFlp1AA+6KzXcGAVHeG+Y9EkBDy8hDwKiu9kjAxcb+7K1XkBOh/1BAPEw9v3zwtF7/kg3YnyHQ
        F7FkAwDFloOBWMSSDcBjaPbuUM+XbwBcD9WNAMs3AOih/76BqG/5BjLviPiTDQD+7rWvKwBJb5rnEOWM
        dQNRvaC8FHM1fz2pSXhuwDZbzlg3ENWRV66W81pkzKHMa63ELa8xYDljvQLmMvslYjrE8wLLa9xyxrcC
        GPsN6BDyXr3AcsYPBVwNklfeqyPvOeOvNhBxeOZ6ec/VSgUfYVFjoOX588r18uR4qbaXVQGK3EAt973+
        D4w8ZuoVEJadoAA+8LafEsAHavk7j1kfCXjbHglYZbcCADStMovj+AES6g7oJ7KnWwAAAABJRU5ErkJg
        gg==
</value>
  </data>
  <data name="toolStripButtonLtAcom.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGJSURBVFhH7VNbksMgDMvROVpulkUQ4QeG0jb0azXjCtsy
        0TjpcTkcx7E9NEID53niVAsPMu5dMhANP8HLBlZNpJSulLXgFb3cLbBZhhXNGQ/X/Eq/bCClRRPQQle0
        QV9xf2+FzTIgwLui+FXAQFT3gfveMsCAZMYwMOvreMvAndXfXKuDlN+ca/IKSqExZ6LQsFkGBNVAfxlz
        Mj8+MEP3y2+u8c7HN2D/hkBvgrMfGOgvYa6ZZuuDAWuCs1s2AMalhV2fOWe3bwC5NsGNcHb7BgA+tNRv
        PWcf2YAPYLQBMrVfbWDGegMlD0yAv9rAjL1Z/Ro0/2wDI/7ZBma6/w1MDaDBiC7VfQTr3IDtxXPaQKuX
        LKMVcvgNsB7l0OpczjZHDA0w8Wdc4nPPUV9q0h+GHbDDUe456ktN+sPQIn/2lyH3HPWlJn39qmqv6aTo
        g+8Mwa/Yc9Rnzfd5RnQGCOa1ZoRLuZwByT8ygCGGrvue70d1nLkRovTucwOKEO4KbQDoDADF2aawuK4/
        +TvN7z8OMAcAAAAASUVORK5CYII=
</value>
  </data>
  <data name="toolStripButtonResAcom.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF2SURBVFhHxVQLsoMwCPToOZo3s9kg8in5aOW9naEbYIM7
        2HY7HLZtSw+N0MC+7zhR4UXG3CUD0eU3eNnAqolSylGqFryil9kCm1VY0ZjxcM0z/bKBUhZNQAtd0wZ9
        xd9zCTargADvisWzgIGo7gPzbhnggGTEMDDq67hl4MzGXLXyCloh5IcG4mGa+csH5ujpUzZgf4ZA30TK
        BgA2Sw8GYhMpGwBjaGP3UJ+nbwC5fqjeCJC+AUA/9N83EOnSN9Dyjok/2QDg373WDQ2gwRFtQPcRXOcN
        2F58Txu46i2ruAo1/Aa4HuXQ6lzONkd0DXDizxjic89RX2rS74a9YC9HueeoLzXpd0OL/NkPQ+456ktN
        +vpVUe/SSdGHEuHUcs9RX2rSnxpgcE41OyTK+YvFuZwByR8aaBX6VHXqUZ1+MfN70Pn/gdY7zxdYfGZT
        5v8BQp8jA4DNKtgAX3iblwzwBWn/xpj1yMDbcctAVkwNABBlhcVxfABCLCTSjUXyBgAAAABJRU5ErkJg
        gg==
</value>
  </data>
  <data name="toolStripButtonMDI.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB5SURBVDhPvY9BDsAgCAR9uk/zZ7SL0CCIpZdOMjGRddXm
        oKJbaIxxFBkxYIcVA9R7PwrMKwIcuhfR3jb3XAFccAVRgFz2ClPw3CB+KHgDOeOCH1YM8PMy5xfzL4Al
        bAXlAgS1SP2/wKP7msHKJxw8zMTcuMWHTgqtXY6Jj0lNg+ylAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="toolStripButtonPesquisas2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEvSURBVFhH7ZVZkoMwEEM5uo/GzQhyWo3cYDaz/PCqVLhx
        LAkyNek2GDZ0Gzmg7/sY6Ap7l1KYY70k3bf1JRTGHjYMhYo9OTOqCTdaCgY6Q5Uip3ATN7QQwrVeKT2L
        KwyPshoeKYJtnVJi+OEC5ROYocKZeyo9o14w3osfpFnEA4Ly58cnBz6bH4z34gVoTDjX7t1SgGgQ0Jm6
        pQBEOFeFP7wn3sCS+PS4Ar/XWoACOqsYflkBP2hGa9oKlxKHmA6roV0pBsdwLQDZP6VDTAbRVEIZXAt3
        j5O4STYy8xoxnDrz9IobxSJRvi9nRE0UxgyK0n2u8RUBm5uYmwfpHn8JUxpnW4uaiGaFFr7vfJ9ImUfJ
        wXgbb5X4B34lvhITXwkyL/FwAeAl3ngDhMGjuu4HYddzQle2s2kAAAAASUVORK5CYII=
</value>
  </data>
  <data name="toolStripButtonActividadesBalcao.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGpSURBVFhHvZXtkoMwCEV9dB+tb7bLIRIxAmrW7s2cSQOX
        j+mPdvmjfh4QKYvfUm9+R5vXK4p1pYlN2nRdV4U39+fzSUH4tHqr527Po8qkSPM0tQWeLoF485mGXj2J
        eLdwl8bJ27CZJewzfu266ZA0M/GWjofbbeCz+BV4tbOoNx9BPu+Hjje+ddWmPV6BT8iHG8g3rYYb3p+B
        R1CFBk+1BHHJKuMSyPfxkBe6QpMH4cuG+yVavP5m8QgHadMKK+Qz9zgcWnz/ncjAJ5xkiUuy4Q+ZUjX8
        6/ricBpVpx5+JjupvGk8ko2GZ5TdUnmTP28O56TyJn/IBEwN57ygfPg/6PXhVnyLYvhdTpIm12q+M8Tt
        Z/WO8AkHaWL8ozD25meIj7/tUQ8Pwid0abAy8+/mB0OL78Pxzy6hgcgICI9for3Pw+0m73tk4BPqBQC1
        odfD7cZn9SOWF1Q6IDJ6EF6KDeLRjU87B0sMeZU2t+RY4EH48RnE/U1eu+7q9Um+LWBJa5aBzGcQt3oa
        BirzvWl7zi3BW6tzpfmo+NA8gkXwOaaVFY8DKia1LL9YQh5QZAR1cwAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="toolStripButtonSacoBalcao.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAgFSURBVFhHrZZpTNT5GcdJu9k2Tdq+avuiabJNuk1ftDHZ
        V802G5M1TWPa+EJr0hhNm3gkatXE6rpGCVguXVZBOYSBubiWWxiBBRGGgZmB5YbhnhkYmBNmBhyu4fTb
        5/nN/y9HzaZqn+TJ/Od//D7f5/gdUe9q2dnZPyD/Dflh8n8+fvw4KTWnsPV+lnIg5oHixbUvspai/52z
        Rvf/Kn3yZqZWq7+vUCh+nZWVdYj87wT5PFedX/VQoen5MkPrTbirCMUk5q3Fp6vWYzKf4E5WDZK0Tbhf
        YED07VjE3b6N2ORsKJWar6Qh91ppaen7pO5DgnwqAW4qlUpFhkLTn5KlcSR+kbv0ZVr+YiIBYh9VbSXm
        1OJ+fhMyK76Bqm4QhU0TKGq2oqTFhjKDDZVtdjwxTuGJyYa4+Lu4eyce2hoTHinVfgm51wjsvZupCKU8
        LA0nanQbaQUNyCg2QKXrxFdNo6g0TaGqfQpPOxyo7ZxBffcMGnpceN7nQlOfG/oBD1otXhiHfNC122Ee
        nIK5fwxWxwxmXA5YrJNYWAggP7+Ay/ChhN2xO8rCtY6xWej7PTAMetBm8cE07EP76Cz4ftfEHHqsfvTa
        AxiYCtJ9HzpHpjEy5YRn1oMhqx1TTie8dL24OI/19TVsbGzQ77rwtbU14Xq9YZuC/YeE3bEERf7asMMP
        myeESe8iHL5FzMwtY9Qxh+DCAmzTBLNPw+110q8DK8shrK4uYXt7W/jW1pbwzc1N4a+Dh8NhdA+PQaVW
        P5WwO6bSauu+Ng1RNG5Klw0Ot5uicWNlZRHbNLBsL1++FC6Dvw0eDAYxODiIyspKxMfHIy8vD4GAF7mq
        Yk9MTMx7Ejpi1HiXC3X1G06nVUL9t30bfGJiAnV1daBxcOPGDRw/fhxHjhzBiRMnEB0dDUo7Ll68CI/H
        jZKKiuXMzMzfSuiI0Qu/T8+rDtqnxiXcXpPhk5OTePbsmYgmLi4OJ0+exOHDh3Hu3DkkJSUhIyNDPOf3
        QqGQEMapX11dxW2aii0tLdAbjNwHZyX0jqVmlixzrdfCKwJqsVhQVFSEe/fu4fr16zh9+vQrUG5uLhoa
        GtDe3i4ActqHh4f31Ly3t1fA2QsLC0HTG0PjNihVec0Sdsc0Gk2tvnMY80Ev1X4Fx44dA00ZNDY2CjGj
        o6NioN017+/vfwVnqCyA4ez8nSyAry9fvoyA34ccdbmfxPxYQkeM6vev4q/NcLvtYvCrV69imjIi15sH
        YRG7m42Buzud/8twl8uFjo4OdHd3CziLvXbtGqxWKyprapZIwEEJHbH6+vqEnn7LpmPagZGREfGh2WxG
        W1sbWltbI/XT68X10NCQAHu9Xmosj3C+x13P3zDQTTOJM8nX/Lu8vIzExESUl5fD1NWLnBxlnISOiurp
        6VFz83R1dWF8fBxjY2OvoAaDASaTaY8Idr7HTdbc3CwE7E87Q2mJf60PjtJ6oN3VB5TiO5xeh8Mh0s6p
        5P99fX0iEyRQNBSL4AhqamrEe5wFjlyGM5jfc/kCAlQ/GcbsKuAjt74AjB6gfGJTPNPUtCzRfvMTIYCm
        WAxH4/f7Rb25nhwVizAajaLjtVotVCoV0tPTxS+LYKgs4FWzjVoFwLUMrG8DcwQfngeeOoB8muXZI4B6
        DOKdqkZj3msFcIP5fD7YbDZR0+fPn6OgoEDMfxbA07CiokKA+Rsu2+60c7SbEvyZE7g/CKSQpw0BWcNA
        ziiglERQOT94awFy1NztXCYeUNsbEHA/wRsJntwPPLQAmQTOJbCGslAwARTRolsqlSOKwA9pkJdvIoAb
        kqHcdCxAjr7Duyng7d4deBalXUURM7jERn0wCVRNAdVUFiGAUvmAG5BBxcXFwqlBxOrFQJ4+Fy5cwPnz
        53HmzBlcuXJFCGIoO8+a2dlZMVifH7BTCR4RWIZzzTniMnsEWjsNNFB2Gl2SALkEC7T1cvTyOs7RV1VV
        icjT0tKEJycni82FSyAL4DnOawAPZqLIW93AA6o5p50jLyQ4R82NyOBmem6gGWHy7RPwpj0gw9kHBgbE
        YGXjYdQRiBuOmy2f0s6RM5wbsoXAZgJ3zQG9lK13EiDD5+fnUVtbKwYrMo6jiqLl6Dn1xVRzrne9BG+f
        jYAtQWBoNhwRQJvLibcRwNvv2bNnxZbMvcH/ecBcS1jMdzl6rnkTpZ1T3kNwXhd4qvK7CQkJf4ui2ufx
        0sowriVHtV8AQ1NTU8XpJiUlBdXV1WK35OeLi4vCX7T9Ba7OBDGwdigsal/J0c9Eav4NpX2QIpfhOl3d
        IVqG3hMl4E4OBAKio3nVu3nzpjjdcOfzwePo0aPiPMC7JDciZyAYnKNdzw67bUDAVztIgO7PMCivCMDT
        1oFtnTUsGq+NmrOLpmifI7JMd3X1/UGsgmyU9tjdJZCXYhbDuyHtlEIUnRn2lMAy2ErNZxRwdmfZQbR9
        /ost/bVf8lHsEwa9ziXsjtG2mvw2PVBcXhZisN/8p01n8ccwf/ZTMJyG/B75d8Tg/4t1dnZq9gvgzub9
        ns8GvOLpdDqxQMkC6HqD4evth7AP/ubGWy4dvea4B1gAn3hYAJeBBfAW29TUJDJRVlbGzbd169atkhX9
        wZCz5B3hkv2I/CM6fKbTEmymI7aPttsFinqDu53O8auxsbGhS5cuzZw6dUp/4MCBk/T+zyc1v6s13/jZ
        wrvCZXufnA8IvyL/iPxj8k/J/0jO0+UTcr7/AfkPyb9L/n+wqKj/ANoU7RuJ6ZFiAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="toolStripButtonAccoesBalcao.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAi5SURBVFhHpVYJUNTXHSbT1DG1TTrtZCaZHpNOtdPMZOqM
        1qsd69TUiaQNRYjT1AHMiLUBI14YREFAkEM0oBzC3suhIDciAWFduSkssLDcu7DLsewqlxwCovL1/d7u
        Ilq1Q/Kb+eb/3/++977vd7zfe3bf1RITE3/A8FsGe4Yvr1y5EhYtTC2/mCBuDvhacN/7fMKU/1nhHPv+
        qXXK8kwqla4UCAS/SUhI+JBhLyM5KZIm514SyBouxMlN58IFEwGhSXMhsZKHAfE5CEooQJhcgYspZfD3
        C0Swnx8CIxMhFsuuWZd81q5fv76CqVvDSLZbCXzFYrEgTiBTRyXIDKHnRVMXYpInQxlB4OXcx6HCm7iY
        rEB81n8gKWxBqqIbV29rkX5Hh4wyHbIrepBTqUdOlQ7BIeEIDwqBvKAKl8XSYSvls8aITeHxgomoS9dn
        Q2X58zEpxYhLK4Mkvw7XFB3IrtIjt0aPG7UG3KzrR5GqH8UNgyhtGoSiyQhl8xDKNSZUtpqRX9OD6hY9
        qtWd0Br60T9ogEbbi/HxESQnp1Aa1lhpn1qQOHWutvMulOohlLUMoUJjRlWbGTUdd0Hf67vvoUE7jMae
        ETTrR9l3M+ra+9CuH8DQ3SG0anugHxiAib1PTo7h4cM5zM/Ps+dDjrm5OQ6lsuwJc/ZzK+1TOydInmsz
        DEM3NIFe0yQM5kn035tGh+EeRsfHoetjZD19MJoG2NOAB9MTmJmZwpMnTzgeP37M8ejRI44Xkc/OzkLV
        1gmJVHrDSvvUJHJ54TdVrcwbIwuXDgajkXljxIMHk3jCFrbZwsICh434VeSjo6NoaWlBdnY2QkJCkJSU
        hJERE0SStKGAgIDXrdQWY4XnlZpfND8woLVS/a+9iry7uxuFhYVg68DHxwe7d++Gg4MD9uzZA39/f7Cw
        4+DBgxgaMiI9K2s6Pj7+Ayu1xdiAzbFJeaM9+i4r3bNmI+/t7cWtW7e4N8HBwXBxcYG9vT0OHDiAsLAw
        xMXF8f9p3MTEBBdGoZ+ZmYEf24p37tyBsqyS6uBfVuqnFh2fPk25npt9wEk1Gg2uXr2KiIgInDhxAu7u
        7otEIpEIxcXFqKmp4QS2sLe1tT2T88bGRk5OSE1NBdveaO3SQSxJum2lfWoymeymsq4NY6MmlvsHcHZ2
        BtsyKCkp4WI6Ojr4QktzrlarF8mJ1CaAyAk0zyaA3r28vDAybIZQmjnMxLxlpbYYy9/xtG+qYTT28MWP
        HTuGPhYRW75pERKxtNiIcGml028b+eDgIGpra6FSqTg5ifX29oZWq0V2QcEUE7DNSm2xoqKicw1qzSND
        nwHt7e18YnV1NSoqKlBeXm7Jn1LJ31tbWzmxyWRihTXEQd+o6mkOERrZTqJI0js9p6enERoaiszMTFTV
        N0IoFAdbqe3sGhoapFQ89fX16OrqQmdn5yJpWVkZqqqqnhFBoG9UZLdv3+YCng87kdoEEDmB6ubMmTNo
        69ZBIl9SByzEQRReg8HAw06hpN9NTU08EkwgLygSQR4UFBTwcRQF8txGTsQ0ru++Ad8XbcDafHu4lXlg
        bGwMU1NTPGKOjo6sH9yF5FqGmZ03b3MBbIsFkDfDw8M835RP8opEVFZWcuVyuRwSiQSxsbH8SSKI1CbA
        VmwqrYqTr87ZBmeVA39PaEqETqfjdXDy5Eke6awc5TTbjh+9UAAVmNls5pMop6WlpUhJSeH7nwTQNszK
        yuLENIfSRuSGcYvnm0p2IHJsL/ZqduGH0k3ILMnk3k9OTiIqKoo3rJpGNQQiUcR3EmDzmqq9VKXg5BuK
        /4KwYTe4tzvhDclG2CWuR3NzMyen5kRjqZ+0dXVDJEup4wIY8SX2x8JyBFBBUm1QkRXVFHPyLbfscWrA
        BXtbd+ENqYWciPv7+3l9kQA6I3bu3Al9rxbS9MxhoVC42o6F8msaQERpaWkcrEB49yJC2j6enp7w8PDA
        /v37cfjwYS6Iqrx3TM/Jt95yhHePG1zUTlgp2bBIbvOc8n///n2OI0eOID8/H3klyoes2bkvpmCcHb3k
        va2Pk/e5ubnc85iYGI7IyEh+uFAKeqzkDmVu8NH9G8d0rth25yNOHlYeBXHnVYg6UnGlRYbThSE4nu2H
        z4UecIj4B75IPoqg8hgIxRLpooDlpECSLePkbtVeONV1BEe79mF/uzOc6j/h33+cvBk/Td3yUvwkZQtP
        09uJf1z4VgKI5HBdECJ6gvBVpxf+qf77suGk+gQrxCxd7HDZ820EnG66gIu68zjV8RUc6/7G4aXxRIw+
        CmHaYPh1nsTxNi8c1ByAu9oNrk2f4bMGZ3yqcuSR+rj6Y0u9sNwnUWslMurn1DafF0Ck0dHR/HZDezkp
        L5WLOKO+iNCucHioPbGj0h6bS3fwGlgWKAXU/0dGRvg5QF3P19eX326o8uni4eTkxPcvnZJUiFSEbcb2
        RRFn28OwT/UFfp39J7yf9ld8mX181kXuOeos26/eKtmVvEb256B3ZBu935FvOv7utS2H303f4kXgfYCF
        PXBpCmytmMTQachOSi6K3RkWU0ACNC3lUKgKFtMR0BoK53J37tV7su0FbOlVDCsZ6A74GsOLjbXJyOXW
        AAlIy8yYuCwUDftfCS+xiIiEb3MIdipcuYg3ZZtEVopXW11dnex5AXSCUf+muwF1PGoc1KBsAtj7/L59
        +xzZ9DcZVr0V+btfkYhTjZHwaQrGhhu7uIhV0o1CTvIqoyOXXb3uUQ2QALrxkABKAwmgI1ahUPBIZGRk
        0FXt8enTp9PZVMtxarWVkt//gkT4NkTiaP1ZfJDjgNei1y+slK//pXXIS428WMcun7GsBVezK7aZHbfj
        zOv5vLw8sHv8TGBg4MShQ4f6XV1dlWvXrnVh43/GsIImLzWbCB/VeRysDeBReF24zlJs/8doMfJoNcM6
        hj8wbGfYwfAhw1YG+v4ew48YvsfwYhNs/DmJ4HUg3Vph/foSs7P7LyliR3wcdAS1AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="tsbtnPesReACOM.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGQSURBVFhHxZULkoMwDEN7dI7Gzdg4WEZRHSB8um9GjR0T
        2UC7+zlgOdBr1AbzPGvDkNQepTG3OBPXPX6ExjiaLUujpkZnim4RRlljg3NTZ5BLhEkYehOAmFeIz9pq
        hqPsNleaxh5P04TmwwO0d+CGDHLUWHyGvcz4LHEQZko0ENXry50bkbufGZ8lBoAxQN7be2UAwI0MzqFX
        BjAB5F3ZF+8XTyAT7t5WI/buDgAZnLPQ/LEB4qAb7emoOQ0xxHaYDX2F0Fib8wAm/6M0xGagptQUjXvN
        w+MiYVKN3LyHNoeu3D0TRjqIKup0hnSLxhiNVFxHbK/I8PwW3+YiruE/4TSV3GPSLdSsUfK+6z6gYX5K
        bWxP47+GWBsODoELehdxPbtGa5yvaofgWuVrg9D9vTyLq+RJsLbAV8SG5kpW5z3EVXUI2SvaAl8RG5or
        WZ33EFfVn6nsFW2Br4gNzZWsznuIV/krkCdBF7QyOM7I6ryXxfok1g8iCs5IfqamX8b1g4gCgb2sZvRq
        usfXFX2WP22zxeJIjNmXAAAAAElFTkSuQmCC
</value>
  </data>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>237, 12</value>
  </metadata>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>347, 12</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAQAAAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAACIgAAAAAAAAAAAAAAAAACIgAzMyqoAAAAAAAAAAAAIiAzMzMqqqgAAAAAAAAAA
        iIDMzMzKqqqgAIiIiIiIiIgJzMzMyqqqqgCIiIiIiIiAmZmczMqqqqZggAAAAAAAAJmZmZzKqqZmYID/
        3d//ZmCZmZmZqmZmZmCA/93f/2ZgmZmZm7ZmZmZggA8NDw8GAJmZmbu+ZmZmYID/3d//ZmCZmZu77uZm
        ZmCA/93f/2ZvCZu7u+7uZmYAgP/d3/9mb/C7u7vu7uZgAIAPDQ8PBg8PC7u+7u7uAACA/93f/2Zv/8AL
        vu7uAAAAgP/d3/9mb//MwAAAAPAAAID/3d//////zM//mZ/wAACADw0PDw8PDwwPDwkPAAAAgP/d3///
        ///Mz/+Zn/AAAID/3d//////zM//mZ/wAACA/93f/////8zP/5mf8AAAgA8PDw8PDw8MDw8JDwAAAID/
        ////////////mZ/wAACA/////////////5mf8AAAgP////////////+Zn/AAAIAPDw8PDw8PDw8PDw8A
        AACA////////////////8AAAgP////////////////AAAID////////////////wAAAA////////////
        ////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wA///wAD//4AAf/8AADAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD4AAAA+AAAAP/////w==
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIControlo/ImportGCAAForm.Designer.cs
﻿namespace CIControlo
{
    partial class ImportGCAAForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.btImport = new System.Windows.Forms.Button();
            this.labelInfoDoc = new System.Windows.Forms.Label();
            this.btProcessRemessa = new System.Windows.Forms.Button();
            this.btProcessarAlerta = new System.Windows.Forms.Button();
            this.button1 = new System.Windows.Forms.Button();
            this.textBoxRemin_ID = new System.Windows.Forms.TextBox();
            this.button2 = new System.Windows.Forms.Button();
            this.label1 = new System.Windows.Forms.Label();
            this.textBoxNSeqFich = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.button3 = new System.Windows.Forms.Button();
            this.btnProcessaBalcao = new System.Windows.Forms.Button();
            this.label3 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.cbOrigem = new System.Windows.Forms.ComboBox();
            this.SuspendLayout();
            // 
            // btImport
            // 
            this.btImport.Location = new System.Drawing.Point(12, 29);
            this.btImport.Name = "btImport";
            this.btImport.Size = new System.Drawing.Size(178, 23);
            this.btImport.TabIndex = 0;
            this.btImport.Text = "Importar Remessas GCCA";
            this.btImport.UseVisualStyleBackColor = true;
            this.btImport.Click += new System.EventHandler(this.btImport_Click);
            // 
            // labelInfoDoc
            // 
            this.labelInfoDoc.AutoSize = true;
            this.labelInfoDoc.Location = new System.Drawing.Point(193, 9);
            this.labelInfoDoc.Name = "labelInfoDoc";
            this.labelInfoDoc.Size = new System.Drawing.Size(131, 13);
            this.labelInfoDoc.TabIndex = 1;
            this.labelInfoDoc.Text = "Informação do documento";
            // 
            // btProcessRemessa
            // 
            this.btProcessRemessa.Location = new System.Drawing.Point(12, 58);
            this.btProcessRemessa.Name = "btProcessRemessa";
            this.btProcessRemessa.Size = new System.Drawing.Size(178, 23);
            this.btProcessRemessa.TabIndex = 2;
            this.btProcessRemessa.Text = "Processar Remessa GCCA";
            this.btProcessRemessa.UseVisualStyleBackColor = true;
            this.btProcessRemessa.Click += new System.EventHandler(this.btProcessRemessa_Click);
            // 
            // btProcessarAlerta
            // 
            this.btProcessarAlerta.Location = new System.Drawing.Point(12, 116);
            this.btProcessarAlerta.Name = "btProcessarAlerta";
            this.btProcessarAlerta.Size = new System.Drawing.Size(178, 23);
            this.btProcessarAlerta.TabIndex = 3;
            this.btProcessarAlerta.Text = "Processar Alerta";
            this.btProcessarAlerta.UseVisualStyleBackColor = true;
            this.btProcessarAlerta.Click += new System.EventHandler(this.btProcessarAlerta_Click);
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(196, 29);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(178, 23);
            this.button1.TabIndex = 4;
            this.button1.Text = "Adicionar Documento GCCA";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // textBoxRemin_ID
            // 
            this.textBoxRemin_ID.Location = new System.Drawing.Point(411, 42);
            this.textBoxRemin_ID.Name = "textBoxRemin_ID";
            this.textBoxRemin_ID.Size = new System.Drawing.Size(100, 20);
            this.textBoxRemin_ID.TabIndex = 5;
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(411, 116);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(206, 23);
            this.button2.TabIndex = 6;
            this.button2.Text = "Gerar ENVM";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(408, 26);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(54, 13);
            this.label1.TabIndex = 7;
            this.label1.Text = "Remin_ID";
            // 
            // textBoxNSeqFich
            // 
            this.textBoxNSeqFich.Location = new System.Drawing.Point(517, 42);
            this.textBoxNSeqFich.Name = "textBoxNSeqFich";
            this.textBoxNSeqFich.Size = new System.Drawing.Size(100, 20);
            this.textBoxNSeqFich.TabIndex = 8;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(515, 26);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(52, 13);
            this.label2.TabIndex = 9;
            this.label2.Text = "NseqFich";
            // 
            // button3
            // 
            this.button3.Location = new System.Drawing.Point(12, 145);
            this.button3.Name = "button3";
            this.button3.Size = new System.Drawing.Size(178, 23);
            this.button3.TabIndex = 10;
            this.button3.Text = "ReporBD";
            this.button3.UseVisualStyleBackColor = true;
            this.button3.Click += new System.EventHandler(this.button3_Click);
            // 
            // btnProcessaBalcao
            // 
            this.btnProcessaBalcao.Location = new System.Drawing.Point(12, 87);
            this.btnProcessaBalcao.Name = "btnProcessaBalcao";
            this.btnProcessaBalcao.Size = new System.Drawing.Size(178, 23);
            this.btnProcessaBalcao.TabIndex = 11;
            this.btnProcessaBalcao.Text = "Processar Remessa Balcão";
            this.btnProcessaBalcao.UseVisualStyleBackColor = true;
            this.btnProcessaBalcao.Click += new System.EventHandler(this.btnProcessaBalcao_Click);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(408, 9);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(138, 13);
            this.label3.TabIndex = 12;
            this.label3.Text = "Processar Remessas GCCA";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(408, 68);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(54, 13);
            this.label4.TabIndex = 13;
            this.label4.Text = "Origem ID";
            // 
            // cbOrigem
            // 
            this.cbOrigem.FormattingEnabled = true;
            this.cbOrigem.Items.AddRange(new object[] {
            "GCCA",
            "Balcão"});
            this.cbOrigem.Location = new System.Drawing.Point(411, 85);
            this.cbOrigem.Name = "cbOrigem";
            this.cbOrigem.Size = new System.Drawing.Size(100, 21);
            this.cbOrigem.TabIndex = 14;
            // 
            // ImportGCAAForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(664, 191);
            this.Controls.Add(this.cbOrigem);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.btnProcessaBalcao);
            this.Controls.Add(this.button3);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.textBoxNSeqFich);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.button2);
            this.Controls.Add(this.textBoxRemin_ID);
            this.Controls.Add(this.button1);
            this.Controls.Add(this.btProcessarAlerta);
            this.Controls.Add(this.btProcessRemessa);
            this.Controls.Add(this.labelInfoDoc);
            this.Controls.Add(this.btImport);
            this.Name = "ImportGCAAForm";
            this.Text = "ImportGCAAForm";
            this.Load += new System.EventHandler(this.ImportGCAAForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button btImport;
        private System.Windows.Forms.Label labelInfoDoc;
        private System.Windows.Forms.Button btProcessRemessa;
        private System.Windows.Forms.Button btProcessarAlerta;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.TextBox textBoxRemin_ID;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox textBoxNSeqFich;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Button button3;
        private System.Windows.Forms.Button btnProcessaBalcao;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.ComboBox cbOrigem;
    }
}

// FILE: SDCIM/ModusCI/CIControlo/ImportGCAAForm.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using CIServTester;
using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIControlo
{
    public partial class ImportGCAAForm : Form
    {

        class Remessa
        {
            public string sOrigem;
            public long lREMIN_ID;
            public string sREMCOMP_ID;         //@RemID as bigint = null,
            public string sREMCOMP_PAIS;       //@Pais as char(4) = null,
            public string sREMCOMP_BANCO;      //@Banco as int = null,
            public string sREMCOMP_BALCAO;     //@Balcao as int = null,
            public string sREMCOMP_BALCAO_DEST;
            public string sREMCOMP_NUMERO;     //@Numero as float = null,
            public DateTime dtREMCOMP_DATA;    //@Data as datetime = null,
            public string sOperador;
            public string sREMCOMP_QT;
            public decimal dREMCOMP_VALOR;
            public string sREMCOMP_APLICACAO;
            public string sTipo;
            public string sChaveHost;
            public string sChaveHostExt;
            public string sNIB;
            public string sNumProp;

            public Remessa(SqlDataReader dr)
            {
                sOrigem = "1";
                sTipo = "1";
                sREMCOMP_ID = Convert.ToString(dr["REMCOMP_ID"]);
                sREMCOMP_PAIS = Convert.ToString(dr["REMCOMP_PAIS"]);
                sREMCOMP_BANCO = Convert.ToString(dr["REMCOMP_BANCO"]);
                sREMCOMP_BALCAO = Convert.ToString(dr["REMCOMP_BALCAO"]);
                sREMCOMP_BALCAO_DEST = Convert.ToString(dr["REMCOMP_BALCAO_DEST"]);
                sREMCOMP_NUMERO = Convert.ToString(dr["REMCOMP_NUMERO"]);
                dtREMCOMP_DATA = Convert.ToDateTime(dr["REMCOMP_DATA"]);
                sOperador = Convert.ToString(dr["CADEPR_USER_CORRECCAO"]);
                sREMCOMP_QT = Convert.ToString(dr["REMCOMP_QT"]);
                dREMCOMP_VALOR = Convert.ToDecimal(dr["REMCOMP_VALOR"]);
                sREMCOMP_APLICACAO = Convert.ToString(dr["REMCOMP_APLICACAO"]);
                sChaveHost = sREMCOMP_BALCAO + sREMCOMP_NUMERO;
                sChaveHostExt = sREMCOMP_NUMERO + ".EXTENDED";
                sNIB = "003500000000000000000";
                sNumProp = sREMCOMP_ID;

                lREMIN_ID = 0;
            }
        }
        Remessa m_oCurrRemessa;

        class Documento
        {
            //public string sDOCORI_ID;
            public DateTime dtDOC_DATADIGIT;

            public string sDOCFIS_ID;
            public string sTipo;
            public string sDOCFIS_ZON5;
            public string sDOCFIS_ZON4;
            public string sDOCFIS_ZON3;
            public decimal dDOCFIS_IMPORT;
            public string sDOCFIS_ZON1;
            public string sDOCFIS_NRDIGITALIZADOR;
            public string sDOCFIS_INDX;
            
            public string sRefArq;
            public string sNIB;
            public string sChaveHost;
            public string sChaveHostExt;
            
            public string sFrontImgType;
            public byte[] iFrontImg;
            public string sRearImgType;
            public byte[] iRearImg;

            public Documento(SqlDataReader dr)
            {
                sDOCFIS_ID = Convert.ToString(dr["DOCFIS_ID"]);

                dtDOC_DATADIGIT = Convert.ToDateTime(dr["DOCFIS_WKDATA_LEITURA"]);
                sTipo = "0";
                sDOCFIS_ZON5 = Convert.ToString(dr["DOCFIS_ZON5"]);
                sDOCFIS_ZON4 = Convert.ToString(dr["DOCFIS_ZON4"]);
                sDOCFIS_ZON3 = Convert.ToString(dr["DOCFIS_ZON3"]);
                dDOCFIS_IMPORT = Convert.ToDecimal(dr["DOCFIS_IMPORT"]);
                sDOCFIS_ZON1 = Convert.ToString(dr["DOCFIS_ZON1"]);
                sDOCFIS_NRDIGITALIZADOR = Convert.ToInt32(dr["DOCFIS_NRDIGITALIZADOR"]).ToString("00000");
                sDOCFIS_INDX = Convert.ToInt64(dr["DOCFIS_INDX"]).ToString("000000");

                //sRefArq = DateTime.Now.Year.ToString("0000");
                //sRefArq += DateTime.Now.DayOfYear.ToString("000");
                //sRefArq += sDOCFIS_NRDIGITALIZADOR + sDOCFIS_INDX;


                sRefArq = (DateTime.Now.AddDays(-2).Year % 100).ToString("00");
                sRefArq += DateTime.Now.AddDays(-2).DayOfYear.ToString("000");
                //sRefArq += iBalcaoTomador.ToString("0000");
                //sRefArq += NBiis.CCAGeneric.Documento.BuildRefArqMaqIndex(Convert.ToInt32(oRow["DOCFIS_NRDIGITALIZADOR"]), Convert.ToInt64(oRow["DOCFIS_INDX"]));
                sRefArq += sDOCFIS_NRDIGITALIZADOR.Substring(0,4);
                sRefArq += sDOCFIS_INDX.PadLeft(6,'0').Substring(2, 4);
                sRefArq += "3";

                //sNIB = Convert.ToInt32(dr["CADEPC_CONTA_BANCO"]).ToString("0000");
                //sNIB += Convert.ToInt32(dr["CADEPC_CONTA_BALCAO"]).ToString("0000");
                //sNIB += "00" + Convert.ToString(dr["CADEPC_CONTA_NUMERO"]);
                //sNIB += Convert.ToString(dr["CADEPC_CONTA_TIPO"]);
                //sNIB += "00";

                sNIB = Convert.ToInt32(dr["CADEPC_CONTA_BALCAO"]).ToString("0000");
                sNIB += Convert.ToString(dr["CADEPC_CONTA_NUMERO"]);
                sNIB += Convert.ToString(dr["CADEPC_CONTA_TIPO"]);

                sChaveHost = Convert.ToString(dr["CADEPC_TIMESTAMP"]);
                sChaveHostExt = sChaveHost + ".EXTENDED";
            
                sFrontImgType="JPG";
                sRearImgType="JPG";

                iFrontImg = LoadImage(@"D:\gccacq\DOC_FRONT.JPG");
                iRearImg = LoadImage(@"D:\gccacq\DOC_REAR.JPG");
            }

            public byte[] LoadImage(string sFileName)
            {
                StreamReader sr = new StreamReader(sFileName);
                BinaryReader br = new BinaryReader(sr.BaseStream);

                byte[] aBytes = br.ReadBytes((int)sr.BaseStream.Length);

                sr.Close();
                br.Close();
                return aBytes;
            }
        }

        Documento m_oCurrDocumento;

        int m_iNDocs;
        int m_iNRemessas;

        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected CIControloParameters m_oParametersGCAA;

        public ImportGCAAForm(CIConfigGP.CIGlobalParameters oParameters)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oParametersGCAA = new CIControloParameters("GCAA9601");
            m_oCurrRemessa = null;
            m_oCurrDocumento = null;
        }

        private void ImportGCAAForm_Load(object sender, EventArgs e)
        {
            this.Text = m_oParametersGCAA.GetProfileString("Genericos","Config","BalcaoGestor","ND");  
        }

        private void Update_FecharRemessa()
        { 
            try
            {
                int iForcarFecho = 0;

                string sSPName = "dbo.Update_FecharRemessa";
                ArrayList oParam = new ArrayList();

                //oParam.Add(new GeneralDBParameters("@RemID", m_oCurrRemessa.lREMIN_ID));

                oParam.Add(new GeneralDBParameters("@Pais", m_oCurrRemessa.sREMCOMP_PAIS));
                oParam.Add(new GeneralDBParameters("@Banco", m_oCurrRemessa.sREMCOMP_BANCO));
                oParam.Add(new GeneralDBParameters("@Balcao", m_oCurrRemessa.sREMCOMP_BALCAO));
                oParam.Add(new GeneralDBParameters("@Numero", m_oCurrRemessa.sREMCOMP_NUMERO));
                //oParam.Add(new GeneralDBParameters("@DataIn", m_oCurrRemessa.dtREMCOMP_DATA));
                oParam.Add(new GeneralDBParameters("@DataIn", DateTime.Now.AddDays(-2)));
                
                oParam.Add(new GeneralDBParameters("@ForcarFecho", iForcarFecho));

                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref oParam);

            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                throw;
            }

        }

        private void Insert_AdicionarDocumento(SqlDataReader oDr)
        {
            m_iNDocs++;

            m_oCurrDocumento = null;
            m_oCurrDocumento = new Documento(oDr);

            labelInfoDoc.Text = m_iNRemessas.ToString() + "  " + m_iNDocs.ToString() + "  " + m_oCurrDocumento.sDOCFIS_ID + " " + m_oCurrDocumento.sChaveHost;

            Refresh();

            string sSPName = "dbo.Insert_AdicionarDocumento";
            ArrayList oParam = new ArrayList();

            try
            {

                oParam.Add(new GeneralDBParameters("@RemID", m_oCurrRemessa.lREMIN_ID));
                oParam.Add(new GeneralDBParameters("@Pais", m_oCurrRemessa.sREMCOMP_PAIS));
                oParam.Add(new GeneralDBParameters("@Banco", m_oCurrRemessa.sREMCOMP_BANCO));
                oParam.Add(new GeneralDBParameters("@Balcao", m_oCurrRemessa.sREMCOMP_BALCAO));
                oParam.Add(new GeneralDBParameters("@Numero", m_oCurrRemessa.sREMCOMP_NUMERO));
                //oParam.Add(new GeneralDBParameters("@DataIn", m_oCurrRemessa.dtREMCOMP_DATA));
                oParam.Add(new GeneralDBParameters("@DataIn", DateTime.Now.AddDays(-2)));
                
                oParam.Add(new GeneralDBParameters("@BalTom","963"));
                oParam.Add(new GeneralDBParameters("@DocOriID", m_oCurrDocumento.sDOCFIS_ID));
                //oParam.Add(new GeneralDBParameters("@Tipo",m_oCurrDocumento.sTipo)); 
                oParam.Add(new GeneralDBParameters("@Lo_ZIB", m_oCurrDocumento.sDOCFIS_ZON5));
                oParam.Add(new GeneralDBParameters("@Lo_NConta",m_oCurrDocumento.sDOCFIS_ZON4));
                oParam.Add(new GeneralDBParameters("@Lo_NCheque",m_oCurrDocumento.sDOCFIS_ZON3));
                oParam.Add(new GeneralDBParameters("@Lo_Montante",m_oCurrDocumento.dDOCFIS_IMPORT));
                oParam.Add(new GeneralDBParameters("@Lo_Tipo",m_oCurrDocumento.sDOCFIS_ZON1));
                //oParam.Add(new GeneralDBParameters("@DataDigitalizacaoIn", m_oCurrDocumento.dtDOC_DATADIGIT));
                oParam.Add(new GeneralDBParameters("@DataDigitalizacaoIn", DateTime.Now.AddDays(-2)));
                oParam.Add(new GeneralDBParameters("@Maquina",m_oCurrDocumento.sDOCFIS_NRDIGITALIZADOR));
                oParam.Add(new GeneralDBParameters("@Index",m_oCurrDocumento.sDOCFIS_INDX));
                oParam.Add(new GeneralDBParameters("@RefArq",m_oCurrDocumento.sRefArq));
                oParam.Add(new GeneralDBParameters("@NIB",m_oCurrDocumento.sNIB));
                //oParam.Add(new GeneralDBParameters("@ChaveHost", m_oCurrDocumento.sChaveHost));
                //oParam.Add(new GeneralDBParameters("@ChaveHostExt", m_oCurrDocumento.sChaveHostExt));
                
                oParam.Add(new GeneralDBParameters("@FrontImgType", m_oCurrDocumento.sFrontImgType));
                oParam.Add(new GeneralDBParameters("@RearImgType",m_oCurrDocumento.sRearImgType));
                
                oParam.Add(new GeneralDBParameters("@FrontImage", m_oCurrDocumento.iFrontImg));
                oParam.Add(new GeneralDBParameters("@RearImage", m_oCurrDocumento.iRearImg));

                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref oParam);

            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                throw;
            }
        }

        private void Insert_AbrirRemessa(SqlDataReader oDr)
        {
            m_iNDocs = 0;
            m_oCurrRemessa = null;
            m_oCurrRemessa = new Remessa(oDr);

            try
            {
                string sSPName = "dbo.Insert_AbrirRemessa";
                ArrayList oParam = new ArrayList();

                oParam.Add(new GeneralDBParameters("@Origem",m_oCurrRemessa.sOrigem));
                oParam.Add(new GeneralDBParameters("@Pais",m_oCurrRemessa.sREMCOMP_PAIS));
                oParam.Add(new GeneralDBParameters("@Banco",m_oCurrRemessa.sREMCOMP_BANCO));
                oParam.Add(new GeneralDBParameters("@Balcao",m_oCurrRemessa.sREMCOMP_BALCAO));
                oParam.Add(new GeneralDBParameters("@Numero",m_oCurrRemessa.sREMCOMP_NUMERO));
                //oParam.Add(new GeneralDBParameters("@DataIn", m_oCurrRemessa.dtREMCOMP_DATA));
                oParam.Add(new GeneralDBParameters("@DataIn", DateTime.Now.AddDays(-2)));
                oParam.Add(new GeneralDBParameters("@Operador",m_oCurrRemessa.sOperador));
                oParam.Add(new GeneralDBParameters("@Aplicacao",m_oCurrRemessa.sREMCOMP_APLICACAO));
                oParam.Add(new GeneralDBParameters("@QtDocs",m_oCurrRemessa.sREMCOMP_QT));
                oParam.Add(new GeneralDBParameters("@Montante",m_oCurrRemessa.dREMCOMP_VALOR));
                oParam.Add(new GeneralDBParameters("@Tipo",m_oCurrRemessa.sTipo));
                //oParam.Add(new GeneralDBParameters("@ChaveHost",m_oCurrRemessa.sChaveHost));
                //oParam.Add(new GeneralDBParameters("@ChaveHostExt",m_oCurrRemessa.sChaveHostExt));
                //oParam.Add(new GeneralDBParameters("@NIB",m_oCurrRemessa.sNIB));
                //oParam.Add(new GeneralDBParameters("@NumProp",m_oCurrRemessa.sNumProp));

                object oObj = m_oParameters.DirectStoredProcedureScalar(sSPName, ref oParam);
                m_oCurrRemessa.lREMIN_ID = Convert.ToInt64(oObj);

            }
            catch(Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                throw;
            }

        }

        private void ImportFromGCAA(string sREMCOMP_ID)
        {
            SqlDataReader oDr = null;
            string sQuery;
            bool bFirst = true;

            try
            {
                sQuery = "select * from docfisico ";
                sQuery += " inner join docfisico_ext1 on docfisico.docfis_id=docfisico_ext1.docfis_id ";
                sQuery += " inner join remessa_vt on remessa_vt.remcomp_id=docfisico_ext1.remcomp_id ";
                sQuery += " inner join ca_deposito_recolha on ca_deposito_recolha.cadepr_id=docfisico.cadepr_id ";
                sQuery += " inner join ca_deposito_central on ca_deposito_recolha.cadepc_id=ca_deposito_central.cadepc_id ";
                sQuery += " where docfisico_ext1.remcomp_id=" + sREMCOMP_ID;

                oDr = m_oParametersGCAA.DirectSqlDataReader(sQuery);
                while (oDr.Read())
                {
                    if (bFirst)
                    { 
                        Insert_AbrirRemessa(oDr);
                    }

                    Insert_AdicionarDocumento(oDr);
                    bFirst = false;
                }

                Update_FecharRemessa();
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                throw;
            }
            finally
            {
                if (oDr != null)
                {
                    oDr.Close();
                    oDr = null;
                }
            }
        }


        private void btImport_Click(object sender, EventArgs e)
        {
            SqlDataReader oDr = null;

            try
            {
                btImport.Enabled = false; 
                m_oCurrRemessa = null;
                m_oCurrDocumento = null;
                // string sQuery = "select top 5 remcomp_id from remessa_vt ";
                string sQuery = "select top 1 remcomp_id from remessa_vt ";
                sQuery += "where remcomp_motivo=0 and remcomp_balcao_dest=9320 and remcomp_status=3";
                sQuery += "order by REMCOMP_ID desc";

                ArrayList alRemCompIds = new ArrayList();

                oDr = m_oParametersGCAA.DirectSqlDataReader(sQuery);
                while (oDr.Read())
                {
                    alRemCompIds.Add(oDr["REMCOMP_ID"]);  
                }
                oDr.Close();
                oDr = null;

                for (int i = 0; i < alRemCompIds.Count; i++)
                {
                    m_iNRemessas++;
                    try
                    {
                        ImportFromGCAA(alRemCompIds[i].ToString());
                    }
                    catch { }
                }

                this.labelInfoDoc.Text += " FIM"; 
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDr != null)
                {
                    oDr.Close();
                    oDr = null;
                }
                btImport.Enabled = true;
            }
        }

        private void btProcessRemessa_Click(object sender, EventArgs e)
        {
            m_oParameters.OpenConnection();  
            CIServTester.ProcessarRemessas oProc = new ProcessarRemessas(m_oParameters);
            m_oParameters.CloseConnection();  
        }

        private void btProcessarAlerta_Click(object sender, EventArgs e)
        {
            m_oParameters.OpenConnection();
            CIServTester.ProcessarAlertas oProc = new ProcessarAlertas(m_oParameters);
            m_oParameters.CloseConnection();
        }

        public byte[] LoadImage(string sFileName)
        {
            StreamReader sr = new StreamReader(sFileName);
            BinaryReader br = new BinaryReader(sr.BaseStream);

            byte[] aBytes = br.ReadBytes((int)sr.BaseStream.Length);

            sr.Close();
            br.Close();
            return aBytes;
        }

        private void button1_Click(object sender, EventArgs e)
        {
                try
            {
                string sSPName = "dbo.Insert_AdicionarDocumento";
                ArrayList oParam = new ArrayList();

                byte[] aBytes = LoadImage(@"D:\gccacq\DOC_FRONT.JPG");

                oParam.Add(new GeneralDBParameters("@RemID", 7329));
                oParam.Add(new GeneralDBParameters("@BalTom",9604));
                oParam.Add(new GeneralDBParameters("@DocOriID",0));
                oParam.Add(new GeneralDBParameters("@Lo_ZIB","00351234"));
                oParam.Add(new GeneralDBParameters("@Lo_NConta","12345678901"));
                oParam.Add(new GeneralDBParameters("@Lo_NCheque","1234567890"));
                oParam.Add(new GeneralDBParameters("@Lo_Montante",123));
                oParam.Add(new GeneralDBParameters("@Lo_Tipo","23"));
                oParam.Add(new GeneralDBParameters("@DataDigitalizacaoIn","2008/10/21"));
                oParam.Add(new GeneralDBParameters("@Maquina",30));
                oParam.Add(new GeneralDBParameters("@RefArq","1"));
                oParam.Add(new GeneralDBParameters("@FrontImgType","JPG"));
                oParam.Add(new GeneralDBParameters("@RearImgType","JPG"));
                oParam.Add(new GeneralDBParameters("@FrontImage", aBytes));
                oParam.Add(new GeneralDBParameters("@RearImage", aBytes));

                object o=m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref oParam);

            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        decimal m_dMontLote;
        decimal m_dMontFicheiro;
        int m_iQtLote;
        int m_iQtFicheiro;
        int m_iNLote = 0;
        
        private void button2_Click(object sender, EventArgs e)
        {
            string sRemin_id = textBoxRemin_ID.Text;
            int iNSeqFich = int.Parse(textBoxNSeqFich.Text);
            Int32 OrigemID = 1;
            if (this.cbOrigem.SelectedIndex.Equals(1))
                OrigemID = 2;


            string sLastRemin = "";
            string sCurrRemin = "";

            StreamWriter sw1 = new StreamWriter("d:\\tmp\\envm" + sRemin_id + ".txt", false);
            StreamWriter sw2 = new StreamWriter("d:\\tmp\\acom" + sRemin_id + ".txt", false);

            DataSet ds = m_oParameters.DirectSqlDataSet("Select * from MAN_VW_ficheiro_ENVM_CRIAR WHERE REMIN_ID in ("
                                                         + sRemin_id + ") AND Origem_ID = " + OrigemID + " order by REMIN_id", "criarEnvm");
            EscreveHeaderFicheiro(sw1, sw2);
            foreach (DataRow oRow in ds.Tables[0].Rows)
            {
                sCurrRemin = oRow["REMIN_ID"].ToString();
                if (sLastRemin != sCurrRemin)
                {
                    if (sLastRemin != "")
                    {
                        EscreveTrailerLote(sw1, sw2);
                    }
                    sLastRemin = sCurrRemin;
                    EscreveHeaderLote(sw1, sw2, oRow);
                }
                EscreveDetalhe(sw1, sw2, oRow);
            }
            EscreveTrailerLote(sw1, sw2);
            EscreveTrailerFicheiro(sw1, sw2);


            sw1.Close();
            sw1.Dispose();
            sw2.Close();
            sw2.Dispose();


            MessageBox.Show("Ficheiros Criados", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);

        }


        void EscreveHeaderFicheiro(StreamWriter sw1, StreamWriter sw2)
        {
            m_dMontFicheiro = 0;
            m_iQtFicheiro=0;
            sw1.WriteLine("0" // HDT	Tipo de Registo	Num	1
                + "ENVM" //FICH	Ficheiro	Char	4
                + "0035" //BANCO	Banco Tomador	Num	4
                + int.Parse(textBoxNSeqFich.Text).ToString("0000")//NSEQFICH	Número de Sequência do Ficheiro	Num	4 
                + DateTime.Now.ToString("yyyyMMddHHmm")//DTFICH	Data e hora de criação do Ficheiro	Num	12
                + DateTime.Now.ToString("yyyyMMdd")//REFCMP	Referência de Compensação	Num	8
            );
            sw2.WriteLine("0" // HDT	Tipo de Registo	Num	1
                + "ACOM" //FICH	Ficheiro	Char	4
                + "0035" //BANCO	Banco Tomador	Num	4
                + int.Parse(textBoxNSeqFich.Text).ToString("0000")//NSEQFICH	Número de Sequência do Ficheiro	Num	4 
                + DateTime.Now.ToString("yyyyMMddHHmm")//DTFICH	Data e hora de criação do Ficheiro	Num	12
                + "00000000"
            );

        }

        void EscreveHeaderLote(StreamWriter sw1, StreamWriter sw2, DataRow oRow)
        {

            m_dMontLote = 0;
            m_iQtLote = 0;

            sw1.WriteLine("1"          //HDT	Tipo de Registo	Num	1
                        + (++m_iNLote).ToString("000000")//NLOTE	Número de Lote	Num	6
                        + Convert.ToInt32(oRow["REMIN_BAlCAO"]).ToString("0000")//CODBAL	Código do Balcão	Num	4
                        + Convert.ToInt32(oRow["REMIN_NUMERO"]).ToString("00000000000")//NREM	Número da Remessa	Num	11
                        + Convert.ToDateTime(oRow["REMIN_DATA"]).ToString("yyyyMMdd")//DTREM	Data da Remessa	Num	8
                        + "1"//TCAP	Tipo de Captura	Num	1
                        + "001"//TREM	Tipo de Remessa	Num	3
                        + (Convert.ToDouble(oRow["REMIN_MT_DOCS"]) * 100.0).ToString("000000000000000") //MONTANTE	Montante Total Remessa Declarado	Num	15
                        + Convert.ToInt32(oRow["REMIN_QT_DOCS"]).ToString("000000")//NRDOCUM	Quantidade de Documentos declarado	Num	6
                        + "000"//ANOMAL	Anomalia Lote	Num	3
                        + oRow["REMPROC_CHAVEH"].ToString()//CHAHOST	Chave no Host	Char	51
                        + oRow["REMPROC_CHAVEHEXT"].ToString()//CHAHOSTEXT	Extensão ao Chave no Host	Char	77
                        + "000"//VALREQ	Validação de Requisitos	Num	3
                        + "0".PadRight(120, '0')//SERVADIC	Serviços Adicionais	Char	120
                );
            sw2.WriteLine("1"          //HDT	Tipo de Registo	Num	1
                        + (++m_iNLote).ToString("000000")//NLOTE	Número de Lote	Num	6
                        + "004"//PRODUTO	Produto	Num	3
                        + DateTime.Now.ToString("yyyyMMdd")//DATAPROC	Data de Processamento	Num	8
        
                );
        }

        void EscreveDetalhe(StreamWriter sw1, StreamWriter sw2, DataRow oRow)
        {
            m_dMontLote += Convert.ToInt64(Convert.ToDouble(oRow["DOC_ZONA2"]) * 100.0);
            m_iQtLote++;
            sw1.WriteLine(oRow["LInha"].ToString());
            sw2.WriteLine("2"//HDT	Tipo de Registo	Num	1
                          + oRow["DOC_REFARQ"].ToString()//REFARQCAP	Referência de Arquivo na Captura	Num	14
                          + m_iNLote.ToString("000000") + m_iQtLote.ToString("00000000")  //REFARQ	Referência de Arquivo	Num	14
                          + Convert.ToInt32(oRow["REMIN_BALCAO"]).ToString("0000")  //CODBAL	Código do Balcão Tomador	Num	4
                          + "02"  //CODANA	Código de Análise - acção tomada sobre o documento	Num	2
                          + oRow["DOC_CHAVEH"].ToString()  //CHAHOST	Chave no Host	Num	51
                          + oRow["DOC_CHAVEHEXT"].ToString() //CHAHOSTEXT	Extensão ao Chave no Host	Char	77
                          + (Convert.ToDouble(oRow["DOC_ZONA2"]) * 100.0).ToString("000000000000")  //IMPORT	Importância	Num	12
                          + oRow["DOC_ZONA5"].ToString()  //LINHAOPT	Linha Óptica	Num	31
                          + oRow["DOC_ZONA4"].ToString()  //LINHAOPT	Linha Óptica	Num	31
                          + oRow["DOC_ZONA3"].ToString()  //LINHAOPT	Linha Óptica	Num	31
                          + oRow["DOC_ZONA1"].ToString()  //LINHAOPT	Linha Óptica	Num	31

           );
        }


        void EscreveTrailerLote(StreamWriter sw1, StreamWriter sw2)
        {
            sw1.WriteLine("8"   //HDT	Tipo de Registo	Num	1
                +m_dMontLote//MONTAPU	Montante Apurado	Num	15
                +m_iQtLote//TOTREG	Quantidade de Registos do Lote	Num	6
                + m_dMontLote//MONTTOTAL	Montante do Total dos registos do lote	Num	15
                );
            sw2.WriteLine("8"   //HDT	Tipo de Registo	Num	1
                + m_iQtLote//TOTREG	Quantidade de Registos do Lote	Num	6
                + m_dMontLote//MONTTOTAL	Montante do Total dos registos do lote	Num	15
                );

            m_dMontFicheiro+=m_dMontLote;
            m_iQtFicheiro+=m_iQtLote;

        }

        void EscreveTrailerFicheiro(StreamWriter sw1, StreamWriter sw2)
        {
            sw1.WriteLine("9"//HDT	Tipo de Registo	Num	1
                        + m_iQtFicheiro//TOTREGFIS	Total de Registos do Ficheiro	Num	6
                        + m_dMontFicheiro//MONTTOTFIC	Montantes total do Ficheiro	Num	15
                        + "00"//ULTFICH	Último ficheiro	NUM	2
            );
            sw2.WriteLine("9"//HDT	Tipo de Registo	Num	1
                       + m_iQtFicheiro//TOTREGFIS	Total de Registos do Ficheiro	Num	6
                       + m_dMontFicheiro//MONTTOTFIC	Montantes total do Ficheiro	Num	15
                       + "00"//ULTFICH	Último ficheiro	NUM	2
           );
        }

        private void button3_Click(object sender, EventArgs e)
        {
            try
            {
                string sSPName = "EXECUTE dbo.MAN_REPOR_BD_REMESSAS";
                object o = m_oParameters.DirectSqlScalar(sSPName);
                MessageBox.Show(this, "Recriados dados", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnProcessaBalcao_Click(object sender, EventArgs e)
        {
            m_oParameters.OpenConnection();
            CIServTester.ProcessarRemessasBalcao oProc = new ProcessarRemessasBalcao(m_oParameters);
            m_oParameters.CloseConnection();
        }
    }
}

// FILE: SDCIM/ModusCI/CIControlo/ImportGCAAForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIControlo/Program.cs
﻿using System.Collections.Generic;
using System.ServiceProcess;
using System.Text;

namespace CIServico
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        static void Main()
        {
            ServiceBase[] ServicesToRun;

            // More than one user Service may run within the same process. To add
            // another service to this process, change the following line to
            // create a second service object. For example,
            //
            //   ServicesToRun = new ServiceBase[] {new Service1(), new MySecondUserService()};
            //
            ServicesToRun = new ServiceBase[] { new CIServico() };

            ServiceBase.Run(ServicesToRun);
        }
    }
}

// FILE: SDCIM/ModusCI/CIControlo/Settings.cs
namespace CIServico.Properties {
    
    
    // This class allows you to handle specific events on the settings class:
    //  The SettingChanging event is raised before a setting's value is changed.
    //  The PropertyChanged event is raised after a setting's value is changed.
    //  The SettingsLoaded event is raised after the setting values are loaded.
    //  The SettingsSaving event is raised before the setting values are saved.
    internal sealed partial class Settings {
        
        public Settings() {
            // // To add event handlers for saving and changing settings, uncomment the lines below:
            //
            // this.SettingChanging += this.SettingChangingEventHandler;
            //
            // this.SettingsSaving += this.SettingsSavingEventHandler;
            //
        }
        
        private void SettingChangingEventHandler(object sender, System.Configuration.SettingChangingEventArgs e) {
            // Add code to handle the SettingChangingEvent event here.
        }
        
        private void SettingsSavingEventHandler(object sender, System.ComponentModel.CancelEventArgs e) {
            // Add code to handle the SettingsSaving event here.
        }
    }
}


// FILE: SDCIM/ModusCI/CIControlo/_CIControlo.DVP.exe.config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="CIControlo.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIControlo.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>SDC6001SQL04</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSDIMGCONC</value>
            </setting>
            <setting name="GCAAH" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAAD" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="DVP_GCAAH" serializeAs="String">
                <value>GCXSQLDEVBS301\GCCAA</value>
            </setting>
            <setting name="DVP_GCAAD" serializeAs="String">
                <value>BDSDGCCALX</value>
            </setting>
            <setting name="UseBaseDados" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="GCAA9601H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9601D" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="GCAA9604H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9604D" serializeAs="String">
                <value>BDSPGCCAPT</value>
            </setting>
            <setting name="TMPH" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="TMPD" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
        </CIControlo.Properties.Settings>
    </applicationSettings>
</configuration>

// FILE: SDCIM/ModusCI/CIControlo/_CIControlo.QLD.exe.config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="CIControlo.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIControlo.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>SDC6001SQL04\CQ</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSQIMGCONC</value>
            </setting>
            <setting name="GCAAH" serializeAs="String">
                <value>GCXSQLPRDVS301</value>
            </setting>
            <setting name="GCAAD" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="DVP_GCAAH" serializeAs="String">
                <value>GCXSQLDEVBS301\GCCAA</value>
            </setting>
            <setting name="DVP_GCAAD" serializeAs="String">
                <value>BDSDGCCALX</value>
            </setting>
            <setting name="UseBaseDados" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="GCAA9601H" serializeAs="String">
                <value>GCXSQLPRDVS301</value>
            </setting>
            <setting name="GCAA9601D" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="GCAA9604H" serializeAs="String">
                <value>GCXSQLPRDVS301</value>
            </setting>
            <setting name="GCAA9604D" serializeAs="String">
                <value>BDSPGCCAPT</value>
            </setting>
            <setting name="TMPH" serializeAs="String">
                <value>GCXSQLPRDVS301</value>
            </setting>
            <setting name="TMPD" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
        </CIControlo.Properties.Settings>
    </applicationSettings>
</configuration>

// FILE: SDCIM/ModusCI/CIControlo/app.config
<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="MDIWebTransmCI.My.MySettings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <system.diagnostics>
        <sources>
            <!-- This section defines the logging configuration for My.Application.Log -->
            <source name="DefaultSource" switchName="DefaultSwitch">
                <listeners>
                    <add name="FileLog"/>
                    <!-- Uncomment the below section to write to the Application Event Log -->
                    <!--<add name="EventLog"/>-->
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="DefaultSwitch" value="Information"/>
        </switches>
        <sharedListeners>
            <add name="FileLog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" initializeData="FileLogWriter"/>
            <!-- Uncomment the below section and replace APPLICATION_NAME with the name of your application to write to the Application Event Log -->
            <!--<add name="EventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="APPLICATION_NAME"/> -->
        </sharedListeners>
    </system.diagnostics>
    <applicationSettings>
        <MDIWebTransmCI.My.MySettings>
            <setting name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" serializeAs="String">
                <value>http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</value>
            </setting>
        </MDIWebTransmCI.My.MySettings>
    </applicationSettings>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>


// FILE: SDCIM/ModusCI/CIFicheiro/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIFicheiro/CIFicheiro.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIFicheiro</RootNamespace>
    <AssemblyName>CIFicheiro</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="DeleteOldFiles.cs" />
    <Compile Include="Ficheiro.cs" />
    <Compile Include="FicheiroAcom.cs" />
    <Compile Include="FicheiroEnvm.cs" />
    <Compile Include="FichEnvmAcom.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIFicheiro/DeleteOldFiles.cs
﻿using System;
using System.IO;
using System.Collections.Generic;
using System.Text;

using CIConfigGlobalParameters;

namespace CIFicheiro
{
    public class DeleteOldFiles
    {
        CIComumInterface m_iInterface;

        public DeleteOldFiles(CIComumInterface iInterface)
        {
            m_iInterface = iInterface;
        }

        protected void DeleteIfOldFile(string sFullFileName, int iNDias)
        {
            if (File.GetLastWriteTime(sFullFileName).AddDays(iNDias) < DateTime.Now)
            {
                File.Delete(sFullFileName);
                m_iInterface.InfoMessage("Delete " + sFullFileName,"");
            }
        }

        public void DeleteFiles(string sPathOrigem, int iNDias, string sFileSintax, bool bRecursivo)
        {
            try
            {
                if (iNDias < 1)
                {
                    return;
                }
                string[] aFiles = Directory.GetFiles(sPathOrigem, sFileSintax);
                for (int i = 0; i < aFiles.Length; i++)
                {
                    DeleteIfOldFile(aFiles[i], iNDias);
                }

                if (!bRecursivo)
                {
                    return;
                }
                string[] aDirectorias = Directory.GetDirectories(sPathOrigem, "*");
                for (int i = 0; i < aDirectorias.Length; i++)
                {
                    DeleteFiles(aDirectorias[i], iNDias, sFileSintax, bRecursivo);
                }
            }
            catch(Exception ex)
            {
                m_iInterface.ErrorMessage(ex.Message);
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheiro/FichEnvmAcom.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using CIConfigGlobalParameters;
using System.Collections;

using NBiis;
using NBiis.Generic;
using NBIISNET;

namespace CIFicheiro
{
    public class FichEnvmAcom : Ficheiro
    {
        public string m_sExpectedName;
        protected ArrayList m_oParam;
        public int m_iTipoFicheiro;
        //Header Fich
        public string m_sHFREFCMP;
        public string m_sHFFICH;
        public string m_sHFBANCO;
        public string m_sHFNSEQFICH;
        public string m_sHFDTFICH;
        public DateTime m_dtHFDTFICH;
        public string m_sHFFICH_ID;
       
        //Header Lote
        public string m_sHLNLOTE;

        //Detalhes
        public string m_sDREFARQ;
        public decimal m_dDIMPORT;
        public string m_sDCODANA;
        public string m_sDCHAHOST;
        public string m_sDCHAHOSTEXT;
        public string m_sDCODBAL;

        //Trailer lote
        public int m_iTLTOTREG;
        public decimal m_dTLMONTTOTAL;

        //Trailer Fich
        public int m_iTFTOTREGFIS;
        public decimal m_dTFMONTTOTFIC;
        public string m_sTFULTFICH;

        public virtual void parseHeaderLote()
        {}
        public virtual void parseDetalhe()
        {}
        public virtual void parseTrailerLote()
        {}


        public FichEnvmAcom(CIComumInterface iInterface, CIConfigGP.CIGlobalParameters oParameters)
            : base(iInterface, oParameters)
        {
            m_oParam = new ArrayList();

            m_sHDT = "";
            m_sLinha = "";
            m_sHFFICH = "";
            m_sHFBANCO = "";
            m_sHFNSEQFICH = "";
            m_sHFDTFICH = "";
            m_dtHFDTFICH = DateTime.MinValue;
            m_sHFFICH_ID = "";

            m_sHLNLOTE = "";

            m_dDIMPORT = 0;
            m_sDREFARQ = "";
            m_sDCODANA = "";
            m_sDCHAHOST = "";
            m_sDCHAHOSTEXT = "";
            m_sDCODBAL = "";

            m_iTLTOTREG = 0;
            m_dTLMONTTOTAL = 0;

            m_sTFULTFICH = "";
            m_iTFTOTREGFIS = 0;
            m_dTFMONTTOTFIC = 0;
        }

        public void parseHeaderFich()
        {
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;
            m_iCountTotRegLotes = 0;
            m_dAcumMontTotalLotes = 0;

       
            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 4;
            m_sHFFICH = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 4;
            m_sHFBANCO = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 4;
            m_sHFNSEQFICH = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 12;
            m_sHFDTFICH = sLinha.Substring(iPos, iLen);

            try
            {
                m_dtHFDTFICH = new DateTime(Convert.ToInt32(m_sHFDTFICH.Substring(0, 4)), Convert.ToInt32(m_sHFDTFICH.Substring(4, 2)), Convert.ToInt32(m_sHFDTFICH.Substring(6, 2)), Convert.ToInt32(m_sHFDTFICH.Substring(8, 2)), Convert.ToInt32(m_sHFDTFICH.Substring(10, 2)), 0);
            }
            catch
            {
                m_dtHFDTFICH = DateTime.MinValue;
            }

            iPos = iPos + iLen; iLen = 8;
            m_sHFREFCMP = sLinha.Substring(iPos, iLen);
         
        }

        public override bool validaHeaderFich()
        {
            if (m_sLinha.Length < 33)
            {
                return false;
            }

            m_iCountTotRegLotes = 0;
            m_dAcumMontTotalLotes = (decimal)0;

            parseHeaderFich();

            int iEsperada = getLastNSeqFich() + 1;
            if (int.Parse(m_sHFNSEQFICH) != iEsperada)
            {
                string sSmg = "Sequencia de ficheiro " + m_sHFNSEQFICH + " != " + iEsperada.ToString() + " Esperada";
                GenericLog.GenLogRegistarAlerta(sSmg, "validaHeaderFich()", 600);
                m_oParameters.EnviarAlertaSituacao(600, sSmg);
            }

            if (m_sHFFICH != m_sExpectedName)
            {
                throw new Exception("Header de ficheiro:" + m_sHFFICH + " Invalido");
            }
            return true;
        }

        public int getLastNSeqFich()
        {   ArrayList oParam = new ArrayList();
            int iLastNSeqFich;

            try
            {

                oParam.Add(new GeneralDBParameters("@FichTipo", m_iTipoFicheiro));

                iLastNSeqFich = Convert.ToInt32(m_oParameters.DirectStoredProcedureScalar("dbo.Select_LastNSeqFichTipo", ref oParam));
                return iLastNSeqFich;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "getLastNSeqFich()", 30);
                return iLastNSeqFich = 0;
            }
        }
   
        public override bool validaHeaderLote() 
        { 
            return false; 
        }

        public override void insertHeaderLote() 
        { }

        public override bool validaDetalhe() 
        {
            return false; 
        }
        public override void insertDetalhe()
        { }
        public override bool validaTrailerLote() 
        { 
            return false; 
        }
        public override void insertTrailerLote() 
        { }

        public void parseTrailerFich()
        {
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;

            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 6;
            string m_sTFTOTREGFIS = sLinha.Substring(iPos, iLen);
            m_iTFTOTREGFIS = int.Parse(m_sTFTOTREGFIS);

            iPos = iPos + iLen; iLen = 15;
            string m_sTFMONTTOTFIC = sLinha.Substring(iPos, iLen);
            m_dTFMONTTOTFIC = (decimal.Parse(m_sTFMONTTOTFIC) / (decimal)100.0);

            iPos = iPos + iLen; iLen = 2;
            m_sTFULTFICH = sLinha.Substring(iPos, iLen);

        }

        public override bool validaTrailerFich()
        {

            if (m_sLinha.Length < 24)
                return false;

            parseTrailerFich();

            if (m_iTFTOTREGFIS != m_iCountTotRegLotes)
            {
                alertaErroFich("Total de registos " + m_iTFTOTREGFIS.ToString() + " do trailer do Ficheiro " + m_sFichID + " na linha " + m_iCounter.ToString() + " != da quantidade de detalhes " + m_iCountTotRegLotes.ToString());
            }
            if (m_dTFMONTTOTFIC != m_dAcumMontTotalLotes)
            {
                alertaErroFich("Montante total " + m_dTFMONTTOTFIC.ToString() + " do trailer do Ficheiro " + m_sFichID + " na linha " + m_iCounter.ToString() + " != do montante dos detalhes " + m_dAcumMontTotalLotes.ToString());
            }
            return true;
        }

        public void alertaErroFich(string sErro)
        {
            m_iInterface.WarningMessage(sErro);

            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
            m_oParam.Add(new GeneralDBParameters("@Erro", sErro));

            m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_Ficheiro", ref m_oParam);
        }

        public void ValidaTotaisLote()
        {
           // m_iCountTotRegLotes = m_iCountTotRegLotes + m_iTLTOTREG;

            if (m_iTLTOTREG != m_iCountDetalhesLote)
            {
                alertaErroFich("Total de registos " + m_iTLTOTREG.ToString() + " do Ficheiro " + m_sFichID + " do trailer do lote " + m_sHLNLOTE + " na linha " + m_iCounter.ToString() + " != da quantidade de detalhes " + m_iCountDetalhesLote.ToString()); 
            }
            if (m_dTLMONTTOTAL != m_dAcumDetalhesLote)
            {
                alertaErroFich("Montante total " + m_dTLMONTTOTAL.ToString() + " do Ficheiro " + m_sFichID + " do trailer do lote " + m_sHLNLOTE + " na linha " + m_iCounter.ToString() + " != do montante dos detalhes " + m_dAcumDetalhesLote.ToString()); 
            }
        }

        public override void insertHeaderFich()
        {
            try
            {
                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@Fich", m_sHFFICH));
                m_oParam.Add(new GeneralDBParameters("@Banco", m_sHFBANCO));
                m_oParam.Add(new GeneralDBParameters("@NSeqFich", m_sHFNSEQFICH));
                m_oParam.Add(new GeneralDBParameters("@DtFich", m_dtHFDTFICH));
                m_oParam.Add(new GeneralDBParameters("@RefCmp", m_sHFREFCMP));
                m_oParam.Add(new GeneralDBParameters("@FullPathName", m_sFileName));

                m_sFichID = m_oParameters.DirectStoredProcedureScalar("dbo.Insert_Ficheiro", ref m_oParam).ToString();
            }
            catch (Exception ex)
            {
                if (ex.Message.IndexOf("UK_FICHEIRO") > 0)
                {
                    throw new Exception("Ficheiro já importado anteriormente");
                }
                throw;
            }
        }

        public override void insertTrailerFich()
        {
            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
            m_oParam.Add(new GeneralDBParameters("@TotReg", m_iTFTOTREGFIS));
            m_oParam.Add(new GeneralDBParameters("@MontTotal", m_dTFMONTTOTFIC));
            m_oParam.Add(new GeneralDBParameters("@UltFich", m_sTFULTFICH));

            m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_Ficheiro", ref m_oParam);

        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheiro/Ficheiro.cs
﻿
using System;
using System.Collections;
using System.IO;
using CIConfigGlobalParameters;
using NBiis;
using NBiis.Generic;

namespace CIFicheiro
{


    public abstract class Ficheiro 
    {
        public CIConfigGP.CIGlobalParameters m_oParameters;
        public CIComumInterface m_iInterface;
        public string m_sLinha;
        public int m_iCounter ;
        
        public string m_sFichID;
        public string m_sLoteID;
        public string m_sDocID;


        public abstract bool validaHeaderFich();
        public abstract void insertHeaderFich();
        public abstract bool validaHeaderLote();
        public abstract void insertHeaderLote();
        public abstract bool validaDetalhe();
        public abstract void insertDetalhe();
        public abstract bool validaTrailerLote();
        public abstract void insertTrailerLote();
        public abstract bool validaTrailerFich();
        public abstract void insertTrailerFich();
        //public abstract void LastOperations();


        public bool m_bIsRunning;
        public string m_sFileName;
        public string m_sPrefixo;
        public string m_sHDT;
        ////LinhaFicheiro m_oLinhaFicheiro;
        //public string m_sFICH;
        //public string m_sBANCO;
        //public string m_sNSEQFICH;
        //public string m_sDTFICH;
        //public DateTime m_dtDTFICH;
        //public string m_sFICH_ID;
        public int m_iCountDetalhesLote; //Inicializado no HL incrementado em cada detalhe e comparado com TOTREG do TL
        public decimal m_dAcumDetalhesLote; //Inicializado no HL acumulado em cada detalhe comparado com MONTTOTAL do TL

        public int m_iCountTotRegLotes; //Inicializado no HF acumulado com TOTREG de cada TL e comparado com TOTREGFIS do TF
        public decimal m_dAcumMontTotalLotes; //Inicializado no HF acumulado com MONTOTAL de cada TL e comparado com MONTTOTFIS do TF

        public Ficheiro(CIComumInterface iInterface, CIConfigGP.CIGlobalParameters oParameters)
        {
            m_oParameters = oParameters;
            m_iInterface = iInterface;

            m_sLinha = "";
            
           
            
        }

        public bool processaFile(string sFileName, string sPrefixo)
        {

            m_sPrefixo = sPrefixo;
            StreamReader sr = null;
            m_sFileName = sFileName;

            if (!initImportFile())
            {
                return false;
            }

            try
            {
                sr = new StreamReader(m_sFileName, System.Text.Encoding.ASCII);

                while ((m_sLinha = sr.ReadLine()) != null && m_bIsRunning)
                {

                    if ((m_iCounter++ % 10) == 0)
                    {
                        m_iInterface.InfoMessageCount(m_iCounter.ToString());
                    }

                    //m_iInterface.InfoMessage(m_iCounter.ToString());  //para sair
                    //Thread.Sleep(1000); //para sair
                    //m_iInterface.InfoMessage(m_iCounter.ToString()); //para sair

                    processaLinha();

                    if (!m_bIsRunning)
                        m_iInterface.WarningMessage("Importação cancelada");

                }
                sr.Close();
                CloseImport();
                m_iInterface.WarningMessage("Fim de importação do ficheiro: " + m_sFileName + " com " + m_iCounter.ToString() + " Registos ");
                return true;
            }
            catch (Exception ex)
            {
                if (sr != null)
                {
                    sr.Close(); 
                }
                m_iInterface.ErrorMessage("Linha: " + m_iCounter.ToString() + " Erro: " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "Ficheiro()", 500);
                try
                {
                    CloseImport("Erro");
                }
                catch(Exception ex2)
                {
                    m_iInterface.ErrorMessage(" CloseImport(Erro): " + ex2.Message);
                    GenericLog.GenLogRegistarErro(ref ex, "Ficheiro()", 500);
                }
                m_iInterface.WarningMessage("Erro importação do ficheiro: " + m_sFileName);
                return false;

            }
            
        }

        private bool initImportFile()
        {
            string sNewFileName = Path.GetDirectoryName(m_sFileName) + "\\" + m_sPrefixo + "." + Path.GetFileName(m_sFileName);
            try
            {
                File.Move(m_sFileName, sNewFileName);
            }
            catch (Exception ex)
            {
                m_iInterface.WarningMessage(m_sFileName + " " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "Ficheiro()", 500);
                return false;
            }

            m_sFileName = sNewFileName;

            m_iInterface.WarningMessage("Inicio de importação do ficheiro: " + m_sFileName);
            m_bIsRunning = true;
            m_iCounter = 0;
        
            return true;
        }

        private void CloseImport()
        {
            if (m_iCounter==0)
            {
                throw new Exception("Ficheiro vazio: " + m_sFileName);
            }

            LastOperations();
            CloseImport("");
        }
        private void CloseImport(string sExtensao)
        {

            if (sExtensao.Length > 0)
                sExtensao += ".";

            m_bIsRunning = false;
            string sDestPath = m_oParameters.m_sFileBackupPath;
            string sNewFileName = sDestPath + sExtensao + Path.GetFileName(m_sFileName) + "." + DateTime.Now.ToString("yyyyMMddHHmmss");
            File.Move(m_sFileName, sNewFileName);

            CIFicheiro.DeleteOldFiles oDel = new CIFicheiro.DeleteOldFiles(m_iInterface);
            oDel.DeleteFiles(m_oParameters.m_sFileBackupPath, m_oParameters.GetProfileInt("Ficheiros","Delete","Backup",60), "*", false);
            
        }

        public void LastOperations()
        {
            ArrayList oParam;
            try
            {

                oParam = new ArrayList();
                oParam.Add(new GeneralDBParameters("@Fich_Id", m_sFichID));

                m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_ActualizarAutoAssociarFicheiro", ref oParam);
            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message);

            }
        }

        public virtual void processaLinha()
        {
            //processa
            m_sHDT = m_sLinha.Substring(0, 1);
            try
            {
                switch (m_sHDT)
                {
                    case "0":
                        validaHeaderFich();
                        insertHeaderFich();
                        break;
                    case "1":
                        validaHeaderLote();
                        insertHeaderLote();
                        break;
                    case "2":
                        validaDetalhe();
                        insertDetalhe();
                        break;
                    case "8":
                        validaTrailerLote();
                        insertTrailerLote();
                        break;
                    case "9":
                        validaTrailerFich();
                        insertTrailerFich();
                        break;
                }
            }
            catch 
            {
                throw;
                //m_iInterface.ErrorMessage(ex.Message);
                //MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
    }

}


// FILE: SDCIM/ModusCI/CIFicheiro/FicheiroAcom.cs
﻿using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;

using System.Text;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using System.Collections;


namespace CIFicheiro
{
    public class FicheiroAcom : FichEnvmAcom
    {    
        public string m_sHLPRODUTO;
        public DateTime m_dtHLDATAPROC;
        public string m_sHLDATAPROC;     
        public string m_sDREFARQCAP; 
        public string m_sDLINHAOPT;
        public DateTime m_dtAcolhilmento { get; set; }

        public FicheiroAcom(CIComumInterface iInterface, CIConfigGP.CIGlobalParameters oParameters)
            : base(iInterface, oParameters)
        {
            m_sExpectedName = "ACOM";
            m_iTipoFicheiro = 2;
            m_sHDT = "";
            m_sLinha = "";
            m_oParam = new ArrayList();
            m_sHFFICH = "";
            m_sHFBANCO = "";
            m_sHFNSEQFICH = "";
            m_sHFDTFICH = "";
            m_dtHFDTFICH = DateTime.MinValue;
            m_sHFFICH_ID = "";

            m_sHLNLOTE = "";
            m_sHLPRODUTO = "";
            m_dtHLDATAPROC = DateTime.MinValue;


            m_dDIMPORT = 0;
            m_sDREFARQ = "";
            m_sDCODANA = "";
            m_sDCHAHOST = "";
            m_sDCHAHOSTEXT = "";
            m_sDREFARQCAP = "";
            m_sDCODBAL = "";
            m_sDLINHAOPT = "";

            m_iTLTOTREG = 0;
            m_dTLMONTTOTAL =0;

            m_sTFULTFICH = "";
            m_iTFTOTREGFIS = 0;
            m_dTFMONTTOTFIC = 0;

            this.m_dtAcolhilmento = DateTime.MinValue;
        }

        public override void parseHeaderLote()
        {
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;

            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 6;
            m_sHLNLOTE = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 3;
            m_sHLPRODUTO = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 8;
            m_sHLDATAPROC = sLinha.Substring(iPos, iLen);

            try
            {
                m_dtHLDATAPROC = new DateTime(Convert.ToInt32(m_sHLDATAPROC.Substring(0, 4)), Convert.ToInt32(m_sHLDATAPROC.Substring(4, 2)), Convert.ToInt32(m_sHLDATAPROC.Substring(6, 2)));
            }
            catch
            {
                m_dtHLDATAPROC = DateTime.MinValue;
            }
        }

        public override bool validaHeaderLote()
        {
            if (m_sLinha.Length < 18)
                return false;

            parseHeaderLote();

            m_iInterface.InfoMessage("Importação ACOM Lote:" + m_sHLNLOTE, "");

            m_iCountDetalhesLote = 0;
            m_dAcumDetalhesLote = (decimal)0;
            return true;
        }

        public override void parseDetalhe()
        {
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;

            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 14;
            m_sDREFARQCAP = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 14;
            m_sDREFARQ = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 4;
            m_sDCODBAL = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 2;
            m_sDCODANA = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 51;
            m_sDCHAHOST = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 77;
            m_sDCHAHOSTEXT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 12;
            string sDIMPORT = sLinha.Substring(iPos, iLen);
            m_dDIMPORT = decimal.Parse(sDIMPORT)/ (decimal)100.0 ;
 
            iPos = iPos + iLen; iLen = 31;
            m_sDLINHAOPT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen + 14 + 50; iLen = 8;
            DateTime dt;
            String dtAcolhimento = sLinha.Substring(iPos, iLen);
            if (DateTime.TryParse(String.Format("{0}-{1}-{2}", Convert.ToInt32(dtAcolhimento.Substring(0, 4)),
                Convert.ToInt32(dtAcolhimento.Substring(4, 2)), Convert.ToInt32(dtAcolhimento.Substring(6, 2))), out dt))
            {
                this.m_dtAcolhilmento = dt;
            }
            m_iCountDetalhesLote++;
            m_dAcumDetalhesLote += m_dDIMPORT;

            m_iCountTotRegLotes++;
            m_dAcumMontTotalLotes += m_dDIMPORT;                        
        }

        public override bool validaDetalhe()
        {
            if (m_sLinha.Length < 206)
                return false;
            parseDetalhe();
            return true;
        }

        public override void parseTrailerLote()
        {
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;


            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 6;
            string sTLTOTREG = sLinha.Substring(iPos, iLen);
            m_iTLTOTREG = int.Parse(sTLTOTREG);

            iPos = iPos + iLen; iLen = 15;
            string sTLMONTTOTAL = sLinha.Substring(iPos, iLen);
            m_dTLMONTTOTAL = decimal.Parse(sTLMONTTOTAL) / (decimal)100.0;
        }

        public override bool validaTrailerLote()
        {

            if (m_sLinha.Length < 22)
                return false;

            parseTrailerLote();
            ValidaTotaisLote();
            return true;

        }

        //public override bool validaTrailerFich()
        //{
        //    string sLinha = m_sLinha;
        //    int iPos = 0, iLen = 1;

        //    if (sLinha.Length < 24)
        //        return false;

        //    m_sHDT = sLinha.Substring(iPos, iLen);

        //    iPos = iPos + iLen; iLen = 6;
        //    m_sTFTOTREGFIS = sLinha.Substring(iPos, iLen);

        //    iPos = iPos + iLen; iLen = 15;
        //    m_sTFMONTTOTFIC = sLinha.Substring(iPos, iLen);

        //    iPos = iPos + iLen; iLen = 2;
        //    m_sTFULTFICH = sLinha.Substring(iPos, iLen);

        //    return true;
        //}

        //public override void insertHeaderFich()
        //{

        //    m_oParam.Clear();
        //    m_oParam.Add(new GeneralDBParameters("@Fich", m_sHFFICH));
        //    m_oParam.Add(new GeneralDBParameters("@Banco", m_sHFBANCO));
        //    m_oParam.Add(new GeneralDBParameters("@NSeqFich", m_sHFNSEQFICH));
        //    m_oParam.Add(new GeneralDBParameters("@DtFich", m_dtHFDTFICH));
        //    m_oParam.Add(new GeneralDBParameters("@RefCmp", "00000000"));
        //    m_oParam.Add(new GeneralDBParameters("@FullPathName", m_sFileName));

        //    m_sFichID = m_oParameters.DirectStoredProcedureScalar("dbo.Insert_Ficheiro", ref m_oParam).ToString();
        //}
        
        public override void insertHeaderLote()
        {
            
            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
            m_oParam.Add(new GeneralDBParameters("@Numero", m_sHLNLOTE));
            m_oParam.Add(new GeneralDBParameters("@Produto", m_sHLPRODUTO));
            m_oParam.Add(new GeneralDBParameters("@DataProc", m_dtHLDATAPROC));

            m_sLoteID = m_oParameters.DirectStoredProcedureScalar("dbo.Insert_LoteACOM", ref m_oParam).ToString();

        }
        public override void insertDetalhe()
        {
            
            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@LoteAcom_Id", m_sLoteID));
            m_oParam.Add(new GeneralDBParameters("@RefarqCap", m_sDREFARQCAP));
            m_oParam.Add(new GeneralDBParameters("@Refarq", m_sDREFARQ));
            m_oParam.Add(new GeneralDBParameters("@Balcao", m_sDCODBAL));
            m_oParam.Add(new GeneralDBParameters("@CodAna", m_sDCODANA));
            m_oParam.Add(new GeneralDBParameters("@ChaveH", m_sDCHAHOST));
            m_oParam.Add(new GeneralDBParameters("@ChaveHext", m_sDCHAHOSTEXT));
            m_oParam.Add(new GeneralDBParameters("@Import", m_dDIMPORT));
            m_oParam.Add(new GeneralDBParameters("@LinhaOpt", m_sDLINHAOPT));
            //supbkoff 30 - adição de campo DTACOLHIMENTO 
            m_oParam.Add(new GeneralDBParameters("@DtAcolhimento", this.m_dtAcolhilmento));
            m_sDocID = m_oParameters.DirectStoredProcedureScalar("dbo.Insert_DocumentoAcom", ref m_oParam).ToString();

        }
        public override void insertTrailerLote()
        {
            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@LoteAcomID", m_sLoteID));
            m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
            m_oParam.Add(new GeneralDBParameters("@TotReg", m_iTLTOTREG));
            m_oParam.Add(new GeneralDBParameters("@MontTotal", m_dTLMONTTOTAL));

            m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_LoteAcom", ref m_oParam);

        }
        //public override void insertTrailerFich()
        //{
        //    m_oParam.Clear();
        //    m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
        //    m_oParam.Add(new GeneralDBParameters("@TotReg", m_sTFTOTREGFIS));
        //    m_oParam.Add(new GeneralDBParameters("@MontTotal", m_sTFMONTTOTFIC));
        //    m_oParam.Add(new GeneralDBParameters("@UltFich", m_sTFULTFICH));

        //    m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_Ficheiro", ref m_oParam);

        //}
    }

  
}


// FILE: SDCIM/ModusCI/CIFicheiro/FicheiroEnvm.cs
﻿using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Collections;
using System.Text;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;



namespace CIFicheiro
{
    public class FicheiroEnvm : FichEnvmAcom
    {

        

       // public string m_sHDT;

        //public string m_sHFREFCMP;
        //public string m_sHFFICH;
        //public string m_sHFBANCO;
        //public string m_sHFNSEQFICH;
        //public string m_sHFDTFICH;
        //public DateTime m_dtHFDTFICH;
        //public string m_sHFFICH_ID;

        //public string m_sHLNLOTE;
        public string m_sHLCODBAL;
        public string m_sHLNREM;
        public string m_sHLDTREM;
        public string m_sHLTCAP;
        public string m_sHLTREM;
        public decimal m_dHLMONTANTE;
        public string m_sHLNRDOCUM;
        public string m_sHLANOMAL;
        
        public string m_sHLCHAHOST;
        public string m_sHLCHAHOSTEXT;
        public string m_sHLVALREQ;
        public string m_sHLSERVADIC;
        public string m_sHLLote_ID;

        public string m_sDZIB;
        public string m_sDNCONTA;
        public string m_sDNCHQ;
        public string m_sDTIPCHQ;
        //public string m_sDIMPORT;
        //public string m_sDREFARQ;
        public string m_sDANOMAL;
        public string m_sDIMGQUAL;
        public string m_sDDTCMP;
        //public string m_sDCODANA;
        //public string m_sDCHAHOST;
        //public string m_sDCHAHOSTEXT;
        public string m_sDREQDOC;
        public string m_sDDUPLICADO;
        public string m_sDSERVADIC;
        //public string m_sDREFARQCAP;
        //public string m_sDCODBAL;

        public decimal m_dTLMONTAPU;
        //public string m_sTLTOTREG;
        //public string m_sTLMONTTOTAL;

        //public string m_sTFTOTREGFIS;
        //public string m_sTFMONTTOTFIC;
        //public string m_sTFULTFICH;



        public FicheiroEnvm(CIComumInterface iInterface, CIConfigGP.CIGlobalParameters oParameters)
            : base(iInterface, oParameters)
        {
            m_sExpectedName = "ENVM";
            m_iTipoFicheiro = 1;
            m_oParam = new ArrayList();

            m_sHDT = "";
            m_sLinha = "";

            m_sHFREFCMP = "";
            m_sHFFICH = "";
            m_sHFBANCO = "";
            m_sHFNSEQFICH = "";
            m_sHFDTFICH = "";
            m_dtHFDTFICH = DateTime.MinValue;
            m_sHFFICH_ID = "";

            m_sHLNLOTE = "";
            m_sHLCODBAL = "";
            m_sHLNREM = "";
            m_sHLDTREM = "";
            m_sHLTCAP = "";
            m_sHLTREM = "";
            m_dHLMONTANTE = 0;
            m_sHLNRDOCUM = "";
            m_sHLANOMAL = "";
            m_sHLCHAHOST = "";
            m_sHLCHAHOSTEXT = "";
            m_sHLVALREQ = "";
            m_sHLSERVADIC = "";


            m_sDZIB = "";
            m_sDNCONTA = "";
            m_sDNCHQ = "";
            m_sDTIPCHQ = "";
            m_dDIMPORT = 0;
            m_sDREFARQ = "";
            m_sDANOMAL = "";
            m_sDIMGQUAL = "";
            m_sDDTCMP = "";
            m_sDCODANA = "";
            m_sDCHAHOST = "";
            m_sDCHAHOSTEXT = "";
            m_sDREQDOC = "";
            m_sDDUPLICADO = "";
            m_sDSERVADIC = "";
            //m_sDREFARQCAP = "";
            m_sDCODBAL = "";

            m_dTLMONTAPU = 0;
            m_iTLTOTREG = 0;
            m_dTLMONTTOTAL = 0;

            m_iTFTOTREGFIS = 0;
            m_dTFMONTTOTFIC = 0;
            m_sTFULTFICH = "";
        }

        public override void parseHeaderLote()
        {
          
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;

            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 6;
            m_sHLNLOTE = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 4;
            m_sHLCODBAL = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 11;
            m_sHLNREM = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 8;
            m_sHLDTREM = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 1;
            m_sHLTCAP = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 3;
            m_sHLTREM = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 15;
            string m_sHLMONTANTE = sLinha.Substring(iPos, iLen);
            m_dHLMONTANTE = (decimal.Parse(m_sHLMONTANTE)/ (decimal)100.0);

            iPos = iPos + iLen; iLen = 6;
            m_sHLNRDOCUM = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 3;
            m_sHLANOMAL = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 51;
            m_sHLCHAHOST = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 77;
            m_sHLCHAHOSTEXT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 3;
            m_sHLVALREQ = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 120;
            m_sHLSERVADIC = sLinha.Substring(iPos, iLen);

        }

        public override bool validaHeaderLote()
        {
            m_iCountDetalhesLote = 0;
            m_dAcumDetalhesLote = 0;

            if (m_sLinha.Length < 309)
                return false;

            parseHeaderLote();

            m_iInterface.InfoMessage("Importação ENVM Lote:" + m_sHLNLOTE, "");

            return true;
        }

        public override void parseDetalhe()
        {
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;
                      
            m_iCountDetalhesLote++;
            

            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 8;
            m_sDZIB = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 11;
            m_sDNCONTA = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 10;
            m_sDNCHQ = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 12;
            string m_sDIMPORT = sLinha.Substring(iPos, iLen);
            m_dDIMPORT = (decimal.Parse(m_sDIMPORT)/ (decimal)100.0);

            iPos = iPos + iLen; iLen = 2;
            m_sDTIPCHQ = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 14;
            m_sDREFARQ = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 2;
            m_sDANOMAL = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 2;
            m_sDIMGQUAL = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 8;
            m_sDDTCMP = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 2;
            m_sDCODANA = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 51;
            m_sDCHAHOST = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 77;
            m_sDCHAHOSTEXT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 50;
            m_sDREQDOC = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 1;
            m_sDDUPLICADO = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 120;
            m_sDSERVADIC = sLinha.Substring(iPos, iLen);

            m_dAcumDetalhesLote = m_dAcumDetalhesLote + m_dDIMPORT;
        }

        public override bool validaDetalhe()
        {
            if (m_sLinha.Length < 371)
                return false;

            parseDetalhe();
            
            return true;
        }

        public override void parseTrailerLote()
        {
            string sLinha = m_sLinha;
            int iPos = 0, iLen = 1;

            m_sHDT = sLinha.Substring(iPos, iLen);

            iPos = iPos + iLen; iLen = 15;
            string m_sTLMONTAPU = sLinha.Substring(iPos, iLen);
            m_dTLMONTAPU = (decimal.Parse(m_sTLMONTAPU)/ (decimal)100.0);

            iPos = iPos + iLen; iLen = 6;
            string m_sTLTOTREG = sLinha.Substring(iPos, iLen);
            m_iTLTOTREG = int.Parse(m_sTLTOTREG);

            iPos = iPos + iLen; iLen = 15;
            string sTLMONTTOTAL = sLinha.Substring(iPos, iLen);
            m_dTLMONTTOTAL = (decimal.Parse(sTLMONTTOTAL) / (decimal)100.0);

            m_iCountTotRegLotes = m_iTLTOTREG + m_iCountTotRegLotes;
            m_dAcumMontTotalLotes = m_dTLMONTTOTAL + m_dAcumMontTotalLotes;
        }
        


        public override bool validaTrailerLote()
        {
            if (m_sLinha.Length < 37)
                return false;

            parseTrailerLote();
            
            
            ValidaTotaisLote();
          
            return true;

        }





        //public override bool validaTrailerFich()
        //{
        //    string sLinha = m_sLinha;
        //    int iPos = 0, iLen = 1;

        //    if (sLinha.Length < 24)
        //        return false;

        //    m_sHDT = sLinha.Substring(iPos, iLen);

        //    iPos = iPos + iLen; iLen = 6;
        //    m_sTFTOTREGFIS = sLinha.Substring(iPos, iLen);

        //    iPos = iPos + iLen; iLen = 15;
        //    m_sTFMONTTOTFIC = sLinha.Substring(iPos, iLen);

        //    iPos = iPos + iLen; iLen = 2;
        //    m_sTFULTFICH = sLinha.Substring(iPos, iLen);


        //    if (int.Parse(m_sTFTOTREGFIS) != m_iCountTotRegLotes)
        //    {
        //        alertaErroFich("Total de registos " + m_sTLTOTREG + " do trailer do lote " + m_sHLNLOTE + " na linha " + m_iCounter.ToString() + " != da quantidade de detalhes " + m_iCountTotRegLotes.ToString());
        //    }
        //    if (decimal.Parse(m_sTLMONTTOTAL) != m_dAcumDetalhesLote)
        //    {
        //        alertaErroFich("Montante total " + m_sTLMONTTOTAL + " do trailer do lote " + m_sHLNLOTE + " na linha " + m_iCounter.ToString() + " != do montante dos detalhes " + m_dAcumDetalhesLote.ToString());
        //    }
        //    //validar Qt, e mont dar msg mas continuar

        //    return true;
        //}

        //public override void insertHeaderFich()
        //{
        //    try
        //    {
        //        m_oParam.Clear();
        //        m_oParam.Add(new GeneralDBParameters("@Fich", m_sHFFICH));
        //        m_oParam.Add(new GeneralDBParameters("@Banco", m_sHFBANCO));
        //        m_oParam.Add(new GeneralDBParameters("@NSeqFich", m_sHFNSEQFICH));
        //        m_oParam.Add(new GeneralDBParameters("@DtFich", m_dtHFDTFICH));
        //        m_oParam.Add(new GeneralDBParameters("@RefCmp", m_sHFREFCMP));
        //        m_oParam.Add(new GeneralDBParameters("@FullPathName", m_sFileName));

        //        m_sFichID = m_oParameters.DirectStoredProcedureScalar("dbo.Insert_Ficheiro", ref m_oParam).ToString();
        //    }
        //    catch (Exception ex)
        //    {
        //        if (ex.Message.IndexOf("UK_FICHEIRO") > 0)
        //        {
        //            throw new Exception("Ficheiro já importado anteriormente");
        //        }
        //        throw;
        //    }
        //}

        public override void insertHeaderLote()
        {
            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
            m_oParam.Add(new GeneralDBParameters("@NLote", m_sHLNLOTE));
            m_oParam.Add(new GeneralDBParameters("@CodBal", m_sHLCODBAL));
            m_oParam.Add(new GeneralDBParameters("@NRem", m_sHLNREM));
            m_oParam.Add(new GeneralDBParameters("@DTrem", m_sHLDTREM));
            m_oParam.Add(new GeneralDBParameters("@TCap", m_sHLTCAP));
            m_oParam.Add(new GeneralDBParameters("@TREM", m_sHLTREM));
            m_oParam.Add(new GeneralDBParameters("@Montante", m_dHLMONTANTE));
            m_oParam.Add(new GeneralDBParameters("@NrDocum", m_sHLNRDOCUM));
            m_oParam.Add(new GeneralDBParameters("@Anomal", m_sHLANOMAL));
            m_oParam.Add(new GeneralDBParameters("@ChaveH", m_sHLCHAHOST));
            m_oParam.Add(new GeneralDBParameters("@ChaveHext", m_sHLCHAHOSTEXT));
            m_oParam.Add(new GeneralDBParameters("@ValReq", m_sHLVALREQ));
            m_oParam.Add(new GeneralDBParameters("@ServVadic", m_sHLSERVADIC));

            m_sLoteID = m_oParameters.DirectStoredProcedureScalar("dbo.Insert_LoteENVM", ref m_oParam).ToString();
        }

        public override void insertDetalhe()
        {
            
            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@LoteEnvm_Id", m_sLoteID));
            m_oParam.Add(new GeneralDBParameters("@Zib", m_sDZIB));
            m_oParam.Add(new GeneralDBParameters("@NConta", m_sDNCONTA));
            m_oParam.Add(new GeneralDBParameters("@NChq", m_sDNCHQ));
            m_oParam.Add(new GeneralDBParameters("@Import", m_dDIMPORT));
            m_oParam.Add(new GeneralDBParameters("@TipChq", m_sDTIPCHQ));
            m_oParam.Add(new GeneralDBParameters("@Refarq", m_sDREFARQ));
            m_oParam.Add(new GeneralDBParameters("@Anomal", m_sDANOMAL));
            m_oParam.Add(new GeneralDBParameters("@ImgQual", m_sDIMGQUAL));
            m_oParam.Add(new GeneralDBParameters("@CodAna", m_sDCODANA));
            m_oParam.Add(new GeneralDBParameters("@ChaveH", m_sDCHAHOST));
            m_oParam.Add(new GeneralDBParameters("@ChaveHext", m_sDCHAHOSTEXT));
            m_oParam.Add(new GeneralDBParameters("@ReqDoc", m_sDREQDOC));
            m_oParam.Add(new GeneralDBParameters("@duplicado", m_sDDUPLICADO));
            m_oParam.Add(new GeneralDBParameters("@servadic", m_sDSERVADIC));

            m_sDocID = m_oParameters.DirectStoredProcedureScalar("dbo.Insert_DocumentoEnvm", ref m_oParam).ToString();
  
       }

        public override void insertTrailerLote()
        {
            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@LoteEnvmID", m_sLoteID));
            m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
            m_oParam.Add(new GeneralDBParameters("@MontApu", m_dTLMONTAPU));
            m_oParam.Add(new GeneralDBParameters("@TotReg", m_iTLTOTREG));
            m_oParam.Add(new GeneralDBParameters("@MontTotal", m_dTLMONTTOTAL));
            
            m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_Loteenvm", ref m_oParam);
            
        }
        //public override void insertTrailerFich()
        //{
        //    m_oParam.Clear();
        //    m_oParam.Add(new GeneralDBParameters("@FichID", m_sFichID));
        //    m_oParam.Add(new GeneralDBParameters("@TotReg", m_sTFTOTREGFIS));
        //    m_oParam.Add(new GeneralDBParameters("@MontTotal", m_sTFMONTTOTFIC));
        //    m_oParam.Add(new GeneralDBParameters("@UltFich", m_sTFULTFICH));

        //    m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_Ficheiro", ref m_oParam);

        //}

        




    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIFicheirosControlo/Properties/Resources.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryForm.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("QueryForm.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/Properties/Resources.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIFicheirosControlo/Properties/Settings.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIServico.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string P {
            get {
                return ((string)(this["P"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string S {
            get {
                return ((string)(this["S"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("999")]
        public string A {
            get {
                return ((string)(this["A"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SDC6001SQL28\\S2K081")]
        public string H {
            get {
                return ((string)(this["H"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDCSDCIMA01")]
        public string D {
            get {
                return ((string)(this["D"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLPRDVS301")]
        public string GCAAH {
            get {
                return ((string)(this["GCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSPGCCALX")]
        public string GCAAD {
            get {
                return ((string)(this["GCAAD"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLDEVBS301\\GCCAA")]
        public string DVPGCAAH {
            get {
                return ((string)(this["DVPGCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDGCCALX")]
        public string DVPGCAAD {
            get {
                return ((string)(this["DVPGCAAD"]));
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/Properties/Settings.settings
﻿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="My" GeneratedClassName="MySettings" UseMySettingsClassName="true">
  <Profiles />
  <Settings>
    <Setting Name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" Type="(Web Service URL)" Scope="Application">
      <Value Profile="(Default)">http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</Value>
    </Setting>
  </Settings>
</SettingsFile>

// FILE: SDCIM/ModusCI/CIFicheirosControlo/CIFicheirosControlo.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIFicheirosControlo</RootNamespace>
    <AssemblyName>CIFicheirosControlo</AssemblyName>
    <StartupObject>
    </StartupObject>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="FicheiroFormCentralACOM.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FicheiroFormCentralENVM.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FicheiroFormCentralENVM.Designer.cs">
      <DependentUpon>FicheiroFormCentralENVM.cs</DependentUpon>
    </Compile>
    <Compile Include="FormBalcao.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FormBalcao.Designer.cs">
      <DependentUpon>FormBalcao.cs</DependentUpon>
    </Compile>
    <Compile Include="MostraImagem.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MostraImagem.Designer.cs">
      <DependentUpon>MostraImagem.cs</DependentUpon>
    </Compile>
    <Compile Include="ImportarForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ImportarForm.Designer.cs">
      <DependentUpon>ImportarForm.cs</DependentUpon>
    </Compile>
    <Compile Include="ImportarFormACOM.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ImportarFormENVM.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ListViewImportDet.cs" />
    <Compile Include="ListViewImportDetAcom.cs" />
    <Compile Include="ListViewImportDetEnvm.cs" />
    <Compile Include="ListViewImportFich.cs" />
    <Compile Include="ListViewImportFichAcom.cs" />
    <Compile Include="ListViewImportFichEnvm.cs">
    </Compile>
    <Compile Include="ListViewImportLote.cs" />
    <Compile Include="ListViewImportLoteAcom.cs" />
    <Compile Include="ListViewImportLoteEnvm.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <EmbeddedResource Include="FicheiroFormCentralENVM.resx">
      <SubType>Designer</SubType>
      <DependentUpon>FicheiroFormCentralENVM.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FormBalcao.resx">
      <SubType>Designer</SubType>
      <DependentUpon>FormBalcao.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="MostraImagem.resx">
      <DependentUpon>MostraImagem.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ImportarForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>ImportarForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIFicheiro\CIFicheiro.csproj">
      <Project>{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}</Project>
      <Name>CIFicheiro</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="Resources\Refresh.ico" />
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIFicheirosControlo/FicheiroFormCentralACOM.cs
﻿using System;
using System.Data;
using System.Windows.Forms;

using NBiis;
using NBIISNET;

namespace CIFicheirosControlo
{
    public class FicheiroFormCentralACOM : FicheiroFormCentralENVM
    {

        private string m_sBalcao;

        public FicheiroFormCentralACOM(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
            : base (oParameters, oMenuInterface)
        {
            this.Text = "Importação de ACOM";
            m_sFichTipo = "2";
            
        }


        public override string getFich()
        {
            return "ACOM";
        }

        public override void disableMainMenu()
        {
            m_oMenuInterface.processaAcomEnable(false);
        }

        protected override void importarFicheiro()
        {
           
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "ACOM Files (" + m_oParameters.m_sSintaxFilesToImportACOM + ")|" + m_oParameters.m_sSintaxFilesToImportACOM + "|All Files (*.*)|*.*";
            openFileDialog.Title = "Escolha o Ficheiro";
           

            if (openFileDialog.ShowDialog() != DialogResult.OK)
            {
                return;
            }

            this.m_sFicheiroNome = openFileDialog.FileName;

            string sSmg = "Inicio de carregamento do ficheiro ACOM: " + m_sFicheiroNome;
            GenericLog.GenLogRegistarAlerta(sSmg, "importarFicheiro()", 700);
            m_oParameters.EnviarAlertaSituacao(700, sSmg );
            ImportarFormACOM oImportarForm = new ImportarFormACOM(m_oParameters, m_sFicheiroNome);
            oImportarForm.ShowDialog(); 
        }

        public override void refreshListViewFich()
        {
            try
            {
                listViewFicheiro.MyClear();
                listViewLote.MyClear();
                listViewDetalhe.MyClear();
                string sQuery;
                ListViewImportFichAcom oListViewFichAcom;
                sQuery = getFichQuery();
                //DataSet ds = m_oParameters.DirectSqlDataSet(sQuery, "VW_IMPORT_FICHEIRO");
                DataSet ds = m_oParameters.DirectSqlDataSet(sQuery);
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    oListViewFichAcom = new ListViewImportFichAcom(oRow, m_oParameters);

                    ListViewItem oItem = oListViewFichAcom.makeListViewFich(m_oParameters.DateSysFmt, m_oParameters.DateTimeSysFmt);

                    oItem.Tag = oListViewFichAcom;

                    listViewFicheiro.Items.Add(oItem);
                }
                ds.Dispose();
                labelFicheiros.Text = listViewFicheiro.Items.Count.ToString() + " Ficheiros";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public override void refreshListViewLote()
        {
            string sQuery;
            listViewLote.BeginUpdate();
            listViewLote.MyClear();
            listViewDetalhe.MyClear();

            ListViewImportFichAcom oListViewFichAcom = (ListViewImportFichAcom)listViewFicheiro.SelectedItems[0].Tag;

            sQuery = "select * from VW_IMPORT_LOTEACOM with (nolock) where fich_id = " + oListViewFichAcom.m_lFichID.ToString();

            if (this.cbOrigem.SelectedIndex > 0)
            {
                sQuery += " AND DOCACOM_ORIGEM_ID = " + this.cbOrigem.SelectedValue.ToString();
            }

            ListViewImportLoteAcom oListViewLoteAcom;

            DataSet ds = m_oParameters.DirectSqlDataSet(sQuery, "VW_IMPORT_LOTEACOM");

            foreach (DataRow oRow in ds.Tables[0].Rows)
            {
                oListViewLoteAcom = new ListViewImportLoteAcom(oRow, m_oParameters);
                ListViewItem oItem = oListViewLoteAcom.makeListViewLote(m_oParameters.DateSysFmt, m_oParameters.DateTimeSysFmt);
                oItem.Tag = oListViewLoteAcom;
                listViewLote.Items.Add(oItem);

            }
            ds.Dispose();
            labelLotes.Text = listViewLote.Items.Count.ToString() + " Lotes";
            listViewLote.EndUpdate();
        }

        public override void criaColunasLote()
        {
            listViewLote.Columns.Clear();
            listViewLote.Columns.Insert(0, "Lote ID", 60, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(1, "Fich ID", 60, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(2, "Lote Nr", 60, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(3, "Lote Status", 120, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(4, "Origem", 120, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(5, "Produto", 60, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(6, "Data Proc", 112, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(7, "Tot Reg", 60, HorizontalAlignment.Right);
            listViewLote.Columns.Insert(8, "Mont Total", 100, HorizontalAlignment.Right);
        }

        public override void refreshListViewDetalhe()
        {
            string sQuery;

            ListViewImportLoteAcom oListViewLoteAcom = (ListViewImportLoteAcom)listViewLote.SelectedItems[0].Tag;

            if (!GetBalcao(oListViewLoteAcom.m_lLoteId.ToString(), oListViewLoteAcom.m_OrigemID))
            {
                return;
            }

            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();
                listViewDetalhe.BeginUpdate();
                listViewDetalhe.MyClear();

                sQuery = "select * from VW_IMPORT_DETACOM  with (nolock) where loteAcom_id = " + oListViewLoteAcom.m_lLoteId.ToString();
                sQuery += " and DOCACOM_BALCAO=" + m_sBalcao;
                if (this.cbOrigem.SelectedIndex > 0)
                {
                    sQuery += " AND DOCACOM_ORIGEM_ID = " + this.cbOrigem.SelectedValue.ToString();
                }
                ListViewImportDetAcom oListViewDetAcom;
                DataSet ds = m_oParameters.DirectSqlDataSet(sQuery, "VW_IMPORT_DETACOM");
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    oListViewDetAcom = new ListViewImportDetAcom(oRow, m_oParameters);
                    ListViewItem oItem = oListViewDetAcom.makeListViewDet(m_oParameters.DateSysFmt, m_oParameters.DateTimeSysFmt);
                    oItem.Tag = oListViewDetAcom;
                    listViewDetalhe.Items.Add(oItem);
                }
                ds.Dispose();
                labelDetalhes.Text = listViewDetalhe.Items.Count.ToString() + " Documentos";
                listViewDetalhe.EndUpdate();
            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private bool GetBalcao(string sLote, Int32 origem_id)
        {
            m_sBalcao = "";

            try
            {
                FormBalcao oForm = new FormBalcao(m_oParameters, sLote, origem_id);
                oForm.ShowDialog();

                m_sBalcao = oForm.Tag.ToString();
                if (m_sBalcao == "")
                {
                    return false;
                }
                return true;
            }
            catch 
            {
                return false;
            }
        }

        public override void criaColunasDetalhe()
        {
            listViewDetalhe.Columns.Clear();

            Int32 i = 0;
            listViewDetalhe.Columns.Insert(i++, "Doc Acom ID", 80, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Lote Id", 50, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Doc ID", 60, HorizontalAlignment.Center);
            //SDCIM 7 - Adição de coluna DOCACOM Origem
            listViewDetalhe.Columns.Insert(i++, "Origem", 60, HorizontalAlignment.Center);
            //SDCIM 7 - Adição de coluna DOCACOM Origem
            listViewDetalhe.Columns.Insert(i++, "Refarq", 100, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Refarq2", 100, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Balcao", 150, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Codana", 180, HorizontalAlignment.Left);
            listViewDetalhe.Columns.Insert(i++, "Import", 100, HorizontalAlignment.Right);
            listViewDetalhe.Columns.Insert(i++, "Linha opt", 212, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Chave H", 80, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Chave Hext", 50, HorizontalAlignment.Center);
        }

        public override string getQuery(ListViewImportFich oListViewFichAcom)
        {
            return "exec dbo.Delete_FicheiroACOM " + oListViewFichAcom.m_lFichID.ToString();
            
        }
    }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/FicheiroFormCentralENVM.Designer.cs
﻿namespace CIFicheirosControlo
{
    partial class FicheiroFormCentralENVM
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            if (getFich().Equals("ENVM"))
            {
                m_oMenuInterface.processarEnvmEnable(true);
            }
            if (getFich().Equals("ACOM"))
            {
                m_oMenuInterface.processaAcomEnable(true);
            }
            
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FicheiroFormCentralENVM));
            this.buttonImportar = new System.Windows.Forms.Button();
            this.btRefresh = new System.Windows.Forms.Button();
            this.listViewFicheiro = new NBIISNET.ListViewBase();
            this.columnFICH_ID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFICHTIPO_ID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichNome = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFICHSTATUS = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichNSeq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichBanco = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichRefCmp = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichTotReg = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichMontTotal = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichUltimo = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFichInTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFICH_FULLPATHNAME = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnFICHERRO = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.contextMenuStripMudarEstadoFich = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.desimportarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.associarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.listViewLote = new NBIISNET.ListViewBase();
            this.columnLoteLoteID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnLoteFichID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnLoteStatus = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.listViewDetalhe = new NBIISNET.ListViewBase();
            this.columnDetDetID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnDetLoteID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnDetRefarq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnDetChaveH = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnDetChaveHext = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.labelFicheiros = new System.Windows.Forms.Label();
            this.labelLotes = new System.Windows.Forms.Label();
            this.labelDetalhes = new System.Windows.Forms.Label();
            this.dateTimeDataIni = new System.Windows.Forms.DateTimePicker();
            this.dateTimeDataEND = new System.Windows.Forms.DateTimePicker();
            this.label4 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.buttonExitJanela = new System.Windows.Forms.Button();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.cbOrigem = new System.Windows.Forms.ComboBox();
            this.label1 = new System.Windows.Forms.Label();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.contextMenuStripMudarEstadoFich.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).BeginInit();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            this.SuspendLayout();
            // 
            // buttonImportar
            // 
            this.buttonImportar.Location = new System.Drawing.Point(4, 9);
            this.buttonImportar.Name = "buttonImportar";
            this.buttonImportar.Size = new System.Drawing.Size(130, 25);
            this.buttonImportar.TabIndex = 3;
            this.buttonImportar.Text = "Importar";
            this.buttonImportar.UseVisualStyleBackColor = true;
            this.buttonImportar.Click += new System.EventHandler(this.buttonImportar_Click);
            // 
            // btRefresh
            // 
            this.btRefresh.Image = global::CIFicheirosControlo.Properties.Resources.Refresh;
            this.btRefresh.Location = new System.Drawing.Point(811, 4);
            this.btRefresh.Name = "btRefresh";
            this.btRefresh.Size = new System.Drawing.Size(49, 44);
            this.btRefresh.TabIndex = 4;
            this.toolTip1.SetToolTip(this.btRefresh, "Refresh");
            this.btRefresh.UseVisualStyleBackColor = true;
            this.btRefresh.Click += new System.EventHandler(this.btRefresh_Click);
            // 
            // listViewFicheiro
            // 
            this.listViewFicheiro.AllowColumnReorder = true;
            this.listViewFicheiro.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewFicheiro.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnFICH_ID,
            this.columnFICHTIPO_ID,
            this.columnFichNome,
            this.columnFICHSTATUS,
            this.columnFichData,
            this.columnFichNSeq,
            this.columnFichBanco,
            this.columnFichRefCmp,
            this.columnFichTotReg,
            this.columnFichMontTotal,
            this.columnFichUltimo,
            this.columnFichInTimer,
            this.columnFICH_FULLPATHNAME,
            this.columnFICHERRO});
            this.listViewFicheiro.ContextMenuStrip = this.contextMenuStripMudarEstadoFich;
            this.listViewFicheiro.EnableExportar = true;
            this.listViewFicheiro.FullRowSelect = true;
            this.listViewFicheiro.GridLines = true;
            this.listViewFicheiro.HideSelection = false;
            this.listViewFicheiro.Location = new System.Drawing.Point(3, 65);
            this.listViewFicheiro.Name = "listViewFicheiro";
            this.listViewFicheiro.Size = new System.Drawing.Size(1014, 97);
            this.listViewFicheiro.TabIndex = 3;
            this.listViewFicheiro.TabStop = false;
            this.listViewFicheiro.UseCompatibleStateImageBehavior = false;
            this.listViewFicheiro.View = System.Windows.Forms.View.Details;
            this.listViewFicheiro.DoubleClick += new System.EventHandler(this.listViewFicheiro_DoubleClick);
            // 
            // columnFICH_ID
            // 
            this.columnFICH_ID.Text = "Fich ID";
            this.columnFICH_ID.Width = 53;
            // 
            // columnFICHTIPO_ID
            // 
            this.columnFICHTIPO_ID.Text = "Tipo";
            this.columnFICHTIPO_ID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFICHTIPO_ID.Width = 78;
            // 
            // columnFichNome
            // 
            this.columnFichNome.Text = "Nome";
            this.columnFichNome.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // columnFICHSTATUS
            // 
            this.columnFICHSTATUS.Text = "Estado";
            this.columnFICHSTATUS.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFICHSTATUS.Width = 87;
            // 
            // columnFichData
            // 
            this.columnFichData.Text = "Data";
            this.columnFichData.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFichData.Width = 112;
            // 
            // columnFichNSeq
            // 
            this.columnFichNSeq.Text = "NSeq";
            this.columnFichNSeq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFichNSeq.Width = 47;
            // 
            // columnFichBanco
            // 
            this.columnFichBanco.Text = "Banco";
            this.columnFichBanco.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFichBanco.Width = 49;
            // 
            // columnFichRefCmp
            // 
            this.columnFichRefCmp.Text = "Ref Cmp";
            this.columnFichRefCmp.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // columnFichTotReg
            // 
            this.columnFichTotReg.Text = "Tot Reg";
            this.columnFichTotReg.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // columnFichMontTotal
            // 
            this.columnFichMontTotal.Text = "Mont Total";
            this.columnFichMontTotal.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnFichMontTotal.Width = 95;
            // 
            // columnFichUltimo
            // 
            this.columnFichUltimo.Text = "Ultimo";
            this.columnFichUltimo.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFichUltimo.Width = 45;
            // 
            // columnFichInTimer
            // 
            this.columnFichInTimer.Text = "Timer";
            this.columnFichInTimer.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFichInTimer.Width = 112;
            // 
            // columnFICH_FULLPATHNAME
            // 
            this.columnFICH_FULLPATHNAME.Text = "Full Path";
            this.columnFICH_FULLPATHNAME.Width = 200;
            // 
            // columnFICHERRO
            // 
            this.columnFICHERRO.Text = "Erro";
            this.columnFICHERRO.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnFICHERRO.Width = 200;
            // 
            // contextMenuStripMudarEstadoFich
            // 
            this.contextMenuStripMudarEstadoFich.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.desimportarToolStripMenuItem,
            this.associarToolStripMenuItem});
            this.contextMenuStripMudarEstadoFich.Name = "contextMenuStripMudarEstadoFich";
            this.contextMenuStripMudarEstadoFich.Size = new System.Drawing.Size(140, 48);
            this.contextMenuStripMudarEstadoFich.Opening += new System.ComponentModel.CancelEventHandler(this.contextMenuStripMudarEstadoFich_Opening);
            // 
            // desimportarToolStripMenuItem
            // 
            this.desimportarToolStripMenuItem.Name = "desimportarToolStripMenuItem";
            this.desimportarToolStripMenuItem.Size = new System.Drawing.Size(139, 22);
            this.desimportarToolStripMenuItem.Text = "Desimportar";
            this.desimportarToolStripMenuItem.Click += new System.EventHandler(this.desimportarToolStripMenuItem_Click);
            // 
            // associarToolStripMenuItem
            // 
            this.associarToolStripMenuItem.Name = "associarToolStripMenuItem";
            this.associarToolStripMenuItem.Size = new System.Drawing.Size(139, 22);
            this.associarToolStripMenuItem.Text = "Associar";
            this.associarToolStripMenuItem.Click += new System.EventHandler(this.associarToolStripMenuItem_Click);
            // 
            // listViewLote
            // 
            this.listViewLote.AllowColumnReorder = true;
            this.listViewLote.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewLote.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnLoteLoteID,
            this.columnLoteFichID,
            this.columnLoteStatus});
            this.listViewLote.EnableExportar = true;
            this.listViewLote.FullRowSelect = true;
            this.listViewLote.GridLines = true;
            this.listViewLote.HideSelection = false;
            this.listViewLote.Location = new System.Drawing.Point(4, 17);
            this.listViewLote.Name = "listViewLote";
            this.listViewLote.Size = new System.Drawing.Size(1013, 92);
            this.listViewLote.TabIndex = 4;
            this.listViewLote.UseCompatibleStateImageBehavior = false;
            this.listViewLote.View = System.Windows.Forms.View.Details;
            this.listViewLote.DoubleClick += new System.EventHandler(this.listViewLote_DoubleClick);
            // 
            // columnLoteLoteID
            // 
            this.columnLoteLoteID.Text = "Lote Id";
            // 
            // columnLoteFichID
            // 
            this.columnLoteFichID.Text = "Fich ID";
            // 
            // columnLoteStatus
            // 
            this.columnLoteStatus.Text = "Lote Status";
            // 
            // listViewDetalhe
            // 
            this.listViewDetalhe.AllowColumnReorder = true;
            this.listViewDetalhe.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewDetalhe.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnDetDetID,
            this.columnDetLoteID,
            this.columnDetRefarq,
            this.columnDetChaveH,
            this.columnDetChaveHext});
            this.listViewDetalhe.EnableExportar = true;
            this.listViewDetalhe.FullRowSelect = true;
            this.listViewDetalhe.GridLines = true;
            this.listViewDetalhe.HideSelection = false;
            this.listViewDetalhe.Location = new System.Drawing.Point(3, 16);
            this.listViewDetalhe.Name = "listViewDetalhe";
            this.listViewDetalhe.Size = new System.Drawing.Size(1014, 96);
            this.listViewDetalhe.TabIndex = 5;
            this.listViewDetalhe.UseCompatibleStateImageBehavior = false;
            this.listViewDetalhe.View = System.Windows.Forms.View.Details;
            this.listViewDetalhe.DoubleClick += new System.EventHandler(this.listViewDetalhe_DoubleClick);
            // 
            // columnDetDetID
            // 
            this.columnDetDetID.Text = "Detalhe ID";
            // 
            // columnDetLoteID
            // 
            this.columnDetLoteID.Text = "LoteID";
            // 
            // columnDetRefarq
            // 
            this.columnDetRefarq.DisplayIndex = 4;
            this.columnDetRefarq.Text = "Refarq";
            // 
            // columnDetChaveH
            // 
            this.columnDetChaveH.DisplayIndex = 2;
            this.columnDetChaveH.Text = "Chave H";
            // 
            // columnDetChaveHext
            // 
            this.columnDetChaveHext.DisplayIndex = 3;
            this.columnDetChaveHext.Text = "Chave Hext";
            // 
            // labelFicheiros
            // 
            this.labelFicheiros.AutoSize = true;
            this.labelFicheiros.Location = new System.Drawing.Point(3, 49);
            this.labelFicheiros.Name = "labelFicheiros";
            this.labelFicheiros.Size = new System.Drawing.Size(49, 13);
            this.labelFicheiros.TabIndex = 6;
            this.labelFicheiros.Text = "Ficheiros";
            // 
            // labelLotes
            // 
            this.labelLotes.AutoSize = true;
            this.labelLotes.Location = new System.Drawing.Point(3, 1);
            this.labelLotes.Name = "labelLotes";
            this.labelLotes.Size = new System.Drawing.Size(33, 13);
            this.labelLotes.TabIndex = 7;
            this.labelLotes.Text = "Lotes";
            // 
            // labelDetalhes
            // 
            this.labelDetalhes.AutoSize = true;
            this.labelDetalhes.Location = new System.Drawing.Point(3, 0);
            this.labelDetalhes.Name = "labelDetalhes";
            this.labelDetalhes.Size = new System.Drawing.Size(49, 13);
            this.labelDetalhes.TabIndex = 8;
            this.labelDetalhes.Text = "Detalhes";
            // 
            // dateTimeDataIni
            // 
            this.dateTimeDataIni.Location = new System.Drawing.Point(182, 12);
            this.dateTimeDataIni.Name = "dateTimeDataIni";
            this.dateTimeDataIni.Size = new System.Drawing.Size(229, 20);
            this.dateTimeDataIni.TabIndex = 1;
            // 
            // dateTimeDataEND
            // 
            this.dateTimeDataEND.Location = new System.Drawing.Point(437, 12);
            this.dateTimeDataEND.Name = "dateTimeDataEND";
            this.dateTimeDataEND.Size = new System.Drawing.Size(229, 20);
            this.dateTimeDataEND.TabIndex = 2;
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(151, 16);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(25, 13);
            this.label4.TabIndex = 11;
            this.label4.Text = "DE:";
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(417, 15);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(14, 13);
            this.label5.TabIndex = 12;
            this.label5.Text = "A";
            // 
            // buttonExitJanela
            // 
            this.buttonExitJanela.Image = ((System.Drawing.Image)(resources.GetObject("buttonExitJanela.Image")));
            this.buttonExitJanela.Location = new System.Drawing.Point(866, 4);
            this.buttonExitJanela.Name = "buttonExitJanela";
            this.buttonExitJanela.Size = new System.Drawing.Size(49, 44);
            this.buttonExitJanela.TabIndex = 5;
            this.buttonExitJanela.UseVisualStyleBackColor = true;
            this.buttonExitJanela.Click += new System.EventHandler(this.buttonExitJanela_Click);
            // 
            // splitContainer1
            // 
            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer1.Location = new System.Drawing.Point(1, 1);
            this.splitContainer1.Name = "splitContainer1";
            this.splitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.cbOrigem);
            this.splitContainer1.Panel1.Controls.Add(this.label1);
            this.splitContainer1.Panel1.Controls.Add(this.buttonImportar);
            this.splitContainer1.Panel1.Controls.Add(this.label4);
            this.splitContainer1.Panel1.Controls.Add(this.buttonExitJanela);
            this.splitContainer1.Panel1.Controls.Add(this.dateTimeDataIni);
            this.splitContainer1.Panel1.Controls.Add(this.labelFicheiros);
            this.splitContainer1.Panel1.Controls.Add(this.label5);
            this.splitContainer1.Panel1.Controls.Add(this.listViewFicheiro);
            this.splitContainer1.Panel1.Controls.Add(this.dateTimeDataEND);
            this.splitContainer1.Panel1.Controls.Add(this.btRefresh);
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
            this.splitContainer1.Size = new System.Drawing.Size(1020, 400);
            this.splitContainer1.SplitterDistance = 165;
            this.splitContainer1.TabIndex = 13;
            // 
            // cbOrigem
            // 
            this.cbOrigem.DisplayMember = "Text";
            this.cbOrigem.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbOrigem.FormattingEnabled = true;
            this.cbOrigem.Location = new System.Drawing.Point(732, 10);
            this.cbOrigem.Name = "cbOrigem";
            this.cbOrigem.Size = new System.Drawing.Size(73, 21);
            this.cbOrigem.TabIndex = 14;
            this.cbOrigem.ValueMember = "Value";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(672, 15);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(53, 13);
            this.label1.TabIndex = 13;
            this.label1.Text = "ORIGEM:";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(0, 0);
            this.splitContainer2.Name = "splitContainer2";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.listViewLote);
            this.splitContainer2.Panel1.Controls.Add(this.labelLotes);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.labelDetalhes);
            this.splitContainer2.Panel2.Controls.Add(this.listViewDetalhe);
            this.splitContainer2.Size = new System.Drawing.Size(1020, 231);
            this.splitContainer2.SplitterDistance = 112;
            this.splitContainer2.TabIndex = 0;
            // 
            // FicheiroFormCentralENVM
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1023, 404);
            this.Controls.Add(this.splitContainer1);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "FicheiroFormCentralENVM";
            this.ShowInTaskbar = false;
            this.Text = "l";
            this.Load += new System.EventHandler(this.FicheiroFormCentral_Load);
            this.contextMenuStripMudarEstadoFich.ResumeLayout(false);
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel1.PerformLayout();
            this.splitContainer1.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
            this.splitContainer1.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel1.PerformLayout();
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).EndInit();
            this.splitContainer2.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.Button buttonImportar;
        private System.Windows.Forms.Button btRefresh;
        public NBIISNET.ListViewBase listViewFicheiro;
        private System.Windows.Forms.ColumnHeader columnFICH_FULLPATHNAME;
        private System.Windows.Forms.ColumnHeader columnFICH_ID;
        private System.Windows.Forms.ColumnHeader columnFICHTIPO_ID;
        public NBIISNET.ListViewBase listViewLote;
        public NBIISNET.ListViewBase listViewDetalhe;
        public System.Windows.Forms.Label labelFicheiros;
        public System.Windows.Forms.Label labelLotes;
        public System.Windows.Forms.Label labelDetalhes;
        private System.Windows.Forms.ColumnHeader columnFICHSTATUS;
        private System.Windows.Forms.ColumnHeader columnLoteLoteID;
        private System.Windows.Forms.ColumnHeader columnLoteFichID;
        private System.Windows.Forms.ColumnHeader columnLoteStatus;
        private System.Windows.Forms.ColumnHeader columnFICHERRO;
        private System.Windows.Forms.ColumnHeader columnDetDetID;
        private System.Windows.Forms.ColumnHeader columnDetLoteID;
        private System.Windows.Forms.ColumnHeader columnDetChaveH;
        private System.Windows.Forms.ColumnHeader columnDetChaveHext;
        private System.Windows.Forms.ColumnHeader columnDetRefarq;
        private System.Windows.Forms.ColumnHeader columnFichNome;
        private System.Windows.Forms.ColumnHeader columnFichBanco;
        private System.Windows.Forms.ColumnHeader columnFichNSeq;
        private System.Windows.Forms.ColumnHeader columnFichData;
        private System.Windows.Forms.ColumnHeader columnFichTotReg;
        private System.Windows.Forms.ColumnHeader columnFichMontTotal;
        private System.Windows.Forms.ColumnHeader columnFichUltimo;
        private System.Windows.Forms.ColumnHeader columnFichInTimer;
        private System.Windows.Forms.ColumnHeader columnFichRefCmp;
        public System.Windows.Forms.DateTimePicker dateTimeDataIni;
        public System.Windows.Forms.DateTimePicker dateTimeDataEND;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.ContextMenuStrip contextMenuStripMudarEstadoFich;
        private System.Windows.Forms.ToolStripMenuItem desimportarToolStripMenuItem;
        private System.Windows.Forms.ToolTip toolTip1;
        private System.Windows.Forms.Button buttonExitJanela;
        private System.Windows.Forms.ToolStripMenuItem associarToolStripMenuItem;
        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.Label label1;
        protected System.Windows.Forms.ComboBox cbOrigem;
    }
}



// FILE: SDCIM/ModusCI/CIFicheirosControlo/FicheiroFormCentralENVM.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Windows.Forms;
using NBiis;
using NBiis.Generic;
using NBIISNET;
using System.Text;
namespace CIFicheirosControlo
{

    public partial class FicheiroFormCentralENVM : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters; 
        public string m_sFichTipo;

        protected string m_sFicheiroNome;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        /// <summary>
        /// E001212 - adicionado construtor por defeito para não dar erro ao visualizar form ACOM 
        /// </summary>
        public FicheiroFormCentralENVM()
        {

        }
        public FicheiroFormCentralENVM(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            m_oParameters = oParameters;
            InitializeComponent();
            m_oMenuInterface = oMenuInterface;
            this.Text = "Importação de ENVM";

            m_sFichTipo = "1";
            this.LoadCbOrigem();
            criaColunasLote();
            criaColunasDetalhe();

        }

        public virtual string getFich()
        {
            return "ENVM";
        }

        private void FicheiroFormCentral_Load(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Maximized;
            //SUPFBKOFF 20 intervalo de dados por defeito passou a ser 1 dia.
            this.dateTimeDataIni.Value = DateTime.Now.Date;  //sdcim 7, passou de 15 para 1 por causa do número de registos 
            this.dateTimeDataEND.Value = DateTime.Now.Date;
            refreshListViewFich();
            desimportarToolStripMenuItem.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
            buttonImportar.Enabled = (m_oParameters.UserLogged.m_iUserGroup <= 1);
            disableMainMenu();
        }

        public virtual void disableMainMenu()
        {
            m_oMenuInterface.processarEnvmEnable(false);
        }

        protected virtual void importarFicheiro()
        {

            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "ENVM Files (*" + m_oParameters.m_sSintaxFilesToImportENVM + ")|*" + m_oParameters.m_sSintaxFilesToImportENVM + "|All Files (*.*)|*.*";
            openFileDialog.Title = "Escolha o Ficheiro";

            if (openFileDialog.ShowDialog() != DialogResult.OK)
            {
                return;
            }

            this.m_sFicheiroNome = openFileDialog.FileName;

            string sSmg = "Inicio de carregamento do ficheiro ENVM: " + m_sFicheiroNome;
            GenericLog.GenLogRegistarAlerta(sSmg, "importarFicheiro()", 700);
            m_oParameters.EnviarAlertaSituacao(700, sSmg);

            ImportarFormENVM oImportarForm = new ImportarFormENVM(m_oParameters, m_sFicheiroNome);
            oImportarForm.ShowDialog();

        }

        private void buttonImportar_Click(object sender, EventArgs e)
        {

            importarFicheiro();


            refreshListViewFich();
        }

        public virtual void refreshListViewFich()
        {
            try
            {
                listViewFicheiro.MyClear();
                listViewLote.MyClear();
                listViewDetalhe.MyClear();
                string sQuery;
                ListViewImportFichEnvm oListViewFichEnvm;
                sQuery = getFichQuery();
                //DataSet ds = m_oParameters.DirectSqlDataSet(sQuery, "VW_IMPORT_FICHEIRO");
                DataSet ds = m_oParameters.DirectSqlDataSet(sQuery);

                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    oListViewFichEnvm = new ListViewImportFichEnvm(oRow, m_oParameters);

                    ListViewItem oItem = oListViewFichEnvm.makeListViewFich(m_oParameters.DateSysFmt, m_oParameters.DateTimeSysFmt);

                    oItem.Tag = oListViewFichEnvm;

                    listViewFicheiro.Items.Add(oItem);
                }
                ds.Dispose();
                labelFicheiros.Text = listViewFicheiro.Items.Count.ToString() + " Ficheiros";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Método que retorna a query para preenchimento da lista de ficheiros
        /// </summary>
        /// <returns>string com query</returns>
        public virtual string getFichQuery()
        {
            StringBuilder sQuery = new StringBuilder();
            /*
             * porque exisitem para o meu tipo de ficheiro duas origem é necessário fazer disctint.
             * sQuery.Append(String.Format(@"SELECT [FICH_ID],[FICHTIPO_ID],[FICH_NOME],[FICH_BANCO],[FICH_NSEQ],[FICH_DATA],[FICH_REFCMP],[FICH_TOTREG],[FICH_MONTTOTAL],[FICH_FULLPATHNAME]
                         ,[FICH_ERRO],[FICH_STATUS],[FICH_ULTIMO],[FICHEIROSTAT_DESC],[FICHTIPO_ABR],[FICH_TIMER],[OrigemID],[REMORI_DESC] from VW_IMPORT_FICHEIRO where FICHTIPO_ID={0}", m_sFichTipo));
            */
            if (m_sFichTipo.Equals("1"))
            {
                sQuery.Append(String.Format(@"SELECT DISTINCT dbo.FICHEIRO.[FICH_ID],dbo.FICHEIRO.[FICHTIPO_ID],[FICH_NOME],[FICH_BANCO],
                                            [FICH_NSEQ],[FICH_DATA],[FICH_REFCMP],[FICH_TOTREG],[FICH_MONTTOTAL],[FICH_FULLPATHNAME],
                                            [FICH_ERRO],[FICH_STATUS],[FICH_ULTIMO],[FICHEIROSTAT_DESC],[FICHTIPO_ABR],[FICH_TIMER]   
                        FROM dbo.FICHEIRO WITH (nolock) INNER JOIN dbo.FICHEIRO_STATUS WITH (nolock) ON dbo.FICHEIRO.FICH_STATUS = dbo.FICHEIRO_STATUS.FICHEIROSTAT_ID
                            INNER JOIN dbo.FICHEIRO_TIPO WITH (nolock) ON dbo.FICHEIRO.FICHTIPO_ID = dbo.FICHEIRO_TIPO.FICHTIPO_ID 
                            INNER JOIN dbo.LOTE_ENVM AS envm WITH (nolock) ON envm.FICH_ID =  dbo.FICHEIRO.FICH_ID
                            INNER JOIN dbo.DOCUMENTO_ENVM AS docENVM WITH (nolock) ON envm.LOTEENV_ID = docENVM.LOTEENV_ID
                            INNER JOIN dbo.REMESSA_ORIGEM AS remOrigem WITH (nolock) ON remOrigem.REMORI_ID = docENVM.DOCENV_ORIGEM_ID WHERE dbo.FICHEIRO.FICHTIPO_ID={0}", m_sFichTipo));
            }
            else
            {
                sQuery.Append(String.Format(@"SELECT DISTINCT dbo.FICHEIRO.[FICH_ID],dbo.FICHEIRO.[FICHTIPO_ID],[FICH_NOME],[FICH_BANCO],
                                            [FICH_NSEQ],[FICH_DATA],[FICH_REFCMP],[FICH_TOTREG],[FICH_MONTTOTAL],[FICH_FULLPATHNAME],
                                            [FICH_ERRO],[FICH_STATUS],[FICH_ULTIMO],[FICHEIROSTAT_DESC],[FICHTIPO_ABR],[FICH_TIMER]
                        FROM dbo.FICHEIRO WITH (nolock) INNER JOIN dbo.FICHEIRO_STATUS WITH (nolock) ON dbo.FICHEIRO.FICH_STATUS = dbo.FICHEIRO_STATUS.FICHEIROSTAT_ID 
                            INNER JOIN dbo.FICHEIRO_TIPO WITH (nolock) ON dbo.FICHEIRO.FICHTIPO_ID = dbo.FICHEIRO_TIPO.FICHTIPO_ID 
                            INNER JOIN dbo.LOTE_ACOM AS acom WITH (nolock) ON acom.FICH_ID =  dbo.FICHEIRO.FICH_ID
                            INNER JOIN dbo.DOCUMENTO_ACOM AS docACOM WITH (nolock) ON acom.LOTEACOM_ID =  docACOM.LOTEACOM_ID
                            INNER JOIN dbo.REMESSA_ORIGEM AS remOrigem WITH (nolock) ON remOrigem.REMORI_ID = docACOM.DOCACOM_ORIGEM_ID WHERE dbo.FICHEIRO.FICHTIPO_ID={0}", m_sFichTipo));
            }
            if (this.cbOrigem.SelectedIndex > 0)
            {
                if (m_sFichTipo.Equals("1"))
                {
                    sQuery.Append(String.Format(" AND docENVM.DOCENV_ORIGEM_ID = {0}", this.cbOrigem.SelectedValue.ToString()));
                }
                else
                {
                    sQuery.Append(String.Format(" AND docACOM.DOCACOM_ORIGEM_ID = {0}", this.cbOrigem.SelectedValue.ToString()));
                }
            }
            sQuery.Append(String.Format(" and (FICH_DATA between '{0}' and '{1}'", dateTimeDataIni.Value.ToString(m_oParameters.DateSysFmt), dateTimeDataEND.Value.AddDays(+1).ToString(m_oParameters.DateSysFmt)));
            sQuery.Append(String.Format(" or FICH_TIMER between '{0}' and '{1}')", dateTimeDataIni.Value.ToString(m_oParameters.DateSysFmt), dateTimeDataEND.Value.AddDays(+1).ToString(m_oParameters.DateSysFmt)));
            sQuery.Append(" order by FICH_TIMER desc");
            return sQuery.ToString();
        }

        public virtual void refreshListViewLote()
        {

            string sQuery;
            listViewLote.BeginUpdate();
            listViewLote.MyClear();
            listViewDetalhe.MyClear();
            ListViewImportFichEnvm oListViewFichEnvm = (ListViewImportFichEnvm)listViewFicheiro.SelectedItems[0].Tag;
            sQuery = "select * from VW_IMPORT_LOTEENVM where fich_id = " + oListViewFichEnvm.m_lFichID.ToString();
            if (this.cbOrigem.SelectedIndex > 0)
            {
                sQuery += " AND DOCENV_ORIGEM_ID = " + this.cbOrigem.SelectedValue.ToString();
            }
            ListViewImportLoteEnvm oListViewLoteEnvm;
            DataSet ds = m_oParameters.DirectSqlDataSet(sQuery, "VW_IMPORT_LOTEENVM");
            foreach (DataRow oRow in ds.Tables[0].Rows)
            {
                oListViewLoteEnvm = new ListViewImportLoteEnvm(oRow, m_oParameters);
                ListViewItem oItem = oListViewLoteEnvm.makeListViewLote(m_oParameters.DateSysFmt, m_oParameters.DateTimeSysFmt);
                oItem.Tag = oListViewLoteEnvm;
                listViewLote.Items.Add(oItem);
            }
            ds.Dispose();
            labelLotes.Text = listViewLote.Items.Count.ToString() + " Lotes";
            listViewLote.EndUpdate();
        }

        private void listViewFicheiro_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                refreshListViewLote();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public virtual void criaColunasLote()
        {
            listViewLote.Columns.Clear();
            int i = 0;
            listViewLote.Columns.Insert(i++, "LoteID", 50, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "FichId", 50, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "LoteNr", 50, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Origem", 70, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Status", 70, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Balcao", 150, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "ReminID", 60, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Nr Rem", 70, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Dt Rem", 70, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Montante", 100, HorizontalAlignment.Right);
            listViewLote.Columns.Insert(i++, "TRem", 50, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "TCapt", 50, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Docs", 50, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Reg", 50, HorizontalAlignment.Right);
            listViewLote.Columns.Insert(i++, "Mont Total", 100, HorizontalAlignment.Right);
            listViewLote.Columns.Insert(i++, "CGD Error", 60, HorizontalAlignment.Left);
            listViewLote.Columns.Insert(i++, "Anomal", 100, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Mont. Apurado", 100, HorizontalAlignment.Right);
            listViewLote.Columns.Insert(i++, "Chave H", 100, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Chave Hext", 50, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Val Req", 40, HorizontalAlignment.Center);
            listViewLote.Columns.Insert(i++, "Servadic", 40, HorizontalAlignment.Center);
        }

        private void listViewLote_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                //Cursor = Cursors.WaitCursor;
                //frmEspereUmMomento.ShowWaitForm();
                refreshListViewDetalhe();
            }
            catch (Exception ex)
            {
                //Cursor = Cursors.Default;
                //frmEspereUmMomento.HideWaitForm();
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                //Cursor = Cursors.Default;
                //frmEspereUmMomento.HideWaitForm();
            }
        }

        public virtual void refreshListViewDetalhe()
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();
                string sQuery;
                listViewDetalhe.BeginUpdate();
                listViewDetalhe.MyClear();


                ListViewImportLoteEnvm oListViewLoteEnvm = (ListViewImportLoteEnvm)listViewLote.SelectedItems[0].Tag;

                sQuery = "select * from VW_IMPORT_DETENVM where loteenv_id = " + oListViewLoteEnvm.m_lLoteId.ToString();

                if (this.cbOrigem.SelectedIndex > 0)
                {
                    sQuery += " AND DOCENV_ORIGEM_ID = " + this.cbOrigem.SelectedValue.ToString();
                }

                ListViewImportDetEnvm oListViewDetEnvm;

                DataSet ds = m_oParameters.DirectSqlDataSet(sQuery, "VW_IMPORT_DETENVM");

                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    oListViewDetEnvm = new ListViewImportDetEnvm(oRow, m_oParameters);

                    ListViewItem oItem = oListViewDetEnvm.makeListViewDet(m_oParameters.DateSysFmt, m_oParameters.DateTimeSysFmt);
                    oItem.Tag = oListViewDetEnvm;

                    listViewDetalhe.Items.Add(oItem);

                }
                ds.Dispose();
                labelDetalhes.Text = listViewDetalhe.Items.Count.ToString() + " Documentos";
                listViewDetalhe.EndUpdate();

            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        public virtual void criaColunasDetalhe()
        {
            listViewDetalhe.Columns.Clear();
            int i = 0;
            listViewDetalhe.Columns.Insert(i++, "Doc Envm ID", 80, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Lote Id", 50, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Doc ID", 60, HorizontalAlignment.Center);
            //SDCIM 7 - Adição de coluna DOCENVM Origem 
            listViewDetalhe.Columns.Insert(i++, "Origem", 60, HorizontalAlignment.Left);
            //SDCIM 7 - Adição de coluna DOCENVM Origem 
            listViewDetalhe.Columns.Insert(i++, "Zona 5", 100, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Zona 4", 100, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Zona 3", 100, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Zona 2", 100, HorizontalAlignment.Right);
            listViewDetalhe.Columns.Insert(i++, "Zona 1", 60, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Refarq", 112, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Anomal", 190, HorizontalAlignment.Left);
            listViewDetalhe.Columns.Insert(i++, "Duplicado", 60, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Codana", 80, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Req Doc", 60, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Servadic", 60, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Img Qual", 60, HorizontalAlignment.Center);
            listViewDetalhe.Columns.Insert(i++, "Chave H", 100, HorizontalAlignment.Left);
            listViewDetalhe.Columns.Insert(i++, "Chave Hext", 50, HorizontalAlignment.Left);

        }

        private void btRefresh_Click(object sender, EventArgs e)
        {
            try
            {
                refreshListViewFich();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void desimportarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listViewFicheiro.SelectedItems.Count != 1)
                return;

            desimportar();
        }

        public virtual string getQuery(ListViewImportFich oListViewFichEnvm)
        {
            return "exec dbo.Delete_FicheiroENVM " + oListViewFichEnvm.m_lFichID.ToString();
        }

        private void desimportar()
        {

            ListViewImportFich oListViewFich = (ListViewImportFich)listViewFicheiro.SelectedItems[0].Tag;
            try
            {

                if (MessageBox.Show("Tem a certeza que deseja desimportar o ficheiro?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    m_oParameters.DirectSqlNonQuery(getQuery(oListViewFich));

                    string sSmg = "Ficheiro ID: " + oListViewFich.m_lFichID.ToString() + " " + oListViewFich.getTipoFich() + " - " + oListViewFich.m_sFullPath + " desimportado ";
                    GenericLog.GenLogRegistarAlerta(sSmg, "DesimportarFicheiro()", 700);
                    m_oParameters.EnviarAlertaSituacao(700, sSmg);

                }
                refreshListViewFich();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void contextMenuStripMudarEstadoFich_Opening(object sender, CancelEventArgs e)
        {
            if (listViewFicheiro.SelectedItems.Count == 0)
            {
                contextMenuStripMudarEstadoFich.Enabled = false;
            }
            else
            {
                contextMenuStripMudarEstadoFich.Enabled = true;
            }
        }

        private void buttonExitJanela_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void associarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewImportFich oListViewFich = (ListViewImportFich)listViewFicheiro.SelectedItems[0].Tag;

            string sCmd = "exec dbo.Update_ActualizarAutoAssociarFicheiro " + oListViewFich.m_lFichID.ToString();
            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                m_oParameters.DirectSqlNonQuery(sCmd);
                GenericLog.GenLogRegistarAlerta(sCmd, "AssociarFicheiro()", 700);
                m_oParameters.EnviarAlertaSituacao(700, sCmd);
                refreshListViewFich();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private void LoadCbOrigem()
        {
            try
            {
                string strQuery = "SELECT  [REMORI_ID],[REMORI_ABR] FROM [dbo].[REMESSA_ORIGEM] WHERE I_VISIVEL = 'TRUE' ORDER BY [REMORI_ABR] ASC";
                DataSet ds = m_oParameters.DirectSqlDataSet(strQuery, "REMESSA_ORIGEM");
                List<ComboBoxItem> items = new List<ComboBoxItem>();
                items.Add(new ComboBoxItem
                {
                    ISelected = true,
                    Text = "Todos",
                    Value = "0"
                });
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    ComboBoxItem item = new ComboBoxItem
                    {
                        ISelected = false,
                        Text = oRow["REMORI_ABR"].ToString(),
                        Value = oRow["REMORI_ID"].ToString()
                    };
                    items.Add(item);
                }
                ds.Dispose();
                this.cbOrigem.DataSource = items;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private void listViewDetalhe_DoubleClick(object sender, EventArgs e)
        {
            ListViewImportDet detalhe = (ListViewImportDet)listViewDetalhe.SelectedItems[0].Tag;
            if (detalhe.m_lDocID > 0)
            {
                MostraImagem form = new MostraImagem(this.m_oParameters, detalhe.m_lDocID, detalhe.m_iDocOrigemID);
                form.ShowDialog();
            }
            else
                MessageBox.Show(this, "Documento não associado", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/FicheiroFormCentralENVM.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>240, 17</value>
  </metadata>
  <metadata name="contextMenuStripMudarEstadoFich.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="buttonExitJanela.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAABWElEQVRYR9WRi64DIQhE++n751tHwSIv
        tba9uSRnUUBmkn1sxn3IcdzXdS2DeQS+/LZuOQgjEoHZLk53qh+FEfLA3CBONeptR33cjnMDmDHiVKf+
        dvQFQAtK0HfFqUcz22H+owd6oTj1aW472lJeHJgwc5qPGEhMDHO4axID7XFGWYrITPDcewbk8gREv4ul
        HzOwGoPQa/FY16wY2MIutj1JakAPa6SwFKCl5wZmTMRdA/wWZ7pHBmYxFTcGyhlRa+hR/8yAWqTpcyTc
        a8h0ptp2TMVBnWMDfHfelrwdw0ItzNS+NKA5MtBAGGEGvW8a4DDCDHrfMiCjCUX8xACLaP6zgfZ4FSkq
        kT0t3oQj8MGChCowy2UPMnDFaXZgxYAr5uTyqWewJA5mBiIxNzsGUEM/JDPgiiS5fOoZLImDyEAkkmZh
        AGfUp3gG3OULuXxecG1GN/BXPO4nHVUUCdWxbqAAAAAASUVORK5CYII=
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIFicheirosControlo/FormBalcao.Designer.cs
﻿namespace CIFicheirosControlo
{
    partial class FormBalcao
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormBalcao));
            this.buttonOK = new System.Windows.Forms.Button();
            this.buttonCancel = new System.Windows.Forms.Button();
            this.listViewResumoLote = new NBIISNET.ListViewBase();
            this.columnBalcao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnQT = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnImport = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.labelBalcoes = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.txBalcao = new System.Windows.Forms.TextBox();
            this.btnPesquisar = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // buttonOK
            // 
            this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.buttonOK.Location = new System.Drawing.Point(298, 30);
            this.buttonOK.Name = "buttonOK";
            this.buttonOK.Size = new System.Drawing.Size(72, 23);
            this.buttonOK.TabIndex = 0;
            this.buttonOK.Text = "&OK";
            this.buttonOK.UseVisualStyleBackColor = true;
            this.buttonOK.Click += new System.EventHandler(this.buttonOK_Click);
            // 
            // buttonCancel
            // 
            this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.buttonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.buttonCancel.Location = new System.Drawing.Point(298, 59);
            this.buttonCancel.Name = "buttonCancel";
            this.buttonCancel.Size = new System.Drawing.Size(72, 23);
            this.buttonCancel.TabIndex = 1;
            this.buttonCancel.Text = "&Cancel";
            this.buttonCancel.UseVisualStyleBackColor = true;
            this.buttonCancel.Click += new System.EventHandler(this.buttonCancel_Click);
            // 
            // listViewResumoLote
            // 
            this.listViewResumoLote.AllowColumnReorder = true;
            this.listViewResumoLote.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewResumoLote.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnBalcao,
            this.columnQT,
            this.columnImport});
            this.listViewResumoLote.EnableExportar = true;
            this.listViewResumoLote.FullRowSelect = true;
            this.listViewResumoLote.GridLines = true;
            this.listViewResumoLote.HideSelection = false;
            this.listViewResumoLote.Location = new System.Drawing.Point(21, 30);
            this.listViewResumoLote.MultiSelect = false;
            this.listViewResumoLote.Name = "listViewResumoLote";
            this.listViewResumoLote.Size = new System.Drawing.Size(271, 324);
            this.listViewResumoLote.TabIndex = 9;
            this.listViewResumoLote.TabStop = false;
            this.listViewResumoLote.UseCompatibleStateImageBehavior = false;
            this.listViewResumoLote.View = System.Windows.Forms.View.Details;
            this.listViewResumoLote.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewResumoLote_MouseDoubleClick_1);
            // 
            // columnBalcao
            // 
            this.columnBalcao.Text = "Balcão";
            this.columnBalcao.Width = 66;
            // 
            // columnQT
            // 
            this.columnQT.Text = "QT";
            this.columnQT.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // columnImport
            // 
            this.columnImport.Text = "Montante";
            this.columnImport.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnImport.Width = 130;
            // 
            // labelBalcoes
            // 
            this.labelBalcoes.AutoSize = true;
            this.labelBalcoes.Location = new System.Drawing.Point(21, 11);
            this.labelBalcoes.Name = "labelBalcoes";
            this.labelBalcoes.Size = new System.Drawing.Size(45, 13);
            this.labelBalcoes.TabIndex = 10;
            this.labelBalcoes.Text = "Balcões";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(188, 4);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(40, 13);
            this.label1.TabIndex = 11;
            this.label1.Text = "Balcão";
            // 
            // txBalcao
            // 
            this.txBalcao.Location = new System.Drawing.Point(234, 1);
            this.txBalcao.Name = "txBalcao";
            this.txBalcao.Size = new System.Drawing.Size(58, 20);
            this.txBalcao.TabIndex = 12;
            this.txBalcao.TextChanged += new System.EventHandler(this.txBalcao_TextChanged);
            this.txBalcao.Leave += new System.EventHandler(this.txBalcao_Leave);
            // 
            // btnPesquisar
            // 
            this.btnPesquisar.Location = new System.Drawing.Point(298, 1);
            this.btnPesquisar.Name = "btnPesquisar";
            this.btnPesquisar.Size = new System.Drawing.Size(75, 23);
            this.btnPesquisar.TabIndex = 13;
            this.btnPesquisar.Text = "Pesquisar";
            this.btnPesquisar.UseVisualStyleBackColor = true;
            this.btnPesquisar.Click += new System.EventHandler(this.btnPesquisar_Click);
            // 
            // FormBalcao
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.CancelButton = this.buttonCancel;
            this.ClientSize = new System.Drawing.Size(382, 378);
            this.Controls.Add(this.btnPesquisar);
            this.Controls.Add(this.txBalcao);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.labelBalcoes);
            this.Controls.Add(this.listViewResumoLote);
            this.Controls.Add(this.buttonCancel);
            this.Controls.Add(this.buttonOK);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "FormBalcao";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Balcão";
            this.Load += new System.EventHandler(this.FormBalcao_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button buttonOK;
        private System.Windows.Forms.Button buttonCancel;
        private NBIISNET.ListViewBase listViewResumoLote;
        private System.Windows.Forms.ColumnHeader columnBalcao;
        private System.Windows.Forms.ColumnHeader columnQT;
        private System.Windows.Forms.ColumnHeader columnImport;
        private System.Windows.Forms.Label labelBalcoes;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox txBalcao;
        private System.Windows.Forms.Button btnPesquisar;
    }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/FormBalcao.cs
﻿using System;
using System.Data;
using System.Windows.Forms;
using System.Text;

namespace CIFicheirosControlo
{
    public partial class FormBalcao : Form
    {
        protected string m_sLOTEACOM_ID;
        protected Int32 m_origem_id;
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public FormBalcao(CIConfigGP.CIGlobalParameters oParameters, string sLOTEACOM_ID, Int32 origem_id)
        {
            InitializeComponent();
            m_sLOTEACOM_ID = sLOTEACOM_ID;
            m_oParameters = oParameters;
            this.m_origem_id = origem_id;
        }

        private void buttonCancel_Click(object sender, EventArgs e)
        {
            this.Tag = "";
            Dispose();
        }

        private void RefreshListViewBalcoes()
        {
            try
            {
                string sQt;
                decimal dMt;
                string sBalcao;

                listViewResumoLote.MyClear();
                StringBuilder strQuery = new StringBuilder();
                strQuery.Append("select * from  VW_DOCACOM_RESUMO_BALCAO where loteacom_id = " + m_sLOTEACOM_ID);
                strQuery.Append(" AND DOCACOM_ORIGEM_ID = " + this.m_origem_id.ToString());
                if (this.txBalcao.Text.Length > 0)
                {
                    strQuery.Append(" AND DOCACOM_BALCAO = " + txBalcao.Text);
                }
                strQuery.Append(" order by DOCACOM_BALCAO");
                DataSet ds = m_oParameters.DirectSqlDataSet(strQuery.ToString(), "VW_DOCACOM_RESUMO_BALCAO");

                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    sBalcao = oRow["DOCACOM_BALCAO"].ToString().PadLeft(4, '0');
                    sQt = oRow["DOCACOM_QT"].ToString();
                    dMt = Convert.ToDecimal(oRow["DOCACOM_IMPORT"]);
                    ListViewItem oItem = new ListViewItem();
                    oItem.Tag = sBalcao;
                    oItem.Text = sBalcao;
                    oItem.SubItems.Add(sQt.PadLeft(6, ' '));
                    string montanteToInsert = dMt.ToString().Equals("0") ? dMt.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(dMt).PadLeft(16, ' ');
                    //oItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(dMt).PadLeft(16, ' '));
                    oItem.SubItems.Add(montanteToInsert);
                    listViewResumoLote.Items.Add(oItem);
                }
                ds.Dispose();
                labelBalcoes.Text = listViewResumoLote.Items.Count.ToString() + " Balcões";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void FormBalcao_Load(object sender, EventArgs e)
        {
            RefreshListViewBalcoes();
        }


        protected void ProcessaOK()
        {
            this.Tag = "";
            try
            {
                if (listViewResumoLote.SelectedItems.Count != 1)
                {
                    return;
                }
                this.Tag = listViewResumoLote.SelectedItems[0].Tag.ToString();
                Dispose();
            }
            catch
            {
                return;
            }
        }

        private void txBalcao_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txBalcao.Text.Remove(txBalcao.Text.Length - 1);
                txBalcao.Text = "";
            }

            if (txBalcao.Text.Length >= 4)
            {
                txBalcao.MaxLength = 4;
            }
        }

        private void btnPesquisar_Click(object sender, EventArgs e)
        {
            this.FormatarTxtBalcao();
            RefreshListViewBalcoes();
        }

        private void buttonOK_Click(object sender, EventArgs e)
        {
            ProcessaOK();
        }

        private void listViewResumoLote_MouseDoubleClick_1(object sender, MouseEventArgs e)
        {
            ProcessaOK();
        }

        private void txBalcao_Leave(object sender, EventArgs e)
        {
            this.FormatarTxtBalcao();
        }

        private void FormatarTxtBalcao()
        {
            txBalcao.Text = txBalcao.Text.Trim().PadLeft(4, '0');
        }
    }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/FormBalcao.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAQAAAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAAAAAAAAAAACIBAAAAA
        AAAAAAAAAAAAAAAINAAAAAAAAAAAAAAAAAAAj4NAAAAAAAAAAAAAAAAAAAj4NAiIiIiIiIiIiIiIAA+A
        j4NAiIiIiIiIiqiIiIAPiAiANAAP/////////4iAD4gAiANAAIiIiIiIiIj4gA+ICAi4MwgPuIiIiIiI
        +IAPiAiAj/gIC/v7+IiIiPiAD4gIgDjwiA+/v7+IiIj4gA+ICIAACID7+/v7+4iI+IAPiAiICLgPvw8P
        v7+IiPiAD4gIiPAA+wAAAAv7+Ij4gA+ICIi/v78Lu7sPv7iI+IAPiAiI+/v7AAAAC/v4iPiAD4gIiL+/
        v78LD7+/uIj4gA+ICIj7+/vwu7D7+/iI+IAPiAiIv7AAC7C7AAAACPiAD4gIiIvwu7sAC7u7Mwj4gA+I
        CIiPsAAAv7AAAAAI+IAPiAiIiPv7+/v7+/iIiPiAD4gIiIiIj7+/v7+IiIj4gA+IAAAAAAAAAAAAAAAA
        +IAPiIiIiIiIiIiIiIiIiIiAD4iIiIiIiIiIiIiIiIiIgAD//////////////////wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////j////wf///8D////Af///4AA
        AAOAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAcAAAAP//////////w==
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIFicheirosControlo/ImportarForm.Designer.cs
﻿using CIConfigGlobalParameters;

namespace CIFicheirosControlo
{
    partial class ImportarForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ImportarForm));
            this.ColumnTimer = new System.Windows.Forms.ColumnHeader();
            this.ColumnDescricao = new System.Windows.Forms.ColumnHeader();
            this.edCounter = new System.Windows.Forms.TextBox();
            this.btParar = new System.Windows.Forms.Button();
            this.listViewMsgImportar = new System.Windows.Forms.ListView();
            this.columnHeader1 = new System.Windows.Forms.ColumnHeader();
            this.columnHeader2 = new System.Windows.Forms.ColumnHeader();
            this.SuspendLayout();
            // 
            // ColumnTimer
            // 
            this.ColumnTimer.Text = "Timer";
            this.ColumnTimer.Width = 80;
            // 
            // ColumnDescricao
            // 
            this.ColumnDescricao.Text = "Descrição";
            this.ColumnDescricao.Width = 350;
            // 
            // edCounter
            // 
            this.edCounter.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.edCounter.Enabled = false;
            this.edCounter.Location = new System.Drawing.Point(148, 12);
            this.edCounter.Name = "edCounter";
            this.edCounter.Size = new System.Drawing.Size(176, 20);
            this.edCounter.TabIndex = 13;
            this.edCounter.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // btParar
            // 
            this.btParar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.btParar.Location = new System.Drawing.Point(16, 220);
            this.btParar.Name = "btParar";
            this.btParar.Size = new System.Drawing.Size(456, 24);
            this.btParar.TabIndex = 8;
            this.btParar.Text = "&Parar / Sair";
            this.btParar.Click += new System.EventHandler(this.btParar_Click);
            // 
            // listViewMsgImportar
            // 
            this.listViewMsgImportar.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.listViewMsgImportar.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader1,
            this.columnHeader2});
            this.listViewMsgImportar.GridLines = true;
            this.listViewMsgImportar.Location = new System.Drawing.Point(16, 48);
            this.listViewMsgImportar.Name = "listViewMsgImportar";
            this.listViewMsgImportar.Size = new System.Drawing.Size(456, 160);
            this.listViewMsgImportar.TabIndex = 14;
            this.listViewMsgImportar.UseCompatibleStateImageBehavior = false;
            this.listViewMsgImportar.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Timer";
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Mensagem";
            this.columnHeader2.Width = 389;
            // 
            // ImportarForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(496, 256);
            this.Controls.Add(this.listViewMsgImportar);
            this.Controls.Add(this.edCounter);
            this.Controls.Add(this.btParar);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "ImportarForm";
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "ImportarForm";
            this.Activated += new System.EventHandler(this.ImportarForm_Activated);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        internal System.Windows.Forms.ColumnHeader ColumnTimer;
        internal System.Windows.Forms.ColumnHeader ColumnDescricao;
        internal System.Windows.Forms.TextBox edCounter;
        internal System.Windows.Forms.Button btParar;
        private System.Windows.Forms.ListView listViewMsgImportar;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
    }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/ImportarForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Threading;

using CIConfigGlobalParameters;
using CIFicheiro;

namespace CIFicheirosControlo
{

    public partial class ImportarForm : Form , CIComumInterface
    {
        CIConfigGP.CIGlobalParameters m_oParameters;
        public CIFicheiro.Ficheiro m_oFile;
        string m_sFileName;
        
        public ImportarForm(CIConfigGP.CIGlobalParameters oParameters, string sFileName)
        {
            m_oParameters = oParameters;
            m_sFileName = sFileName;
            InitializeComponent();

        }

        public void ErrorMessage(string sMessage) 
        {
            addMsg2Lista(sMessage);
            refreshEcra();
        }
        public void WarningMessage(string sMessage)
        {
            addMsg2Lista(sMessage);
            refreshEcra();
        }
        public void InfoMessage(string sMessage, string sHeader)
        {
            addMsg2Lista(sMessage);
            refreshEcra();
        }
        public void InfoMessageCount(string sMessage)
        {
            edCounter.Text = sMessage;
            refreshEcra();
        }

        public void addMsg2Lista(string sMsg)
        {
            ListViewItem olvItem = listViewMsgImportar.Items.Add(DateTime.Now.ToString(m_oParameters.TimeSysFmt));
            olvItem.SubItems.Add(sMsg);
            olvItem.EnsureVisible();
        }

        public void refreshEcra()
        {
            System.Windows.Forms.Application.DoEvents();
        }

        public void ImportarFile(string sFileName)
        {
            m_oFile.processaFile(sFileName, "Manual");
        }
        
        private void btParar_Click(object sender, EventArgs e)
        {
            if (m_oFile.m_bIsRunning)
                m_oFile.m_bIsRunning = false;
            else
                Dispose(); 
        }

        bool bFirst = true;// devido ao activate que inicia 2 vezes
        private void ImportarForm_Activated(object sender, EventArgs e)
        {
            if (bFirst)
            {
                bFirst = false;
                
                ImportarFile(m_sFileName);
                
                //MessageBox.Show("Ficheiro importado!!!");
                //Dispose();
            }
            
        }

    }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/ImportarForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAQAAAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAACIgAAAAAAAAAAAAAAAAACIgAzMyqoAAAAAAAAAAAAIiAzMzMqqqgAAAAAAAAAA
        iIDMzMzKqqqgAIiIiIiIiIgJzMzMyqqqqgCIiIiIiIiAmZmczMqqqqZggAAAAAAAAJmZmZzKqqZmYID/
        3d//ZmCZmZmZqmZmZmCA/93f/2ZgmZmZm7ZmZmZggA8NDw8GAJmZmbu+ZmZmYID/3d//ZmCZmZu77uZm
        ZmCA/93f/2ZvCZu7u+7uZmYAgP/d3/9mb/C7u7vu7uZgAIAPDQ8PBg8PC7u+7u7uAACA/93f/2Zv/8AL
        vu7uAAAAgP/d3/9mb//MwAAAAPAAAID/3d//////zM//mZ/wAACADw0PDw8PDwwPDwkPAAAAgP/d3///
        ///Mz/+Zn/AAAID/3d//////zM//mZ/wAACA/93f/////8zP/5mf8AAAgA8PDw8PDw8MDw8JDwAAAID/
        ////////////mZ/wAACA/////////////5mf8AAAgP////////////+Zn/AAAIAPDw8PDw8PDw8PDw8A
        AACA////////////////8AAAgP////////////////AAAID////////////////wAAAA////////////
        ////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wA///wAD//4AAf/8AADAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD4AAAA+AAAAP/////w==
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIFicheirosControlo/ImportarFormACOM.cs
﻿using System;
using System.Collections.Generic;
using System.Text;

namespace CIFicheirosControlo
{
    class ImportarFormACOM : ImportarForm
    {
        public ImportarFormACOM(CIConfigGP.CIGlobalParameters oParameters, string sFileName)
            : base(oParameters, sFileName)
        {
            m_oFile = new CIFicheiro.FicheiroAcom(this, oParameters);
        }
         

        //public override void ImportarFile(string sFileName)
        //{
        //    m_oFile.processaFile(sFileName);
        //}

    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ImportarFormENVM.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using CIFicheiro;

namespace CIFicheirosControlo
{
    class ImportarFormENVM : ImportarForm
    {
        public ImportarFormENVM(CIConfigGP.CIGlobalParameters oParameters, string sFileName)
            : base(oParameters, sFileName)
        {
            m_oFile = new CIFicheiro.FicheiroEnvm(this, oParameters);
        }

        //public override void ImportarFile(string sFileName)
        //{
        //    m_oFile.processaFile(sFileName);
        //}

    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportDet.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIFicheirosControlo
{
    abstract class ListViewImportDet
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public long m_lLoteId;
        public long m_lDetID;
        public string m_sDocChaveH;
        public string m_sDocChaveHext;

        public long m_lDocID;

        //SDCIM 7 - Adição de coluna DOCENVM Origem
        public Int16 m_iDocOrigemID = 0;
        public String m_sDocOrigemD = String.Empty;
        //SDCIM 7 - Adição de coluna DOCENVM Origem 

        public abstract ListViewItem makeListViewDet(string sDateFormat, string sDateTimeFormat);
        public abstract string getTipoDet();

        public ListViewImportDet()
        {
            m_lDetID = 0;
            m_lLoteId = 0;
            m_sDocChaveH = "";
            m_sDocChaveHext = "";

            this.m_oParameters = null;

        }
        public ListViewImportDet(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
        {
            m_lDetID = 0;
            m_lLoteId = 0;
            m_sDocChaveH = "";
            m_sDocChaveHext = "";

            this.m_oParameters = oParameters;
        }

    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportDetAcom.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIFicheirosControlo
{
    class ListViewImportDetAcom : ListViewImportDet
    { 
        string m_sDocAcomRefarq;
        string m_sDocAcomRefarq2;
        int m_iDocAcomBalcao;
        string m_sDocAcomBalcaoDescricao;
        int m_iDocAcomCodana;
        string m_sDocAcomCodana;
        double m_dDocAcomImport;
        string m_sDocAcomLinhaOpt; 

        public ListViewImportDetAcom(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            :base(oRow, oParameters)
        {
            m_lDetID = Convert.ToInt64(oRow["DOCACOM_ID"]);
            m_lLoteId = Convert.ToInt64(oRow["LOTEACOM_ID"]);

            if (oRow["DOC_ID"] == DBNull.Value)
            {
                m_lDocID = 0;
            }
            else
            {
                m_lDocID = Convert.ToInt64(oRow["DOC_ID"]);
            }

            m_sDocAcomRefarq = oRow["DOCACOM_REFARQ"].ToString();
            m_sDocAcomRefarq2 = oRow["DOCACOM_REFARQ2"].ToString();
            m_iDocAcomBalcao = Convert.ToInt16(oRow["DOCACOM_BALCAO"]);
            m_iDocAcomCodana = Convert.ToInt16(oRow["DOCACOM_CODANA"]);
            m_sDocAcomCodana = oRow["DOCACOM_CODANA"].ToString() + " - " + oRow["ESTADO_DESC"].ToString();
            m_dDocAcomImport = Convert.ToDouble(oRow["DOCACOM_IMPORT"]);
            m_sDocAcomLinhaOpt = oRow["DOCACOM_LINHAOPT"].ToString();
            m_sDocChaveH = oRow["DOCACOM_CHAVEH"].ToString();
            m_sDocChaveHext = oRow["DOCACOM_CHAVEHEXT"].ToString();

            //SDCIM 7 - Adição de coluna DOCACOM Origem
            this.m_sDocAcomBalcaoDescricao = oRow["BALCAO_DESC"].ToString();
            base.m_iDocOrigemID = Convert.ToInt16(oRow["DOCACOM_ORIGEM_ID"]);
            base.m_sDocOrigemD = oRow["DOCACOM_ORIGEM_D"].ToString();
            //SDCIM 7 - Adição de coluna DOCACOM Origem 
        }

        public override ListViewItem makeListViewDet(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lDetID.ToString();
            olvItem.SubItems.Add(m_lLoteId.ToString());
            olvItem.SubItems.Add(m_lDocID.ToString());
            //SDCIM 7 - Adição de coluna DOCACOM Origem
            olvItem.SubItems.Add(base.m_sDocOrigemD);
            //SDCIM 7 - Adição de coluna DOCACOM Origem
            olvItem.SubItems.Add(m_sDocAcomRefarq);
            olvItem.SubItems.Add(m_sDocAcomRefarq2);
            olvItem.SubItems.Add(m_iDocAcomBalcao.ToString("0000") + " - " + m_sDocAcomBalcaoDescricao);
            olvItem.SubItems.Add(m_sDocAcomCodana);
            string montanteToInsert = this.m_dDocAcomImport.ToString().Equals("0") ? this.m_dDocAcomImport.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dDocAcomImport).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDocAcomImport).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sDocAcomLinhaOpt);
            olvItem.SubItems.Add(m_sDocChaveH);
            olvItem.SubItems.Add(m_sDocChaveHext);
                      
            return olvItem;
        }


        public override string getTipoDet()
        {
            return "ACOM";
        }

    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportDetEnvm.cs
﻿using System;
using System.Data;
using System.Windows.Forms;

namespace CIFicheirosControlo
{
    class ListViewImportDetEnvm : ListViewImportDet
    {
        string m_sDocEnvmZona5;
        string m_sDocEnvmZona4;
        string m_sDocEnvmZona3;
        double m_dDocEnvmZona2;
        string m_sDocEnvmZona1;        
        string m_sDocEnvmRefarq;
        int m_iDocEnvmAnomal;
        string m_sDocEnvmAnomal;
        int m_iDocEnvmImgQual;
        int m_iDocEnvmCodana;
        string m_sDocEnvmReqDoc;
        int m_iDocEnvmDuplicado;
        string m_sDocEnvmServadic;             

        public ListViewImportDetEnvm(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            :base(oRow, oParameters)
        {
            m_lDetID = Convert.ToInt64(oRow["DOCENV_ID"]);
            m_lLoteId = Convert.ToInt64(oRow["LOTEENV_ID"]);

            if (oRow["DOC_ID"] == DBNull.Value)
            {
                m_lDocID = 0;
            }
            else
            {
                m_lDocID = Convert.ToInt64(oRow["DOC_ID"]);
            }

            m_sDocEnvmZona5 = oRow["DOCENV_ZONA5"].ToString();
            m_sDocEnvmZona4 = oRow["DOCENV_ZONA4"].ToString();
            m_sDocEnvmZona3 = oRow["DOCENV_ZONA3"].ToString();
            m_dDocEnvmZona2 = Convert.ToDouble(oRow["DOCENV_ZONA2"]);
            m_sDocEnvmZona1 = oRow["DOCENV_ZONA1"].ToString();
            m_sDocEnvmRefarq = oRow["DOCENV_REFARQ"].ToString();
            m_sDocChaveH = oRow["DOCENV_CHAVEH"].ToString();
            m_sDocChaveHext = oRow["DOCENV_CHAVEHEXT"].ToString();
            m_iDocEnvmImgQual = Convert.ToInt16(oRow["DOCENV_IMGQUAL"]);
            m_iDocEnvmAnomal = Convert.ToInt16(oRow["DOCENV_ANOMAL"]);
            m_sDocEnvmAnomal = oRow["DOCENV_ANOMAL"].ToString() + " - " + oRow["ESTADO_DESC"].ToString();
            m_iDocEnvmCodana = Convert.ToInt16(oRow["DOCENV_CODANA"]);
            m_sDocEnvmReqDoc = oRow["DOCENV_REQDOC"].ToString();
            m_iDocEnvmDuplicado = Convert.ToInt16(oRow["DOCENV_DUPLICADO"]);
            m_sDocEnvmServadic = oRow["DOCENV_SERVADIC"].ToString();
           
            //SDCIM 7 - Adição de coluna DOCENVM Origem
            this.m_iDocOrigemID = Convert.ToInt16(oRow["DOCENV_ORIGEM_ID"]);
            this.m_sDocOrigemD = oRow["DOCENV_ORIGEM_D"].ToString();
            //SDCIM 7 - Adição de coluna DOCENVM Origem 
        }

        public override ListViewItem makeListViewDet(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lDetID.ToString();
            olvItem.SubItems.Add(m_lLoteId.ToString());
            olvItem.SubItems.Add(m_lDocID.ToString());
            //SDCIM 7 - Adição de coluna DOCENVM Origem 
            olvItem.SubItems.Add(m_sDocOrigemD);
            //SDCIM 7 - Adição de coluna DOCENVM Origem 
            olvItem.SubItems.Add(m_sDocEnvmZona5);
            olvItem.SubItems.Add(m_sDocEnvmZona4);
            olvItem.SubItems.Add(m_sDocEnvmZona3);
            string montanteToInsert = this.m_dDocEnvmZona2.ToString().Equals("0") ? this.m_dDocEnvmZona2.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dDocEnvmZona2).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDocEnvmZona2).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_sDocEnvmZona1);
            olvItem.SubItems.Add(m_sDocEnvmRefarq);            
            olvItem.SubItems.Add(m_sDocEnvmAnomal);
            olvItem.SubItems.Add(m_iDocEnvmDuplicado.ToString());
            olvItem.SubItems.Add(m_iDocEnvmCodana.ToString());
            olvItem.SubItems.Add(m_sDocEnvmReqDoc);
            olvItem.SubItems.Add(m_sDocEnvmServadic);
            olvItem.SubItems.Add(m_iDocEnvmImgQual.ToString());
            olvItem.SubItems.Add(m_sDocChaveH);
            olvItem.SubItems.Add(m_sDocChaveHext);
            
            return olvItem;
        }

        public override string getTipoDet()
        {
            return "ENVM";
        }

    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportFich.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIFicheirosControlo
{
    public abstract class ListViewImportFich
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public string m_sFich_nome;
        public int m_iFich_banco;
        public int m_iFich_nseq;
        public DateTime m_dtFich_data;
        public string m_sFich_refcmp;
        public int m_iFich_totreg;
        public double m_dFich_monttotal;
        public int m_iFich_ultimo;
        public DateTime m_dtFich_timer;

        public long m_lFichID;
        public int m_iFichTipo;
        public int m_iFichStatus;
        public string m_sFichStatusDesc;
        public string m_sFullPath;
        public string m_sErro;

        //public abstract ListViewItem makeListViewFich(string sDateFormat, string sDateTimeFormat);
        public abstract string getTipoFich();
        
        public ListViewImportFich()
        {
            m_lFichID = 0;
            m_iFichTipo = 0;
            m_iFichStatus = 0;
            m_sFichStatusDesc = "";
            m_sFullPath = "";
            m_sErro = "";
            
            this.m_oParameters = null;
        }
        public ListViewImportFich(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
        {
            this.m_oParameters = oParameters;

            m_lFichID = Convert.ToInt64(oRow["FICH_ID"]);
            m_iFichTipo = Convert.ToInt16(oRow["FICHTIPO_ID"]);
            m_iFichStatus = Convert.ToInt16(oRow["FICH_STATUS"]);
            m_sFichStatusDesc = oRow["FICHEIROSTAT_DESC"].ToString();
            m_sFich_nome = oRow["FICH_NOME"].ToString();
            m_iFich_banco = Convert.ToInt16(oRow["FICH_BANCO"]);
            m_iFich_nseq = Convert.ToInt16(oRow["FICH_NSEQ"]);
            m_dtFich_data = Convert.ToDateTime(oRow["FICH_DATA"]);
            m_sFich_refcmp = oRow["FICH_REFCMP"].ToString();
            m_iFich_totreg = Convert.ToInt32(oRow["FICH_TOTREG"]);
            m_dFich_monttotal = Convert.ToDouble(oRow["FICH_MONTTOTAL"]);
            m_iFich_ultimo = Convert.ToInt16(oRow["FICH_ULTIMO"]);
            m_dtFich_timer = Convert.ToDateTime(oRow["FICH_TIMER"]);
            m_sFullPath = oRow["FICH_FULLPATHNAME"].ToString();
            m_sErro = oRow["FICH_ERRO"].ToString();

        }

        public ListViewItem makeListViewFich(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lFichID.ToString();
            olvItem.SubItems.Add(m_iFichTipo.ToString());
            olvItem.SubItems.Add(m_sFich_nome);
            olvItem.SubItems.Add(m_iFichStatus.ToString() + " " + m_sFichStatusDesc);
            olvItem.SubItems.Add(m_dtFich_data.ToString());//falta converter
            olvItem.SubItems.Add(m_iFich_nseq.ToString());
            olvItem.SubItems.Add(m_iFich_banco.ToString());
            olvItem.SubItems.Add(m_sFich_refcmp);
            olvItem.SubItems.Add(m_iFich_totreg.ToString());
            string montanteToInsert = m_dFich_monttotal.ToString().Equals("0") ? m_dFich_monttotal.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(m_dFich_monttotal).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dFich_monttotal).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_iFich_ultimo.ToString());
            olvItem.SubItems.Add(m_dtFich_timer.ToString());//falta converter
            olvItem.SubItems.Add(m_sFullPath);
            olvItem.SubItems.Add(m_sErro);
            return olvItem;
        }


    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportFichAcom.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIFicheirosControlo
{
    public class ListViewImportFichAcom : ListViewImportFich
    {

        public ListViewImportFichAcom(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            :base(oRow, oParameters)
        {
        }

        public override string getTipoFich()
        {
            return "ACOM";
        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportFichEnvm.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIFicheirosControlo
{
    public class ListViewImportFichEnvm : ListViewImportFich
    {

        public ListViewImportFichEnvm(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            :base(oRow, oParameters)
        {
        }

        public override string getTipoFich()
        {
            return "ENVM";
        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportLote.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIFicheirosControlo
{
    abstract class ListViewImportLote
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public long m_lLoteId;
        public long m_lFichId;
        public int m_iLoteStatus;
        public string m_sLoteStatusDesc;

        public abstract ListViewItem makeListViewLote(string sDateFormat, string sDateTimeFormat);
        public abstract string getTipoLote();

        public ListViewImportLote()
        {
            m_lLoteId = 0;
            m_lFichId = 0;
            m_iLoteStatus = 0;
            m_sLoteStatusDesc = "";
            
            this.m_oParameters = null;
        }

        public ListViewImportLote(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
        {
            m_lLoteId = 0;
            m_lFichId = 0;
            m_iLoteStatus = 0;
            m_sLoteStatusDesc = "";

            this.m_oParameters = oParameters;
        }

    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportLoteAcom.cs
﻿using System;
using System.Data;
using System.Windows.Forms;



namespace CIFicheirosControlo
{
    class ListViewImportLoteAcom : ListViewImportLote
    {
        long m_lLoteAcomNumero;
        int m_iLoteAcomProduto;
        DateTime m_dtLoteAcomDtProc;
        int m_iLoteAcomTotReg;
        double m_dLoteAcomMontTotal;
        String m_OrigemDesc = String.Empty;
        public Int32 m_OrigemID = 0;
        public ListViewImportLoteAcom(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            : base(oRow, oParameters)
        {
            m_lLoteId = Convert.ToInt64(oRow["LOTEACOM_ID"]);
            m_lFichId = Convert.ToInt64(oRow["FICH_ID"]);
            m_lLoteAcomNumero = Convert.ToInt64(oRow["LOTEACOM_NUMERO"]);
            m_iLoteAcomProduto = Convert.ToInt16(oRow["LOTEACOM_PRODUTO"]);
            m_dtLoteAcomDtProc = Convert.ToDateTime(oRow["LOTEACOM_DATAPROC"]);
            m_iLoteAcomTotReg = Convert.ToInt16(oRow["LOTEACOM_TOTREG"]);
            m_dLoteAcomMontTotal = Convert.ToDouble(oRow["LOTEACOM_MONTTOTAL"]);
            m_iLoteStatus = Convert.ToInt16(oRow["LOTESTATUS_ID"]);
            m_sLoteStatusDesc = oRow["LOTESTAT_DESC"].ToString();
            this.m_OrigemDesc = oRow["REMORI_DESC"].ToString();
            this.m_OrigemID = Convert.ToInt32(oRow["DOCACOM_ORIGEM_ID"]);
        }

        public override ListViewItem makeListViewLote(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lLoteId.ToString();
            olvItem.SubItems.Add(m_lFichId.ToString());
            olvItem.SubItems.Add(m_lLoteAcomNumero.ToString());
            olvItem.SubItems.Add(m_iLoteStatus.ToString() + " " + m_sLoteStatusDesc);
            olvItem.SubItems.Add(this.m_OrigemDesc);
            olvItem.SubItems.Add(m_iLoteAcomProduto.ToString());
            olvItem.SubItems.Add(m_dtLoteAcomDtProc.ToString(m_oParameters.DateFormat));
            olvItem.SubItems.Add(m_iLoteAcomTotReg.ToString().PadLeft(5, ' '));
            string montanteToInsert = this.m_dLoteAcomMontTotal.ToString().Equals("0") ? this.m_dLoteAcomMontTotal.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dLoteAcomMontTotal).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dLoteAcomMontTotal).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);

            return olvItem;
        }


        public override string getTipoLote()
        {
            return "ACOM";
        }
    }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/ListViewImportLoteEnvm.cs
﻿using System;
using System.Data;
using System.Windows.Forms;

namespace CIFicheirosControlo
{
    class ListViewImportLoteEnvm : ListViewImportLote
    {
        long m_lREM_ID;
        long m_lLoteEnvmNumero;
        int m_iLoteEnvmCodBal;
        string m_sLoteEnvmDescBal;
        string m_sLoteEnvmNREM;
        DateTime m_dtLoteEnvmDtRem;
        int m_iLoteEnvmTCAP;
        int m_iLoteEnvmTREM;
        double m_dLoteEnvmMontante;
        long m_lLoteEnvmNrDocum;
        int m_iLoteEnvmAnomal;
        string m_sLoteEnvmChaveH;
        string m_sLoteEnvmChaveHext;
        int m_iLoteEnvmValReq;
        string m_sLoteEnvmSERVADIC;
        double m_dLoteEnvmMontapu;
        int m_iLoteEnvmTotReg;
        double m_dLoteEnvmMontTotal;

        int m_iLoteEnvmCGDError;
        String m_OrigemDesc = string.Empty;
        public String m_sLoteEnv_DescAnomalia { get; set; }

        public ListViewImportLoteEnvm(DataRow oRow, CIConfigGP.CIGlobalParameters oParameters)
            :base(oRow, oParameters)
        {
            m_lLoteId = Convert.ToInt64(oRow["LOTEENV_ID"]);
            m_lFichId = Convert.ToInt64(oRow["FICH_ID"]);
            if (oRow["REMIN_ID"] != DBNull.Value)
            {
                this.m_lREM_ID = Convert.ToInt64(oRow["REMIN_ID"]);
            }
            else
            {
                this.m_lREM_ID = 0;
            }
            m_sLoteEnvmNREM = oRow["LOTEENV_NREM"].ToString();
            m_lLoteEnvmNumero = Convert.ToInt64(oRow["LOTEENV_NUMERO"]);
            m_iLoteEnvmCodBal = Convert.ToInt16(oRow["LOTEENV_CODBAL"]);
            m_dtLoteEnvmDtRem = Convert.ToDateTime(oRow["LOTEENV_DTREM"]);
            m_iLoteEnvmTCAP = Convert.ToInt16(oRow["LOTEENV_TCAP"]);
            m_iLoteEnvmTREM = Convert.ToInt16(oRow["LOTEENV_TREM"]);
            m_dLoteEnvmMontante = Convert.ToDouble(oRow["LOTEENV_MONTANTE"]);
            m_lLoteEnvmNrDocum = Convert.ToInt64(oRow["LOTEENV_NRDOCUM"]);
            m_iLoteEnvmCGDError = Convert.ToInt16(oRow["LOTEENV_CGDERROR"]);
            m_iLoteEnvmAnomal = Convert.ToInt16(oRow["LOTEENV_ANOMAL"]);
            m_sLoteEnvmChaveH = oRow["LOTEENV_CHAVEH"].ToString();
            m_sLoteEnvmChaveHext = oRow["LOTEENV_CHAVEHEXT"].ToString();
            m_iLoteEnvmValReq = Convert.ToInt16(oRow["LOTEENV_VALREQ"]);
            m_sLoteEnvmSERVADIC = oRow["LOTEENV_SERVADIC"].ToString();
            m_dLoteEnvmMontapu = Convert.ToDouble(oRow["LOTEENV_MONTAPU"]);
            m_iLoteEnvmTotReg = Convert.ToInt16(oRow["LOTEENV_TOTREG"]);
            m_dLoteEnvmMontTotal = Convert.ToDouble(oRow["LOTEENV_MONTTOTAL"]);
            m_iLoteStatus = Convert.ToInt16(oRow["LOTESTATUS_ID"]);
            m_sLoteStatusDesc = oRow["LOTESTAT_DESC"].ToString();
            this.m_OrigemDesc = oRow["REMORI_DESC"].ToString();
            this.m_sLoteEnvmDescBal = oRow["BALCAO_DESC"].ToString();
            this.m_sLoteEnv_DescAnomalia = oRow["LOTEENV_ANOMAL_D"].ToString();
        }

        public override ListViewItem makeListViewLote(string sDateFormat, string sDateTimeFormat)
        {
            ListViewItem olvItem = new ListViewItem();

            olvItem.Text = m_lLoteId.ToString();
            olvItem.SubItems.Add(m_lFichId.ToString());
            olvItem.SubItems.Add(m_lLoteEnvmNumero.ToString());
            olvItem.SubItems.Add(this.m_OrigemDesc);
            olvItem.SubItems.Add(m_iLoteStatus.ToString() + " " + m_sLoteStatusDesc);
            olvItem.SubItems.Add(m_iLoteEnvmCodBal.ToString("0000") + " - " + m_sLoteEnvmDescBal);
            olvItem.SubItems.Add(m_lREM_ID.ToString());
            olvItem.SubItems.Add(m_sLoteEnvmNREM);
            olvItem.SubItems.Add(m_dtLoteEnvmDtRem.ToString(m_oParameters.DateFormat));
            string montanteToInsert = this.m_dLoteEnvmMontante.ToString().Equals("0") ? this.m_dLoteEnvmMontante.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dLoteEnvmMontante).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dLoteEnvmMontante).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert);
            olvItem.SubItems.Add(m_iLoteEnvmTREM.ToString());
            olvItem.SubItems.Add(m_iLoteEnvmTCAP.ToString());
            olvItem.SubItems.Add(m_lLoteEnvmNrDocum.ToString().PadLeft(5, ' '));
            olvItem.SubItems.Add(m_iLoteEnvmTotReg.ToString().PadLeft(5, ' '));
            string montanteToInsert2 = this.m_dLoteEnvmMontTotal.ToString().Equals("0") ? this.m_dLoteEnvmMontTotal.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dLoteEnvmMontTotal).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dLoteEnvmMontTotal).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert2);
            olvItem.SubItems.Add(m_iLoteEnvmCGDError.ToString());
            olvItem.SubItems.Add(m_iLoteEnvmAnomal.ToString() + " " + this.m_sLoteEnv_DescAnomalia);
            string montanteToInsert3 = this.m_dLoteEnvmMontapu.ToString().Equals("0") ? this.m_dLoteEnvmMontapu.ToString("0.00") : NBiis.Generic.GenericFunctions.ToMoney(this.m_dLoteEnvmMontapu).PadLeft(16, ' ');
            //olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dLoteEnvmMontapu).PadLeft(16, ' '));
            olvItem.SubItems.Add(montanteToInsert3);
            olvItem.SubItems.Add(m_sLoteEnvmChaveH);
            olvItem.SubItems.Add(m_sLoteEnvmChaveHext);
            olvItem.SubItems.Add(m_iLoteEnvmValReq.ToString());
            olvItem.SubItems.Add(m_sLoteEnvmSERVADIC);
            olvItem.SubItems.Add(this.m_OrigemDesc);
            return olvItem;
        }

        public override string getTipoLote()
        {
            return "ENVM";
        }
    }
}


// FILE: SDCIM/ModusCI/CIFicheirosControlo/MostraImagem.Designer.cs
﻿namespace MDIsControlo
{
    partial class MostraImagem
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.labelErro = new System.Windows.Forms.Label();
            this.pictImgBack = new System.Windows.Forms.PictureBox();
            this.picImgFront = new System.Windows.Forms.PictureBox();
            ((System.ComponentModel.ISupportInitialize)(this.pictImgBack)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picImgFront)).BeginInit();
            this.SuspendLayout();
            // 
            // labelErro
            // 
            this.labelErro.AutoSize = true;
            this.labelErro.Font = new System.Drawing.Font("Arial", 36F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelErro.ForeColor = System.Drawing.Color.Red;
            this.labelErro.Location = new System.Drawing.Point(75, 235);
            this.labelErro.Name = "labelErro";
            this.labelErro.Size = new System.Drawing.Size(454, 56);
            this.labelErro.TabIndex = 6;
            this.labelErro.Text = "ERRO NA IMAGEM";
            this.labelErro.Visible = false;
            // 
            // pictImgBack
            // 
            this.pictImgBack.Location = new System.Drawing.Point(55, 265);
            this.pictImgBack.Name = "pictImgBack";
            this.pictImgBack.Size = new System.Drawing.Size(489, 249);
            this.pictImgBack.TabIndex = 5;
            this.pictImgBack.TabStop = false;
            // 
            // picImgFront
            // 
            this.picImgFront.Location = new System.Drawing.Point(55, 10);
            this.picImgFront.Name = "picImgFront";
            this.picImgFront.Size = new System.Drawing.Size(489, 249);
            this.picImgFront.TabIndex = 4;
            this.picImgFront.TabStop = false;
            // 
            // MostraImagem
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(601, 533);
            this.Controls.Add(this.labelErro);
            this.Controls.Add(this.pictImgBack);
            this.Controls.Add(this.picImgFront);
            this.Name = "MostraImagem";
            this.Text = "MostraImagem";
            this.Load += new System.EventHandler(this.MostraImagem_Load);
            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.MostraImagem_FormClosed);
            ((System.ComponentModel.ISupportInitialize)(this.pictImgBack)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picImgFront)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label labelErro;
        private System.Windows.Forms.PictureBox pictImgBack;
        private System.Windows.Forms.PictureBox picImgFront;
    }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/MostraImagem.cs
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using System.IO;

namespace MDIsControlo
{
    public partial class MostraImagem : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        string m_sDOCMDI_ID;

        public MostraImagem()
        {
            InitializeComponent();
        }

        public MostraImagem(CIConfigGP.CIGlobalParameters oParameters, string sDOCMDI_ID)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_sDOCMDI_ID = sDOCMDI_ID;
        }

        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }

        public string getImgFrente(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where DOCMDI_ID= " + m_sDOCMDI_ID + " and IMG_SIDE = 0";// and IMG_TYPE= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select top 1 IMG_IMAGE from dbo.IMAGEM" + sWhereClauseFront);

            sFileNameFrente = m_oParameters.GetTempFileName("IMGMDIFront") + ".jpg";
            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        public string getImgBack(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where DOCMDI_ID= " + m_sDOCMDI_ID + " and IMG_SIDE = 1 ";// and IMG_TYPE= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select top 1 IMG_IMAGE from dbo.IMAGEM" + sWhereClauseFront);

            sFileNameFrente = m_oParameters.GetTempFileName("IMGMDIBack") + ".jpg";
            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        private void MostraImagem_Load(object sender, EventArgs e)
        {
            string sFileName;
            try
            {
                //parte da frente
                sFileName = getImgFrente(m_oParameters);
                picImgFront.Image = System.Drawing.Image.FromFile(sFileName);
                picImgFront.SizeMode = PictureBoxSizeMode.StretchImage;

                //parte de tras
                sFileName = getImgBack(m_oParameters);
                pictImgBack.Image = System.Drawing.Image.FromFile(sFileName);
                pictImgBack.SizeMode = PictureBoxSizeMode.StretchImage;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 11);
                labelErro.Visible = true;   
            }
        }

        private void MostraImagem_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                if (picImgFront.Image != null) picImgFront.Image.Dispose();
                if (pictImgBack.Image != null) pictImgBack.Image.Dispose();

                picImgFront.Image = null;
                pictImgBack.Image = null;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 12);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
     }
}

// FILE: SDCIM/ModusCI/CIFicheirosControlo/MostraImagem.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIReports/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIReports/Reports/AcomResumo.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIReports.Reports {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;
    
    
    public class AcomResumo : ReportClass {
        
        public AcomResumo() {
        }
        
        public override string ResourceName {
            get {
                return "AcomResumo.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }
        
        public override string FullResourceName {
            get {
                return "CIReports.Reports.AcomResumo.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection2 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection2 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[5];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[6];
            }
        }
    }
    
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedAcomResumo : Component, ICachedReport {
        
        public CachedAcomResumo() {
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }
        
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            AcomResumo rpt = new AcomResumo();
            rpt.Site = this.Site;
            return rpt;
        }
        
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/Reports/AcomResumo.sql
select * from VW_REPORT_ACOM_RESUMO
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by FICH_DATA


// FILE: SDCIM/ModusCI/CIReports/Reports/FaturacaoMensal.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIReports.Reports {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;
    
    
    public class FaturacaoMensal : ReportClass {
        
        public FaturacaoMensal() {
        }
        
        public override string ResourceName {
            get {
                return "FaturacaoMensal.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }
        
        public override string FullResourceName {
            get {
                return "CIReports.Reports.FaturacaoMensal.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
    }
    
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedFaturacaoMensal : Component, ICachedReport {
        
        public CachedFaturacaoMensal() {
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }
        
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            FaturacaoMensal rpt = new FaturacaoMensal();
            rpt.Site = this.Site;
            return rpt;
        }
        
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/Reports/FaturacaoMensal.sql
select * from VW_FATURACAO_MENSAL
Where 
%condition%

// FILE: SDCIM/ModusCI/CIReports/Reports/GENERICLOG.sql
select top 1000 * from VW_GENERICLOG_REPORT
Where 
%condition%
order by 4 desc

// FILE: SDCIM/ModusCI/CIReports/Reports/GenericLog.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIReports.Reports {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;
    
    
    public class GenericLog : ReportClass {
        
        public GenericLog() {
        }
        
        public override string ResourceName {
            get {
                return "GenericLog.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }
        
        public override string FullResourceName {
            get {
                return "CIReports.Reports.GenericLog.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection1 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection1 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[5];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[6];
            }
        }
    }
    
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedGenericLog : Component, ICachedReport {
        
        public CachedGenericLog() {
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }
        
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            GenericLog rpt = new GenericLog();
            rpt.Site = this.Site;
            return rpt;
        }
        
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/Reports/ListaLotesAcom.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIReports.Reports {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;
    
    
    public class ListaLotesAcom : ReportClass {
        
        public ListaLotesAcom() {
        }
        
        public override string ResourceName {
            get {
                return "ListaLotesAcom.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }
        
        public override string FullResourceName {
            get {
                return "CIReports.Reports.ListaLotesAcom.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection1 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection2 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection3 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection4 {
            get {
                return this.ReportDefinition.Sections[5];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection5 {
            get {
                return this.ReportDefinition.Sections[6];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection6 {
            get {
                return this.ReportDefinition.Sections[7];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection7 {
            get {
                return this.ReportDefinition.Sections[8];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[9];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection7 {
            get {
                return this.ReportDefinition.Sections[10];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection6 {
            get {
                return this.ReportDefinition.Sections[11];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection5 {
            get {
                return this.ReportDefinition.Sections[12];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection4 {
            get {
                return this.ReportDefinition.Sections[13];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection3 {
            get {
                return this.ReportDefinition.Sections[14];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection2 {
            get {
                return this.ReportDefinition.Sections[15];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection1 {
            get {
                return this.ReportDefinition.Sections[16];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[17];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[18];
            }
        }
    }
    
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedListaLotesAcom : Component, ICachedReport {
        
        public CachedListaLotesAcom() {
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }
        
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            ListaLotesAcom rpt = new ListaLotesAcom();
            rpt.Site = this.Site;
            return rpt;
        }
        
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/Reports/ListaLotesAcom.sql
select * from VW_REPORT_LOTEACOM_DETALHE
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by FICH_DATA, DOCACOM_BALCAO


// FILE: SDCIM/ModusCI/CIReports/Reports/ListagemRemessas.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIReports.Reports {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;
    
    
    public class ListagemRemessas : ReportClass {
        
        public ListagemRemessas() {
        }
        
        public override string ResourceName {
            get {
                return "ListagemRemessas.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }
        
        public override string FullResourceName {
            get {
                return "CIReports.Reports.ListagemRemessas.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection3 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection1 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection4 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection2 {
            get {
                return this.ReportDefinition.Sections[5];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[6];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection2 {
            get {
                return this.ReportDefinition.Sections[7];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection4 {
            get {
                return this.ReportDefinition.Sections[8];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection1 {
            get {
                return this.ReportDefinition.Sections[9];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection3 {
            get {
                return this.ReportDefinition.Sections[10];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[11];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[12];
            }
        }
    }
    
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedListagemRemessas : Component, ICachedReport {
        
        public CachedListagemRemessas() {
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }
        
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            ListagemRemessas rpt = new ListagemRemessas();
            rpt.Site = this.Site;
            return rpt;
        }
        
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/Reports/ListagemRemessas.sql
select * from VW_REPORT_ENVIO_DETALHADO
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by REMIN_DATA, REMIN_BALCAO, REMIN_NUMERO 


// FILE: SDCIM/ModusCI/CIReports/Reports/ResumoEnvios.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIReports.Reports {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;
    
    
    public class ResumoEnvios : ReportClass {
        
        public ResumoEnvios() {
        }
        
        public override string ResourceName {
            get {
                return "ResumoEnvios.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }
        
        public override string FullResourceName {
            get {
                return "CIReports.Reports.ResumoEnvios.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupHeaderSection1 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section GroupFooterSection1 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[5];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[6];
            }
        }
    }
    
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedResumoEnvios : Component, ICachedReport {
        
        public CachedResumoEnvios() {
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }
        
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            ResumoEnvios rpt = new ResumoEnvios();
            rpt.Site = this.Site;
            return rpt;
        }
        
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/Reports/ResumoEnvios.sql
select * from VW_REPORT_ENVIO_RESUMIDO
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by REMPROC_OPERATIVA, REMIN_DATA


// FILE: SDCIM/ModusCI/CIReports/AcomResumoForm.Designer.cs
﻿namespace CIReports
{
    partial class AcomResumoForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AcomResumoForm));
            this.btGenLog = new System.Windows.Forms.Button();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrdtInicio = new System.Windows.Forms.DateTimePicker();
            this.label1 = new System.Windows.Forms.Label();
            this.txBalcao = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // btGenLog
            // 
            this.btGenLog.Location = new System.Drawing.Point(156, 77);
            this.btGenLog.Name = "btGenLog";
            this.btGenLog.Size = new System.Drawing.Size(180, 23);
            this.btGenLog.TabIndex = 17;
            this.btGenLog.Text = "Gerar Relatório";
            this.btGenLog.UseVisualStyleBackColor = true;
            this.btGenLog.Click += new System.EventHandler(this.btGenLog_Click);
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(262, 17);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(202, 20);
            this.m_ctrldtFim.TabIndex = 16;
            // 
            // m_ctrdtInicio
            // 
            this.m_ctrdtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrdtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrdtInicio.Location = new System.Drawing.Point(28, 16);
            this.m_ctrdtInicio.Name = "m_ctrdtInicio";
            this.m_ctrdtInicio.Size = new System.Drawing.Size(202, 20);
            this.m_ctrdtInicio.TabIndex = 15;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(25, 51);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(40, 13);
            this.label1.TabIndex = 18;
            this.label1.Text = "Balcão";
            // 
            // txBalcao
            // 
            this.txBalcao.Location = new System.Drawing.Point(82, 48);
            this.txBalcao.Name = "txBalcao";
            this.txBalcao.Size = new System.Drawing.Size(71, 20);
            this.txBalcao.TabIndex = 19;
            this.txBalcao.TextChanged += new System.EventHandler(this.txBalcao_TextChanged);
            this.txBalcao.Leave += new System.EventHandler(this.txBalcao_Leave);
            // 
            // AcomResumoForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(493, 112);
            this.Controls.Add(this.txBalcao);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.btGenLog);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrdtInicio);
            this.DoubleBuffered = true;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "AcomResumoForm";
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Acom Resumo";
            this.Load += new System.EventHandler(this.AcomResumoForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button btGenLog;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrdtInicio;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox txBalcao;
    }
}

// FILE: SDCIM/ModusCI/CIReports/AcomResumoForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using NBiis.GenericReport;
using NBiis;
using NBIISNET;

namespace CIReports
{
    public partial class AcomResumoForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected string m_sSQLCondition;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public AcomResumoForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        private void BuildReport()
        {
            MakeSQLCondition();
            NBReportDocument oRepDoc = new NBReportDocument("AcomResumo", m_oParameters);
            oRepDoc.m_sReportTitle = m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + " a "+ m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt);
            oRepDoc.m_sCondition = m_sSQLCondition;
            oRepDoc.CreateReport();

            ReportFrm oRepPreview = new ReportFrm(ref oRepDoc, oRepDoc.m_sReportTitle);
            oRepPreview.MdiParent = m_oMenuInterface.GetMainForm();
            oRepPreview.Show();

            Dispose();
        }

        private void MakeSQLCondition()
        {
            if (txBalcao.Text.Length > 0) {
                m_sSQLCondition = " FICH_DATA between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "'" + " And DOCACOM_BALCAO = " + txBalcao.Text + "";
            } 
            else {
                m_sSQLCondition = " FICH_DATA between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "' ";
            }          
            
        }

        protected void DefinirDatas()
        {
            m_ctrldtFim.Value = DateTime.Now.Date;
            m_ctrdtInicio.Value = DateTime.Now.Date.AddDays(-1);
        }

        private void btGenLog_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                NBIISNET.frmEspereUmMomento.ShowWaitForm();

                BuildReport();
                GenericLog.GenLogRegistarInfo(m_sSQLCondition, "AcomResumoForm.cs", 31);

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
                NBIISNET.frmEspereUmMomento.HideWaitForm();

                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void AcomResumoForm_Load(object sender, EventArgs e)
        {
            try
            {
                
                
                DefinirDatas();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private void txBalcao_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(txBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txBalcao.Text.Remove(txBalcao.Text.Length - 1);
                txBalcao.Text = "";
            }
            if (txBalcao.Text.Length >= 4)
            {
                txBalcao.MaxLength = 4;
            }
        }

        private void txBalcao_Leave(object sender, EventArgs e)
        {
            string padleft = "";
            if (txBalcao.Text.Length > 0 && txBalcao.Text.Length < 4)
            {
                padleft = txBalcao.Text.PadLeft(4, '0');
                txBalcao.Text = padleft;
            }

        }
    }
}

// FILE: SDCIM/ModusCI/CIReports/AcomResumoForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIReports/CIReports.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{BE6BD596-18AE-40B6-846E-6A8A09571A1A}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIReports</RootNamespace>
    <AssemblyName>CIReports</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="CrystalDecisions.CrystalReports.Engine, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304, processorArchitecture=MSIL" />
    <Reference Include="CrystalDecisions.ReportSource, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304, processorArchitecture=MSIL" />
    <Reference Include="CrystalDecisions.Shared, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304, processorArchitecture=MSIL" />
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="GenericReportNet, Version=1.5.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericReportNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AcomResumoForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="AcomResumoForm.Designer.cs">
      <DependentUpon>AcomResumoForm.cs</DependentUpon>
    </Compile>
    <Compile Include="FaturacaoMensal.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="FaturacaoMensal.Designer.cs">
      <DependentUpon>FaturacaoMensal.cs</DependentUpon>
    </Compile>
    <Compile Include="ListagemRemessasForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ListagemRemessasForm.Designer.cs">
      <DependentUpon>ListagemRemessasForm.cs</DependentUpon>
    </Compile>
    <Compile Include="EstatisticasForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="EstatisticasForm.Designer.cs">
      <DependentUpon>EstatisticasForm.cs</DependentUpon>
    </Compile>
    <Compile Include="LotesAcomReport.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="LotesAcomReport.Designer.cs">
      <DependentUpon>LotesAcomReport.cs</DependentUpon>
    </Compile>
    <Compile Include="Relatorios.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Reports\AcomResumo.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>AcomResumo.rpt</DependentUpon>
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Reports\FaturacaoMensal.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>FaturacaoMensal.rpt</DependentUpon>
      <SubType>Component</SubType>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Compile>
    <Compile Include="Reports\ListagemRemessas.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>ListagemRemessas.rpt</DependentUpon>
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Reports\GenericLog.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>GenericLog.rpt</DependentUpon>
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Reports\ListaLotesAcom.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>ListaLotesAcom.rpt</DependentUpon>
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="Reports\ResumoEnvios.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>ResumoEnvios.rpt</DependentUpon>
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="ResumoDeEnviosForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="ResumoDeEnviosForm.Designer.cs">
      <DependentUpon>ResumoDeEnviosForm.cs</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="AcomResumoForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>AcomResumoForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="FaturacaoMensal.resx">
      <DependentUpon>FaturacaoMensal.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ListagemRemessasForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>ListagemRemessasForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="EstatisticasForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>EstatisticasForm.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="LotesAcomReport.resx">
      <SubType>Designer</SubType>
      <DependentUpon>LotesAcomReport.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Reports\AcomResumo.rpt">
      <Generator>CrystalDecisions.VSDesigner.CodeGen.ReportCodeGenerator</Generator>
      <LastGenOutput>AcomResumo.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="Reports\FaturacaoMensal.rpt">
      <Generator>CrystalDecisions.VSDesigner.CodeGen.ReportCodeGenerator</Generator>
      <LastGenOutput>FaturacaoMensal.cs</LastGenOutput>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="Reports\ListagemRemessas.rpt">
      <Generator>CrystalDecisions.VSDesigner.CodeGen.ReportCodeGenerator</Generator>
      <LastGenOutput>ListagemRemessas.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="Reports\GenericLog.rpt">
      <Generator>CrystalDecisions.VSDesigner.CodeGen.ReportCodeGenerator</Generator>
      <LastGenOutput>GenericLog.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="Reports\ListaLotesAcom.rpt">
      <Generator>CrystalDecisions.VSDesigner.CodeGen.ReportCodeGenerator</Generator>
      <LastGenOutput>ListaLotesAcom.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="Reports\ResumoEnvios.rpt">
      <Generator>CrystalDecisions.VSDesigner.CodeGen.ReportCodeGenerator</Generator>
      <LastGenOutput>ResumoEnvios.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="ResumoDeEnviosForm.resx">
      <SubType>Designer</SubType>
      <DependentUpon>ResumoDeEnviosForm.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <Service Include="{967B4E0D-AD0C-4609-AB67-0FA40C0206D8}" />
    <Service Include="{C0C07587-41A7-46C8-8FBD-3F9C8EBE2DDC}" />
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <PropertyGroup>
    <PostBuildEvent>copy ..\..\Reports\*.rpt ..\..\..\Deploy
copy ..\..\Reports\*.sql ..\..\..\Deploy
copy ..\..\Reports\*.rpt ..\..\..\CIControlo\bin\Release
copy ..\..\Reports\*.sql ..\..\..\CIControlo\bin\Release

copy ..\..\Reports\*.rpt ..\..\..\CIControlo\bin\Debug
copy ..\..\Reports\*.sql ..\..\..\CIControlo\bin\Debug
</PostBuildEvent>
  </PropertyGroup>
</Project>

// FILE: SDCIM/ModusCI/CIReports/EstatisticasForm.Designer.cs
﻿namespace CIReports
{
    partial class EstatisticasForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EstatisticasForm));
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrdtInicio = new System.Windows.Forms.DateTimePicker();
            this.btGenLog = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(301, 35);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(202, 20);
            this.m_ctrldtFim.TabIndex = 5;
            // 
            // m_ctrdtInicio
            // 
            this.m_ctrdtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrdtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrdtInicio.Location = new System.Drawing.Point(67, 34);
            this.m_ctrdtInicio.Name = "m_ctrdtInicio";
            this.m_ctrdtInicio.Size = new System.Drawing.Size(202, 20);
            this.m_ctrdtInicio.TabIndex = 4;
            // 
            // btGenLog
            // 
            this.btGenLog.Location = new System.Drawing.Point(96, 115);
            this.btGenLog.Name = "btGenLog";
            this.btGenLog.Size = new System.Drawing.Size(75, 23);
            this.btGenLog.TabIndex = 6;
            this.btGenLog.Text = "GenLog";
            this.btGenLog.UseVisualStyleBackColor = true;
            this.btGenLog.Click += new System.EventHandler(this.btGenLog_Click);
            // 
            // EstatisticasForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(606, 378);
            this.Controls.Add(this.btGenLog);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrdtInicio);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "EstatisticasForm";
            this.Text = "Estatisticas";
            this.Load += new System.EventHandler(this.EstatisticasForm_Load);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrdtInicio;
        private System.Windows.Forms.Button btGenLog;
    }
}

// FILE: SDCIM/ModusCI/CIReports/EstatisticasForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using NBiis.GenericReport; 

namespace CIReports
{
    public partial class EstatisticasForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected string m_sSQLCondition;

        public EstatisticasForm(CIConfigGP.CIGlobalParameters oParameters)
        {
            InitializeComponent();
            m_oParameters = oParameters;
        }

        private void EstatisticasForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

                DefinirDatas();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        protected void DefinirDatas()
        {
            m_ctrldtFim.Value = DateTime.Now.Date;
            m_ctrdtInicio.Value = DateTime.Now.Date.AddMonths(-1);
        }

        private void MakeSQLCondition()
        {
            m_sSQLCondition = "GENLOG_USERID='NVB0047'";
        }

        private void BuildReport()
        {
            MakeSQLCondition();
            NBReportDocument oRepDoc = new NBReportDocument("GENERICLOG",m_oParameters);
            oRepDoc.m_sReportTitle = "Generic Log";
            oRepDoc.m_sCondition = m_sSQLCondition;
            oRepDoc.CreateReport();

            ReportFrm oRepPreview = new ReportFrm(ref oRepDoc,oRepDoc.m_sReportTitle);
            oRepPreview.MdiParent = this.MdiParent;
            oRepPreview.Show();
        }

        private void btGenLog_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                NBIISNET.frmEspereUmMomento.ShowWaitForm();

                BuildReport();
                GenericLog.GenLogRegistarInfo(m_sSQLCondition, "EstatisticasForm.cs", 32);

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
                NBIISNET.frmEspereUmMomento.HideWaitForm();

                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}

// FILE: SDCIM/ModusCI/CIReports/EstatisticasForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIReports/FaturacaoMensal.Designer.cs
﻿namespace CIReports
{
    partial class FaturacaoMensal
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lbAno = new System.Windows.Forms.Label();
            this.lbMes = new System.Windows.Forms.Label();
            this.cbMes = new System.Windows.Forms.ComboBox();
            this.cbAno = new System.Windows.Forms.ComboBox();
            this.btGenLog = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // lbAno
            // 
            this.lbAno.AutoSize = true;
            this.lbAno.Location = new System.Drawing.Point(61, 15);
            this.lbAno.Name = "lbAno";
            this.lbAno.Size = new System.Drawing.Size(26, 13);
            this.lbAno.TabIndex = 0;
            this.lbAno.Text = "Ano";
            // 
            // lbMes
            // 
            this.lbMes.AutoSize = true;
            this.lbMes.Location = new System.Drawing.Point(60, 42);
            this.lbMes.Name = "lbMes";
            this.lbMes.Size = new System.Drawing.Size(27, 13);
            this.lbMes.TabIndex = 1;
            this.lbMes.Text = "Mês";
            // 
            // cbMes
            // 
            this.cbMes.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbMes.FormattingEnabled = true;
            this.cbMes.Items.AddRange(new object[] {
            "Janeiro",
            "Fevereiro",
            "Março",
            "Abril",
            "Maio",
            "Junho",
            "Julho",
            "Agosto",
            "Setembro",
            "Outubro",
            "Novembro",
            "Dezembro"});
            this.cbMes.Location = new System.Drawing.Point(93, 39);
            this.cbMes.Name = "cbMes";
            this.cbMes.Size = new System.Drawing.Size(220, 21);
            this.cbMes.TabIndex = 2;
            // 
            // cbAno
            // 
            this.cbAno.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cbAno.FormattingEnabled = true;
            this.cbAno.Location = new System.Drawing.Point(93, 12);
            this.cbAno.Name = "cbAno";
            this.cbAno.Size = new System.Drawing.Size(220, 21);
            this.cbAno.TabIndex = 3;
            // 
            // btGenLog
            // 
            this.btGenLog.Location = new System.Drawing.Point(115, 66);
            this.btGenLog.Name = "btGenLog";
            this.btGenLog.Size = new System.Drawing.Size(164, 23);
            this.btGenLog.TabIndex = 18;
            this.btGenLog.Text = "Gerar Relatório";
            this.btGenLog.UseVisualStyleBackColor = true;
            this.btGenLog.Click += new System.EventHandler(this.btGenLog_Click);
            // 
            // FaturacaoMensal
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(388, 104);
            this.Controls.Add(this.btGenLog);
            this.Controls.Add(this.cbAno);
            this.Controls.Add(this.cbMes);
            this.Controls.Add(this.lbMes);
            this.Controls.Add(this.lbAno);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Name = "FaturacaoMensal";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Faturação Mensal";
            this.Load += new System.EventHandler(this.ListagemChequesPorMes_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lbAno;
        private System.Windows.Forms.Label lbMes;
        private System.Windows.Forms.ComboBox cbMes;
        private System.Windows.Forms.ComboBox cbAno;
        private System.Windows.Forms.Button btGenLog;
    }
}

// FILE: SDCIM/ModusCI/CIReports/FaturacaoMensal.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIReports.Reports {
    using System;
    using System.ComponentModel;
    using CrystalDecisions.Shared;
    using CrystalDecisions.ReportSource;
    using CrystalDecisions.CrystalReports.Engine;
    
    
    public class FaturacaoMensal : ReportClass {
        
        public FaturacaoMensal() {
        }
        
        public override string ResourceName {
            get {
                return "FaturacaoMensal.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        public override bool NewGenerator {
            get {
                return true;
            }
            set {
                // Do nothing
            }
        }
        
        public override string FullResourceName {
            get {
                return "CIReports.Reports.FaturacaoMensal.rpt";
            }
            set {
                // Do nothing
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section1 {
            get {
                return this.ReportDefinition.Sections[0];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section2 {
            get {
                return this.ReportDefinition.Sections[1];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section3 {
            get {
                return this.ReportDefinition.Sections[2];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section4 {
            get {
                return this.ReportDefinition.Sections[3];
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public CrystalDecisions.CrystalReports.Engine.Section Section5 {
            get {
                return this.ReportDefinition.Sections[4];
            }
        }
    }
    
    [System.Drawing.ToolboxBitmapAttribute(typeof(CrystalDecisions.Shared.ExportOptions), "report.bmp")]
    public class CachedFaturacaoMensal : Component, ICachedReport {
        
        public CachedFaturacaoMensal() {
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool IsCacheable {
            get {
                return true;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual bool ShareDBLogonInfo {
            get {
                return false;
            }
            set {
                // 
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual System.TimeSpan CacheTimeOut {
            get {
                return CachedReportConstants.DEFAULT_TIMEOUT;
            }
            set {
                // 
            }
        }
        
        public virtual CrystalDecisions.CrystalReports.Engine.ReportDocument CreateReport() {
            FaturacaoMensal rpt = new FaturacaoMensal();
            rpt.Site = this.Site;
            return rpt;
        }
        
        public virtual string GetCustomizedCacheKey(RequestContext request) {
            String key = null;
            // // The following is the code used to generate the default
            // // cache key for caching report jobs in the ASP.NET Cache.
            // // Feel free to modify this code to suit your needs.
            // // Returning key == null causes the default cache key to
            // // be generated.
            // 
            // key = RequestContext.BuildCompleteCacheKey(
            //     request,
            //     null,       // sReportFilename
            //     this.GetType(),
            //     this.ShareDBLogonInfo );
            return key;
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/FaturacaoMensal.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/CIReports/ListagemRemessasForm.Designer.cs
﻿namespace CIReports
{
    partial class ListagemRemessasForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListagemRemessasForm));
            this.btGenLog = new System.Windows.Forms.Button();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrdtInicio = new System.Windows.Forms.DateTimePicker();
            this.comboBoxOperativa = new System.Windows.Forms.ComboBox();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.txBalcao = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // btGenLog
            // 
            this.btGenLog.Location = new System.Drawing.Point(167, 71);
            this.btGenLog.Name = "btGenLog";
            this.btGenLog.Size = new System.Drawing.Size(180, 23);
            this.btGenLog.TabIndex = 4;
            this.btGenLog.Text = "Gerar Relatório";
            this.btGenLog.UseVisualStyleBackColor = true;
            this.btGenLog.Click += new System.EventHandler(this.btGenLog_Click);
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(265, 16);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(202, 20);
            this.m_ctrldtFim.TabIndex = 2;
            // 
            // m_ctrdtInicio
            // 
            this.m_ctrdtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrdtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrdtInicio.Location = new System.Drawing.Point(31, 15);
            this.m_ctrdtInicio.Name = "m_ctrdtInicio";
            this.m_ctrdtInicio.Size = new System.Drawing.Size(202, 20);
            this.m_ctrdtInicio.TabIndex = 1;
            // 
            // comboBoxOperativa
            // 
            this.comboBoxOperativa.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F);
            this.comboBoxOperativa.FormattingEnabled = true;
            this.comboBoxOperativa.Location = new System.Drawing.Point(79, 41);
            this.comboBoxOperativa.Name = "comboBoxOperativa";
            this.comboBoxOperativa.Size = new System.Drawing.Size(123, 21);
            this.comboBoxOperativa.TabIndex = 3;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(28, 44);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(45, 15);
            this.label1.TabIndex = 11;
            this.label1.Text = "Estado";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(262, 46);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(40, 13);
            this.label2.TabIndex = 12;
            this.label2.Text = "Balcão";
            // 
            // txBalcao
            // 
            this.txBalcao.Location = new System.Drawing.Point(308, 42);
            this.txBalcao.MaxLength = 4;
            this.txBalcao.Name = "txBalcao";
            this.txBalcao.Size = new System.Drawing.Size(53, 20);
            this.txBalcao.TabIndex = 13;
            this.txBalcao.TextChanged += new System.EventHandler(this.txBalcao_TextChanged);
            this.txBalcao.Leave += new System.EventHandler(this.txBalcao_Leave);
            // 
            // ListagemRemessasForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(503, 111);
            this.Controls.Add(this.txBalcao);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.comboBoxOperativa);
            this.Controls.Add(this.btGenLog);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrdtInicio);
            this.DoubleBuffered = true;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "ListagemRemessasForm";
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Lista Remessas";
            this.Load += new System.EventHandler(this.ListaRemessasForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button btGenLog;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrdtInicio;
        private System.Windows.Forms.ComboBox comboBoxOperativa;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox txBalcao;
    }
}

// FILE: SDCIM/ModusCI/CIReports/ListagemRemessasForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using NBiis.GenericReport;
//using CIReports.Reports;
using NBIISNET;
using NBiis;

namespace CIReports
{
    public partial class ListagemRemessasForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected string m_sSQLCondition;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;


        public ListagemRemessasForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        private void btGenLog_Click(object sender, EventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                NBIISNET.frmEspereUmMomento.ShowWaitForm();

                BuildReport();
                GenericLog.GenLogRegistarInfo(m_sSQLCondition, "ListagemRemessasForm.cs", 33);

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
                NBIISNET.frmEspereUmMomento.HideWaitForm();

                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BuildReport()
        {
            MakeSQLCondition();
            NBReportDocument oRepDoc = new NBReportDocument("ListagemRemessas", m_oParameters);
            oRepDoc.m_sReportTitle = comboBoxOperativa.Text + "\n" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + " a " + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt);
            oRepDoc.m_sCondition = m_sSQLCondition += "";
            oRepDoc.CreateReport();

            ReportFrm oRepPreview = new ReportFrm(ref oRepDoc, oRepDoc.m_sReportTitle);
            oRepPreview.MdiParent = m_oMenuInterface.GetMainForm();
            oRepPreview.Show();

            Dispose();
        }

        private void MakeSQLCondition()
        {
            if (int.Parse(comboBoxOperativa.SelectedValue.ToString()) == -1)
            {
                if (txBalcao.Text.Length > 0)
                {
                    m_sSQLCondition = " Remin_data between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "'" + "and  REMIN_BALCAO =" + txBalcao.Text.ToString() + "  ";
                }
                else
                {
                    m_sSQLCondition = " Remin_data between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "' ";

                }
            }
            else
            {
                if (txBalcao.Text.Length > 0)
                {

                    m_sSQLCondition = " Remin_data between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "' and REMPROC_OPERATIVA = " + comboBoxOperativa.SelectedValue.ToString() + "and REMIN_BALCAO =" + txBalcao.Text.ToString() + "  ";
                }
                else
                {
                    m_sSQLCondition = " Remin_data between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "' and REMPROC_OPERATIVA = " + comboBoxOperativa.SelectedValue.ToString() + " ";

                }
            }
            
        }



        protected void DefinirDatas()
        {
            m_ctrldtFim.Value = DateTime.Now.Date;
            m_ctrdtInicio.Value = DateTime.Now.Date.AddDays(-1);
        }

        private void ListaRemessasForm_Load(object sender, EventArgs e)
        {
            try
            {

                preencheComboBox();
                DefinirDatas();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private void preencheComboBox()
        {
            string sQuery;
            DataSet dsOperativa = new DataSet();

            sQuery = "select OPERATIVA_DESC, OPERATIVA_ID from VW_OPERATIVA ";
            dsOperativa = m_oParameters.DirectSqlDataSet(sQuery, "OPERATIVA");

            comboBoxOperativa.DataSource = dsOperativa.Tables[0].DefaultView;
            comboBoxOperativa.DisplayMember = "OPERATIVA_DESC";
            comboBoxOperativa.ValueMember = "OPERATIVA_ID";
        }

        private void txBalcao_TextChanged(object sender, EventArgs e)
        {

            if (System.Text.RegularExpressions.Regex.IsMatch(txBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txBalcao.Text.Remove(txBalcao.Text.Length - 1);
                txBalcao.Text = "";
            }
            if (txBalcao.Text.Length >= 4)
            {
                txBalcao.MaxLength = 4;
            }
        }

        private void txBalcao_Leave(object sender, EventArgs e)
        {
            string padleft = "";
            if (txBalcao.Text.Length > 0 && txBalcao.Text.Length < 4)
            {
                padleft = txBalcao.Text.PadLeft(4, '0');
                txBalcao.Text = padleft;
            }
        }
    
    }
}

// FILE: SDCIM/ModusCI/CIReports/ListagemRemessasForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIReports/LotesAcomReport.Designer.cs
﻿namespace CIReports
{
    partial class LotesAcomReport
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LotesAcomReport));
            this.btGenLog = new System.Windows.Forms.Button();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrdtInicio = new System.Windows.Forms.DateTimePicker();
            this.textBoxFiltroBalcao = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // btGenLog
            // 
            this.btGenLog.Location = new System.Drawing.Point(137, 65);
            this.btGenLog.Name = "btGenLog";
            this.btGenLog.Size = new System.Drawing.Size(180, 23);
            this.btGenLog.TabIndex = 4;
            this.btGenLog.Text = "Gerar Relatório";
            this.btGenLog.UseVisualStyleBackColor = true;
            this.btGenLog.Click += new System.EventHandler(this.btGenLog_Click_1);
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(254, 14);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(202, 20);
            this.m_ctrldtFim.TabIndex = 2;
            // 
            // m_ctrdtInicio
            // 
            this.m_ctrdtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrdtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrdtInicio.Location = new System.Drawing.Point(20, 13);
            this.m_ctrdtInicio.Name = "m_ctrdtInicio";
            this.m_ctrdtInicio.Size = new System.Drawing.Size(202, 20);
            this.m_ctrdtInicio.TabIndex = 1;
            // 
            // textBoxFiltroBalcao
            // 
            this.textBoxFiltroBalcao.Location = new System.Drawing.Point(73, 39);
            this.textBoxFiltroBalcao.Name = "textBoxFiltroBalcao";
            this.textBoxFiltroBalcao.Size = new System.Drawing.Size(64, 20);
            this.textBoxFiltroBalcao.TabIndex = 3;
            this.textBoxFiltroBalcao.TextChanged += new System.EventHandler(this.textBoxFiltroBalcao_TextChanged);
            this.textBoxFiltroBalcao.Leave += new System.EventHandler(this.textBoxFiltroBalcao_Leave);
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(20, 43);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(51, 16);
            this.label1.TabIndex = 15;
            this.label1.Text = "Balcão";
            // 
            // LotesAcomReport
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(476, 106);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.textBoxFiltroBalcao);
            this.Controls.Add(this.btGenLog);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrdtInicio);
            this.DoubleBuffered = true;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "LotesAcomReport";
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Lotes Acom";
            this.Load += new System.EventHandler(this.LotesAcomReport_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button btGenLog;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrdtInicio;
        private System.Windows.Forms.TextBox textBoxFiltroBalcao;
        private System.Windows.Forms.Label label1;
    }
}

// FILE: SDCIM/ModusCI/CIReports/LotesAcomReport.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using NBiis.GenericReport;
using NBiis;
using NBIISNET;

namespace CIReports
{
    public partial class LotesAcomReport : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected string m_sSQLCondition;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public LotesAcomReport(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        private void BuildReport()
        {
            MakeSQLCondition();
            NBReportDocument oRepDoc = new NBReportDocument("ListaLotesAcom", m_oParameters);
            oRepDoc.m_sReportTitle = m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + " a "+ m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt);
            oRepDoc.m_sCondition = m_sSQLCondition;
            oRepDoc.CreateReport();

            ReportFrm oRepPreview = new ReportFrm(ref oRepDoc, oRepDoc.m_sReportTitle);
            oRepPreview.MdiParent = m_oMenuInterface.GetMainForm();
            oRepPreview.Show();

            Dispose();
        }

        private void MakeSQLCondition()
        {
            m_sSQLCondition = " FICH_DATA between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "' ";
            if (textBoxFiltroBalcao.Text.Length > 0)
            {
                m_sSQLCondition += "and DOCACOM_BALCAO= " + textBoxFiltroBalcao.Text;
            }
        }

        protected void DefinirDatas()
        {
            m_ctrldtFim.Value = DateTime.Now.Date;
            m_ctrdtInicio.Value = DateTime.Now.Date.AddDays(-1);
        }

        private void btGenLog_Click_1(object sender, EventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                NBIISNET.frmEspereUmMomento.ShowWaitForm();

                BuildReport();
                GenericLog.GenLogRegistarInfo(m_sSQLCondition, "LotesAcomReport.cs", 34);

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
                NBIISNET.frmEspereUmMomento.HideWaitForm();

                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LotesAcomReport_Load(object sender, EventArgs e)
        {
            try
            {
               

                DefinirDatas();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private void textBoxFiltroBalcao_TextChanged(object sender, EventArgs e)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(textBoxFiltroBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                textBoxFiltroBalcao.Text.Remove(textBoxFiltroBalcao.Text.Length - 1);
                textBoxFiltroBalcao.Text = "";
            }
            if (textBoxFiltroBalcao.Text.Length >= 4)
            {
                textBoxFiltroBalcao.MaxLength = 4;
            }
        }

        private void textBoxFiltroBalcao_Leave(object sender, EventArgs e)
        {
            string padleft = "";
            if (textBoxFiltroBalcao.Text.Length > 0 && textBoxFiltroBalcao.Text.Length < 4)
            {
                padleft = textBoxFiltroBalcao.Text.PadLeft(4, '0');
                textBoxFiltroBalcao.Text = padleft;
            }
        }

    }
}

// FILE: SDCIM/ModusCI/CIReports/LotesAcomReport.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="btGenLog.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="m_ctrldtFim.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="m_ctrdtInicio.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="textBoxFiltroBalcao.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="label1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIReports/Relatorios.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIReports
{
    public class Relatorios
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public Relatorios(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

        public void EstatisticasReports()
        {
            EstatisticasForm oStat = new EstatisticasForm(m_oParameters);
            oStat.MdiParent = m_oMenuInterface.GetMainForm();
            oStat.Show();
        }


        public void ListagemRemessas()
        {
            ListagemRemessasForm oStat = new ListagemRemessasForm(m_oParameters, m_oMenuInterface);
            //oStat.MdiParent = m_oMainForm;
            oStat.ShowDialog();
        }

        public void resumoDeEnvios()
        {
            ResumoDeEnviosForm oRes = new ResumoDeEnviosForm(m_oParameters, m_oMenuInterface);
            //oRes.MdiParent = m_oMainForm;
            oRes.ShowDialog();
        }

        public void lotesAcomDetalhe()
        {
            LotesAcomReport oLa = new LotesAcomReport(m_oParameters, m_oMenuInterface);
            //oLa.MdiParent = m_oMainForm;
            oLa.ShowDialog();
        }

        public void lotesAcomResumo()
        {
            AcomResumoForm oLa = new AcomResumoForm(m_oParameters, m_oMenuInterface);
            //oLa.MdiParent = m_oMainForm;
            oLa.ShowDialog();
        }

        public void FaturacaoMensal()
        {
            FaturacaoMensal oLa = new FaturacaoMensal(m_oParameters, m_oMenuInterface);
            //oLa.MdiParent = m_oMainForm;
            oLa.ShowDialog();
        }
    }
}


// FILE: SDCIM/ModusCI/CIReports/ResumoDeEnviosForm.Designer.cs
﻿namespace CIReports
{
    partial class ResumoDeEnviosForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ResumoDeEnviosForm));
            this.btGenLog = new System.Windows.Forms.Button();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_ctrdtInicio = new System.Windows.Forms.DateTimePicker();
            this.label1 = new System.Windows.Forms.Label();
            this.txBalcao = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            // 
            // btGenLog
            // 
            this.btGenLog.Location = new System.Drawing.Point(164, 70);
            this.btGenLog.Name = "btGenLog";
            this.btGenLog.Size = new System.Drawing.Size(180, 23);
            this.btGenLog.TabIndex = 13;
            this.btGenLog.Text = "Gerar Relatório";
            this.btGenLog.UseVisualStyleBackColor = true;
            this.btGenLog.Click += new System.EventHandler(this.btGenLog_Click_1);
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(279, 16);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(202, 20);
            this.m_ctrldtFim.TabIndex = 12;
            // 
            // m_ctrdtInicio
            // 
            this.m_ctrdtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrdtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrdtInicio.Location = new System.Drawing.Point(45, 15);
            this.m_ctrdtInicio.Name = "m_ctrdtInicio";
            this.m_ctrdtInicio.Size = new System.Drawing.Size(202, 20);
            this.m_ctrdtInicio.TabIndex = 11;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(45, 45);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(40, 13);
            this.label1.TabIndex = 14;
            this.label1.Text = "Balcão";
            // 
            // txBalcao
            // 
            this.txBalcao.Location = new System.Drawing.Point(87, 43);
            this.txBalcao.Name = "txBalcao";
            this.txBalcao.Size = new System.Drawing.Size(69, 20);
            this.txBalcao.TabIndex = 15;
            this.txBalcao.TextChanged += new System.EventHandler(this.txBalcao_TextChanged);
            this.txBalcao.Leave += new System.EventHandler(this.txBalcao_Leave);
            // 
            // ResumoDeEnviosForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(521, 101);
            this.Controls.Add(this.txBalcao);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.btGenLog);
            this.Controls.Add(this.m_ctrldtFim);
            this.Controls.Add(this.m_ctrdtInicio);
            this.DoubleBuffered = true;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "ResumoDeEnviosForm";
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Resumo De Envios";
            this.Load += new System.EventHandler(this.ResumoDeEnviosForm_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Button btGenLog;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private System.Windows.Forms.DateTimePicker m_ctrdtInicio;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox txBalcao;
    }
}

// FILE: SDCIM/ModusCI/CIReports/ResumoDeEnviosForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using NBiis;
using NBIISNET;
using NBiis.GenericReport;

namespace CIReports
{
    public partial class ResumoDeEnviosForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected string m_sSQLCondition;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public ResumoDeEnviosForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oMenuInterface = oMenuInterface;
        }

       

        private void BuildReport()
        {
            MakeSQLCondition();
            NBReportDocument oRepDoc = new NBReportDocument("ResumoEnvios", m_oParameters);
            oRepDoc.m_sReportTitle = m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + " a " + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt);
            oRepDoc.m_sCondition = m_sSQLCondition;
            oRepDoc.CreateReport();

            ReportFrm oRepPreview = new ReportFrm(ref oRepDoc, oRepDoc.m_sReportTitle);
            oRepPreview.MdiParent = m_oMenuInterface.GetMainForm();
            oRepPreview.Show();

            Dispose();
        }

        private void MakeSQLCondition()
        {
            if (txBalcao.Text.Length > 0)
            {
                m_sSQLCondition = " Remin_data between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "'" + " And REMIN_BALCAO = " + txBalcao.Text + "";
            }
            else
            {
                m_sSQLCondition = " Remin_data between '" + m_ctrdtInicio.Value.ToString(m_oParameters.DateSysFmt) + "' and '" + m_ctrldtFim.Value.ToString(m_oParameters.DateSysFmt) + "' ";
            }
        }

        protected void DefinirDatas()
        {
            m_ctrldtFim.Value = DateTime.Now.Date;
            m_ctrdtInicio.Value = DateTime.Now.Date.AddMonths(-1);
        }


        private void btGenLog_Click_1(object sender, EventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                NBIISNET.frmEspereUmMomento.ShowWaitForm();

                BuildReport();
                GenericLog.GenLogRegistarInfo(m_sSQLCondition, "ResumoDeEnviosForm.cs", 35);

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
                NBIISNET.frmEspereUmMomento.HideWaitForm();

                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ResumoDeEnviosForm_Load(object sender, EventArgs e)
        {
            try
            {
                
                DefinirDatas();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        private void txBalcao_TextChanged(object sender, EventArgs e)
        {
                 
            if (System.Text.RegularExpressions.Regex.IsMatch(txBalcao.Text, "[^0-9]"))
            {
                MessageBox.Show("Campo numérico");
                txBalcao.Text.Remove(txBalcao.Text.Length - 1);
                txBalcao.Text = "";
            }
            if (txBalcao.Text.Length >= 4)
            {
                txBalcao.MaxLength = 4;
            }
        }

        private void txBalcao_Leave(object sender, EventArgs e)
        {
            string padleft = "";
            if (txBalcao.Text.Length > 0 && txBalcao.Text.Length < 4)
            {
                padleft = txBalcao.Text.PadLeft(4, '0');
                txBalcao.Text = padleft;
            }
        }
       
    }
}

// FILE: SDCIM/ModusCI/CIReports/ResumoDeEnviosForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAQAAAAAAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAACAzMqqCIiIiAzMyqqoAAAAmZnKpmj932aZmbZmaP3fZpmbvmZo/d9m+7u+5gj932b8C+
        7gCP3fZvzAAAAIAAAAAM/58Aj93//8z/nwCAAAAADP+fAI///////58AgAAAAA///wCP////////AA//
        //////8AAAAAAAAAAAD+AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
        AAAAAQAAAAEAAIABAAD//wAA
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/CIServAlertas/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIServAlertas/CIServAlertas.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8C4F582F-F862-4FFF-AF31-70BC3404CB37}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIServAlertas</RootNamespace>
    <AssemblyName>CIServAlertas</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="CGDSendWebmail, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\CGDSendWebmail.dll</HintPath>
    </Reference>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.ServiceProcess" />
    <Reference Include="System.Web.Services" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ServAlerta.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="ServAlertasLogFile.cs" />
    <Compile Include="ServAlertasSendWebmail.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Alerta\Alerta.csproj">
      <Project>{763022EF-042B-4160-AFFF-9E59EF4B02A5}</Project>
      <Name>Alerta</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIServAlertas/ServAlerta.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.ServiceProcess;
using System.Data.SqlClient;

using Alerta;
using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using System.Net;


namespace CIServAlertas
{
    public class ServAlerta
    {
        protected CIComumInterface m_iInterface;
        //protected EventLog oEventLog;

        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public ServAlerta(CIComumInterface iInterface, CIConfigGP.CIGlobalParameters oParameters)
        {
            m_oParameters = oParameters;
            m_iInterface = iInterface;
            //oEventLog = new EventLog("CIServico - Alerta");
        }

        public AlertaSituacaoAccao AlertaSituacaoAccaoParaProcessar()
        {
            string sQuery = "select TOP 1 * from VW_AL_ALERTA_SITUACAO_ACCAO where ALACC_STATUS=0";

            SqlDataReader drA = null;
            AlertaSituacaoAccao oAl = null;

            try
            {
                drA = m_oParameters.DirectSqlDataReader(sQuery);
                if (drA.Read())
                {
                    oAl = new AlertaSituacaoAccao(drA);
                }
                return oAl;
            }
            catch (Exception ex)
            {
                try
                {
                    EventLog.WriteEntry("CIServico - Alerta", "Erros de execução do CIServico" + "\n" + ex.Message, EventLogEntryType.Warning, 800, 100);

                    m_iInterface.ErrorMessage("SituacaoAlertaParaProcessar: " + ex.Message);
                    GenericLog.GenLogRegistarErro(ref ex, "ServAlerta()", 500);
                }
                catch 
                { 
                }
                return null;
            }
            finally
            {
                if (drA != null)
                {
                    drA.Close();
                }
            }
        }

        public void ProcessaAlertaSituacaoAccao(AlertaSituacaoAccao oAlSitAcc)
        {
            try
            {
                m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);

                switch (oAlSitAcc.m_oSituacaoAccao.m_oAccao.m_enuTIPACC_ID)
                {
                    case Accao.enuTipoAccao.MAILEWS:
                        ProcessaAlertaSituacaoAccaoMail(oAlSitAcc, Accao.enuTipoAccao.MAILEWS);
                        break;
                    case Accao.enuTipoAccao.MAILWEBDAV:
                        ProcessaAlertaSituacaoAccaoMail(oAlSitAcc, Accao.enuTipoAccao.MAILWEBDAV);
                        break;
                    case Accao.enuTipoAccao.LOGDB:
                        ProcessaAlertaSituacaoAccaoLogDB(oAlSitAcc);
                        break;
                    case Accao.enuTipoAccao.LOGFILE:
                        ProcessaAlertaSituacaoAccaoLogFile(oAlSitAcc, Convert.ToInt32(Accao.enuTipoAccao.LOGFILE));
                        break;
                    case Accao.enuTipoAccao.EVENTVIEWER:
                        ProcessaAlertaSituacaoAccaoEVENTVIEWER(oAlSitAcc);
                        break;
                }

                oAlSitAcc.SetProcessado(m_oParameters);

                m_oParameters.Commit();
                m_iInterface.InfoMessage("ProcessaAlertaSituacaoAccao: " + oAlSitAcc.m_sALERT_ID, "");
            }
            catch (Exception ex)
            {
                m_oParameters.RollBack();
                m_iInterface.ErrorMessage("ProcessaAlertaSituacaoAccao: " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServAlerta()", 500);
                throw;
            }
        }

        public void ProcessaAlertaSituacaoAccaoLogDB(AlertaSituacaoAccao oAlSitAcc)
        {
            try
            {
                GenericLog.GenLogRegistarAlerta(oAlSitAcc.m_sAL_VARCHAR + '\n' + oAlSitAcc.m_sAL_TEXT, "CIServico - Alerta", oAlSitAcc.m_oSituacaoAccao.m_iSITUACAO_ID);
            }
            catch
            {
                //nada a fazer, não dá nunca erro
            }
        }

        public void ProcessaAlertaSituacaoAccaoEVENTVIEWER(AlertaSituacaoAccao oAlSitAcc)
        {
            try
            {
                string sMsg = oAlSitAcc.m_sAL_VARCHAR + '\n' + oAlSitAcc.m_sAL_TEXT;
                EventLog.WriteEntry("CIServico - Alerta", oAlSitAcc.m_oSituacaoAccao.m_sSITUACAO_DESC + "\n" + sMsg, EventLogEntryType.Warning, oAlSitAcc.m_oSituacaoAccao.m_iSITUACAO_ID, 100);
            }
            catch (Exception ex)
            {
                oAlSitAcc.SetErroProcessamento(m_oParameters, ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServAlerta()", 500);
                m_oParameters.EnviarAlertaSituacao(910, "ProcessaAlertaSituacaoAccaoEVENTVIEWER: " + ex.Message);
            }
        }

        public void ProcessaAlertaSituacaoAccaoLogFile(AlertaSituacaoAccao oAlSitAcc, int iTipoAccao)
        {
            try
            {
                ServAlertasLogFile oLog = new ServAlertasLogFile(m_oParameters, iTipoAccao);
                oLog.AddLineToFile("Situação:" + oAlSitAcc.m_oSituacaoAccao.m_iSITUACAO_ID.ToString() + " - " + oAlSitAcc.m_oSituacaoAccao.m_sSITUACAO_DESC);
                oLog.AddLineToFile(oAlSitAcc.m_dtALACC_TIMER.ToString("yyyy-MM-dd HH:mm:ss") + " - " + oAlSitAcc.m_sAL_VARCHAR);
                oLog.AddLineToFile(oAlSitAcc.m_dtALACC_TIMER.ToString("yyyy-MM-dd HH:mm:ss") + " - " + oAlSitAcc.m_sAL_TEXT);
                oLog.CloseFile();
            }
            catch (Exception ex)
            {
                oAlSitAcc.SetErroProcessamento(m_oParameters, ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServAlerta()", 500);
                m_oParameters.EnviarAlertaSituacao(910, "ProcessaAlertaSituacaoAccaoLogFile: " + ex.Message);
            }
        }

        public void ProcessaAlertaSituacaoAccaoMail(AlertaSituacaoAccao oAlSitAcc, Accao.enuTipoAccao eTipoAccao)
        {
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | (SecurityProtocolType)768 | (SecurityProtocolType)3072;
                ServAlertasSendWebmail oEmail = new ServAlertasSendWebmail(m_oParameters, eTipoAccao);

                oEmail.GetParamEspecificos(oAlSitAcc.m_oSituacaoAccao.m_oAccao.m_iACC_ID);
                oEmail.Subject += " - " + oAlSitAcc.m_oSituacaoAccao.m_iSITUACAO_ID.ToString();

                oEmail.AddLineToBody("Mensagem de alerta");
                oEmail.AddLineToBody("Situação:" + oAlSitAcc.m_oSituacaoAccao.m_iSITUACAO_ID.ToString() + " - " + oAlSitAcc.m_oSituacaoAccao.m_sSITUACAO_DESC);
                oEmail.AddLineToBody("Ocorreu em : " + oAlSitAcc.m_dtALACC_TIMER.ToString("yyyy-MM-dd HH:mm:ss"));
                oEmail.AddLineToBody(oAlSitAcc.m_sAL_VARCHAR);
                oEmail.AddLineToBody(oAlSitAcc.m_sAL_TEXT);

                oEmail.Send();
            }
            catch (Exception ex)
            {
                oAlSitAcc.SetErroProcessamento(m_oParameters, ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServAlerta()", 500);
                m_oParameters.EnviarAlertaSituacao(910, "ProcessaAlertaSituacaoAccaoMail: " + ex.Message);
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIServAlertas/ServAlertasLogFile.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace CIServAlertas
{
    class ServAlertasLogFile 
    {
        CIConfigGP.CIGlobalParameters m_oParameters;
        public int m_iTipoAccao;
        StreamWriter m_sw;

        public ServAlertasLogFile(CIConfigGP.CIGlobalParameters oParameters, int iTipoAccao)
        {
            m_oParameters = oParameters;
            m_iTipoAccao = iTipoAccao;

            m_sw = new StreamWriter(GetFileName(), true);

        }

        protected string GetFileName()
        {

            string sQuery = "Select TIPACCP_VALUE from ALERTA_TIPO_ACCAO_PARAM where TIPACCP_NAME= 'FileName' and TIPACC_ID = " + m_iTipoAccao.ToString();
           
            return m_oParameters.DirectSqlScalar(sQuery).ToString();
        }

        public void CloseFile()
        {
            m_sw.Close();
            m_sw.Dispose();
        }

        public void AddLineToFile(string sTxt)
        {
            m_sw.WriteLine(sTxt);
        }
    }
}


// FILE: SDCIM/ModusCI/CIServAlertas/ServAlertasSendWebmail.cs
﻿using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Web;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using Alerta;

namespace CIServAlertas
{
    class ServAlertasSendWebmail : CGDSendWebmail.SendWebmail 
    {
        DataSet m_dsGen;
        DataSet m_dsEsp;
        CIConfigGP.CIGlobalParameters m_oParameters;

        Accao.enuTipoAccao m_eTipoMail;

        public ServAlertasSendWebmail(CIConfigGP.CIGlobalParameters oParameters, Accao.enuTipoAccao eTipoAccao)
            : base()
        {
            m_dsGen = null;
            m_dsEsp = null;
            m_oParameters = oParameters;

            m_eTipoMail = eTipoAccao;

            GetParametersComuns();
        }

        protected virtual void GetParametersComuns()
        {
            dataSetGenericos();
            
            string sNome = "TIPACCP_NAME";
            string sValue = "TIPACCP_VALUE";

            setValuesToVars(m_dsGen.Tables[0], sNome, sValue);          
        }

        public void GetParamEspecificos(int iACC_ID)
        {
            dataSetEspecifico(iACC_ID);
            string sNome = "ACCP_NAME";
            string sValue = "ACCP_VALUE";

            setValuesToVars(m_dsEsp.Tables[0], sNome, sValue);
        }

        protected void setValuesToVars(DataTable dt, string sNome, string sValue)
        {

            foreach (DataRow oRow in dt.Rows)
            {

                switch (oRow[sNome].ToString().ToUpper())
                {
                    case "PASSWD":
                        if (valida(oRow, sValue))
                           m_sPasswd = oRow[sValue].ToString();
                        break;
                    case "URL":
                        if (valida(oRow, sValue))
                          //m_oServiceEmail.Url = oRow[sValue].ToString();
                          m_sURL = oRow[sValue].ToString();
                        break;
                    case "DOMAIN":
                        if (valida(oRow, sValue))
                            m_sDomain = oRow[sValue].ToString();
                        break;
                    case "TIPOEMAIL":
                        if (valida(oRow, sValue))
                            m_sTipoEmail = oRow[sValue].ToString().ToUpper();
                        break;
                    case "USERNAME":
                        if (valida(oRow, sValue))
                            m_sUserName = oRow[sValue].ToString();
                        break;
                    case "CC":
                        if (valida(oRow, sValue))
                            AddEmailCC(oRow[sValue].ToString());
                        break;
                    case "TO":
                        if (valida(oRow, sValue))
                            AddEmailTO(oRow[sValue].ToString());
                        break;
                    case "BCC":
                        if (valida(oRow, sValue))
                            AddEmailBCC(oRow[sValue].ToString());
                        break;
                    case "SUBJECT":
                        if (valida(oRow, sValue))
                            m_sSubject = oRow[sValue].ToString();
                        break;
                    default:
                        break;
                }

            } 
            
        }

        private bool valida(DataRow oRow, string sValue)
        {
            if (oRow[sValue].ToString().Equals(null) || oRow[sValue].ToString().Equals(""))
                return false;
            else
                return true;
        }
        
        protected void dataSetGenericos()
        {
            string sQuery;
            //sQuery = "select * from ALERTA_TIPO_ACCAO_PARAM where TIPACC_ID = " + ((int)Accao.enuTipoAccao.MAIL).ToString();
            sQuery = "select * from ALERTA_TIPO_ACCAO_PARAM where TIPACC_ID = " + ((int)m_eTipoMail).ToString();
            m_dsGen = m_oParameters.DirectSqlDataSet(sQuery, "ALERTA_TIPO_ACCAO_PARAM");

        }
        protected void dataSetEspecifico(int iACC_ID)
        {
            string sQuery;
            sQuery = "select * from ALERTA_ACCAO_PARAM where ACC_ID = " + iACC_ID.ToString();
            m_dsEsp = m_oParameters.DirectSqlDataSet(sQuery, "ALERTA_ACCAO_PARAM");
        }
    }
}


// FILE: SDCIM/ModusCI/CIServRemessas/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIServRemessas/CIServRemessas.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{08EAC62C-72D9-4654-9387-8C1620E52329}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIServRemessas</RootNamespace>
    <AssemblyName>CIServRemessas</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ServRemessa.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Alerta\Alerta.csproj">
      <Project>{763022EF-042B-4160-AFFF-9E59EF4B02A5}</Project>
      <Name>Alerta</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIActividades\CIActividades.csproj">
      <Project>{6FFF83BB-F585-43A4-B446-46F0EE79D42E}</Project>
      <Name>CIActividades</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIServRemessas/ServRemessa.cs
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using CIActividades;

namespace CIServRemessas
{
    public partial class ServRemessa
    {
        protected CIComumInterface m_iInterface;

        string m_sLastDOC_ID;
        int m_iNSeqDoc;

        long m_lTranoutID;
        long m_lTranoutBalcaoID; // SDCIM 7
        bool m_bMaquinaCriada, m_bDocsEmErro;
        bool m_bMaquinaCriadaBalcao, m_bDocsEmErroBalcao; // SDCIM 7
        string m_sLastError;
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        ArrayList m_oParam;

        public ServRemessa(CIComumInterface iInterface, CIConfigGP.CIGlobalParameters oParameters)
        {
            m_oParam = new ArrayList();
            m_oParameters = oParameters;
            m_iInterface = iInterface;

        }

        public string REMIN_IDParaProcessar()
        {
            try
            {
                string sQuery = "dbo.Select_Remessa2Process";

                Object obj = m_oParameters.DirectSqlScalar(sQuery);

                if (obj == null)
                {
                    return "";
                }
                if (obj.ToString().Length > 0)
                {
                    m_iInterface.InfoMessage("Tem a remessa " + obj.ToString() + " para processar", "");
                }
                return obj.ToString();
            }
            catch (Exception ex)
            {
                m_iInterface.ErrorMessage("REMIN_IDParaProcessar: " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);
                return "";
            }
        }

        public void ProcessaRemessa(string sREMIN_ID)
        {
            DataSet ds = null;
            m_sLastDOC_ID = "";

            string sSPName;

            try
            {
                string sQuery;
                int iTeste;

                m_bMaquinaCriada = false;
                m_iNSeqDoc = 0;

                //Em processamento (30)
                try
                {
                    validaRemessa(sREMIN_ID);
                }
                catch (Exception ex)
                {
                    sQuery = "dbo.Update_ReminErro";
                    m_oParam.Clear();
                    m_oParam.Add(new GeneralDBParameters("@ReminID", sREMIN_ID));
                    m_oParam.Add(new GeneralDBParameters("@Estado", -40));
                    m_oParam.Add(new GeneralDBParameters("@Erro", ex.Message));
                    m_oParameters.DirectStoredProcedureNonQuery(sQuery, ref m_oParam);
                    m_iInterface.ErrorMessage("RemId:" + sREMIN_ID + " " + ex.Message);
                    GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);

                    return;
                }
                // SqlTransaction oTrans = (SqlTransaction)m_oParameters.BeginTrans(IsolationLevel.ReadCommitted);
                sQuery = "UPDATE REMESSA_IN SET REMINSTAT_ID = 30 WHERE REMINSTAT_ID = 20 and REMIN_ID=" + sREMIN_ID;
                iTeste = m_oParameters.DirectSqlNonQuery(sQuery);
                if (iTeste != 1)
                {
                    m_iInterface.WarningMessage("Rows Updated != 1: " + iTeste.ToString() + " " + sQuery);
                    return;
                }

                //Processar
                sSPName = "dbo.Update_ProcessaRemessaProc";
                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@RemID", sREMIN_ID));

                //Vai fazer a stored procedure para preencher a tabela "dbo.Update_ProcessaRemessaProc"
                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);

                sQuery = "select * from VW_DETALHE_DOCUMENTOS where REMIN_ID=" + sREMIN_ID + " order by DOC_INDEX";

                m_lTranoutID = 0;
                int iCount = 0;
                int iTrancheNumero = 0;
                m_bDocsEmErro = false;
                m_sLastError = "";
                ds = m_oParameters.DirectSqlDataSet(sQuery, "DOC");
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    if (iCount++ % m_oParameters.m_iMaxDocsTranche == 0)
                    {
                        if (m_lTranoutID != 0)
                        {
                            sQuery = "update TRANCHE_OUT set TRANOUTSTAT_ID=20 where TRANOUT_ID = " + m_lTranoutID.ToString();
                            m_oParameters.DirectSqlNonQuery(sQuery);
                        }

                        CriarTranche(sREMIN_ID, ++iTrancheNumero);
                    }
                    ProcessaDocumento(oRow);
                }
                //update da ultima tranche para ultima
                sQuery = " update TRANCHE_OUT set TRANOUT_ULTIMA =1, TRANOUTSTAT_ID=20, TRANOUT_INCOMPLETA =0 where TRANOUT_ID = " + m_lTranoutID.ToString();
                m_oParameters.DirectSqlNonQuery(sQuery);

                int iNewEstado = m_bMaquinaCriada ? 20 : 40;

                if (iNewEstado == 40 && m_bDocsEmErro)
                    iNewEstado = -40;

                //Processado (40)
                sSPName = "dbo.Update_EstadoRemessa";
                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@RemID", sREMIN_ID));
                m_oParam.Add(new GeneralDBParameters("@OldEstado", 30));
                m_oParam.Add(new GeneralDBParameters("@NewEstado", iNewEstado));
                m_oParam.Add(new GeneralDBParameters("@Msg", m_sLastError));

                try
                {
                    m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                    m_iInterface.InfoMessage("Processou a remessa " + sREMIN_ID, "");
                }
                catch (Exception ex)
                {
                    try
                    {
                        m_iInterface.ErrorMessage("RemId:" + sREMIN_ID + " " + ex.Message);
                        GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);

                        m_oParam.Clear();
                        m_oParam.Add(new GeneralDBParameters("@RemID", sREMIN_ID));
                        m_oParam.Add(new GeneralDBParameters("@Msg", ex.Message));
                        m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);

                    }
                    catch
                    {
                    }
                }

                // m_oParameters.Commit();

            }
            catch (Exception ex)
            {
                //   m_oParameters.RollBack();

                m_iInterface.ErrorMessage("RemId:" + sREMIN_ID + " " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);

                updateRemssaErro(sREMIN_ID, ex.Message);

            }
            finally
            {
                if (ds != null)
                {
                    ds.Dispose();
                    ds = null;
                }
            }
        }

        private void updateRemssaErro(string sREMIN_ID, string sErro)
        {
            string sSPName = "dbo.Update_EstadoRemessa";

            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@RemID", sREMIN_ID));
            m_oParam.Add(new GeneralDBParameters("@NewEstado", -40));
            m_oParam.Add(new GeneralDBParameters("@Msg", sErro));

            try
            {
                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                if (m_sLastDOC_ID != "")
                {
                    sSPName = "dbo.Update_EstadoDocumento";

                    m_oParam.Clear();
                    m_oParam.Add(new GeneralDBParameters("@DocID", m_sLastDOC_ID));
                    m_oParam.Add(new GeneralDBParameters("@Estado", -20));

                    m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                }
            }
            catch
            {
            }
        }

        private void validaRemessa(string sReminID)
        {
            string sQuery = "select REMIN_DATA from REMESSA_IN where remin_id = " + sReminID;
            object data = m_oParameters.DirectSqlScalar(sQuery);

            if (data == null)
            {
                updateERRO(sReminID, "Remessa não existente");
            }
            DateTime dtREMIN_DATA = Convert.ToDateTime(data);

            if (dtREMIN_DATA < DateTime.Now.AddDays(m_oParameters.m_iMinDias * (-1)) ||
                dtREMIN_DATA > DateTime.Now.AddDays(m_oParameters.m_iMaxDias))
            {
                updateERRO(sReminID, "Data Remessa " + dtREMIN_DATA.ToShortDateString() + " inválida");
            }
        }
        private void validaDocumento(CIActividades.DetalhesDocumento oDd)
        {

            if (oDd.m_sDOC_INDEX == "")
            {
                updateERRO(oDd.m_sDOC_ID, "Index Documento inválido");
            }
            if (oDd.m_sDOC_DOCNIB == null)
            {
                updateERRO(oDd.m_sDOC_ID, "NIB Documento null");
            }
            if (oDd.m_sDOC_DOCNIB.Length != 13 && oDd.m_sDOC_DOCNIB.Length != 21)
            {
                updateERRO(oDd.m_sDOC_ID, "NIB Documento inválido");
            }
        }

        private void ProcessaDocumento(DataRow oRow)
        {
            CIActividades.DetalhesDocumento oDd = new DetalhesDocumento(oRow);

            try
            {
                validaDocumento(oDd);
            }
            catch (Exception ex)
            {
                //update
                m_bDocsEmErro = true;
                m_sLastError = ex.Message;
                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@DocID", oDd.m_sDOC_ID));
                m_oParam.Add(new GeneralDBParameters("@Erro", ex.Message));
                m_oParameters.DirectStoredProcedureNonQuery("dbo.InsertUpdate_DocumentoErro", ref m_oParam);
                m_iInterface.ErrorMessage("Doc:" + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);
                return;
            }

            ++m_iNSeqDoc;
            m_sLastDOC_ID = oDd.m_sDOC_ID;


            string sSPName = "dbo.Update_EstadoDocumento";

            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@DocID", oDd.m_sDOC_ID));
            m_oParam.Add(new GeneralDBParameters("@Estado", 20));
            if (m_lTranoutID <= 0)
            {
                throw new Exception("m_lTranoutID <= 0");
                //m_oParam.Add(new GeneralDBParameters("@Tranout_id", m_lTranoutID));
            }
            m_oParam.Add(new GeneralDBParameters("@Tranout_id", m_lTranoutID));
            //m_oParam.Add(new GeneralDBParameters("@Doc_Refarq", fnREFARQ(oDd)));
            //m_oParam.Add(new GeneralDBParameters("@Doc_Refarq", oDd.m_sDOC_REFARQ));
            m_oParam.Add(new GeneralDBParameters("@Doc_nSeq", m_iNSeqDoc));
            m_oParam.Add(new GeneralDBParameters("@Doc_ChaveH", fnCHAVEH(oDd)));

            m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);

            //processarImagemTeste(oDd);
            //processarImagem(oDd);

        }
        private void processarImagemTeste(DetalhesDocumento oDd)
        {
            string sImgPBFront;
            string sImgPBBack;

            try
            {
                //Escreve em disco, apenas para simular carga do TIBCO a enviar
                sImgPBFront = oDd.getImgFrente(m_oParameters);
                sImgPBBack = oDd.getImgBack(m_oParameters);

                //System.IO.FileInfo fInfoFrenteImagem = new System.IO.FileInfo(sImgPBFront);
                //System.IO.FileInfo fInfoVersoImagem = new System.IO.FileInfo(sImgPBBack);

                //if ((fInfoFrenteImagem.Length + fInfoVersoImagem.Length) > 69*1024)
                //{
                //    string sMsg;
                //    sMsg = sImgPBFront + " Superior a 69k: " + (fInfoVersoImagem.Length + fInfoFrenteImagem.Length).ToString() + " Bytes - " + sImgPBFront;
                //    sMsg += " No Doc_ID = " + oDd.m_sDOC_ID + " na Maquina_Id = " + oDd.m_sDOC_MAQUINA;
                //    m_iInterface.WarningMessage(sMsg);
                //}

            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);
                m_iInterface.ErrorMessage(ex.Message);
                throw;
            }
        }



        #region Imagem - não está a ser utilizada

        private void processarImagem(DetalhesDocumento oDd)
        {
            string sImgPBFront;
            string sImgPBTempF;
            string sImgPBBack;
            string sImgPBTempB;

            int iQua = 70;
            int iDPI = 0;
            int iBri = 0;
            int iContr = 0;
            bool bChangeQualidade = true;

            try
            {
                //MostraImagem mostraImg = new MostraImagem(m_oParameters, oDd);

                sImgPBTempF = m_oParameters.GetTempFileName("IMGPBFront") + ".jpg";
                sImgPBFront = oDd.getImgFrente(m_oParameters);
                sImgPBTempB = m_oParameters.GetTempFileName("IMGPBBack") + ".jpg";
                sImgPBBack = oDd.getImgBack(m_oParameters);
                while (bChangeQualidade)
                {

                    CIConfigGlobalParameters.ConvertImage._ConvertJPEGToGrayScale(sImgPBFront, sImgPBTempF, iQua, iDPI, iContr, iBri);
                    CIConfigGlobalParameters.ConvertImage._ConvertJPEGToGrayScale(sImgPBBack, sImgPBTempB, iQua, iDPI, iContr, iBri);

                    System.IO.FileInfo fInfoFrenteImagem = new System.IO.FileInfo(sImgPBTempF);
                    if (!fInfoFrenteImagem.Exists)
                        throw new Exception(sImgPBFront + " Não existe");

                    System.IO.FileInfo fInfoVersoImagem = new System.IO.FileInfo(sImgPBTempB);
                    if (!fInfoVersoImagem.Exists)
                        throw new Exception(sImgPBTempB + " Não existe");

                    // 69 kbytes x 1024 bytes = 70656 bytes
                    if ((fInfoFrenteImagem.Length + fInfoVersoImagem.Length) < 70656)
                    {
                        bChangeQualidade = false;
                        break;
                    }

                    if (bChangeQualidade && iQua > 20)
                    {
                        iQua -= 5;
                    }
                    else if (iContr < 60)
                    {
                        iContr += 10;
                        iBri += 10;
                    }
                    else
                    {
                        string sMsg;
                        sMsg = sImgPBFront + " Superior a 69k: " + (fInfoVersoImagem.Length + fInfoFrenteImagem.Length).ToString() + " Bytes - " + sImgPBFront;
                        sMsg += " No Doc_ID = " + oDd.m_sDOC_ID + " na Maquina_Id = " + oDd.m_sDOC_MAQUINA;
                        m_iInterface.WarningMessage(sMsg);
                        bChangeQualidade = false;
                    }
                }
                byte[] iFrontImg = LoadImage(sImgPBTempF, 2);
                byte[] iRearImg = LoadImage(sImgPBTempB, 2);

                string sSPName = "dbo.Update_DocImagens";
                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@DocId", oDd.m_sDOC_ID));
                m_oParam.Add(new GeneralDBParameters("@ImgType", "JPG"));
                m_oParam.Add(new GeneralDBParameters("@FrontImage", iFrontImg));
                m_oParam.Add(new GeneralDBParameters("@RearImage", iRearImg));

                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);
                m_iInterface.ErrorMessage(ex.Message);
                throw;
            }
        }

        public byte[] LoadImage(string sFileName, int iTentativa)
        {
            StreamReader sr = null;
            BinaryReader br = null;

            try
            {
                sr = new StreamReader(sFileName);

                br = new BinaryReader(sr.BaseStream);

                byte[] aBytes = br.ReadBytes((int)sr.BaseStream.Length);
                return aBytes;
            }
            catch
            {
                if (iTentativa > 0)
                {
                    System.Threading.Thread.Sleep(500);
                    return LoadImage(sFileName, (iTentativa - 1));
                }

                throw;
            }
            finally
            {
                if (br != null)
                {
                    if (br.BaseStream != null)
                    {
                        br.Close();
                    }
                    br = null;
                }

                if (sr != null)
                {
                    if (sr.BaseStream != null)
                    {
                        sr.Close();
                        sr.Dispose();
                    }
                    sr = null;
                }
            }
        }
        #endregion

        private string fnCHAVEH(CIActividades.DetalhesDocumento oDd)
        {
            string sChaveH;

            sChaveH = oDd.m_iDOC_BALTOM.ToString("0000");
            sChaveH += oDd.m_iREMIN_BALCAO.ToString("0000");
            sChaveH += oDd.m_sREMIN_NUMERO.PadLeft(7, '0');
            sChaveH += fnNIB(oDd);
            sChaveH += oDd.m_dtREMIN_DATA.ToString("yyyyMMdd");
            //sChaveH += m_iNSeqDoc.ToString("000000");
            sChaveH += oDd.m_sDOCORI_ID.PadLeft(30, '0').Substring(24, 6);
            sChaveH += "0";

            return sChaveH;
        }

        private void updateERRO(string sID, string sMsg)
        {
            throw new Exception(sID + " " + sMsg);
        }

        private string fnNIB(CIActividades.DetalhesDocumento oDd)
        {
            if (oDd.m_sDOC_DOCNIB.Length == 21)
                return oDd.m_sDOC_DOCNIB;

            string sNIB;

            sNIB = "0035";
            sNIB += oDd.m_sDOC_DOCNIB.Substring(0, 4);
            sNIB += "00" + oDd.m_sDOC_DOCNIB.Substring(4, 9);

            //sNIB += CDigitoNIB(sNIB); //para o caso de ser necessario o check digito
            sNIB += "00";

            return sNIB;
        }

        private string CDigitoNIB(string sNIB)
        {
            int[] aiPesos = { 73, 17, 89, 38, 62, 45, 53, 15, 50, 5, 49, 34, 81, 76, 27, 90, 9, 30, 3 };
            string sWorkString = sNIB;
            long lSoma = 0;
            long lResult;

            for (int i = 0; i < sWorkString.Length; i++)
            {
                lSoma += (Convert.ToInt64(sWorkString.Substring(i, 1)) * aiPesos[i]);
            }
            lResult = (98 - (lSoma % 97));

            return lResult.ToString("00");
        }

        private void CriarTranche(string sREMIN_ID, int iTrancheNumero)
        {
            if (m_bMaquinaCriada)
            {
                m_lTranoutID = -1;
                return;
            }

            string sSPName = "dbo.Insert_TrancheOut";

            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@RemID", sREMIN_ID));
            m_oParam.Add(new GeneralDBParameters("@Numero", iTrancheNumero));
            m_oParam.Add(new GeneralDBParameters("@Depends", m_lTranoutID));
            //Vai fazer a stored procedure para preencher a tabela "dbo.Insert_TrancheOut"
            object oTranOutID;
            oTranOutID = m_oParameters.DirectStoredProcedureScalar(sSPName, ref m_oParam);

            m_lTranoutID = (long)(oTranOutID);

        }

        #region SDCIM 7

        public long? RemessaBalcaoParaProcessar()
        {
            try
            {
                string sQuery = "dbo.Select_RemessaBalcao2Process";

                Object obj = m_oParameters.DirectSqlScalar(sQuery);

                if (obj == null)
                {
                    return null;
                }

                if (obj.ToString().Length > 0)
                {
                    m_iInterface.InfoMessage("Tem a remessa " + obj.ToString() + " para processar", "");
                }

                return Int64.Parse(obj.ToString());
            }
            catch (Exception ex)
            {
                m_iInterface.ErrorMessage("RemessaBalcaoParaProcessar: " + ex.Message);

                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);

                return null;
            }
        }

        public void TratarTranchesBalcao(long remessaId)
        {
            DataSet ds = null;
            m_sLastDOC_ID = "";

            try
            {
                int iTeste;

                m_bMaquinaCriadaBalcao = false;
                m_iNSeqDoc = 0;

                // Em processamento (30)
                try
                {
                    ValidaRemessaBalcao(remessaId.ToString());
                }
                catch (Exception ex)
                {
                    m_oParam.Clear();
                    m_oParam.Add(new GeneralDBParameters("@ReminID", remessaId));
                    m_oParam.Add(new GeneralDBParameters("@Estado", -40));
                    m_oParam.Add(new GeneralDBParameters("@Erro", ex.Message));

                    m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_RemessaBalcaoErro", ref m_oParam);

                    m_iInterface.ErrorMessage("RemId:" + remessaId + " " + ex.Message);

                    GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);

                    return;
                }

                string sQuery2 = "UPDATE REMESSA_BALCAO SET REMBALCAO_STAT_ID = 30 WHERE REMBALCAO_STAT_ID = 20 and ID = " + remessaId;

                iTeste = m_oParameters.DirectSqlNonQuery(sQuery2);

                if (iTeste != 1)
                {
                    m_iInterface.WarningMessage("Rows Updated != 1: " + iTeste.ToString() + " " + sQuery2);

                    return;
                }

                // Processar
                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@RemID", remessaId));

                string sQuery3 = "select * from VW_DETALHE_DOCUMENTOS_BALCAO where REMIN_ID = " + remessaId + " order by DOC_INDEX";
                m_lTranoutBalcaoID = 0;
                int iCount = 0;
                int iTrancheNumero = 0;
                m_bDocsEmErroBalcao = false;
                m_sLastError = "";
                ds = m_oParameters.DirectSqlDataSet(sQuery3, "DOC");

                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    if (iCount++ % m_oParameters.m_iMaxDocsTranche == 0)
                    {
                        if (m_lTranoutBalcaoID != 0)
                        {
                            string sQuery4 = "update TRANCHE_OUT set TRANOUTSTAT_ID = 20 where TRANOUT_ID = " + m_lTranoutBalcaoID.ToString();

                            m_oParameters.DirectSqlNonQuery(sQuery4);
                        }
                        CriarTrancheBalcao(remessaId, ++iTrancheNumero);
                    }

                    ProcessaDocumentoBalcao(oRow);
                }

                // Update da última tranche para última
                string sQuery5 = "update TRANCHE_OUT set TRANOUT_ULTIMA = 1, TRANOUTSTAT_ID = 20, TRANOUT_INCOMPLETA = 0 where TRANOUT_ID = " + m_lTranoutBalcaoID.ToString();

                m_oParameters.DirectSqlNonQuery(sQuery5);

                int iNewEstado = m_bMaquinaCriadaBalcao ? 20 : 40;

                if (iNewEstado == 40 && m_bDocsEmErroBalcao)
                    iNewEstado = -40;

                // Processado (40)
                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@REMBALCAO_ID_IN", remessaId));
                m_oParam.Add(new GeneralDBParameters("@OldEstado_IN", 30));
                m_oParam.Add(new GeneralDBParameters("@NewEstado_IN", iNewEstado));
                m_oParam.Add(new GeneralDBParameters("@Msg_IN", m_sLastError));

                try
                {
                    m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_EstadoRemessaBalcao", ref m_oParam);

                    m_iInterface.InfoMessage("Processou a remessa " + remessaId, "");
                }
                catch (Exception ex)
                {
                    try
                    {
                        m_iInterface.ErrorMessage("RemId:" + remessaId + " " + ex.Message);

                        GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);

                        m_oParam.Clear();
                        m_oParam.Add(new GeneralDBParameters("@REMBALCAO_ID_IN", remessaId));
                        m_oParam.Add(new GeneralDBParameters("@Msg", ex.Message));

                        m_oParameters.DirectStoredProcedureNonQuery("dbo.Update_EstadoRemessaBalcao", ref m_oParam);
                    }
                    catch
                    {
                    }
                }
            }
            catch (Exception ex)
            {
                m_iInterface.ErrorMessage("RemId:" + remessaId + " " + ex.Message);

                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);

                UpdateRemessaBalcaoErro(remessaId, ex.Message);
            }
            finally
            {
                if (ds != null)
                {
                    ds.Dispose();

                    ds = null;
                }
            }
        }

        private void ValidaRemessaBalcao(string remessaId)
        {
            string sQuery = "select REMBALCAO_DATA from REMESSA_BALCAO where id = " + remessaId;

            object data = m_oParameters.DirectSqlScalar(sQuery);

            if (data == null)
            {
                updateERRO(remessaId, "Remessa Balcão não existente");
            }

            DateTime dtREMIN_DATA = Convert.ToDateTime(data);

            if (dtREMIN_DATA < DateTime.Now.AddDays(m_oParameters.m_iMinDias * (-1)) ||
                dtREMIN_DATA > DateTime.Now.AddDays(m_oParameters.m_iMaxDias))
            {
                updateERRO(remessaId, "Data Remessa Balcão" + dtREMIN_DATA.ToShortDateString() + " inválida");
            }
        }

        private void UpdateRemessaBalcaoErro(long remessaId, string sErro)
        {
            string sSPName = "dbo.Update_EstadoRemessaBalcao";

            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@REMBALCAO_ID_IN", remessaId));
            m_oParam.Add(new GeneralDBParameters("@NewEstado", -40));
            m_oParam.Add(new GeneralDBParameters("@Msg", sErro));

            try
            {
                m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);

                if (m_sLastDOC_ID != "")
                {
                    sSPName = "dbo.Update_EstadoDocumentoBalcao";

                    m_oParam.Clear();
                    m_oParam.Add(new GeneralDBParameters("@DocID", m_sLastDOC_ID));
                    m_oParam.Add(new GeneralDBParameters("@Estado", -20));

                    m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
                }
            }
            catch
            {
            }
        }

        private void CriarTrancheBalcao(long remessaId, int iTrancheNumero)
        {
            if (m_bMaquinaCriadaBalcao)
            {
                m_lTranoutBalcaoID = -1;

                return;
            }

            string sSPName = "dbo.Insert_TrancheOut";

            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@RemID", remessaId));
            m_oParam.Add(new GeneralDBParameters("@Numero", iTrancheNumero));
            m_oParam.Add(new GeneralDBParameters("@Depends", m_lTranoutBalcaoID));
            m_oParam.Add(new GeneralDBParameters("@RemOrigemID_IN", Convert.ToInt32(CIActividades.RemessaOrigem.Balcao)));

            //Vai fazer a stored procedure para preencher a tabela "dbo.Insert_TrancheOutBalcao"
            object oTranOutID;
            oTranOutID = m_oParameters.DirectStoredProcedureScalar(sSPName, ref m_oParam);

            m_lTranoutBalcaoID = (long)(oTranOutID);
        }

        private void ProcessaDocumentoBalcao(DataRow oRow)
        {
            CIActividades.DetalhesDocumentoBalcao oDd = new DetalhesDocumentoBalcao(oRow);

            try
            {
                ValidaDocumentoBalcao(oDd);
            }
            catch (Exception ex)
            {
                //update
                m_bDocsEmErroBalcao = true;

                m_sLastError = ex.Message;

                m_oParam.Clear();
                m_oParam.Add(new GeneralDBParameters("@DocID", oDd.m_sDOC_ID));
                m_oParam.Add(new GeneralDBParameters("@Erro", ex.Message));
                m_oParam.Add(new GeneralDBParameters("@RemOrigemID_IN", Convert.ToInt32(CIActividades.RemessaOrigem.Balcao)));

                m_oParameters.DirectStoredProcedureNonQuery("dbo.InsertUpdate_DocumentoErro", ref m_oParam);

                m_iInterface.ErrorMessage("Doc:" + ex.Message);

                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 823);

                return;
            }

            ++m_iNSeqDoc;

            m_sLastDOC_ID = oDd.m_sDOC_ID;

            string sSPName = "dbo.Update_EstadoDocumentoBalcao";

            m_oParam.Clear();
            m_oParam.Add(new GeneralDBParameters("@DocID", oDd.m_sDOC_ID));
            m_oParam.Add(new GeneralDBParameters("@Estado", 20));

            if (m_lTranoutBalcaoID <= 0)
            {
                throw new Exception("m_lTranoutBalcaoID <= 0");
            }

            m_oParam.Add(new GeneralDBParameters("@Tranout_id", m_lTranoutBalcaoID));
            //m_oParam.Add(new GeneralDBParameters("@Doc_Refarq", fnREFARQ(oDd)));
            //m_oParam.Add(new GeneralDBParameters("@Doc_Refarq", oDd.m_sDOC_REFARQ));
            m_oParam.Add(new GeneralDBParameters("@Doc_nSeq", m_iNSeqDoc));
            m_oParam.Add(new GeneralDBParameters("@Doc_ChaveH", fnCHAVEH(oDd)));

            m_oParameters.DirectStoredProcedureNonQuery(sSPName, ref m_oParam);
        }

        private void ValidaDocumentoBalcao(CIActividades.DetalhesDocumentoBalcao oDd)
        {
            if (String.IsNullOrWhiteSpace(oDd.m_sDOC_INDEX))
            {
                updateERRO(oDd.m_sDOC_ID, "Index Documento inválido");
            }

            if (oDd.m_sDOC_DOCNIB == null)
            {
                updateERRO(oDd.m_sDOC_ID, "NIB Documento null");
            }

            if (oDd.m_sDOC_DOCNIB.Length != 13 && oDd.m_sDOC_DOCNIB.Length != 21)
            {
                updateERRO(oDd.m_sDOC_ID, "NIB Documento inválido");
            }
        }

        private string fnCHAVEH(CIActividades.DetalhesDocumentoBalcao oDd)
        {
            string sChaveH = "";

            sChaveH = oDd.m_iDOC_BALTOM.ToString("0000");
            sChaveH += oDd.m_iREMIN_BALCAO.ToString("0000");
            sChaveH += oDd.m_sREMIN_NUMERO.PadLeft(7, '0');
            sChaveH += fnNIB(oDd);
            sChaveH += oDd.m_dtREMIN_DATA.ToString("yyyyMMdd");
            //sChaveH += m_iNSeqDoc.ToString("000000");
            sChaveH += oDd.m_sDOC_INDEX.PadLeft(30, '0').Substring(24, 6);
            sChaveH += GetCaraterFinalizacao(oDd.DOC_TIPO);

            return sChaveH;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="docTipo"></param>
        /// <returns></returns>
        private string GetCaraterFinalizacao(int docTipo)
        {
            string toReturn = null;
            switch (docTipo)
            {
                case 3:
                    toReturn = "2";
                    break;
                case 8:
                    toReturn = "0";
                    break;
                case 9:
                    toReturn = "1";
                    break;
            }

            return toReturn;
        }

        private string fnNIB(CIActividades.DetalhesDocumentoBalcao oDd)
        {
            if (oDd.m_sDOC_DOCNIB.Length == 21)
                return oDd.m_sDOC_DOCNIB;

            string sNIB;

            sNIB = "0035";
            sNIB += oDd.m_sDOC_DOCNIB.Substring(0, 4);
            sNIB += "00" + oDd.m_sDOC_DOCNIB.Substring(4, 9);

            //sNIB += CDigitoNIB(sNIB); //para o caso de ser necessario o check digito
            sNIB += "00";

            return sNIB;
        }

        #endregion
    }
}

// FILE: SDCIM/ModusCI/CIServTester/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIServTester/CIServTester.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8D5B89F8-7C35-4848-BC4E-279A0723130C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIServTester</RootNamespace>
    <AssemblyName>CIServTester</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="ProcessarRemessasBalcao.cs" />
    <Compile Include="ProcessarAlertas.cs" />
    <Compile Include="ProcessarRemessas.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Alerta\Alerta.csproj">
      <Project>{763022EF-042B-4160-AFFF-9E59EF4B02A5}</Project>
      <Name>Alerta</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIServAlertas\CIServAlertas.csproj">
      <Project>{8C4F582F-F862-4FFF-AF31-70BC3404CB37}</Project>
      <Name>CIServAlertas</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIServRemessas\CIServRemessas.csproj">
      <Project>{08EAC62C-72D9-4654-9387-8C1620E52329}</Project>
      <Name>CIServRemessas</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIServTester/ProcessarAlertas.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using Alerta;
using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIServTester
{
    public partial class ProcessarAlertas : CIComumInterface
    {
        public void ErrorMessage(string sMessage)
        {
            MessageBox.Show("ProcessarAlertas Error: " + sMessage);
        }
        public void WarningMessage(string sMessage)
        {
            MessageBox.Show("ProcessarAlertas Warning: " + sMessage);
        }
        public void InfoMessage(string sMessage, string sHeader)
        {
            MessageBox.Show("ProcessarAlertas Info: " + sMessage);
        }
        public void InfoMessageCount(string sMessage)
        {
        }

        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public ProcessarAlertas(CIConfigGP.CIGlobalParameters oParameters)
        {
            m_oParameters = oParameters;

            AlertaSituacaoAccao oAlSitAcc = null;
            try
            {
                CIServAlertas.ServAlerta oAl = new CIServAlertas.ServAlerta(this, m_oParameters);

                oAlSitAcc = oAl.AlertaSituacaoAccaoParaProcessar();
                if (oAlSitAcc == null)
                {
                    return;
                }
                oAl.ProcessaAlertaSituacaoAccao(oAlSitAcc);
            }
            catch (Exception ex)
            {
                string sMsg = "";
                if (oAlSitAcc != null)
                {
                    sMsg = "ALERT_ID e ACC_ID não identificados";
                }
                else
                {
                    sMsg = " ALERT_ID=" + oAlSitAcc.m_sALERT_ID;
                    sMsg += " ACC_ID=" + oAlSitAcc.m_oSituacaoAccao.m_oAccao.m_iACC_ID.ToString();
                }

                ErrorMessage("CheckForAlertas2Process: " + sMsg + " - " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "ServRemessa()", 500);
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIServTester/ProcessarRemessas.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIServTester
{
    public partial class ProcessarRemessas : CIComumInterface
    {
        public void ErrorMessage(string sMessage)
        {
            MessageBox.Show("ProcessarRemessas Error: " + sMessage);
        }
        public void WarningMessage(string sMessage)
        {
            MessageBox.Show("ProcessarRemessas Warning: " + sMessage);
        }
        public void InfoMessage(string sMessage, string sHeader)
        {
            MessageBox.Show("ProcessarRemessas Info: " + sMessage);
        }
        public void InfoMessageCount(string sMessage)
        {
        }

        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public ProcessarRemessas(CIConfigGP.CIGlobalParameters oParameters)
        {
            m_oParameters = oParameters;

            CIServRemessas.ServRemessa oRem = new CIServRemessas.ServRemessa(this, m_oParameters);

            string sREMIN_ID = oRem.REMIN_IDParaProcessar();

            if (sREMIN_ID.Length != 0)
            {
                GenericLog.GenLogRegistarInfo("Inicio ProcessaRemessa: " + sREMIN_ID, "ProcessarRemessas", 45);
                oRem.ProcessaRemessa(sREMIN_ID);
                GenericLog.GenLogRegistarInfo("Fim ProcessaRemessa: " + sREMIN_ID, "ProcessarRemessas", 46);
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIServTester/ProcessarRemessasBalcao.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace CIServTester
{
    public partial class ProcessarRemessasBalcao : CIComumInterface
    {
        public void ErrorMessage(string sMessage)
        {
            MessageBox.Show("ProcessarRemessas Error: " + sMessage);
        }
        public void WarningMessage(string sMessage)
        {
            MessageBox.Show("ProcessarRemessas Warning: " + sMessage);
        }
        public void InfoMessage(string sMessage, string sHeader)
        {
            MessageBox.Show("ProcessarRemessas Info: " + sMessage);
        }
        public void InfoMessageCount(string sMessage)
        {
        }

        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public ProcessarRemessasBalcao(CIConfigGP.CIGlobalParameters oParameters)
        {
            m_oParameters = oParameters;

            CIServRemessas.ServRemessa oRem = new CIServRemessas.ServRemessa(this, m_oParameters);

            Int64? sREMIN_ID = oRem.RemessaBalcaoParaProcessar();

            if (sREMIN_ID.HasValue)
            {
                GenericLog.GenLogRegistarInfo("Inicio ProcessaRemessaBalcao: " + sREMIN_ID.Value.ToString(), "ProcessaRemessaBalcao", 45);
                oRem.TratarTranchesBalcao(sREMIN_ID.Value);
                GenericLog.GenLogRegistarInfo("Fim ProcessaRemessaBalcao: " + sREMIN_ID.Value.ToString(), "ProcessaRemessaBalcao", 46);
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIServico/Install/Install-Dimensions.bat
echo off

if "%3" == "PRD" goto OK
if "%3" == "prd" goto OK
if "%3" == "QLD" goto OK
if "%3" == "qld" goto OK
if "%3" == "DVP" goto OK
if "%3" == "dvp" goto OK

goto Mensagem

:OK

copy CIServico.%3.exe.config CIServico.exe.config

installutil /u CIServico.exe

installutil /username=%1 /password=%2 CIServico.exe

regedit /s CIServico.reg

net start CIServico

pause

goto Fim

:Mensagem
echo usar:
echo Install domain\User password DVP
echo ou
echo Install domain\User password QLD
echo ou
echo Install domain\User password PRD

:Fim


// FILE: SDCIM/ModusCI/CIServico/Install/Install.bat
installutil CIServico.exe



// FILE: SDCIM/ModusCI/CIServico/Install/UnInstall.bat
installutil /u CIServico.exe
pause

// FILE: SDCIM/ModusCI/CIServico/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/CIServico/Properties/Settings.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CIServico.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string P {
            get {
                return ((string)(this["P"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string S {
            get {
                return ((string)(this["S"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("999")]
        public string A {
            get {
                return ((string)(this["A"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SDC6001SQL28\\S2K081")]
        public string H {
            get {
                return ((string)(this["H"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDCSDCIMA01")]
        public string D {
            get {
                return ((string)(this["D"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLPRDVS301")]
        public string GCAAH {
            get {
                return ((string)(this["GCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSPGCCALX")]
        public string GCAAD {
            get {
                return ((string)(this["GCAAD"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GCXSQLDEVBS301\\GCCAA")]
        public string DVPGCAAH {
            get {
                return ((string)(this["DVPGCAAH"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("BDSDGCCALX")]
        public string DVPGCAAD {
            get {
                return ((string)(this["DVPGCAAD"]));
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIServico/Properties/Settings.settings
﻿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="My" GeneratedClassName="MySettings" UseMySettingsClassName="true">
  <Profiles />
  <Settings>
    <Setting Name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" Type="(Web Service URL)" Scope="Application">
      <Value Profile="(Default)">http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</Value>
    </Setting>
  </Settings>
</SettingsFile>

// FILE: SDCIM/ModusCI/CIServico/CIServiceComumThread.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.IO;

//using CIServiceComum;
using NBiis;

namespace CIServico
{
    public class CIServiceComumThread : IComparable
    {
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (m_iThreadID > ((CIServiceComumThread)obj).m_iThreadID)
                return 1;

            if (m_iThreadID < ((CIServiceComumThread)obj).m_iThreadID)
                return -1;

            return 0;
        }

        #endregion

        protected int m_iThreadID;

        protected bool m_bStop;
        protected bool m_bProcessEnded;
        protected CIServiceInterface m_iInterface;
        protected string m_sConfig;
        protected Thread m_oThread;
        protected CIServicosThreadParameters m_oParameters;

        public int ThreadID
        {
            get
            {
                return m_iThreadID;
            }
        }

        public string ThreadName
        {
            get
            {
                return m_oThread.Name + ":" + m_iThreadID.ToString();
            }
        }

        protected virtual string GetThreadName()
        {
            throw new Exception("Tem de implementar o  método GetThreadName()");
        }

        protected virtual void InitProcessThread()
        {
        }

        protected virtual bool CheckForThingToDo()
        {
            throw new Exception("Tem de implementar o  método CheckForThingToDo()");
        }

        public CIServiceComumThread(CIServiceInterface iInterface, CIServicosThreadParameters oParameters)
        {
            m_iInterface = iInterface;
            m_oThread = new Thread(new ThreadStart(this.Process));
            m_oThread.Name = GetThreadName();

            m_oThread.IsBackground = true;

            m_oParameters = oParameters;

            m_bStop = false;

            m_iThreadID = -1;

            System.Data.IDbConnection oConn = m_oParameters.DataBase;
            GenericLog.GenLogInicializacao(ref oConn, m_oParameters.Sistema, m_oParameters.Aplicativo, System.Windows.Forms.SystemInformation.UserName);
        }

        public virtual void Start()
        {
            m_oThread.Start();
        }

        //public void ValidaFuncionamento()
        //{
        //    if (m_oThread.IsAlive)
        //    {
        //        return;
        //    }
        //}

        public bool ReallyStoped()
        {
            return m_bProcessEnded;
        }

        public void StopThread()
        {
            m_bStop = true;

            StopAllThreads();

            m_oParameters.InsertServiceInfoMsg("Thread Principal Terminou", ThreadName, "CISerciveComumThread.cs");
            m_iInterface.ServiceErrorMessage("Process Ended - " + "MainThread");
        }

        public virtual void StopAllThreads()
        {
        }

        protected virtual void Process()
        {
            DateTime dtLastWorking = DateTime.Now;
            string sMsg;

            m_bProcessEnded = false;

            try
            {
                //Thread.Sleep(10000);
                m_oParameters.InsertServiceInfoMsg("Thread Principal Iniciada", ThreadName, "CIServiceComumThread.cs");
                m_oParameters.InsertServiceInfoMsg("v:" + Application.ProductVersion + " - " + File.GetLastWriteTime(Application.ExecutablePath).ToString("yyyy/MM/dd HH:mm:ss"), ThreadName, "CIServiceComumThread.cs");
                m_iInterface.ServiceInfoMessage("Process Started - " + "MainThread", "Started");

                bool bRegistarInicioParagem = false;

                LoadDatabaseParameters();

                InitProcessThread();

                while (!m_bStop)
                {
                    try
                    {
                        LoadDatabaseParameters();

                        while (m_oParameters.HoradeParagem())
                        {
                            if (!bRegistarInicioParagem)
                            {
                                m_oParameters.ForceStepSleepTime(m_oParameters.m_iTempoEntreIteracoes);
                                GenericLog.GenLogRegistarAlerta("Inicio de hora de paragem.");
                                bRegistarInicioParagem = true;
                            }

                            ControloTempoEntreIteracoes(true);

                            if (m_bStop)
                            {
                                m_oParameters.InsertServiceInfoMsg("Pedido de paragem do CIServico!!!", ThreadName, "CIServiceComumThread.cs");
                                return;
                            }

                            LoadDatabaseParameters();

                            if (dtLastWorking.AddMinutes(5) < DateTime.Now)
                            {
                                sMsg = " Hora de Paragem\n";
                                sMsg += " Data " + File.GetLastWriteTime(System.Windows.Forms.Application.ExecutablePath).ToString() + "\n";
                                sMsg += " Versao " + System.Windows.Forms.Application.ProductVersion + "\n";
                                sMsg += " Machine " + System.Windows.Forms.SystemInformation.ComputerName + "\n";

                                GenericLog.RegistarApplicacaoLog();

                                dtLastWorking = DateTime.Now;
                                m_iInterface.ServiceInfoMessage(sMsg, "Working");
                            }

                        }

                        if (bRegistarInicioParagem)
                        {
                            GenericLog.GenLogRegistarAlerta("Fim de hora de paragem.");
                            bRegistarInicioParagem = false;
                        }

                        if (!CheckForThingToDo())
                        {
                            m_oParameters.StepSleepTime();
                        }
                        else
                        {
                            m_oParameters.SetDefaultSleepTime();
                        }
                    }
                    catch (Exception ex)
                    {
                        m_oParameters.InsertServiceErrorMsg(ex, ThreadName, "CIServiceComumThread.cs");
                        m_iInterface.ServiceErrorMessage(ex.Message);
                        GenericLog.GenLogRegistarErro(ref ex, "CIServiceComumThread()", 500);
                        m_oParameters.SetDefaultSleepTime();
                    }

                    ControloTempoEntreIteracoes(false);
                    if (m_bStop)
                    {
                        m_oParameters.InsertServiceInfoMsg("Pedido de paragem do CIServico!!!", ThreadName, "CIServiceComumThread.cs");
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                m_oParameters.InsertServiceErrorMsg(ex, ThreadName, "CIServiceComumThread.cs");
                GenericLog.GenLogRegistarErro(ref ex, "CIServiceComumThread()", 500);
            }
            finally
            {
                m_iInterface.ServiceInfoMessage("Thread Principal Finalizada", "finally");
                m_oParameters.InsertServiceInfoMsg("Thread Principal Finalizada", ThreadName, "CIServiceComumThread.cs");

                m_bProcessEnded = true;

                if (m_bStop)
                {
                    m_oParameters.InsertServiceInfoMsg("CIServico Parado Normalmente", ThreadName, "CIServiceComumThread.cs");
                    m_iInterface.StopService("CIServico Parado Normalmente");
                }
                else
                {
                    m_oParameters.InsertServiceInfoMsg("CIServico Parado Anormalmente", ThreadName, "CIServiceComumThread.cs");
                    m_iInterface.StopService("CIServico Parado Anormalmente");
                }
            }
        }

        protected virtual void ControloTempoEntreIteracoes(bool bTempoParagem)
        {
            m_oParameters.SetLastExecution();
            while (m_oParameters.IsToWait() && !m_bStop)
            {
                Thread.Sleep(1000);
            }

            if (!bTempoParagem && m_oParameters.SleepAtLeast(45))
            {
                m_oParameters.InsertServiceInfoMsg("Thread Principal a funcionar ...", ThreadName, "CIServiceComumThread.cs");
            }
        }

        protected virtual void LoadDatabaseParameters()
        {
            m_oParameters.SetConnectString();

            m_oParameters.LoadParameters();
            //m_oParameters.LoadParametersVariaveis();

            m_oParameters.SetCIDatabaseParameters();
        }
    }
}


// FILE: SDCIM/ModusCI/CIServico/CIServiceInterface.cs
﻿using System;
using System.Collections.Generic;
using System.Text;

namespace CIServico
{
    public interface CIServiceInterface
    {
        void ServiceErrorMessage(string sMessage);
        void ServiceWarningMessage(string sMessage);
        void ServiceInfoMessage(string sMessage, string sHeader);
        void StopService(string sMessage);
    }
}


// FILE: SDCIM/ModusCI/CIServico/CIServico.DVP.exe.config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="CIServico.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIServico.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>999</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>SDC6001SQL28\S2K081</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSDCSDCIMA01</value>
            </setting>
            <setting name="GCAAH" serializeAs="String">
                <value>GCXSQLPRDVS301</value>
            </setting>
            <setting name="GCAAD" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="DVPGCAAH" serializeAs="String">
                <value>GCXSQLDEVBS301\GCCAA</value>
            </setting>
            <setting name="DVPGCAAD" serializeAs="String">
                <value>BDSDGCCALX</value>
            </setting>
        </CIServico.Properties.Settings>
    </applicationSettings>
</configuration>

// FILE: SDCIM/ModusCI/CIServico/CIServico.Designer.cs
﻿namespace CIServico
{
    partial class CIServico
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            // 
            // CIServico
            // 
            this.ServiceName = "CIServico";

        }

        #endregion
    }
}


// FILE: SDCIM/ModusCI/CIServico/CIServico.PRD.exe.config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="CIServico.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIServico.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>999</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSPCSDCIMA01</value>
            </setting>
            <setting name="GCAAH" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAAD" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="DVPGCAAH" serializeAs="String">
                <value>GCXSQLDEVBS301\GCCAA</value>
            </setting>
            <setting name="DVPGCAAD" serializeAs="String">
                <value>BDSDGCCALX</value>
            </setting>
        </CIServico.Properties.Settings>
    </applicationSettings>
</configuration>

// FILE: SDCIM/ModusCI/CIServico/CIServico.QLD.exe.config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="CIServico.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIServico.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>SQC6001SQL17\S2K082</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSQCSDCIMA01</value>
            </setting>
            <setting name="UseBaseDados" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="GCAA9601H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9601D" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="GCAA9604H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9604D" serializeAs="String">
                <value>BDSPGCCAPT</value>
            </setting>
            <setting name="PRDH" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="PRDD" serializeAs="String">
                <value>BDSPCSDCIMA01</value>
            </setting>
            <setting name="QUAH" serializeAs="String">
                <value>SQC6001SQL17\S2K082</value>
            </setting>
            <setting name="QUAD" serializeAs="String">
                <value>BDSQCSDCIMA01</value>
            </setting>
            <setting name="DVPH" serializeAs="String">
                <value>SDC6001SQL28\S2K081</value>
            </setting>
            <setting name="DVPD" serializeAs="String">
                <value>BDSDCSDCIMA01</value>
            </setting>
        </CIServico.Properties.Settings>
    </applicationSettings>
</configuration>

// FILE: SDCIM/ModusCI/CIServico/CIServico.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.ServiceProcess;
using System.Text;

using NBiis;

namespace CIServico
{
    public partial class CIServico : ServiceBase, CIServiceInterface
    {
        protected CIServicoThread m_oThread;

        public CIServico()
        {
            InitializeComponent();

            m_oThread = null;
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                ServiceInfoMessage("OnStart - Starting", "");
                m_oThread = new CIServicoThread(this, new CIServicosThreadParameters(""));
                m_oThread.Start();
            }
            catch (Exception ex)
            {
                ServiceErrorMessage(ex.Message);
                try
                {
                    StopService("Paragem devido a erro no Start");
                }
                catch (Exception ex1)
                {
                    ServiceErrorMessage(ex1.Message);
                }
            }
        }

        protected override void OnStop()
        {
            try
            {
                if (m_oThread == null)
                {
                    return;
                }
                m_oThread.StopThread();
                int iCount = 0;
                while (!m_oThread.ReallyStoped() && iCount++<15)
                {
                    System.Threading.Thread.Sleep(1000);
                }
            }
            catch (Exception ex)
            {
                ServiceErrorMessage(ex.Message);
            }
        }

        protected override void OnShutdown()
        {
            OnStop();
        }

        public void ServiceErrorMessage(string sMessage)
        {
            EventLog.WriteEntry(sMessage, EventLogEntryType.Error,900,100);
        }

        public void ServiceWarningMessage(string sMessage)
        {
            EventLog.WriteEntry(sMessage, EventLogEntryType.Warning);
        }

        public void ServiceInfoMessage(string sMessage, string sHeader)
        {
            if (sHeader.Trim().Length == 0)
            {
                EventLog.WriteEntry(sMessage, EventLogEntryType.Information);
            }
            else
            {
                EventLog.WriteEntry("CIServico:" + sHeader, sMessage, EventLogEntryType.Information);
            }
        }
        public void StopService(string sMessage)
        {
            ServiceErrorMessage(sMessage);
            Stop();
        }

    }
}


// FILE: SDCIM/ModusCI/CIServico/CIServico.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CIServico</RootNamespace>
    <AssemblyName>CIServico</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Configuration.Install" />
    <Reference Include="System.Data" />
    <Reference Include="System.Management" />
    <Reference Include="System.ServiceProcess" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="CIServiceComumThread.cs" />
    <Compile Include="CIServiceInterface.cs" />
    <Compile Include="CIServico.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="CIServico.Designer.cs">
      <DependentUpon>CIServico.cs</DependentUpon>
    </Compile>
    <Compile Include="CIServicosThreadParameters.cs" />
    <Compile Include="CIServicoThread.cs" />
    <Compile Include="CIServicoThreadInterface.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="ProjectInstaller.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Include="ProjectInstaller.Designer.cs">
      <DependentUpon>ProjectInstaller.cs</DependentUpon>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="Settings.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="CIServico.resx">
      <SubType>Designer</SubType>
      <DependentUpon>CIServico.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="ProjectInstaller.resx">
      <SubType>Designer</SubType>
      <DependentUpon>ProjectInstaller.cs</DependentUpon>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Alerta\Alerta.csproj">
      <Project>{763022EF-042B-4160-AFFF-9E59EF4B02A5}</Project>
      <Name>Alerta</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIFicheiro\CIFicheiro.csproj">
      <Project>{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}</Project>
      <Name>CIFicheiro</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIServAlertas\CIServAlertas.csproj">
      <Project>{8C4F582F-F862-4FFF-AF31-70BC3404CB37}</Project>
      <Name>CIServAlertas</Name>
    </ProjectReference>
    <ProjectReference Include="..\CIServRemessas\CIServRemessas.csproj">
      <Project>{08EAC62C-72D9-4654-9387-8C1620E52329}</Project>
      <Name>CIServRemessas</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="CIServico.DVP.exe.config" />
    <None Include="CIServico.PRD.exe.config" />
    <None Include="CIServico.QLD.exe.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/CIServico/CIServico.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.TrayLargeIcon" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
</root>

// FILE: SDCIM/ModusCI/CIServico/CIServicoThread.cs
﻿using System;
using System.Collections;
using System.IO;
using Alerta;
using CIConfigGlobalParameters;
using NBiis;

namespace CIServico
{
    public class CIServicoThread : CIServiceComumThread, CIServicoThreadInterface, CIComumInterface
    {
        protected int m_iNextThreadId;
        DateTime m_dtLastTime2ImportFile;

        public CIServicoThread(CIServiceInterface iInterface, CIServicosThreadParameters oParameters)
            : base(iInterface, oParameters)
        {
            m_iNextThreadId = 1;
            m_dtLastTime2ImportFile = DateTime.Now.AddMinutes(-m_oParameters.m_iTempoEntreIteracoesFicheiros);
        }

        protected override string GetThreadName()
        {
            return "CIServicos";
        }

        public void ThreadStoped(int iThreadID)
        {
        }

        public void ErrorMessage(string sMessage)
        {
            GenericLog.GenLogRegistarErro(sMessage, "CIServico", 41);
            m_iInterface.ServiceErrorMessage(sMessage);
            m_oParameters.EnviarAlertaSituacao(800, sMessage); 
        }

        public void WarningMessage(string sMessage)
        {
            GenericLog.GenLogRegistarAlerta(sMessage, "CIServico", 42);
            m_iInterface.ServiceWarningMessage(sMessage);
            m_oParameters.EnviarAlertaSituacao(810, sMessage);
        }

        public void InfoMessage(string sMessage, string sHeader)
        {
            GenericLog.GenLogRegistarInfo(sMessage, "CIServico", 43);
            m_iInterface.ServiceInfoMessage(sMessage, sHeader);
        }

        public void InfoMessageCount(string sMessage)
        {
        }

        protected override void InitProcessThread()
        {
            try
            {
                string sQuery = "dbo.UpdateDelete_RemessaIn_30_to_20";
                ArrayList aoParam = new ArrayList();

                m_oParameters.DirectStoredProcedureNonQuery(sQuery, ref aoParam);
            }
            catch 
            { 
            }
        }

        protected void MoverFicheirosImportadosNaoMovidos(string sFilePath, string sFileSintax)
        {
            try
            {
                string[] aFiles = Directory.GetFiles(sFilePath, sFileSintax);

                foreach (string sFile in aFiles)
                {
                    string sDestPath = m_oParameters.m_sFileBackupPath;
                    string sNewFileName = sDestPath + Path.GetFileName(sFile) + "." + DateTime.Now.ToString("yyyyMMddHHmmss") + ".Movido";
                    File.Move(sFile, sNewFileName);
                    WarningMessage(sFile + " Movido");
                }
            }
            catch(Exception ex)
            {
                WarningMessage(ex.Message);
            }
        }

        private DateTime m_dtLastWorking = DateTime.Now.AddMinutes(-15);

        protected override bool CheckForThingToDo()
        {
            try
            {
                bool bResult1 = false;
                bool bResult2 = false;
                bool bResult3 = false;
                bool bResult4 = false;
                bool bResult5 = false; // SDCIM 7

                string sMsg;

                m_oParameters.OpenConnection();

                if (m_dtLastWorking.AddMinutes(5)<DateTime.Now)
                {
                    sMsg = " Data " + File.GetLastWriteTime(System.Windows.Forms.Application.ExecutablePath).ToString() + "\n";
                    sMsg += " Versao " + System.Windows.Forms.Application.ProductVersion + "\n";
                    sMsg += " Machine " + System.Windows.Forms.SystemInformation.ComputerName + "\n";

                    GenericLog.RegistarApplicacaoLog();

                    m_dtLastWorking = DateTime.Now;
                    m_iInterface.ServiceInfoMessage(sMsg, "Working");
                }

                bResult1 = CheckForRemessas2Process();
                bResult2 = CheckForAlertas2Process();

                if (Time2ImportFile())
                {
                    bResult3 = CheckForFileENVM2Import();
                    MoverFicheirosImportadosNaoMovidos(m_oParameters.m_sFilePathENVM, "Auto*");
                    MoverFicheirosImportadosNaoMovidos(m_oParameters.m_sFilePathENVM, "Manual*");

                    bResult4 = CheckForFileACOM2Import();
                    MoverFicheirosImportadosNaoMovidos(m_oParameters.m_sFilePathACOM, "Auto*");
                    MoverFicheirosImportadosNaoMovidos(m_oParameters.m_sFilePathACOM, "Manual*");

                    if (bResult3 || bResult4)
                    {
                        m_dtLastTime2ImportFile = DateTime.Now.AddMinutes(-m_oParameters.m_iTempoEntreIteracoesFicheiros);
                    }
                }

                bResult5 = CheckForTranchesRemessasBalcao2Process(); // SDCIM 7

                m_oParameters.CloseConnection();

                m_iNextThreadId = m_iNextThreadId % 1000;

                return bResult1 || bResult2 || bResult3 || bResult4 || bResult5; // SDCIM 7
            }
            catch (Exception ex)
            {
                ErrorMessage("CheckForThingToDo: " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "CIServicThread()", 500);
                return true;
            }
            finally
            {
                m_oParameters.CloseConnection();
            }
        }

        protected bool Time2ImportFile()
        {
            if (m_dtLastTime2ImportFile.AddMinutes(m_oParameters.m_iTempoEntreIteracoesFicheiros) > DateTime.Now)
            {
                return false;
            }
            m_dtLastTime2ImportFile = DateTime.Now;
            return true;
        }

        protected bool CheckForFileENVM2Import()
        {
            try
            {

                string sFileSintax = m_oParameters.m_sSintaxFilesToImportENVM;
                string sFilePath = m_oParameters.m_sFilePathENVM;

                //m_iInterface.ServiceInfoMessage(sFilePath + sFileSintax);

                string[] aFiles = Directory.GetFiles(sFilePath, sFileSintax);

                if (aFiles.Length > 0)
                {
                    CIFicheiro.FicheiroEnvm oFile = new CIFicheiro.FicheiroEnvm(this, m_oParameters);
                    return oFile.processaFile(aFiles[0],"Auto");
                }
                else
                    return false;
            }
            catch (Exception ex)
            {
                ErrorMessage("Processa ENVM File2Import: " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "CIServicThread()", 500);
                m_oParameters.SetDefaultSleepTime();
                return false;
            }
        }
        protected bool CheckForFileACOM2Import()
        {
            try
            {
                string sFileSintax = m_oParameters.m_sSintaxFilesToImportACOM;
                string sFilePath = m_oParameters.m_sFilePathACOM;

              //m_iInterface.ServiceInfoMessage(sFilePath + sFileSintax);

                string[] aFiles = Directory.GetFiles(sFilePath, sFileSintax);

                if (aFiles.Length > 0)
                {
                    CIFicheiro.FicheiroAcom oFile = new CIFicheiro.FicheiroAcom(this, m_oParameters);
                    return oFile.processaFile(aFiles[0], "Auto");
                }
                else
                    return false;
            }
            catch (Exception ex)
            {
                ErrorMessage("Processa ACOM File2Import: " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "CIServicThread()", 500);
                m_oParameters.SetDefaultSleepTime();
                return false;
            }
        }

        protected bool CheckForAlertas2Process()
        {
            AlertaSituacaoAccao oAlSitAcc=null;
            try
            {
                CIServAlertas.ServAlerta oAl = new CIServAlertas.ServAlerta(this, m_oParameters);

                oAlSitAcc = oAl.AlertaSituacaoAccaoParaProcessar();
                if (oAlSitAcc == null)
                {
                    return false;
                }
                oAl.ProcessaAlertaSituacaoAccao(oAlSitAcc);
                return true;
            }
            catch (Exception ex)
            {
                string sMsg = "";
                if (oAlSitAcc == null)
                {
                    sMsg = "ALERT_ID e ACC_ID não identificados";
                }
                else
                {
                    sMsg = " ALERT_ID=" + oAlSitAcc.m_sALERT_ID;
                    sMsg += " ACC_ID=" + oAlSitAcc.m_oSituacaoAccao.m_oAccao.m_iACC_ID.ToString();
                }

                ErrorMessage("CheckForAlertas2Process: " + sMsg + " - " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "CIServicThread()", 500);
                m_oParameters.SetDefaultSleepTime();
                return true;
            }
        }

        protected bool CheckForRemessas2Process()
        {
            string sREMIN_ID = "";
            try
            {
                CIServRemessas.ServRemessa oRem = new CIServRemessas.ServRemessa(this, m_oParameters);

                sREMIN_ID = oRem.REMIN_IDParaProcessar();
                if (sREMIN_ID.Length == 0)
                {
                    return false;
                }
                oRem.ProcessaRemessa(sREMIN_ID);
                return true;
            }
            catch (Exception ex)
            {
                ErrorMessage("CheckForRemessas2Process: " + sREMIN_ID + " - " + ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "CIServicThread()", 500);
                m_oParameters.SetDefaultSleepTime();
                return true;
            }
        }

        protected bool CheckForTranchesRemessasBalcao2Process() // SDCIM 7
        {
            //string sREMIN_ID = "";
            try
            {
                CIServRemessas.ServRemessa oRem = new CIServRemessas.ServRemessa(this, m_oParameters);

                long? remessaId = oRem.RemessaBalcaoParaProcessar();

                if (!remessaId.HasValue)
                {
                    return false;
                }
                else
                {
                    oRem.TratarTranchesBalcao(remessaId.Value);
                }

                return true;
            }
            catch (Exception ex)
            {
                ErrorMessage("CheckForTranchesRemessasBalcao2Process: " + ex.Message);

                GenericLog.GenLogRegistarErro(ref ex, "CIServicThread()", 500);

                m_oParameters.SetDefaultSleepTime();

                return true;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/CIServico/CIServicoThreadInterface.cs
﻿using System;
using System.Collections.Generic;
using System.Text;

namespace CIServico
{
    public interface CIServicoThreadInterface
    {
        void ThreadStoped(int iThreadID);
    }
}


// FILE: SDCIM/ModusCI/CIServico/CIServicosThreadParameters.cs
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

using CIConfigGP;
using NBiis;

namespace CIServico
{
    public class CIServicosThreadParameters : CIGlobalParameters
    {
        protected DateTime m_dtLastExecute;
        protected TimeSpan m_tsSleepTime;
        protected TimeSpan m_tsDefaultSleepTime;

        protected string[] m_asMaxThread;

        public string m_sServiceName;

        protected CIServicosThreadParameters()
            : base ()
        {
            m_dtLastExecute = DateTime.Now;
            m_tsDefaultSleepTime = new TimeSpan(0, 0, 0, 0, 0);
            SetDefaultSleepTime();

            m_sServiceName = "";
        }

        public CIServicosThreadParameters(string sPrefixo)
            : base (sPrefixo)
        {
            m_dtLastExecute = DateTime.Now;
            m_tsDefaultSleepTime = new TimeSpan(0, 0, 0, 0, 0);
            SetDefaultSleepTime();

            m_sServiceName = "";
        }

        public void ForceStepSleepTime(int iValue)
        {
            if (m_tsSleepTime.TotalMinutes > iValue)
            {
                return;
            }

            m_tsSleepTime = m_tsSleepTime += new TimeSpan(0, 0, iValue, 0, 0);
        }

        public void StepSleepTime()
        {
            m_tsSleepTime += new TimeSpan(0, 0, 0, 5, 0);

            if (m_tsSleepTime >= new TimeSpan(0, 0, 1, 0, 0))
            {
                m_tsSleepTime = new TimeSpan(0, 0, 1, 0, 0);
            }
        }

        public void SetDefaultSleepTime()
        {
            m_tsSleepTime = m_tsDefaultSleepTime;
        }

        public void SetConnectString()
        {
            SetCommandPromptParameters();
            DefineConnectString();
            CreateConnectionObject();
        }

        protected override void SetDatabaseParameters()
        {
        }

        public virtual void SetCIDatabaseParameters()
        {
            base.SetDatabaseParameters();       

            string sAux;
            int iSegundos = GetProfileInt("CIServicos", "Control", "WaitTimer", 0);

            if (m_tsDefaultSleepTime.TotalSeconds != iSegundos)
            {
                m_tsDefaultSleepTime = new TimeSpan(0, 0, 0, iSegundos, 0);
                SetDefaultSleepTime();
            }

            sAux = GetProfileString("CIServicos", "Control", "MaxThread", "1,1");
            if (sAux.Length == 0)
            {
                sAux = "0";
            }
            m_asMaxThread = sAux.Split(',');
        }

        public virtual void SetLastExecution()
        {
            m_dtLastExecute = DateTime.Now;
        }

        public virtual bool IsToWait()
        {
            if ((DateTime.Now - m_dtLastExecute) < m_tsSleepTime)
            {
                return true;
            }

            return false;
        }

        public virtual bool SleepAtLeast(int iSegundos)
        {
            return m_tsSleepTime.TotalSeconds >= iSegundos;
        }

        protected override string ParseCommand(string sParametro)
        {
            sParametro = sParametro.Replace("/", "");
            sParametro = sParametro.Replace(":", "");

            try
            {
                string sRes;
                sRes = ((string)global::CIServico.Properties.Settings.Default[sParametro]);
                return sRes;
            }
            catch (Exception)
            {
                return "";
            }
        }

        #region Inserir mensagems em Log de actividade

        public virtual void InsertServiceMsg(string sMsg, int iSeveridade, string sThreadName, string sFile)
        {
            try
            {
                if (!m_bUseBaseDados)
                {
                    return;
                }

                //InsertServiceMsgOnly(sMsg, iSeveridade, sThreadName, sFile);
                switch (iSeveridade)
                {
                    case 0:
                        GenericLog.GenLogRegistarInfo(sMsg, sThreadName, 36);
                        break;
                    case 1:
                        GenericLog.GenLogRegistarAlerta(sMsg, sThreadName, 37);
                        break;
                    case 2:
                        GenericLog.GenLogRegistarErro(sMsg, sThreadName, 38);
                        break;
                    default:
                        GenericLog.GenLogRegistarErro(sMsg, sThreadName, 39);
                        break;
                }
            }
            catch
            {
            }
        }

        //public virtual void InsertServiceMsgOnly(string sMsg, int iSeveridade, string sThreadName, string sFile)
        //{
        //    try
        //    {
        //        if (!m_bUseBaseDados)
        //        {
        //            return;
        //        }

        //        ArrayList oParam = new ArrayList();

        //        oParam.Add(CriarSPParameter("@ServlogName", System.Windows.Forms.Application.ProductName + "-" + m_sPrefixo));
        //        oParam.Add(CriarSPParameter("@ServlogSeveridade", iSeveridade));
        //        oParam.Add(CriarSPParameter("@ServlogThread", sThreadName));
        //        oParam.Add(CriarSPParameter("@ServlogFilename", sFile));
        //        oParam.Add(CriarSPParameter("@ServlogDescricao", sMsg));

        //        DirectStoredProcedureNonQuery("dbo.Insert_Servico_LogMsg", ref oParam);
        //    }
        //    catch
        //    {
        //    }
        //}

        public virtual void InsertServiceErrorMsg(string sMsg, string sThreadName, string sFile)
        {
            InsertServiceMsg(sMsg, 2, sThreadName, sFile);
        }

        public virtual void InsertServiceErrorMsg(Exception ex, string sThreadName, string sFile)
        {
            //GenericLog.GenLogRegistarErro(ref ex, sFile, 40);
            GenericLog.GenLogRegistarErro(ref ex, NBiis.GenericLog.GenLogGetExFile(ref ex), NBiis.GenericLog.GenLogGetExLine(ref ex));
            InsertServiceMsg(ex.Message, 2, sThreadName, sFile);
        }

        public virtual void InsertServiceInfoMsg(string sMsg, string sThreadName, string sFile)
        {
            InsertServiceMsg(sMsg, 0, sThreadName, sFile);
        }
        #endregion
    }
}


// FILE: SDCIM/ModusCI/CIServico/Program.cs
﻿using System.Collections.Generic;
using System.ServiceProcess;
using System.Text;

namespace CIServico
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        static void Main()
        {
            ServiceBase[] ServicesToRun;

            // More than one user Service may run within the same process. To add
            // another service to this process, change the following line to
            // create a second service object. For example,
            //
            //   ServicesToRun = new ServiceBase[] {new Service1(), new MySecondUserService()};
            //
            ServicesToRun = new ServiceBase[] { new CIServico() };

            ServiceBase.Run(ServicesToRun);
        }
    }
}

// FILE: SDCIM/ModusCI/CIServico/ProjectInstaller.Designer.cs
﻿namespace CIServico
{
    partial class ProjectInstaller
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.serviceProcessInstaller = new System.ServiceProcess.ServiceProcessInstaller();
            this.serviceInstaller = new System.ServiceProcess.ServiceInstaller();
            // 
            // serviceProcessInstaller
            // 
            this.serviceProcessInstaller.Password = null;
            this.serviceProcessInstaller.Username = null;
            // 
            // serviceInstaller
            // 
            this.serviceInstaller.ServiceName = "CIServico";
            // 
            // ProjectInstaller
            // 
            this.Installers.AddRange(new System.Configuration.Install.Installer[] {
            this.serviceProcessInstaller,
            this.serviceInstaller});

        }

        #endregion

        private System.ServiceProcess.ServiceProcessInstaller serviceProcessInstaller;
        private System.ServiceProcess.ServiceInstaller serviceInstaller;
    }
}

// FILE: SDCIM/ModusCI/CIServico/ProjectInstaller.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration.Install;

namespace CIServico
{
    [RunInstaller(true)]
    public partial class ProjectInstaller : Installer
    {
        public ProjectInstaller()
        {
            InitializeComponent();
        }
    }
}

// FILE: SDCIM/ModusCI/CIServico/ProjectInstaller.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="serviceProcessInstaller.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="serviceInstaller.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>187, 17</value>
  </metadata>
  <metadata name="$this.TrayLargeIcon" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
</root>

// FILE: SDCIM/ModusCI/CIServico/Settings.cs
namespace CIServico.Properties {
    
    
    // This class allows you to handle specific events on the settings class:
    //  The SettingChanging event is raised before a setting's value is changed.
    //  The PropertyChanged event is raised after a setting's value is changed.
    //  The SettingsLoaded event is raised after the setting values are loaded.
    //  The SettingsSaving event is raised before the setting values are saved.
    internal sealed partial class Settings {
        
        public Settings() {
            // // To add event handlers for saving and changing settings, uncomment the lines below:
            //
            // this.SettingChanging += this.SettingChangingEventHandler;
            //
            // this.SettingsSaving += this.SettingsSavingEventHandler;
            //
        }
        
        private void SettingChangingEventHandler(object sender, System.Configuration.SettingChangingEventArgs e) {
            // Add code to handle the SettingChangingEvent event here.
        }
        
        private void SettingsSavingEventHandler(object sender, System.ComponentModel.CancelEventArgs e) {
            // Add code to handle the SettingsSaving event here.
        }
    }
}


// FILE: SDCIM/ModusCI/CIServico/app.config
<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="MDIWebTransmCI.My.MySettings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <system.diagnostics>
        <sources>
            <!-- This section defines the logging configuration for My.Application.Log -->
            <source name="DefaultSource" switchName="DefaultSwitch">
                <listeners>
                    <add name="FileLog"/>
                    <!-- Uncomment the below section to write to the Application Event Log -->
                    <!--<add name="EventLog"/>-->
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="DefaultSwitch" value="Information"/>
        </switches>
        <sharedListeners>
            <add name="FileLog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" initializeData="FileLogWriter"/>
            <!-- Uncomment the below section and replace APPLICATION_NAME with the name of your application to write to the Application Event Log -->
            <!--<add name="EventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="APPLICATION_NAME"/> -->
        </sharedListeners>
    </system.diagnostics>
    <applicationSettings>
        <MDIWebTransmCI.My.MySettings>
            <setting name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" serializeAs="String">
                <value>http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</value>
            </setting>
        </MDIWebTransmCI.My.MySettings>
    </applicationSettings>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>


// FILE: SDCIM/ModusCI/Deploy/AcomResumo.sql
select * from VW_REPORT_ACOM_RESUMO
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by FICH_DATA


// FILE: SDCIM/ModusCI/Deploy/CIControlo.exe.config
<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="CIControlo.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <applicationSettings>
        <CIControlo.Properties.Settings>
            <setting name="P" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="S" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="A" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="D" serializeAs="String">
                <value>BDSPCSDCIMA01</value>
            </setting>
            <setting name="UseBaseDados" serializeAs="String">
                <value>1</value>
            </setting>
            <setting name="GCAA9601H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9601D" serializeAs="String">
                <value>BDSPGCCALX</value>
            </setting>
            <setting name="GCAA9604H" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="GCAA9604D" serializeAs="String">
                <value>BDSPGCCAPT</value>
            </setting>
            <setting name="PRDH" serializeAs="String">
                <value>VPC6001SQL111\S2K081</value>
            </setting>
            <setting name="PRDD" serializeAs="String">
                <value>BDSPCSDCIMA01</value>
            </setting>
            <setting name="QUAH" serializeAs="String">
                <value>SQC6001SQL17\S2K082</value>
            </setting>
            <setting name="QUAD" serializeAs="String">
                <value>BDSQCSDCIMA01</value>
            </setting>
            <setting name="DVPH" serializeAs="String">
                <value>SDC6001SQL28\S2K081</value>
            </setting>
            <setting name="DVPD" serializeAs="String">
                <value>BDSDCSDCIMA01</value>
            </setting>
        </CIControlo.Properties.Settings>
    </applicationSettings>
<startup useLegacyV2RuntimeActivationPolicy="true">
	<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
</startup>
</configuration>




// FILE: SDCIM/ModusCI/Deploy/GENERICLOG.sql
select top 1000 * from VW_GENERICLOG_REPORT
Where 
%condition%
order by 4 desc

// FILE: SDCIM/ModusCI/Deploy/ListaLotesAcom.sql
select * from VW_REPORT_LOTEACOM_DETALHE
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by FICH_DATA, DOCACOM_BALCAO


// FILE: SDCIM/ModusCI/Deploy/ListagemRemessas.sql
select * from VW_REPORT_ENVIO_DETALHADO
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by REMIN_DATA, REMIN_BALCAO, REMIN_NUMERO 


// FILE: SDCIM/ModusCI/Deploy/ResumoEnvios.sql
select * from VW_REPORT_ENVIO_RESUMIDO
Where 
%condition%
 --Remin_data between '2008-06-10 0:00:00' and '2008-06-15 0:00:00' 
order by REMPROC_OPERATIVA, REMIN_DATA


// FILE: SDCIM/ModusCI/MDIWebTransmCI/My Project/Application.Designer.vb
﻿'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On



// FILE: SDCIM/ModusCI/MDIWebTransmCI/My Project/AssemblyInfo.vb
﻿Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' General Information about an assembly is controlled through the following 
' set of attributes. Change these attribute values to modify the information
' associated with an assembly.

' Review the values of the assembly attributes

<Assembly: AssemblyTitle("MDIWebTransmCI")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")> 
<Assembly: AssemblyProduct("MDIWebTransmCI")> 
<Assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2009")> 
<Assembly: AssemblyTrademark("")> 

<Assembly: ComVisible(False)>

'The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid("7168a34b-82a2-4836-aa1f-23697aa69ed4")> 

' Version information for an assembly consists of the following four values:
'
'      Major Version
'      Minor Version 
'      Build Number
'      Revision
'
' You can specify all the values or you can default the Build and Revision Numbers 
' by using the '*' as shown below:
' <Assembly: AssemblyVersion("1.0.*")> 

<Assembly: AssemblyVersion("1.0.0.0")> 
<Assembly: AssemblyFileVersion("1.0.0.0")> 


// FILE: SDCIM/ModusCI/MDIWebTransmCI/My Project/Resources.Designer.vb
﻿'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System

Namespace My.Resources
    
    'This class was auto-generated by the StronglyTypedResourceBuilder
    'class via a tool like ResGen or Visual Studio.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    '''<summary>
    '''  A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.Microsoft.VisualBasic.HideModuleNameAttribute()>  _
    Friend Module Resources
        
        Private resourceMan As Global.System.Resources.ResourceManager
        
        Private resourceCulture As Global.System.Globalization.CultureInfo
        
        '''<summary>
        '''  Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager
            Get
                If Object.ReferenceEquals(resourceMan, Nothing) Then
                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("MDIWebTransmCI.Resources", GetType(Resources).Assembly)
                    resourceMan = temp
                End If
                Return resourceMan
            End Get
        End Property
        
        '''<summary>
        '''  Overrides the current thread's CurrentUICulture property for all
        '''  resource lookups using this strongly typed resource class.
        '''</summary>
        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Friend Property Culture() As Global.System.Globalization.CultureInfo
            Get
                Return resourceCulture
            End Get
            Set
                resourceCulture = value
            End Set
        End Property
    End Module
End Namespace


// FILE: SDCIM/ModusCI/MDIWebTransmCI/My Project/Resources.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/MDIWebTransmCI/My Project/Settings.Designer.vb
﻿'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My
    
    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0"),  _
     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _
    Partial Friend NotInheritable Class MySettings
        Inherits Global.System.Configuration.ApplicationSettingsBase
        
        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()),MySettings)
        
#Region "My.Settings Auto-Save Functionality"
#If _MyType = "WindowsForms" Then
    Private Shared addedHandler As Boolean

    Private Shared addedHandlerLockObject As New Object

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _
    Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)
        If My.Application.SaveMySettingsOnExit Then
            My.Settings.Save()
        End If
    End Sub
#End If
#End Region
        
        Public Shared ReadOnly Property [Default]() As MySettings
            Get
                
#If _MyType = "WindowsForms" Then
               If Not addedHandler Then
                    SyncLock addedHandlerLockObject
                        If Not addedHandler Then
                            AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
                            addedHandler = True
                        End If
                    End SyncLock
                End If
#End If
                Return defaultInstance
            End Get
        End Property
        
        <Global.System.Configuration.ApplicationScopedSettingAttribute(),  _
         Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.Configuration.SpecialSettingAttribute(Global.System.Configuration.SpecialSetting.WebServiceUrl),  _
         Global.System.Configuration.DefaultSettingValueAttribute("http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService")>  _
        Public ReadOnly Property MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService() As String
            Get
                Return CType(Me("MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService"),String)
            End Get
        End Property
    End Class
End Namespace

Namespace My
    
    <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _
     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _
    Friend Module MySettingsProperty
        
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _
        Friend ReadOnly Property Settings() As Global.MDIWebTransmCI.My.MySettings
            Get
                Return Global.MDIWebTransmCI.My.MySettings.Default
            End Get
        End Property
    End Module
End Namespace


// FILE: SDCIM/ModusCI/MDIWebTransmCI/My Project/Settings.settings
﻿<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="My" GeneratedClassName="MySettings" UseMySettingsClassName="true">
  <Profiles />
  <Settings>
    <Setting Name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" Type="(Web Service URL)" Scope="Application">
      <Value Profile="(Default)">http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</Value>
    </Setting>
  </Settings>
</SettingsFile>

// FILE: SDCIM/ModusCI/MDIWebTransmCI/Web References/waiaccesstuInsertDoc/Reference.map
<?xml version="1.0" encoding="utf-8"?>
<DiscoveryClientResultsFile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Results>
    <DiscoveryClientResult referenceType="System.Web.Services.Discovery.ContractReference" url="http://waiaccesstu/UWTDWeb/services/Insert_DocumentoMDIService/wsdl/Insert_DocumentoMDIService.wsdl" filename="Insert_DocumentoMDIService.wsdl" />
  </Results>
</DiscoveryClientResultsFile>

// FILE: SDCIM/ModusCI/MDIWebTransmCI/Web References/waiaccesstuInsertDoc/Reference.vb
﻿'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
'
Namespace waiaccesstuInsertDoc
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Insert_DocumentoMDIServiceSoapBinding", [Namespace]:="http://uwtd.app.wai.cgd.com"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(JDBCOutput)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(JDBCInput))>  _
    Partial Public Class Insert_DocumentoMDIServiceService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private invokeInsert_DocumentoMDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.MDIWebTransmCI.My.MySettings.Default.MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event invokeInsert_DocumentoMDICompleted As invokeInsert_DocumentoMDICompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://uwtd.app.wai.cgd.com", ResponseNamespace:="http://uwtd.app.wai.cgd.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function invokeInsert_DocumentoMDI(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal input As Insert_DocumentoMDIInput) As <System.Xml.Serialization.XmlElementAttribute("invokeInsert_DocumentoMDIReturn", IsNullable:=true)> Insert_DocumentoMDIOutput
            Dim results() As Object = Me.Invoke("invokeInsert_DocumentoMDI", New Object() {input})
            Return CType(results(0),Insert_DocumentoMDIOutput)
        End Function
        
        '''<remarks/>
        Public Overloads Sub invokeInsert_DocumentoMDIAsync(ByVal input As Insert_DocumentoMDIInput)
            Me.invokeInsert_DocumentoMDIAsync(input, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub invokeInsert_DocumentoMDIAsync(ByVal input As Insert_DocumentoMDIInput, ByVal userState As Object)
            If (Me.invokeInsert_DocumentoMDIOperationCompleted Is Nothing) Then
                Me.invokeInsert_DocumentoMDIOperationCompleted = AddressOf Me.OninvokeInsert_DocumentoMDIOperationCompleted
            End If
            Me.InvokeAsync("invokeInsert_DocumentoMDI", New Object() {input}, Me.invokeInsert_DocumentoMDIOperationCompleted, userState)
        End Sub
        
        Private Sub OninvokeInsert_DocumentoMDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.invokeInsert_DocumentoMDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent invokeInsert_DocumentoMDICompleted(Me, New invokeInsert_DocumentoMDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://insertdocumentomdi.conn.wai.cgd.com")>  _
    Partial Public Class Insert_DocumentoMDIInput
        Inherits JDBCInput
        
        Private cA_PaisField As String
        
        Private cA_BancoField As System.Nullable(Of Integer)
        
        Private cA_BalcaoField As System.Nullable(Of Integer)
        
        Private cA_NumeroField As System.Nullable(Of Integer)
        
        Private cA_IDDispositivoField As String
        
        Private cA_BalcaoGestorField As System.Nullable(Of Integer)
        
        Private dEP_DataField As System.Nullable(Of Date)
        
        Private dEP_NSessaoField As System.Nullable(Of Integer)
        
        Private dEP_NRecolhaField As System.Nullable(Of Integer)
        
        Private dEP_NSeqOperacaoField As System.Nullable(Of Integer)
        
        Private dEP_IDField As System.Nullable(Of Integer)
        
        Private dEP_QTDocsField As System.Nullable(Of Integer)
        
        Private dEP_EstadoField As System.Nullable(Of Integer)
        
        Private dEP_MontanteField As System.Nullable(Of Decimal)
        
        Private dEP_NumContaField As String
        
        Private dEP_AplicacaoField As String
        
        Private dEP_Estado_OperField As System.Nullable(Of Integer)
        
        Private dOC_Indicador_ReenvioField As String
        
        Private dOC_LOZIBField As String
        
        Private dOC_LONContaField As String
        
        Private dOC_LONChequeField As String
        
        Private dOC_LOMontanteField As System.Nullable(Of Decimal)
        
        Private dOC_LOTipoField As String
        
        Private dOC_NSeqField As System.Nullable(Of Integer)
        
        Private dOC_RefIndexField As String
        
        Private dOC_EstadoField As System.Nullable(Of Integer)
        
        Private dOC_TipoIMAGEmFrenteField As String
        
        Private dOC_TipoIMAGEmVersoField As String
        
        Private dOC_IMAGEmFrenteField() As Byte
        
        Private dOC_IMAGEmVersoField() As Byte
        
        Private clientIdField As Integer
        
        Private reqTokenField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CA_Pais() As String
            Get
                Return Me.cA_PaisField
            End Get
            Set
                Me.cA_PaisField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CA_Banco() As System.Nullable(Of Integer)
            Get
                Return Me.cA_BancoField
            End Get
            Set
                Me.cA_BancoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CA_Balcao() As System.Nullable(Of Integer)
            Get
                Return Me.cA_BalcaoField
            End Get
            Set
                Me.cA_BalcaoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CA_Numero() As System.Nullable(Of Integer)
            Get
                Return Me.cA_NumeroField
            End Get
            Set
                Me.cA_NumeroField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CA_IDDispositivo() As String
            Get
                Return Me.cA_IDDispositivoField
            End Get
            Set
                Me.cA_IDDispositivoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property CA_BalcaoGestor() As System.Nullable(Of Integer)
            Get
                Return Me.cA_BalcaoGestorField
            End Get
            Set
                Me.cA_BalcaoGestorField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_Data() As System.Nullable(Of Date)
            Get
                Return Me.dEP_DataField
            End Get
            Set
                Me.dEP_DataField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_NSessao() As System.Nullable(Of Integer)
            Get
                Return Me.dEP_NSessaoField
            End Get
            Set
                Me.dEP_NSessaoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_NRecolha() As System.Nullable(Of Integer)
            Get
                Return Me.dEP_NRecolhaField
            End Get
            Set
                Me.dEP_NRecolhaField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_NSeqOperacao() As System.Nullable(Of Integer)
            Get
                Return Me.dEP_NSeqOperacaoField
            End Get
            Set
                Me.dEP_NSeqOperacaoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_ID() As System.Nullable(Of Integer)
            Get
                Return Me.dEP_IDField
            End Get
            Set
                Me.dEP_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_QTDocs() As System.Nullable(Of Integer)
            Get
                Return Me.dEP_QTDocsField
            End Get
            Set
                Me.dEP_QTDocsField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_Estado() As System.Nullable(Of Integer)
            Get
                Return Me.dEP_EstadoField
            End Get
            Set
                Me.dEP_EstadoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_Montante() As System.Nullable(Of Decimal)
            Get
                Return Me.dEP_MontanteField
            End Get
            Set
                Me.dEP_MontanteField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_NumConta() As String
            Get
                Return Me.dEP_NumContaField
            End Get
            Set
                Me.dEP_NumContaField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_Aplicacao() As String
            Get
                Return Me.dEP_AplicacaoField
            End Get
            Set
                Me.dEP_AplicacaoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DEP_Estado_Oper() As System.Nullable(Of Integer)
            Get
                Return Me.dEP_Estado_OperField
            End Get
            Set
                Me.dEP_Estado_OperField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_Indicador_Reenvio() As String
            Get
                Return Me.dOC_Indicador_ReenvioField
            End Get
            Set
                Me.dOC_Indicador_ReenvioField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_LOZIB() As String
            Get
                Return Me.dOC_LOZIBField
            End Get
            Set
                Me.dOC_LOZIBField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_LONConta() As String
            Get
                Return Me.dOC_LONContaField
            End Get
            Set
                Me.dOC_LONContaField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_LONCheque() As String
            Get
                Return Me.dOC_LONChequeField
            End Get
            Set
                Me.dOC_LONChequeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_LOMontante() As System.Nullable(Of Decimal)
            Get
                Return Me.dOC_LOMontanteField
            End Get
            Set
                Me.dOC_LOMontanteField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_LOTipo() As String
            Get
                Return Me.dOC_LOTipoField
            End Get
            Set
                Me.dOC_LOTipoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_NSeq() As System.Nullable(Of Integer)
            Get
                Return Me.dOC_NSeqField
            End Get
            Set
                Me.dOC_NSeqField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_RefIndex() As String
            Get
                Return Me.dOC_RefIndexField
            End Get
            Set
                Me.dOC_RefIndexField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_Estado() As System.Nullable(Of Integer)
            Get
                Return Me.dOC_EstadoField
            End Get
            Set
                Me.dOC_EstadoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_TipoIMAGEmFrente() As String
            Get
                Return Me.dOC_TipoIMAGEmFrenteField
            End Get
            Set
                Me.dOC_TipoIMAGEmFrenteField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DOC_TipoIMAGEmVerso() As String
            Get
                Return Me.dOC_TipoIMAGEmVersoField
            End Get
            Set
                Me.dOC_TipoIMAGEmVersoField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property DOC_IMAGEmFrente() As Byte()
            Get
                Return Me.dOC_IMAGEmFrenteField
            End Get
            Set
                Me.dOC_IMAGEmFrenteField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property DOC_IMAGEmVerso() As Byte()
            Get
                Return Me.dOC_IMAGEmVersoField
            End Get
            Set
                Me.dOC_IMAGEmVersoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property clientId() As Integer
            Get
                Return Me.clientIdField
            End Get
            Set
                Me.clientIdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property reqToken() As String
            Get
                Return Me.reqTokenField
            End Get
            Set
                Me.reqTokenField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(Insert_DocumentoMDIInput)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://jdbc.conn.wai.cgd.com")>  _
    Partial Public Class JDBCInput
        
        Private pageIndexField As Integer
        
        Private pageSizeField As Integer
        
        '''<remarks/>
        Public Property pageIndex() As Integer
            Get
                Return Me.pageIndexField
            End Get
            Set
                Me.pageIndexField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property pageSize() As Integer
            Get
                Return Me.pageSizeField
            End Get
            Set
                Me.pageSizeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://insertdocumentomdi.conn.wai.cgd.com")>  _
    Partial Public Class Insert_DocumentoMDIOutput_Elem
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://conn.wai.cgd.com")>  _
    Partial Public Class Erros
        
        Private generalErrorCodeField As Integer
        
        Private errorMsgField As String
        
        Private specificErrorCodeField As String
        
        '''<remarks/>
        Public Property generalErrorCode() As Integer
            Get
                Return Me.generalErrorCodeField
            End Get
            Set
                Me.generalErrorCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property errorMsg() As String
            Get
                Return Me.errorMsgField
            End Get
            Set
                Me.errorMsgField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property specificErrorCode() As String
            Get
                Return Me.specificErrorCodeField
            End Get
            Set
                Me.specificErrorCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(Insert_DocumentoMDIOutput)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://jdbc.conn.wai.cgd.com")>  _
    Partial Public Class JDBCOutput
        
        Private rowsAffectedField As Integer
        
        Private rowsReturnedField As Integer
        
        Private sqlCodeField As Integer
        
        Private sqlStateField As Integer
        
        Private errorField As Erros
        
        Private pageIndexField As Integer
        
        Private pageSizeField As Integer
        
        '''<remarks/>
        Public Property rowsAffected() As Integer
            Get
                Return Me.rowsAffectedField
            End Get
            Set
                Me.rowsAffectedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property rowsReturned() As Integer
            Get
                Return Me.rowsReturnedField
            End Get
            Set
                Me.rowsReturnedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property sqlCode() As Integer
            Get
                Return Me.sqlCodeField
            End Get
            Set
                Me.sqlCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property sqlState() As Integer
            Get
                Return Me.sqlStateField
            End Get
            Set
                Me.sqlStateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property [error]() As Erros
            Get
                Return Me.errorField
            End Get
            Set
                Me.errorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property pageIndex() As Integer
            Get
                Return Me.pageIndexField
            End Get
            Set
                Me.pageIndexField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property pageSize() As Integer
            Get
                Return Me.pageSizeField
            End Get
            Set
                Me.pageSizeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://insertdocumentomdi.conn.wai.cgd.com")>  _
    Partial Public Class Insert_DocumentoMDIOutput
        Inherits JDBCOutput
        
        Private resultField() As Insert_DocumentoMDIOutput_Elem
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("result", IsNullable:=true)>  _
        Public Property result() As Insert_DocumentoMDIOutput_Elem()
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub invokeInsert_DocumentoMDICompletedEventHandler(ByVal sender As Object, ByVal e As invokeInsert_DocumentoMDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class invokeInsert_DocumentoMDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Insert_DocumentoMDIOutput
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Insert_DocumentoMDIOutput)
            End Get
        End Property
    End Class
End Namespace


// FILE: SDCIM/ModusCI/MDIWebTransmCI/MDIOutputFixo.vb
﻿Imports GCCA.CCAWebTransmCI


Public Class MDIOutputFixo
    Inherits OutputFixo

    Public Sub New(ByVal oOutPut As waiaccesstuInsertDoc.Insert_DocumentoMDIOutput)

        ' Processar os erros
        m_oErro = New OutputFixo.WebTransmCIErro()

        m_oErro.m_sErrorMsg = oOutPut.error.errorMsg
        m_oErro.m_iGeneralError = oOutPut.error.generalErrorCode
        m_oErro.m_sSpecificErrorCodeField = oOutPut.error.specificErrorCode

        m_iPageIndex = oOutPut.pageIndex
        m_iPageIndexSize = oOutPut.pageSize
        m_iRowsAffected = oOutPut.rowsAffected
        m_iRowsReturned = oOutPut.rowsReturned
        m_iSqlCode = oOutPut.sqlCode
        m_iSqlStatus = oOutPut.sqlState

    End Sub
End Class


// FILE: SDCIM/ModusCI/MDIWebTransmCI/MDIWebTransmCI.vbproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>MDIWebTransmCI</RootNamespace>
    <AssemblyName>MDIWebTransmCI</AssemblyName>
    <MyType>Windows</MyType>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile>MDIWebTransmCI.xml</DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022,42353,42354,42355</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>MDIWebTransmCI.xml</DocumentationFile>
    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022,42353,42354,42355</NoWarn>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="CCAGeneric, Version=4.0.2.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\CCAGeneric.dll</HintPath>
    </Reference>
    <Reference Include="CCAMSEntepriseLibLog, Version=2.0.0.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\CCAMSEntepriseLibLog.dll</HintPath>
    </Reference>
    <Reference Include="CCAWebTransmCI, Version=1.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\CCAWebTransmCI.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="GenericReportNet, Version=1.5.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericReportNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.EnterpriseServices" />
    <Reference Include="System.Web.Services" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.Practices.EnterpriseLibrary.Logging" />
    <Import Include="Microsoft.Practices.EnterpriseLibrary.Logging.Tracing" />
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Collections.Generic" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="MDIOutputFixo.vb" />
    <Compile Include="TInsertDoc.vb" />
    <Compile Include="My Project\AssemblyInfo.vb" />
    <Compile Include="My Project\Application.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Application.myapp</DependentUpon>
    </Compile>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="Web References\waiaccesstuInsertDoc\Reference.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Reference.map</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="My Project\Application.myapp">
      <Generator>MyApplicationCodeGenerator</Generator>
      <LastGenOutput>Application.Designer.vb</LastGenOutput>
    </None>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <CustomToolNamespace>My</CustomToolNamespace>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
    <None Include="Web References\waiaccesstuInsertDoc\Insert_DocumentoMDIOutput.datasource">
      <DependentUpon>Reference.map</DependentUpon>
    </None>
    <None Include="Web References\waiaccesstuInsertDoc\Insert_DocumentoMDIService.wsdl" />
    <None Include="Web References\waiaccesstuInsertDoc\Reference.map">
      <Generator>MSDiscoCodeGenerator</Generator>
      <LastGenOutput>Reference.vb</LastGenOutput>
    </None>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <WebReferences Include="Web References\" />
  </ItemGroup>
  <ItemGroup>
    <WebReferenceUrl Include="http://waiaccesstu/UWTDWeb/services/Insert_DocumentoMDIService/wsdl/Insert_DocumentoMDIService.wsdl">
      <UrlBehavior>Dynamic</UrlBehavior>
      <RelPath>Web References\waiaccesstuInsertDoc\</RelPath>
      <UpdateFromURL>http://waiaccesstu/UWTDWeb/services/Insert_DocumentoMDIService/wsdl/Insert_DocumentoMDIService.wsdl</UpdateFromURL>
      <ServiceLocationURL>
      </ServiceLocationURL>
      <CachedDynamicPropName>
      </CachedDynamicPropName>
      <CachedAppSettingsObjectName>MySettings</CachedAppSettingsObjectName>
      <CachedSettingsPropName>MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService</CachedSettingsPropName>
    </WebReferenceUrl>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.VisualBasic.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/MDIWebTransmCI/TInsertDoc.vb
﻿Imports GCCA.CCAWebTransmCI
Imports nbiis.CCAGeneric
Imports NBiis

Public Class TInsertDoc
    Inherits WebTransmCI

    Public m_sCA_PAIS As String
    Public m_iCA_BANCO As Integer
    Public m_iCA_BALCAO As Integer
    Public m_iCA_NUMERO As Integer
    Public m_sCA_IDDISPOSITIVO As String
    Public m_iCA_BALCAOGESTOR As Integer
    Public m_dtDEP_DATA As DateTime
    Public m_iDEP_NSESSAO As Integer
    Public m_iDEP_NRECOLHA As Integer
    Public m_iDEP_NSEQOPERACAO As Integer
    Public m_sDEP_ID As String
    Public m_iDEP_QTDOCS As Integer
    Public m_iDEP_ESTADO As Integer
    Public m_dDEP_MONTANTE As Decimal
    Public m_sDEP_NUMCONTA As String
    Public m_sDEP_APLICACAO As String
    Public m_iDEP_ESTADO_OPER As Integer
    Public m_sDOC_INDICADORREENVIO As String
    Public m_sDOC_LOZIB As String
    Public m_sDOC_LONCONTA As String
    Public m_sDOC_LONCHEQUE As String
    Public m_dDOC_LOMONTANTE As Decimal
    Public m_sDOC_LOTIPO As String
    Public m_iDOC_NSEQ As Integer
    Public m_sDOC_REFINDEX As String
    Public m_iDOC_ESTADO As Integer

    Public m_sImageTypeFrente As String
    Public m_sImageTypeVerso As String
    Public m_abImagemFrente As Byte()
    Public m_abImagemVerso As Byte()


    Public Sub New(ByVal oGlobalParameters As Parameters)
        MyBase.New(oGlobalParameters)

    End Sub


    Protected Overrides Sub BuildServiceObject()
        m_oService = New waiaccesstuInsertDoc.Insert_DocumentoMDIServiceService()
    End Sub

    Public Overrides Function Execute() As Boolean
        Dim oWebIn As New waiaccesstuInsertDoc.Insert_DocumentoMDIInput
        Dim oWebOut As New waiaccesstuInsertDoc.Insert_DocumentoMDIOutput

        oWebIn.pageIndex = 0
        oWebIn.pageSize = 0

        oWebIn.CA_Pais = m_sCA_PAIS
        oWebIn.CA_Banco = m_iCA_BANCO
        oWebIn.CA_Balcao = m_iCA_BALCAO
        oWebIn.CA_Numero = m_iCA_NUMERO
        oWebIn.CA_IDDispositivo = m_sCA_IDDISPOSITIVO
        oWebIn.CA_BalcaoGestor = m_iCA_BALCAOGESTOR
        oWebIn.DEP_Data = m_dtDEP_DATA
        oWebIn.DEP_NSessao = m_iDEP_NSESSAO
        oWebIn.DEP_NRecolha = m_iDEP_NRECOLHA
        oWebIn.DEP_NSeqOperacao = m_iDEP_NSEQOPERACAO
        oWebIn.DEP_ID = m_sDEP_ID
        oWebIn.DEP_QTDocs = m_iDEP_QTDOCS
        oWebIn.DEP_Estado = m_iDEP_ESTADO
        oWebIn.DEP_Montante = m_dDEP_MONTANTE
        oWebIn.DEP_NumConta = m_sDEP_NUMCONTA
        oWebIn.DEP_Aplicacao = m_sDEP_APLICACAO
        oWebIn.DEP_Estado_Oper = m_iDEP_ESTADO_OPER
        oWebIn.DOC_Indicador_Reenvio = m_sDOC_INDICADORREENVIO
        oWebIn.DOC_LOZIB = m_sDOC_LOZIB
        oWebIn.DOC_LONConta = m_sDOC_LONCONTA
        oWebIn.DOC_LONCheque = m_sDOC_LONCHEQUE
        oWebIn.DOC_LOMontante = m_dDOC_LOMONTANTE
        oWebIn.DOC_LOTipo = m_sDOC_LOTIPO
        oWebIn.DOC_NSeq = m_iDOC_NSEQ
        oWebIn.DOC_RefIndex = m_sDOC_REFINDEX
        oWebIn.DOC_Estado = m_iDOC_ESTADO

        oWebIn.DOC_TipoIMAGEmFrente = m_sImageTypeFrente
        oWebIn.DOC_TipoIMAGEmVerso = m_sImageTypeVerso
        oWebIn.DOC_IMAGEmFrente = m_abImagemFrente
        oWebIn.DOC_IMAGEmVerso = m_abImagemVerso

        oWebIn.clientId = 2
        'Comprimento máximo da token: 40
        oWebIn.reqToken = "InsDocMDI#" + m_sDEP_APLICACAO + "#" + m_iCA_BALCAO.ToString("0000") + m_iCA_NUMERO.ToString("0000") + "#" + m_sDEP_ID.PadLeft(20).Substring(15, 5) + "#" + m_iDOC_NSEQ.ToString("00000")

        Try
            Dim oServ As waiaccesstuInsertDoc.Insert_DocumentoMDIServiceService = m_oService

            'Dim oTrace As Tracer = m_oGlobalParameters.m_oMSLog.CreateTraceObject(CCAMSEntepriseLibLog.Category.Central, GetLoggingTitleIdentifier())
            oWebOut = oServ.invokeInsert_DocumentoMDI(oWebIn)
            'If Not IsNothing(oTrace) Then
            ' oTrace.Dispose()
            'End If

        Catch ex As Exception
            ProcessException(ex, "TInsertDoc")
            Return False
        End Try

        Dim oFixout = New MDIOutputFixo(oWebOut)

        If isErro(oFixout, "TInsertDoc.vb") Then
            Return False
        End If

        Return True

    End Function

    Protected Overrides Function GetLoggingTitleIdentifier() As String
        Return "MDInsDc"
    End Function

    Protected Overrides Sub GetWebParameters()
        m_oService.Url = m_oGlobalParameters.GetProfileString("MDIWebTransmCI", GetProfileSectionValue(), "URL", "")
        m_oService.Timeout = m_oGlobalParameters.GetProfileInt("MDIWebTransmCI", GetProfileSectionValue(), "TimeOut", 70000)
    End Sub


End Class


// FILE: SDCIM/ModusCI/MDIWebTransmCI/app.config
<?xml version="1.0"?>
<configuration>
    <configSections>
        <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
            <section name="MDIWebTransmCI.My.MySettings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
        </sectionGroup>
    </configSections>
    <system.diagnostics>
        <sources>
            <!-- This section defines the logging configuration for My.Application.Log -->
            <source name="DefaultSource" switchName="DefaultSwitch">
                <listeners>
                    <add name="FileLog"/>
                    <!-- Uncomment the below section to write to the Application Event Log -->
                    <!--<add name="EventLog"/>-->
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="DefaultSwitch" value="Information"/>
        </switches>
        <sharedListeners>
            <add name="FileLog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" initializeData="FileLogWriter"/>
            <!-- Uncomment the below section and replace APPLICATION_NAME with the name of your application to write to the Application Event Log -->
            <!--<add name="EventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="APPLICATION_NAME"/> -->
        </sharedListeners>
    </system.diagnostics>
    <applicationSettings>
        <MDIWebTransmCI.My.MySettings>
            <setting name="MDIWebTransmCI_waiaccesstuInsertDoc_Insert_DocumentoMDIServiceService" serializeAs="String">
                <value>http://waiaccesstu:80/UWTDWeb/services/Insert_DocumentoMDIService</value>
            </setting>
        </MDIWebTransmCI.My.MySettings>
    </applicationSettings>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/></startup></configuration>


// FILE: SDCIM/ModusCI/MDIsControlo/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/MDIsControlo/Properties/Resources.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryForm.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("QueryForm.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/MDIsControlo/Properties/Resources.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/MDIsControlo/Documento_02_MDI.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;

namespace MDIsControlo
{
    public class Documento_02_MDI
    {
        public string   m_sDOCMDI_ID;
        public string   m_sDOC02_ID;
        public string   m_sCA_PAIS;
        public int      m_iCA_BANCO;
        public int      m_iCA_BALCAO;
        public int      m_iCA_NUMERO;
        public string	m_sCA_IDDISPOSITIVO;
        public int      m_iCA_BALCAOGESTOR;
        public DateTime m_dtDEP_DATA;
        public DateTime m_dtDEP_MOVTIME;
        public int      m_iDEP_NSESSAO;
        public int      m_iDEP_NRECOLHA;
        public int      m_iDEP_NSEQOPERACAO;
        public string   m_sDEP_ID;  //apenas MDI
        public string   m_sDEPC_ID; //apenas 02
        public int      m_iDEP_QTDOCS;
        public int      m_iDEP_ESTADO; //apenas MDI
        public decimal  m_dDEP_MONTANTE;
        public string	m_sDEP_NUMCONTA;
        public string	m_sDEP_APLICACAO;   //apenas MDI
        public int      m_iDEP_ESTADO_OPER;
        public string   m_sDOC_INDICADORREENVIO;   //apenas MDI
        public string	m_sDOC_LOZIB;
        public string	m_sDOC_LONCONTA;
        public string	m_sDOC_LONCHEQUE;
        public decimal  m_dDOC_LOMONTANTE;
        public string	m_sDOC_LOTIPO;
        public string   m_sDOC_ID; //apenas 02
        public int      m_iDOC_NSEQ; //apenas MDI
        public string   m_sDOC_REFINDEX;   //apenas MDI
        public int      m_iDOC_ESTADO;  //apenas MDI
        public DateTime m_dtCI_TIMER;
        public int      m_iCI_ESTADO_PROC;

        public MDIsControloForm m_oForm = null;

        public Documento_02_MDI(DataRow oRow, int iMDI02 /*MDI=1,02=2*/, bool bCITables) 
        {
            if (bCITables)
            {
                if (iMDI02 == 1)
                {
                    m_sDOCMDI_ID = oRow["DOCMDI_ID"].ToString();
                    try
                    {
                        m_sDOC02_ID = oRow["DOC02_ID"].ToString();
                    }
                    catch
                    {
                        m_sDOC02_ID = "";
                    }
                }
                if (iMDI02 == 2)
                {
                    m_sDOC02_ID = oRow["DOC02_ID"].ToString();
                    m_sDOCMDI_ID = oRow["DOCMDI_ID"].ToString();
                }
                m_dtCI_TIMER = Convert.ToDateTime(oRow["CI_TIMER"]);
                m_iCI_ESTADO_PROC = Convert.ToInt32(oRow["CI_ESTADO_PROC"]);
            }

            m_sCA_PAIS = oRow["CA_PAIS"].ToString();
            m_iCA_BANCO = Convert.ToInt32(oRow["CA_BANCO"]);
            m_iCA_BALCAO = Convert.ToInt32(oRow["CA_BALCAO"]);
            m_iCA_NUMERO = Convert.ToInt32(oRow["CA_NUMERO"]);
            m_sCA_IDDISPOSITIVO = oRow["CA_IDDISPOSITIVO"].ToString();
            m_iCA_BALCAOGESTOR = Convert.ToInt32(oRow["CA_BALCAOGESTOR"]);
            m_dtDEP_DATA = Convert.ToDateTime(oRow["DEP_DATA"]);
            m_dtDEP_MOVTIME = Convert.ToDateTime(oRow["DEP_MOVTIME"]);
            m_iDEP_NSESSAO = Convert.ToInt32(oRow["DEP_NSESSAO"]);
            m_iDEP_NRECOLHA = Convert.ToInt32(oRow["DEP_NRECOLHA"]);
            m_iDEP_NSEQOPERACAO = Convert.ToInt32(oRow["DEP_NSEQOPERACAO"]);
            m_iDEP_QTDOCS = Convert.ToInt32(oRow["DEP_QTDOCS"]);
            m_dDEP_MONTANTE = Convert.ToDecimal(oRow["DEP_MONTANTE"]);
            m_sDEP_NUMCONTA = oRow["DEP_NUMCONTA"].ToString();
            m_iDEP_ESTADO_OPER = Convert.ToInt32(oRow["DEP_ESTADO_OPER"]);
            
            m_sDOC_LOZIB = oRow["DOC_LOZIB"].ToString();
            if (m_sDOC_LOZIB == "")
            {
                m_sDOC_LOZIB = null;
            }
            else
            {
                m_sDOC_LONCONTA = oRow["DOC_LONCONTA"].ToString();
                m_sDOC_LONCHEQUE = oRow["DOC_LONCHEQUE"].ToString();
                m_dDOC_LOMONTANTE = Convert.ToDecimal(oRow["DOC_LOMONTANTE"]);
                m_sDOC_LOTIPO = oRow["DOC_LOTIPO"].ToString();
            }

            if (iMDI02 == 1)
            {
                m_sDEP_ID = oRow["DEP_ID"].ToString();  //apenas MDI
                m_sDEP_APLICACAO = oRow["DEP_APLICACAO"].ToString();   //apenas MDI
                m_iDEP_ESTADO = Convert.ToInt32(oRow["DEP_ESTADO"]);  //apenas MDI

                if (m_sDOC_LOZIB != null)
                {
                    m_sDOC_INDICADORREENVIO = oRow["DOC_INDICADOR_REENVIO"].ToString();   //apenas MDI
                    m_iDOC_NSEQ = Convert.ToInt32(oRow["DOC_NSEQ"]); //apenas MDI
                    m_sDOC_REFINDEX = oRow["DOC_REFINDEX"].ToString();   //apenas MDI
                    m_iDOC_ESTADO = Convert.ToInt32(oRow["DOC_ESTADO"]);  //apenas MDI
                }
            }

            if (iMDI02 == 2)
            {
                m_sDEPC_ID = oRow["DEPC_ID"].ToString();   //apenas 02
                m_sDOC_ID = oRow["DOC_ID"].ToString();  //apenas 02
            }

            //Apenas existem na tabela do CI
            //m_sDOCMDI_ID = oRow["DOCMDI_ID"].ToString();
            //m_dtTIMER = Convert.ToDateTime(oRow["TIMER"]);
            //m_iESTADO_PROC = Convert.ToInt32(oRow["ESTADO_PROC"]);
        
        }

        public byte[] LoadImage(string sFileName)
        {
            StreamReader sr = new StreamReader(sFileName);
            BinaryReader br = new BinaryReader(sr.BaseStream);

            byte[] aBytes = br.ReadBytes((int)sr.BaseStream.Length);

            sr.Close();
            br.Close();
            return aBytes;
        }

        public void InsertDocumentoMDI02(CIConfigGP.CIGlobalParameters oParameters, int iMDI02 /*MDI=1,02=2*/, bool bImportarImagens)
        {
            string sSPName="";
            ArrayList oParam = new ArrayList();

            oParam.Add(new GeneralDBParameters("@CA_PAIS", m_sCA_PAIS));
            oParam.Add(new GeneralDBParameters("@CA_BANCO", m_iCA_BANCO));
            oParam.Add(new GeneralDBParameters("@CA_BALCAO", m_iCA_BALCAO));
            oParam.Add(new GeneralDBParameters("@CA_NUMERO", m_iCA_NUMERO));
            oParam.Add(new GeneralDBParameters("@CA_IDDISPOSITIVO", m_sCA_IDDISPOSITIVO));
            oParam.Add(new GeneralDBParameters("@CA_BALCAOGESTOR", m_iCA_BALCAOGESTOR));
            oParam.Add(new GeneralDBParameters("@DEP_DATA", m_dtDEP_MOVTIME));
//            oParam.Add(new GeneralDBParameters("@DEP_MOVTIME", m_dtDEP_MOVTIME));
            oParam.Add(new GeneralDBParameters("@DEP_NSESSAO", m_iDEP_NSESSAO));
            oParam.Add(new GeneralDBParameters("@DEP_NRECOLHA", m_iDEP_NRECOLHA));
            oParam.Add(new GeneralDBParameters("@DEP_NSEQOPERACAO", m_iDEP_NSEQOPERACAO));
            oParam.Add(new GeneralDBParameters("@DEP_QTDOCS", m_iDEP_QTDOCS));
            oParam.Add(new GeneralDBParameters("@DEP_MONTANTE", m_dDEP_MONTANTE));
            oParam.Add(new GeneralDBParameters("@DEP_NUMCONTA", m_sDEP_NUMCONTA));
            oParam.Add(new GeneralDBParameters("@DEP_ESTADO_OPER", m_iDEP_ESTADO_OPER));
            oParam.Add(new GeneralDBParameters("@DOC_LOZIB", m_sDOC_LOZIB));
            oParam.Add(new GeneralDBParameters("@DOC_LONCONTA", m_sDOC_LONCONTA));
            oParam.Add(new GeneralDBParameters("@DOC_LONCHEQUE", m_sDOC_LONCHEQUE));
            oParam.Add(new GeneralDBParameters("@DOC_LOMONTANTE", m_dDOC_LOMONTANTE));
            oParam.Add(new GeneralDBParameters("@DOC_LOTIPO", m_sDOC_LOTIPO));

            if (iMDI02 == 1)
            {
                sSPName = "mdi.Insert_DocumentoMDI";
                oParam.Add(new GeneralDBParameters("@DEP_ID", m_sDEP_ID));
                oParam.Add(new GeneralDBParameters("@DEP_APLICACAO", m_sDEP_APLICACAO));
                oParam.Add(new GeneralDBParameters("@DOC_INDICADOR_REENVIO", m_sDOC_INDICADORREENVIO));
                oParam.Add(new GeneralDBParameters("@DOC_NSEQ", m_iDOC_NSEQ));
                oParam.Add(new GeneralDBParameters("@DOC_REFINDEX", m_sDOC_REFINDEX));
                oParam.Add(new GeneralDBParameters("@DEP_ESTADO", m_iDEP_ESTADO));
                oParam.Add(new GeneralDBParameters("@DOC_ESTADO", m_iDOC_ESTADO));

                if (bImportarImagens &&
                    (m_sDOC_LOZIB != null || m_sDOC_LONCONTA != null || m_sDOC_LONCHEQUE != null))
                {
                    oParam.Add(new GeneralDBParameters("@DOC_TIPOIMAGEMFRENTE", "JPG"));
                    oParam.Add(new GeneralDBParameters("@DOC_TIPOIMAGEMVERSO", "JPG"));
                    oParam.Add(new GeneralDBParameters("@DOC_IMAGEMFRENTE", LoadImage("D:\\CGD\\ControloCA\\DVP\\NET2.0\\ModusCI\\Icons\\DOC_FRONT.JPG")));
                    oParam.Add(new GeneralDBParameters("@DOC_IMAGEMVERSO", LoadImage("D:\\CGD\\ControloCA\\DVP\\NET2.0\\ModusCI\\Icons\\DOC_REAR.JPG")));
                }
            }
            if (iMDI02 == 2)
            {
                sSPName = "mdi.Insert_Documento02";
                oParam.Add(new GeneralDBParameters("@DEPC_ID", m_sDEPC_ID));
                oParam.Add(new GeneralDBParameters("@DOC_ID", m_sDOC_ID));
            }

            int iTentativas = 0;
            Repete:
            iTentativas++;
            try
            {
                oParameters.DirectStoredProcedureNonQuery(sSPName, ref oParam);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, sSPName, 200);
                if (iTentativas < 4)
                {
                    goto Repete;
                }
                MessageBox.Show(ex.Message, sSPName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                DialogResult oRes = MessageBox.Show("Insistir?\nCancel para Skip", sSPName, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                if (oRes == DialogResult.No)
                {
                    throw;
                }
                if (oRes != DialogResult.Cancel)
                {
                    return;
                }
                goto Repete;
            }
        }

        public void WSInsertDocumentoMDI(GlobalParameters oParameters, bool bImportarImagens)
        {

            NBiis.CCAGeneric.Parameters oParam=null;
            ///U:NVB0047 /P:0 /S:1 /A:7  /H:GCXSQLPRDVS301 /D:BDSPGCCALX
            oParam = new NBiis.CCAGeneric.Parameters();

            oParam.DatabaseName = oParameters.DatabaseName;
            oParam.Host = oParameters.Host;
            oParam.DataBase = oParameters.DataBase;

            MDIWebTransmCI.TInsertDoc oWS = null;
            int iTentativas1 = 0;
        Repete1:
            iTentativas1++;
            try
            {
                oWS = null;
                oWS = new MDIWebTransmCI.TInsertDoc(oParam);
            }
            catch (Exception ex)
            {
                if (iTentativas1 < 4)
                {
                    goto Repete1;
                }
                if (MessageBox.Show(ex.Message + "\nContinuar?", "new MDIWebTransmCI.TInsertDoc(oParam)", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    throw;
                }
            }

            if (m_sDOC_INDICADORREENVIO == null) m_sDOC_INDICADORREENVIO = "";
            if (m_sDOC_LOZIB == null) m_sDOC_LOZIB = "";
            if (m_sDOC_LONCONTA == null) m_sDOC_LONCONTA = "";
            if (m_sDOC_LONCHEQUE == null) m_sDOC_LONCHEQUE = "";
            if (m_sDOC_LOTIPO == null) m_sDOC_LOTIPO = "";
            if (m_sDOC_REFINDEX == null) m_sDOC_REFINDEX = "";

            oWS.m_sCA_PAIS	=	m_sCA_PAIS;
            oWS.m_iCA_BANCO	=	m_iCA_BANCO;
            oWS.m_iCA_BALCAO	=	m_iCA_BALCAO;
            oWS.m_iCA_NUMERO	=	m_iCA_NUMERO;
            oWS.m_sCA_IDDISPOSITIVO	=	m_sCA_IDDISPOSITIVO;
            oWS.m_iCA_BALCAOGESTOR	=	m_iCA_BALCAOGESTOR;
            oWS.m_dtDEP_DATA	=	m_dtDEP_MOVTIME;
            oWS.m_iDEP_NSESSAO	=	m_iDEP_NSESSAO;
            oWS.m_iDEP_NRECOLHA	=	m_iDEP_NRECOLHA;
            oWS.m_iDEP_NSEQOPERACAO	=	m_iDEP_NSEQOPERACAO;
            oWS.m_sDEP_ID  	=	m_sDEP_ID;
            oWS.m_iDEP_QTDOCS	=	m_iDEP_QTDOCS;
            oWS.m_iDEP_ESTADO 	=	m_iDEP_ESTADO;
            oWS.m_dDEP_MONTANTE	=	m_dDEP_MONTANTE;
            oWS.m_sDEP_NUMCONTA	=	m_sDEP_NUMCONTA;
            oWS.m_sDEP_APLICACAO  	=	m_sDEP_APLICACAO;
            oWS.m_iDEP_ESTADO_OPER	=	m_iDEP_ESTADO_OPER;
            oWS.m_sDOC_INDICADORREENVIO  	=	m_sDOC_INDICADORREENVIO;
            oWS.m_sDOC_LOZIB	=	m_sDOC_LOZIB;
            oWS.m_sDOC_LONCONTA	=	m_sDOC_LONCONTA;
            oWS.m_sDOC_LONCHEQUE	=	m_sDOC_LONCHEQUE;
            oWS.m_dDOC_LOMONTANTE	=	m_dDOC_LOMONTANTE;
            oWS.m_sDOC_LOTIPO	=	m_sDOC_LOTIPO;
            oWS.m_iDOC_NSEQ 	=	m_iDOC_NSEQ;
            oWS.m_sDOC_REFINDEX   	=	m_sDOC_REFINDEX;
            oWS.m_iDOC_ESTADO  	=	m_iDOC_ESTADO;

            oWS.m_sImageTypeFrente = "JPG";
            oWS.m_sImageTypeVerso = "JPG";
            oWS.m_abImagemFrente = null;// new Byte[1];
            oWS.m_abImagemVerso = null;// new Byte[1];

            if (bImportarImagens &&
                (m_sDOC_LOZIB != "" || m_sDOC_LONCONTA != "" || m_sDOC_LONCHEQUE != ""))
            {
                oWS.m_abImagemFrente = LoadImage("D:\\CGD\\ControloCA\\DVP\\NET2.0\\ModusCI\\Icons\\DOC_FRONT.JPG");
                oWS.m_abImagemVerso = LoadImage("D:\\CGD\\ControloCA\\DVP\\NET2.0\\ModusCI\\Icons\\DOC_REAR.JPG");
            }

            int iTentativas = 0;
        Repete:
            iTentativas++;
            try
            {
                //GenericLog.GenLogRegistarInfo("Envio para " + m_iCA_BALCAOGESTOR.ToString() + " do DEP_ID", "WSInsertDocumentoMDI()", Convert.ToInt32(m_sDEP_ID));
                string sMsg = "";
                if (!oWS.Execute())
                {
                    sMsg = "Erro na invocação do WS";
                    sMsg += "\nErrorNumber: " + oWS.m_dErrorNumber;
                    sMsg += "\nErrorMessage: " + oWS.m_sErrorMessage;
                    sMsg += "\nErrorDscMessage: " + oWS.m_sErrorDscMessage;

                    if (oWS.m_dErrorNumber == 410)
                    {
                    }
                    else
                    {
                        throw new Exception(sMsg);
                    }
                }
                ShowError(sMsg);
            }
            catch (Exception ex)
            {
                ShowError(ex.Message);
                GenericLog.GenLogRegistarErro(ref ex, "WSInsertDocumentoMDI()", 201);
                if (iTentativas < 4)
                {
                    goto Repete;
                }
                MessageBox.Show(ex.Message, "WSInsertDocumentoMDI()", MessageBoxButtons.OK, MessageBoxIcon.Error);
                DialogResult oRes = MessageBox.Show("Insistir?\nCancel para Skip", "WSInsertDocumentoMDI()", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                if (oRes == DialogResult.No)
                {
                    throw;
                }
                if (oRes == DialogResult.Cancel)
                {
                    oWS = null;
                    return;
                }
                goto Repete;
            }
            oWS = null;

        }

        void ShowError(string sMsg)
        {
            if (m_oForm != null)
            {
                m_oForm.textBoxError.Text = sMsg;
                if (sMsg.Length > 0)
                {
                    m_oForm.textBoxError.BackColor = Color.Red;
                }
                else
                {
                    m_oForm.textBoxError.BackColor = System.Drawing.SystemColors.GrayText;
                }
                System.Windows.Forms.Application.DoEvents();
            }
        }

        public ListViewItem MakeListViewItem(string sDateFormat, string sDateTimeFormat, int iMDI02 /*MDI=1,02=2*/ )
        {
            ListViewItem olvItem = new ListViewItem();

            //if (iMDI02 == 1) olvItem.Text = m_sDOCMDI_ID;
            //if (iMDI02 == 2) olvItem.Text = m_sDOC02_ID;

            olvItem.Text = m_sDOCMDI_ID;
            olvItem.SubItems.Add(m_sDOC02_ID);

            olvItem.SubItems.Add(m_sCA_PAIS);
            olvItem.SubItems.Add(m_iCA_BANCO.ToString().PadLeft(4, ' '));
            olvItem.SubItems.Add(m_iCA_BALCAO.ToString("0000"));
            olvItem.SubItems.Add(m_iCA_NUMERO.ToString().PadLeft(4, ' '));
            olvItem.SubItems.Add(m_sCA_IDDISPOSITIVO);
            olvItem.SubItems.Add(m_iCA_BALCAOGESTOR.ToString("0000"));
            olvItem.SubItems.Add(m_dtDEP_DATA.ToString(sDateFormat));
            olvItem.SubItems.Add(m_dtDEP_MOVTIME.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(m_iDEP_NSESSAO.ToString().PadLeft(4, ' '));
            olvItem.SubItems.Add(m_iDEP_NRECOLHA.ToString().PadLeft(2, ' '));
            olvItem.SubItems.Add(m_iDEP_NSEQOPERACAO.ToString().PadLeft(5, ' '));
            if (iMDI02 == 1) olvItem.SubItems.Add(m_sDEP_ID);
            if (iMDI02 == 2) olvItem.SubItems.Add(m_sDEPC_ID);
            olvItem.SubItems.Add(m_iDEP_QTDOCS.ToString().PadLeft(4, ' '));
            if (iMDI02==1) olvItem.SubItems.Add(m_iDEP_ESTADO.ToString()); //apenas MDI
            olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDEP_MONTANTE).PadLeft(16, ' '));
            olvItem.SubItems.Add(m_sDEP_NUMCONTA);
            if (iMDI02 == 1) olvItem.SubItems.Add(m_sDEP_APLICACAO);   //apenas MDI
            olvItem.SubItems.Add(m_iDEP_ESTADO_OPER.ToString());
            if (iMDI02 == 1) olvItem.SubItems.Add(m_sDOC_INDICADORREENVIO);   //apenas MDI
            olvItem.SubItems.Add(m_sDOC_LOZIB);
            olvItem.SubItems.Add(m_sDOC_LONCONTA);
            olvItem.SubItems.Add(m_sDOC_LONCHEQUE);
            olvItem.SubItems.Add(NBiis.Generic.GenericFunctions.ToMoney(m_dDOC_LOMONTANTE).PadLeft(16, ' '));
            olvItem.SubItems.Add(m_sDOC_LOTIPO);
            if (iMDI02 == 2) olvItem.SubItems.Add(m_sDOC_ID); //apenas 02
            if (iMDI02 == 1) olvItem.SubItems.Add(m_iDOC_NSEQ.ToString().PadLeft(3, ' ')); //apenas MDI
            if (iMDI02 == 1) olvItem.SubItems.Add(m_sDOC_REFINDEX);   //apenas MDI
            if (iMDI02 == 1) olvItem.SubItems.Add(m_iDOC_ESTADO.ToString());  //apenas MDI
            olvItem.SubItems.Add(m_dtCI_TIMER.ToString(sDateTimeFormat));
            olvItem.SubItems.Add(m_iCI_ESTADO_PROC.ToString());

            return olvItem;
        }

    }
}


// FILE: SDCIM/ModusCI/MDIsControlo/ImportarGCAA_02_MDI.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace MDIsControlo
{
    public class ImportarGCAA_02_MDI
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected CIConfigGP.CIGlobalParameters m_oParametersGCAA;

        protected int m_iLastNSeqOperacao;
        protected int m_iCurrDepDoc;

        public MDIsControloForm m_oForm=null;

        public ImportarGCAA_02_MDI(CIConfigGP.CIGlobalParameters oParam, CIConfigGP.CIGlobalParameters oParamGCAA)
        {
            m_oParameters = oParam;
            m_oParametersGCAA = oParamGCAA;
        }

        public void InsertDocumento02(DataRow oRow)
        {
            Documento_02_MDI oDoc = new Documento_02_MDI(oRow, 2, false);
            oDoc.m_oForm = m_oForm;

            if (oDoc.m_iDEP_NSEQOPERACAO != m_iLastNSeqOperacao)
            {
                m_iLastNSeqOperacao = oDoc.m_iDEP_NSEQOPERACAO;
                m_iCurrDepDoc = 0;
            }
            oDoc.m_iDOC_NSEQ = ++m_iCurrDepDoc;

            oDoc.InsertDocumentoMDI02(m_oParameters, 2, false);
        }

        public void InsertDocumentoMDI(DataRow oRow, bool bImportarImagens)
        {
            Documento_02_MDI oDoc = new Documento_02_MDI(oRow, 1, false);
            oDoc.m_oForm = m_oForm;
            if (oDoc.m_iDEP_NSEQOPERACAO != m_iLastNSeqOperacao)
            {
                m_iLastNSeqOperacao = oDoc.m_iDEP_NSEQOPERACAO;
                m_iCurrDepDoc = 0;
            }
            oDoc.m_iDOC_NSEQ = ++m_iCurrDepDoc;

            //oDoc.InsertDocumentoMDI02(m_oParameters, 1, bImportarImagens);

            oDoc.WSInsertDocumentoMDI(m_oParameters, bImportarImagens);


        }

        protected string m_sQuery02;
        protected string m_sQueryMDI;

        protected string MakeQuery()
        {
            string sQuery = "";
            sQuery += "select ";
            sQuery += " CA_PAIS as CA_PAIS,";
            sQuery += " CA_BANCO as CA_BANCO,";
            sQuery += " CA_BALCAO as CA_BALCAO,";
            sQuery += " CA_NSEQ as CA_NUMERO,";
            sQuery += " CA_PULU as CA_IDDISPOSITIVO,";
            sQuery += " CA_ORGAO_GESTOR as CA_BALCAOGESTOR,";
            sQuery += " CADEPC_DATA as DEP_DATA,";
            sQuery += " CADEPC_MOVTIME as DEP_MOVTIME,";
            sQuery += " CAPCCD_NSESSAO as DEP_NSESSAO,";
            sQuery += " CAPCCD_NRECOLHA as DEP_NRECOLHA,";
            sQuery += " right(cast(dc.CADEPC_ID as varchar(64)),5) as DEP_NSEQOPERACAO,";
            sQuery += " dc.CADEPC_ID as DEPC_ID,";
            sQuery += " dr.CADEPR_ID as DEP_ID,";
            sQuery += " -1 as DEP_QTDOCS,";
            sQuery += " ADEP_ID as DEP_ESTADO,";
            sQuery += " CADEPC_MT_TOTAL as DEP_MONTANTE,";
            //sQuery += " -1*CADEPC_MT_TOTAL as DEP_MONTANTE,";
            sQuery += " right('0000' + cast(CADEPC_CONTA_BALCAO as varchar(4)),4) + CADEPC_CONTA_NUMERO + CADEPC_CONTA_TIPO as DEP_NUMCONTA,";
            sQuery += " '02' as DEP_APLICACAO,";
            sQuery += " CADEPR_STATUS as DEP_ESTADO_OPER,";
            sQuery += " 'N' as DOC_INDICADOR_REENVIO,";
            sQuery += " DOCFIS_ZON5 as DOC_LOZIB,";
            sQuery += " DOCFIS_ZON4 as DOC_LONCONTA,";
            sQuery += " DOCFIS_ZON3 as DOC_LONCHEQUE,";
            sQuery += " DOCFIS_IMPORT as DOC_LOMONTANTE,";
            sQuery += " DOCFIS_ZON1 as DOC_LOTIPO,";
            sQuery += " DOCFIS_ID as DOC_ID,";
            sQuery += " 1 as DOC_NSEQ,";
            sQuery += " DOCFIS_INDX as DOC_REFINDEX,";
            sQuery += " DOCFIS_STAT as DOC_ESTADO,";
            sQuery += " 'jpg' as DOC_TIPOIMAGEMFRENTE,";
            sQuery += " 'jpg' as DOC_TIPOIMAGEMVERSO,";
            sQuery += " '' as DOC_IMAGEMFRENTE,";
            sQuery += " '' as DOC_IMAGEMVERSO";
            sQuery += " from ca_deposito_recolha dr with (nolock)";
            sQuery += " inner join ca_deposito_central dc with (nolock) on dr.cadepc_id=dc.cadepc_id";
            sQuery += " inner join ca_periodo_contab_central_dep pc with (nolock) on pc.capccd_id=dc.capccd_id";
            sQuery += " inner join caixa_automatica ca with (nolock) on ca.ca_id=pc.ca_id";
            sQuery += " left outer join docfisico d with (nolock) on d.cadepr_id=dr.cadepr_id ";

            m_iLastNSeqOperacao=-1;
            m_iCurrDepDoc = 0;

            return sQuery;
        }

        public string MakeQueryMDI(string sWhereClause)
        {
            string sQuery = m_oParameters.GetProfileString("GCCA2CI", "QUERIE", "DOCUMENTOMDI", "");

            if (sQuery == "")
            {
                sQuery = MakeQuery();
            }
            sQuery += sWhereClause;

            sQuery += " ORDER BY dc.CADEPC_ID, DOCFIS_ID";

            m_sQuery02 = sQuery;

            return m_sQuery02;
        }
        public string MakeQuery02(string sWhereClause)
        {
            string sQuery = m_oParameters.GetProfileString("GCCA2CI", "QUERIE", "DOCUMENTO02", "");

            if (sQuery == "")
            {
                sQuery = MakeQuery();
            }
            sQuery += sWhereClause;

            sQuery += " ORDER BY dc.CADEPC_ID, DOCFIS_ID";

            m_sQuery02 = sQuery;

            return m_sQuery02;
        }
    }
}


// FILE: SDCIM/ModusCI/MDIsControlo/MDIsControlo.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D3BC3C16-AE19-4664-AC69-E5282998467B}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>MDIsControlo</RootNamespace>
    <AssemblyName>MDIsControlo</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="CCAGeneric, Version=4.0.2.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\SQC6001FAS02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\CCAGeneric.dll</HintPath>
    </Reference>
    <Reference Include="CCAWebTransmCI, Version=1.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\CCAWebTransmCI.dll</HintPath>
    </Reference>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="GenericReportNet, Version=1.5.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericReportNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Documento_02_MDI.cs" />
    <Compile Include="ImportarGCAA_02_MDI.cs" />
    <Compile Include="MDIsControloForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MDIsControloForm.Designer.cs">
      <DependentUpon>MDIsControloForm.cs</DependentUpon>
    </Compile>
    <Compile Include="MostraImagem.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="MostraImagem.Designer.cs">
      <DependentUpon>MostraImagem.cs</DependentUpon>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="MDIsControloForm.resx">
      <DependentUpon>MDIsControloForm.cs</DependentUpon>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <EmbeddedResource Include="MostraImagem.resx">
      <SubType>Designer</SubType>
      <DependentUpon>MostraImagem.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
    <ProjectReference Include="..\MDIWebTransmCI\MDIWebTransmCI.vbproj">
      <Project>{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}</Project>
      <Name>MDIWebTransmCI</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/MDIsControlo/MDIsControloForm.Designer.cs
﻿namespace MDIsControlo
{
    partial class MDIsControloForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);

            m_oMenuInterface.ControloMDIsFormMenuItemEnable(true);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MDIsControloForm));
            this.m_dateTimePickerMenor = new System.Windows.Forms.DateTimePicker();
            this.m_dateTimePickerMaior = new System.Windows.Forms.DateTimePicker();
            this.label2 = new System.Windows.Forms.Label();
            this.m_buttonRefreshMDI = new System.Windows.Forms.Button();
            this.m_textBoxMenorData = new System.Windows.Forms.TextBox();
            this.m_textBoxMaiorData = new System.Windows.Forms.TextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.m_listViewDocumentosMDI = new NBIISNET.ListViewBase();
            this.detDocColDoMDIcId = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDoc02ID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColPais = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColBanco = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColBalcao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocMaquina = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColIdDispositivo = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocBalGestor = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDepData = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDepMovTime = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColSessao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColRecolha = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColNSeqOperacao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDepID = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColQtDocs = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDepEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDepMontante = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDepConta = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDepAplicacao = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColEstadoOper = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColIndicadorReenvio = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocZona1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocNSeq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocRefarq = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColDocStat = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnDocColCiTimer = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.detDocColCIEstado = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.m_textBoxNItemsMDI = new System.Windows.Forms.TextBox();
            this.m_buttonStopRefreshMDI = new System.Windows.Forms.Button();
            this.splitContainer1 = new System.Windows.Forms.SplitContainer();
            this.label10 = new System.Windows.Forms.Label();
            this.buttonProcessaImportação = new System.Windows.Forms.Button();
            this.label9 = new System.Windows.Forms.Label();
            this.textBoxError = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.m_ctrlDataIni = new System.Windows.Forms.DateTimePicker();
            this.m_ctrlDataFim = new System.Windows.Forms.DateTimePicker();
            this.textBoxLXPT02 = new System.Windows.Forms.TextBox();
            this.m_labelDocumento02 = new System.Windows.Forms.Label();
            this.buttonStop02 = new System.Windows.Forms.Button();
            this.btImportarDocumento02 = new System.Windows.Forms.Button();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.label11 = new System.Windows.Forms.Label();
            this.textBoxSequencia = new NBIISNET.txtNumbersOnly();
            this.label8 = new System.Windows.Forms.Label();
            this.textBoxBalcao = new NBIISNET.txtNumbersOnly();
            this.label4 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            this.m_textBoxNItems02 = new System.Windows.Forms.TextBox();
            this.m_buttonStopRefresh02 = new System.Windows.Forms.Button();
            this.m_buttonRefresh02 = new System.Windows.Forms.Button();
            this.m_listViewDocumentos02 = new NBIISNET.ListViewBase();
            this.columnHeader18 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader1 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader2 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader3 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader4 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader5 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader6 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader7 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader8 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader9 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader10 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader11 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader12 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader13 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader14 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader16 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader17 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader15 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader21 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader22 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader23 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader24 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader25 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader26 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader29 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            this.columnHeader30 = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).BeginInit();
            this.splitContainer1.Panel1.SuspendLayout();
            this.splitContainer1.Panel2.SuspendLayout();
            this.splitContainer1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).BeginInit();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            this.SuspendLayout();
            // 
            // m_dateTimePickerMenor
            // 
            this.m_dateTimePickerMenor.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_dateTimePickerMenor.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_dateTimePickerMenor.Location = new System.Drawing.Point(80, 3);
            this.m_dateTimePickerMenor.Name = "m_dateTimePickerMenor";
            this.m_dateTimePickerMenor.Size = new System.Drawing.Size(176, 20);
            this.m_dateTimePickerMenor.TabIndex = 5;
            // 
            // m_dateTimePickerMaior
            // 
            this.m_dateTimePickerMaior.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_dateTimePickerMaior.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_dateTimePickerMaior.Location = new System.Drawing.Point(80, 29);
            this.m_dateTimePickerMaior.Name = "m_dateTimePickerMaior";
            this.m_dateTimePickerMaior.Size = new System.Drawing.Size(176, 20);
            this.m_dateTimePickerMaior.TabIndex = 6;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label2.Location = new System.Drawing.Point(21, 7);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(42, 13);
            this.label2.TabIndex = 1;
            this.label2.Text = "Inicio:";
            // 
            // m_buttonRefreshMDI
            // 
            this.m_buttonRefreshMDI.Location = new System.Drawing.Point(277, 2);
            this.m_buttonRefreshMDI.Name = "m_buttonRefreshMDI";
            this.m_buttonRefreshMDI.Size = new System.Drawing.Size(75, 47);
            this.m_buttonRefreshMDI.TabIndex = 7;
            this.m_buttonRefreshMDI.Text = "Refresh";
            this.m_buttonRefreshMDI.UseVisualStyleBackColor = true;
            this.m_buttonRefreshMDI.Click += new System.EventHandler(this.buttonRefresh_Click);
            // 
            // m_textBoxMenorData
            // 
            this.m_textBoxMenorData.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.m_textBoxMenorData.Location = new System.Drawing.Point(668, 2);
            this.m_textBoxMenorData.Name = "m_textBoxMenorData";
            this.m_textBoxMenorData.ReadOnly = true;
            this.m_textBoxMenorData.Size = new System.Drawing.Size(74, 20);
            this.m_textBoxMenorData.TabIndex = 31;
            this.m_textBoxMenorData.TabStop = false;
            this.m_textBoxMenorData.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // m_textBoxMaiorData
            // 
            this.m_textBoxMaiorData.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.m_textBoxMaiorData.Location = new System.Drawing.Point(756, 2);
            this.m_textBoxMaiorData.Name = "m_textBoxMaiorData";
            this.m_textBoxMaiorData.ReadOnly = true;
            this.m_textBoxMaiorData.Size = new System.Drawing.Size(74, 20);
            this.m_textBoxMaiorData.TabIndex = 32;
            this.m_textBoxMaiorData.TabStop = false;
            this.m_textBoxMaiorData.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // label3
            // 
            this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.label3.AutoSize = true;
            this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label3.Location = new System.Drawing.Point(554, 7);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(114, 13);
            this.label3.TabIndex = 25;
            this.label3.Text = "Menor/Maior Data:";
            // 
            // m_listViewDocumentosMDI
            // 
            this.m_listViewDocumentosMDI.AllowColumnReorder = true;
            this.m_listViewDocumentosMDI.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.m_listViewDocumentosMDI.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.detDocColDoMDIcId,
            this.detDocColDoc02ID,
            this.detDocColPais,
            this.detDocColBanco,
            this.detDocColBalcao,
            this.detDocColDocMaquina,
            this.detDocColIdDispositivo,
            this.detDocColDocBalGestor,
            this.detDocColDepData,
            this.detDocColDepMovTime,
            this.detDocColSessao,
            this.detDocColRecolha,
            this.detDocColNSeqOperacao,
            this.detDocColDepID,
            this.detDocColQtDocs,
            this.detDocColDepEstado,
            this.detDocColDepMontante,
            this.detDocColDepConta,
            this.detDocColDepAplicacao,
            this.detDocColEstadoOper,
            this.detDocColIndicadorReenvio,
            this.detDocColDocZona5,
            this.detDocColDocZona4,
            this.detDocColDocZona3,
            this.detDocColDocZona2,
            this.detDocColDocZona1,
            this.detDocColDocNSeq,
            this.detDocColDocRefarq,
            this.detDocColDocStat,
            this.columnDocColCiTimer,
            this.detDocColCIEstado});
            this.m_listViewDocumentosMDI.EnableExportar = true;
            this.m_listViewDocumentosMDI.FullRowSelect = true;
            this.m_listViewDocumentosMDI.GridLines = true;
            this.m_listViewDocumentosMDI.HideSelection = false;
            this.m_listViewDocumentosMDI.Location = new System.Drawing.Point(0, 56);
            this.m_listViewDocumentosMDI.MultiSelect = false;
            this.m_listViewDocumentosMDI.Name = "m_listViewDocumentosMDI";
            this.m_listViewDocumentosMDI.Size = new System.Drawing.Size(830, 256);
            this.m_listViewDocumentosMDI.TabIndex = 8;
            this.m_listViewDocumentosMDI.TabStop = false;
            this.m_listViewDocumentosMDI.UseCompatibleStateImageBehavior = false;
            this.m_listViewDocumentosMDI.View = System.Windows.Forms.View.Details;
            this.m_listViewDocumentosMDI.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewDocumentos_MouseDoubleClick);
            // 
            // detDocColDoMDIcId
            // 
            this.detDocColDoMDIcId.Text = "DocMDI ID";
            this.detDocColDoMDIcId.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.detDocColDoMDIcId.Width = 70;
            // 
            // detDocColDoc02ID
            // 
            this.detDocColDoc02ID.Text = "Doc02 ID";
            // 
            // detDocColPais
            // 
            this.detDocColPais.Text = "País";
            this.detDocColPais.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColPais.Width = 5;
            // 
            // detDocColBanco
            // 
            this.detDocColBanco.Text = "Banco";
            this.detDocColBanco.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColBanco.Width = 5;
            // 
            // detDocColBalcao
            // 
            this.detDocColBalcao.Text = "Balcão";
            this.detDocColBalcao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColBalcao.Width = 50;
            // 
            // detDocColDocMaquina
            // 
            this.detDocColDocMaquina.Text = "Seq.";
            this.detDocColDocMaquina.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocMaquina.Width = 50;
            // 
            // detDocColIdDispositivo
            // 
            this.detDocColIdDispositivo.Text = "Id Dispositivo";
            this.detDocColIdDispositivo.Width = 50;
            // 
            // detDocColDocBalGestor
            // 
            this.detDocColDocBalGestor.Text = "B. Gestor";
            this.detDocColDocBalGestor.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocBalGestor.Width = 50;
            // 
            // detDocColDepData
            // 
            this.detDocColDepData.Text = "Dep Data";
            this.detDocColDepData.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDepData.Width = 50;
            // 
            // detDocColDepMovTime
            // 
            this.detDocColDepMovTime.Text = "MovTime";
            this.detDocColDepMovTime.Width = 100;
            // 
            // detDocColSessao
            // 
            this.detDocColSessao.Text = "Sessão";
            this.detDocColSessao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColSessao.Width = 50;
            // 
            // detDocColRecolha
            // 
            this.detDocColRecolha.Text = "Recolha";
            this.detDocColRecolha.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColRecolha.Width = 50;
            // 
            // detDocColNSeqOperacao
            // 
            this.detDocColNSeqOperacao.Text = "NSeqOper";
            this.detDocColNSeqOperacao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColNSeqOperacao.Width = 50;
            // 
            // detDocColDepID
            // 
            this.detDocColDepID.Text = "DepId";
            this.detDocColDepID.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDepID.Width = 50;
            // 
            // detDocColQtDocs
            // 
            this.detDocColQtDocs.Text = "QtDocs";
            this.detDocColQtDocs.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColQtDocs.Width = 50;
            // 
            // detDocColDepEstado
            // 
            this.detDocColDepEstado.Text = "Dep Estado";
            this.detDocColDepEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDepEstado.Width = 20;
            // 
            // detDocColDepMontante
            // 
            this.detDocColDepMontante.Text = "Dep Montante";
            this.detDocColDepMontante.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // detDocColDepConta
            // 
            this.detDocColDepConta.Text = "NConta";
            this.detDocColDepConta.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDepConta.Width = 80;
            // 
            // detDocColDepAplicacao
            // 
            this.detDocColDepAplicacao.Text = "Aplic";
            this.detDocColDepAplicacao.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDepAplicacao.Width = 30;
            // 
            // detDocColEstadoOper
            // 
            this.detDocColEstadoOper.Text = "EstadoOper";
            this.detDocColEstadoOper.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColEstadoOper.Width = 20;
            // 
            // detDocColIndicadorReenvio
            // 
            this.detDocColIndicadorReenvio.Text = "Reenvio";
            this.detDocColIndicadorReenvio.Width = 20;
            // 
            // detDocColDocZona5
            // 
            this.detDocColDocZona5.Text = "ZIB";
            this.detDocColDocZona5.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona5.Width = 80;
            // 
            // detDocColDocZona4
            // 
            this.detDocColDocZona4.Text = "N. Conta";
            this.detDocColDocZona4.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona4.Width = 110;
            // 
            // detDocColDocZona3
            // 
            this.detDocColDocZona3.Text = "N.Cheque";
            this.detDocColDocZona3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona3.Width = 100;
            // 
            // detDocColDocZona2
            // 
            this.detDocColDocZona2.Text = "Montante";
            this.detDocColDocZona2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.detDocColDocZona2.Width = 100;
            // 
            // detDocColDocZona1
            // 
            this.detDocColDocZona1.Text = "Tp";
            this.detDocColDocZona1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocZona1.Width = 30;
            // 
            // detDocColDocNSeq
            // 
            this.detDocColDocNSeq.Text = "N Seq";
            this.detDocColDocNSeq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocNSeq.Width = 30;
            // 
            // detDocColDocRefarq
            // 
            this.detDocColDocRefarq.Text = "Refarq";
            this.detDocColDocRefarq.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocRefarq.Width = 50;
            // 
            // detDocColDocStat
            // 
            this.detDocColDocStat.Text = "Estado";
            this.detDocColDocStat.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColDocStat.Width = 30;
            // 
            // columnDocColCiTimer
            // 
            this.columnDocColCiTimer.Text = "CI Timer";
            this.columnDocColCiTimer.Width = 100;
            // 
            // detDocColCIEstado
            // 
            this.detDocColCIEstado.Text = "Ci Estado";
            this.detDocColCIEstado.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.detDocColCIEstado.Width = 30;
            // 
            // m_textBoxNItemsMDI
            // 
            this.m_textBoxNItemsMDI.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.m_textBoxNItemsMDI.Location = new System.Drawing.Point(659, 29);
            this.m_textBoxNItemsMDI.Name = "m_textBoxNItemsMDI";
            this.m_textBoxNItemsMDI.ReadOnly = true;
            this.m_textBoxNItemsMDI.Size = new System.Drawing.Size(111, 20);
            this.m_textBoxNItemsMDI.TabIndex = 35;
            this.m_textBoxNItemsMDI.TabStop = false;
            this.m_textBoxNItemsMDI.Text = "0 Registos";
            this.m_textBoxNItemsMDI.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // m_buttonStopRefreshMDI
            // 
            this.m_buttonStopRefreshMDI.Location = new System.Drawing.Point(358, 2);
            this.m_buttonStopRefreshMDI.Name = "m_buttonStopRefreshMDI";
            this.m_buttonStopRefreshMDI.Size = new System.Drawing.Size(75, 47);
            this.m_buttonStopRefreshMDI.TabIndex = 36;
            this.m_buttonStopRefreshMDI.Text = "Stop";
            this.m_buttonStopRefreshMDI.UseVisualStyleBackColor = true;
            this.m_buttonStopRefreshMDI.Click += new System.EventHandler(this.buttonStopRefresh_Click);
            // 
            // splitContainer1
            // 
            this.splitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer1.Location = new System.Drawing.Point(12, 12);
            this.splitContainer1.Name = "splitContainer1";
            // 
            // splitContainer1.Panel1
            // 
            this.splitContainer1.Panel1.Controls.Add(this.label10);
            this.splitContainer1.Panel1.Controls.Add(this.buttonProcessaImportação);
            this.splitContainer1.Panel1.Controls.Add(this.label9);
            this.splitContainer1.Panel1.Controls.Add(this.textBoxError);
            this.splitContainer1.Panel1.Controls.Add(this.label1);
            this.splitContainer1.Panel1.Controls.Add(this.m_ctrlDataIni);
            this.splitContainer1.Panel1.Controls.Add(this.m_ctrlDataFim);
            this.splitContainer1.Panel1.Controls.Add(this.textBoxLXPT02);
            this.splitContainer1.Panel1.Controls.Add(this.m_labelDocumento02);
            this.splitContainer1.Panel1.Controls.Add(this.buttonStop02);
            this.splitContainer1.Panel1.Controls.Add(this.btImportarDocumento02);
            this.splitContainer1.Panel1.Margin = new System.Windows.Forms.Padding(1);
            this.splitContainer1.Panel1MinSize = 1;
            // 
            // splitContainer1.Panel2
            // 
            this.splitContainer1.Panel2.Controls.Add(this.splitContainer2);
            this.splitContainer1.Size = new System.Drawing.Size(1038, 497);
            this.splitContainer1.SplitterDistance = 192;
            this.splitContainer1.TabIndex = 37;
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label10.Location = new System.Drawing.Point(13, 12);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(149, 13);
            this.label10.TabIndex = 40;
            this.label10.Text = "Importar da Aplicação 02";
            // 
            // buttonProcessaImportação
            // 
            this.buttonProcessaImportação.Location = new System.Drawing.Point(2, 240);
            this.buttonProcessaImportação.Name = "buttonProcessaImportação";
            this.buttonProcessaImportação.Size = new System.Drawing.Size(160, 23);
            this.buttonProcessaImportação.TabIndex = 39;
            this.buttonProcessaImportação.Text = "Processa Importação";
            this.buttonProcessaImportação.UseVisualStyleBackColor = true;
            this.buttonProcessaImportação.Click += new System.EventHandler(this.buttonProcessaImportação_Click);
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label9.Location = new System.Drawing.Point(31, 113);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(50, 13);
            this.label9.TabIndex = 38;
            this.label9.Text = "Balcão:";
            // 
            // textBoxError
            // 
            this.textBoxError.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
            this.textBoxError.BackColor = System.Drawing.SystemColors.Info;
            this.textBoxError.Enabled = false;
            this.textBoxError.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBoxError.Location = new System.Drawing.Point(4, 269);
            this.textBoxError.Multiline = true;
            this.textBoxError.Name = "textBoxError";
            this.textBoxError.Size = new System.Drawing.Size(161, 254);
            this.textBoxError.TabIndex = 37;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(31, 39);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(103, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "Data Inicio e Fim";
            // 
            // m_ctrlDataIni
            // 
            this.m_ctrlDataIni.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrlDataIni.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrlDataIni.Location = new System.Drawing.Point(4, 60);
            this.m_ctrlDataIni.Name = "m_ctrlDataIni";
            this.m_ctrlDataIni.Size = new System.Drawing.Size(185, 20);
            this.m_ctrlDataIni.TabIndex = 0;
            // 
            // m_ctrlDataFim
            // 
            this.m_ctrlDataFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrlDataFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrlDataFim.Location = new System.Drawing.Point(4, 82);
            this.m_ctrlDataFim.Name = "m_ctrlDataFim";
            this.m_ctrlDataFim.Size = new System.Drawing.Size(185, 20);
            this.m_ctrlDataFim.TabIndex = 0;
            // 
            // textBoxLXPT02
            // 
            this.textBoxLXPT02.Location = new System.Drawing.Point(100, 108);
            this.textBoxLXPT02.Name = "textBoxLXPT02";
            this.textBoxLXPT02.Size = new System.Drawing.Size(34, 20);
            this.textBoxLXPT02.TabIndex = 36;
            this.textBoxLXPT02.Text = "9601";
            this.textBoxLXPT02.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // m_labelDocumento02
            // 
            this.m_labelDocumento02.AutoSize = true;
            this.m_labelDocumento02.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.m_labelDocumento02.Location = new System.Drawing.Point(3, 152);
            this.m_labelDocumento02.Name = "m_labelDocumento02";
            this.m_labelDocumento02.Size = new System.Drawing.Size(89, 13);
            this.m_labelDocumento02.TabIndex = 18;
            this.m_labelDocumento02.Text = "Importados: ---";
            // 
            // buttonStop02
            // 
            this.buttonStop02.Location = new System.Drawing.Point(2, 197);
            this.buttonStop02.Name = "buttonStop02";
            this.buttonStop02.Size = new System.Drawing.Size(160, 23);
            this.buttonStop02.TabIndex = 2;
            this.buttonStop02.Text = "Stop Importação";
            this.buttonStop02.UseVisualStyleBackColor = true;
            this.buttonStop02.Click += new System.EventHandler(this.buttonStop02_Click);
            // 
            // btImportarDocumento02
            // 
            this.btImportarDocumento02.Location = new System.Drawing.Point(4, 168);
            this.btImportarDocumento02.Name = "btImportarDocumento02";
            this.btImportarDocumento02.Size = new System.Drawing.Size(158, 23);
            this.btImportarDocumento02.TabIndex = 1;
            this.btImportarDocumento02.Text = "Importar Documentos";
            this.btImportarDocumento02.UseVisualStyleBackColor = true;
            this.btImportarDocumento02.Click += new System.EventHandler(this.btImportarDocumento02_Click);
            // 
            // splitContainer2
            // 
            this.splitContainer2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainer2.Location = new System.Drawing.Point(3, 3);
            this.splitContainer2.Name = "splitContainer2";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.label11);
            this.splitContainer2.Panel1.Controls.Add(this.textBoxSequencia);
            this.splitContainer2.Panel1.Controls.Add(this.label8);
            this.splitContainer2.Panel1.Controls.Add(this.textBoxBalcao);
            this.splitContainer2.Panel1.Controls.Add(this.label4);
            this.splitContainer2.Panel1.Controls.Add(this.m_buttonStopRefreshMDI);
            this.splitContainer2.Panel1.Controls.Add(this.label7);
            this.splitContainer2.Panel1.Controls.Add(this.label5);
            this.splitContainer2.Panel1.Controls.Add(this.label3);
            this.splitContainer2.Panel1.Controls.Add(this.m_listViewDocumentosMDI);
            this.splitContainer2.Panel1.Controls.Add(this.m_dateTimePickerMenor);
            this.splitContainer2.Panel1.Controls.Add(this.m_textBoxMaiorData);
            this.splitContainer2.Panel1.Controls.Add(this.m_textBoxNItemsMDI);
            this.splitContainer2.Panel1.Controls.Add(this.m_dateTimePickerMaior);
            this.splitContainer2.Panel1.Controls.Add(this.label2);
            this.splitContainer2.Panel1.Controls.Add(this.m_textBoxMenorData);
            this.splitContainer2.Panel1.Controls.Add(this.m_buttonRefreshMDI);
            this.splitContainer2.Panel1.Margin = new System.Windows.Forms.Padding(1);
            this.splitContainer2.Panel1.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.splitContainer2.Panel1MinSize = 50;
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.label6);
            this.splitContainer2.Panel2.Controls.Add(this.m_textBoxNItems02);
            this.splitContainer2.Panel2.Controls.Add(this.m_buttonStopRefresh02);
            this.splitContainer2.Panel2.Controls.Add(this.m_buttonRefresh02);
            this.splitContainer2.Panel2.Controls.Add(this.m_listViewDocumentos02);
            this.splitContainer2.Panel2.Margin = new System.Windows.Forms.Padding(1);
            this.splitContainer2.Panel2.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.splitContainer2.Panel2MinSize = 1;
            this.splitContainer2.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.splitContainer2.Size = new System.Drawing.Size(836, 491);
            this.splitContainer2.SplitterDistance = 315;
            this.splitContainer2.TabIndex = 37;
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label11.Location = new System.Drawing.Point(551, 29);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(13, 13);
            this.label11.TabIndex = 44;
            this.label11.Text = "/";
            // 
            // textBoxSequencia
            // 
            this.textBoxSequencia.BackgroundColorNoFocus = System.Drawing.Color.White;
            this.textBoxSequencia.BackgroundColorOnFocus = System.Drawing.Color.Yellow;
            this.textBoxSequencia.DecimalPlaces = false;
            this.textBoxSequencia.Location = new System.Drawing.Point(565, 25);
            this.textBoxSequencia.MaxLength = 4;
            this.textBoxSequencia.Name = "textBoxSequencia";
            this.textBoxSequencia.NegativeNumbers = false;
            this.textBoxSequencia.Size = new System.Drawing.Size(35, 20);
            this.textBoxSequencia.TabIndex = 43;
            this.textBoxSequencia.WildCards = false;
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label8.Location = new System.Drawing.Point(438, 29);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(78, 13);
            this.label8.TabIndex = 42;
            this.label8.Text = "Balcão/Seq:";
            // 
            // textBoxBalcao
            // 
            this.textBoxBalcao.BackgroundColorNoFocus = System.Drawing.Color.White;
            this.textBoxBalcao.BackgroundColorOnFocus = System.Drawing.Color.Yellow;
            this.textBoxBalcao.DecimalPlaces = false;
            this.textBoxBalcao.Location = new System.Drawing.Point(516, 25);
            this.textBoxBalcao.MaxLength = 4;
            this.textBoxBalcao.Name = "textBoxBalcao";
            this.textBoxBalcao.NegativeNumbers = false;
            this.textBoxBalcao.Size = new System.Drawing.Size(35, 20);
            this.textBoxBalcao.TabIndex = 41;
            this.textBoxBalcao.WildCards = false;
            // 
            // label4
            // 
            this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.label4.AutoSize = true;
            this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label4.Location = new System.Drawing.Point(742, 7);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(13, 13);
            this.label4.TabIndex = 40;
            this.label4.Text = "/";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label7.Location = new System.Drawing.Point(24, 33);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(30, 13);
            this.label7.TabIndex = 39;
            this.label7.Text = "Fim:";
            // 
            // label5
            // 
            this.label5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.label5.AutoSize = true;
            this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label5.Location = new System.Drawing.Point(776, 32);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(30, 13);
            this.label5.TabIndex = 38;
            this.label5.Text = "MDI";
            // 
            // label6
            // 
            this.label6.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.label6.AutoSize = true;
            this.label6.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label6.Location = new System.Drawing.Point(791, 8);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(21, 13);
            this.label6.TabIndex = 42;
            this.label6.Text = "02";
            // 
            // m_textBoxNItems02
            // 
            this.m_textBoxNItems02.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.m_textBoxNItems02.Location = new System.Drawing.Point(674, 5);
            this.m_textBoxNItems02.Name = "m_textBoxNItems02";
            this.m_textBoxNItems02.ReadOnly = true;
            this.m_textBoxNItems02.Size = new System.Drawing.Size(111, 20);
            this.m_textBoxNItems02.TabIndex = 41;
            this.m_textBoxNItems02.TabStop = false;
            this.m_textBoxNItems02.Text = "0 Registos";
            this.m_textBoxNItems02.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // m_buttonStopRefresh02
            // 
            this.m_buttonStopRefresh02.Location = new System.Drawing.Point(361, 3);
            this.m_buttonStopRefresh02.Name = "m_buttonStopRefresh02";
            this.m_buttonStopRefresh02.Size = new System.Drawing.Size(75, 22);
            this.m_buttonStopRefresh02.TabIndex = 40;
            this.m_buttonStopRefresh02.Text = "Stop";
            this.m_buttonStopRefresh02.UseVisualStyleBackColor = true;
            this.m_buttonStopRefresh02.Click += new System.EventHandler(this.m_buttonStopRefresh02_Click);
            // 
            // m_buttonRefresh02
            // 
            this.m_buttonRefresh02.Location = new System.Drawing.Point(280, 3);
            this.m_buttonRefresh02.Name = "m_buttonRefresh02";
            this.m_buttonRefresh02.Size = new System.Drawing.Size(75, 22);
            this.m_buttonRefresh02.TabIndex = 39;
            this.m_buttonRefresh02.Text = "Refresh";
            this.m_buttonRefresh02.UseVisualStyleBackColor = true;
            this.m_buttonRefresh02.Click += new System.EventHandler(this.m_buttonRefresh02_Click);
            // 
            // m_listViewDocumentos02
            // 
            this.m_listViewDocumentos02.AllowColumnReorder = true;
            this.m_listViewDocumentos02.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.m_listViewDocumentos02.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader18,
            this.columnHeader1,
            this.columnHeader2,
            this.columnHeader3,
            this.columnHeader4,
            this.columnHeader5,
            this.columnHeader6,
            this.columnHeader7,
            this.columnHeader8,
            this.columnHeader9,
            this.columnHeader10,
            this.columnHeader11,
            this.columnHeader12,
            this.columnHeader13,
            this.columnHeader14,
            this.columnHeader16,
            this.columnHeader17,
            this.columnHeader15,
            this.columnHeader21,
            this.columnHeader22,
            this.columnHeader23,
            this.columnHeader24,
            this.columnHeader25,
            this.columnHeader26,
            this.columnHeader29,
            this.columnHeader30});
            this.m_listViewDocumentos02.EnableExportar = true;
            this.m_listViewDocumentos02.FullRowSelect = true;
            this.m_listViewDocumentos02.GridLines = true;
            this.m_listViewDocumentos02.HideSelection = false;
            this.m_listViewDocumentos02.Location = new System.Drawing.Point(3, 29);
            this.m_listViewDocumentos02.MultiSelect = false;
            this.m_listViewDocumentos02.Name = "m_listViewDocumentos02";
            this.m_listViewDocumentos02.Size = new System.Drawing.Size(830, 140);
            this.m_listViewDocumentos02.TabIndex = 38;
            this.m_listViewDocumentos02.TabStop = false;
            this.m_listViewDocumentos02.UseCompatibleStateImageBehavior = false;
            this.m_listViewDocumentos02.View = System.Windows.Forms.View.Details;
            // 
            // columnHeader18
            // 
            this.columnHeader18.Text = "DocMDI ID";
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Doc02 ID";
            this.columnHeader1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader1.Width = 70;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "País";
            this.columnHeader2.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader2.Width = 5;
            // 
            // columnHeader3
            // 
            this.columnHeader3.Text = "Banco";
            this.columnHeader3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader3.Width = 5;
            // 
            // columnHeader4
            // 
            this.columnHeader4.Text = "Balcão";
            this.columnHeader4.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader4.Width = 50;
            // 
            // columnHeader5
            // 
            this.columnHeader5.Text = "Maquina";
            this.columnHeader5.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader5.Width = 50;
            // 
            // columnHeader6
            // 
            this.columnHeader6.Text = "Id Dispositivo";
            this.columnHeader6.Width = 50;
            // 
            // columnHeader7
            // 
            this.columnHeader7.Text = "B. Gestor";
            this.columnHeader7.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader7.Width = 50;
            // 
            // columnHeader8
            // 
            this.columnHeader8.Text = "Dep Data";
            this.columnHeader8.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader8.Width = 50;
            // 
            // columnHeader9
            // 
            this.columnHeader9.Text = "MovTime";
            this.columnHeader9.Width = 100;
            // 
            // columnHeader10
            // 
            this.columnHeader10.Text = "Sessão";
            this.columnHeader10.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader10.Width = 50;
            // 
            // columnHeader11
            // 
            this.columnHeader11.Text = "Recolha";
            this.columnHeader11.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader11.Width = 50;
            // 
            // columnHeader12
            // 
            this.columnHeader12.Text = "NSeqOper";
            this.columnHeader12.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader12.Width = 50;
            // 
            // columnHeader13
            // 
            this.columnHeader13.Text = "DepC Id";
            this.columnHeader13.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader13.Width = 50;
            // 
            // columnHeader14
            // 
            this.columnHeader14.Text = "QtDocs";
            this.columnHeader14.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader14.Width = 50;
            // 
            // columnHeader16
            // 
            this.columnHeader16.Text = "Dep Montante";
            this.columnHeader16.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            // 
            // columnHeader17
            // 
            this.columnHeader17.Text = "NConta";
            this.columnHeader17.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader17.Width = 80;
            // 
            // columnHeader15
            // 
            this.columnHeader15.Text = "Dep Estado";
            this.columnHeader15.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader15.Width = 20;
            // 
            // columnHeader21
            // 
            this.columnHeader21.Text = "ZIB";
            this.columnHeader21.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader21.Width = 80;
            // 
            // columnHeader22
            // 
            this.columnHeader22.Text = "N. Conta";
            this.columnHeader22.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader22.Width = 110;
            // 
            // columnHeader23
            // 
            this.columnHeader23.Text = "N.Cheque";
            this.columnHeader23.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader23.Width = 100;
            // 
            // columnHeader24
            // 
            this.columnHeader24.Text = "Montante";
            this.columnHeader24.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            this.columnHeader24.Width = 100;
            // 
            // columnHeader25
            // 
            this.columnHeader25.Text = "Tp";
            this.columnHeader25.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader25.Width = 30;
            // 
            // columnHeader26
            // 
            this.columnHeader26.Text = "DocID";
            this.columnHeader26.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader26.Width = 30;
            // 
            // columnHeader29
            // 
            this.columnHeader29.Text = "CI Timer";
            this.columnHeader29.Width = 100;
            // 
            // columnHeader30
            // 
            this.columnHeader30.Text = "Ci Estado";
            this.columnHeader30.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.columnHeader30.Width = 30;
            // 
            // MDIsControloForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1062, 521);
            this.Controls.Add(this.splitContainer1);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "MDIsControloForm";
            this.ShowInTaskbar = false;
            this.Text = "MDIs Controlo";
            this.Load += new System.EventHandler(this.MDIsControloForm_Load);
            this.splitContainer1.Panel1.ResumeLayout(false);
            this.splitContainer1.Panel1.PerformLayout();
            this.splitContainer1.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer1)).EndInit();
            this.splitContainer1.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel1.PerformLayout();
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).EndInit();
            this.splitContainer2.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.DateTimePicker m_dateTimePickerMenor;
        private System.Windows.Forms.DateTimePicker m_dateTimePickerMaior;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Button m_buttonRefreshMDI;
        private System.Windows.Forms.TextBox m_textBoxMenorData;
        private System.Windows.Forms.TextBox m_textBoxMaiorData;
        private System.Windows.Forms.Label label3;
        private NBIISNET.ListViewBase m_listViewDocumentosMDI;
        private System.Windows.Forms.ColumnHeader detDocColDoMDIcId;
        private System.Windows.Forms.ColumnHeader detDocColDocZona5;
        private System.Windows.Forms.ColumnHeader detDocColDocZona4;
        private System.Windows.Forms.ColumnHeader detDocColDocZona3;
        private System.Windows.Forms.ColumnHeader detDocColDocZona2;
        private System.Windows.Forms.ColumnHeader detDocColDocZona1;
        private System.Windows.Forms.ColumnHeader detDocColDocStat;
        private System.Windows.Forms.ColumnHeader detDocColDepAplicacao;
        private System.Windows.Forms.ColumnHeader detDocColDocRefarq;
        private System.Windows.Forms.ColumnHeader detDocColDocNSeq;
        private System.Windows.Forms.ColumnHeader detDocColDepID;
        private System.Windows.Forms.ColumnHeader detDocColDepConta;
        private System.Windows.Forms.ColumnHeader detDocColDocMaquina;
        private System.Windows.Forms.ColumnHeader detDocColDocBalGestor;
        private System.Windows.Forms.ColumnHeader detDocColNSeqOperacao;
        private System.Windows.Forms.ColumnHeader detDocColRecolha;
        private System.Windows.Forms.ColumnHeader detDocColEstadoOper;
        private System.Windows.Forms.ColumnHeader detDocColDepData;
        private System.Windows.Forms.ColumnHeader detDocColDepMontante;
        private System.Windows.Forms.ColumnHeader detDocColQtDocs;
        private System.Windows.Forms.ColumnHeader detDocColPais;
        private System.Windows.Forms.ColumnHeader detDocColBanco;
        private System.Windows.Forms.ColumnHeader detDocColBalcao;
        private System.Windows.Forms.ColumnHeader detDocColCIEstado;
        private System.Windows.Forms.ColumnHeader detDocColDepEstado;
        private System.Windows.Forms.ColumnHeader detDocColSessao;
        private System.Windows.Forms.ColumnHeader columnDocColCiTimer;
        private System.Windows.Forms.ColumnHeader detDocColIdDispositivo;
        private System.Windows.Forms.ColumnHeader detDocColIndicadorReenvio;
        private System.Windows.Forms.ColumnHeader detDocColDepMovTime;
        private System.Windows.Forms.TextBox m_textBoxNItemsMDI;
        private System.Windows.Forms.Button m_buttonStopRefreshMDI;
        private System.Windows.Forms.SplitContainer splitContainer1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.DateTimePicker m_ctrlDataIni;
        private System.Windows.Forms.DateTimePicker m_ctrlDataFim;
        private System.Windows.Forms.TextBox textBoxLXPT02;
        private System.Windows.Forms.Label m_labelDocumento02;
        private System.Windows.Forms.Button buttonStop02;
        private System.Windows.Forms.Button btImportarDocumento02;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private NBIISNET.ListViewBase m_listViewDocumentos02;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.ColumnHeader columnHeader3;
        private System.Windows.Forms.ColumnHeader columnHeader4;
        private System.Windows.Forms.ColumnHeader columnHeader5;
        private System.Windows.Forms.ColumnHeader columnHeader6;
        private System.Windows.Forms.ColumnHeader columnHeader7;
        private System.Windows.Forms.ColumnHeader columnHeader8;
        private System.Windows.Forms.ColumnHeader columnHeader9;
        private System.Windows.Forms.ColumnHeader columnHeader10;
        private System.Windows.Forms.ColumnHeader columnHeader11;
        private System.Windows.Forms.ColumnHeader columnHeader12;
        private System.Windows.Forms.ColumnHeader columnHeader13;
        private System.Windows.Forms.ColumnHeader columnHeader14;
        private System.Windows.Forms.ColumnHeader columnHeader15;
        private System.Windows.Forms.ColumnHeader columnHeader16;
        private System.Windows.Forms.ColumnHeader columnHeader17;
        private System.Windows.Forms.ColumnHeader columnHeader21;
        private System.Windows.Forms.ColumnHeader columnHeader22;
        private System.Windows.Forms.ColumnHeader columnHeader23;
        private System.Windows.Forms.ColumnHeader columnHeader24;
        private System.Windows.Forms.ColumnHeader columnHeader25;
        private System.Windows.Forms.ColumnHeader columnHeader26;
        private System.Windows.Forms.ColumnHeader columnHeader29;
        private System.Windows.Forms.ColumnHeader columnHeader30;
        private System.Windows.Forms.TextBox m_textBoxNItems02;
        private System.Windows.Forms.Button m_buttonStopRefresh02;
        private System.Windows.Forms.Button m_buttonRefresh02;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.Label label4;
        public System.Windows.Forms.TextBox textBoxError;
        private System.Windows.Forms.Label label8;
        private NBIISNET.txtNumbersOnly  textBoxBalcao;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.Button buttonProcessaImportação;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.ColumnHeader detDocColDoc02ID;
        private System.Windows.Forms.ColumnHeader columnHeader18;
        private System.Windows.Forms.Label label11;
        private NBIISNET.txtNumbersOnly textBoxSequencia;
    }
}

// FILE: SDCIM/ModusCI/MDIsControlo/MDIsControloForm.cs
﻿using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace MDIsControlo
{
    public partial class MDIsControloForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;
        protected CIConfigGP.CIGlobalParameters m_oParametersGCAA9601;
        protected CIConfigGP.CIGlobalParameters m_oParametersGCAA9604;
        protected CIConfigGP.CIGlobalParameters m_oParametersGCAA;
        protected CIConfigGlobalParameters.CIMenuInterface m_oMenuInterface;

        public MDIsControloForm(CIConfigGP.CIGlobalParameters oParameters, CIConfigGP.CIGlobalParameters oParameters9601, CIConfigGP.CIGlobalParameters oParameters9604, CIConfigGlobalParameters.CIMenuInterface oMenuInterface)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_oParametersGCAA9601 = oParameters9601;
            m_oParametersGCAA9604 = oParameters9604;
            m_oParametersGCAA = m_oParametersGCAA9601;
            m_oMenuInterface = oMenuInterface;
        }

        void LoadInformacaoInicial()
        {
            m_textBoxMenorData.Text = Convert.ToDateTime(m_oParameters.DirectSqlScalar("select isnull(min(DEP_DATA), 0) from mdi.documento_mdi")).ToString(m_oParameters.DateFormat);
            m_textBoxMaiorData.Text = Convert.ToDateTime(m_oParameters.DirectSqlScalar("select isnull(max(DEP_DATA), 0) from mdi.documento_mdi")).ToString(m_oParameters.DateFormat);
        }


        // MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's
        // MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's
        // MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's MDI's

        private void btImportarDocumento02_Click(object sender, EventArgs e)
        {

            btImportarDocumento02.Enabled = false;

            m_oParametersGCAA = null;
            if (textBoxLXPT02.Text == "9601")
            {
                m_oParametersGCAA = m_oParametersGCAA9601;
            }
            if (textBoxLXPT02.Text == "9604")
            {
                m_oParametersGCAA = m_oParametersGCAA9604;
            }

            DataSet ds = null;

            m_oParameters.OpenConnection();

            ImportarGCAA_02_MDI oImport = new ImportarGCAA_02_MDI(m_oParameters, m_oParametersGCAA);
            //string sWhereClause = " where docfis_id is not null and TCA_TIPO=1 and ADEP_ID>=500 and CADEPC_DATA between '" + m_ctrlDataIni.Value.ToString(m_oParameters.DateFormat) + "' and '" + m_ctrlDataFim.Value.ToString(m_oParameters.DateFormat) + "' and CA_PULU in " + sMaquinas;
            string sWhereClause = " where docfis_id is not null and TCA_TIPO=1 and CA_IS_MDI = 1 and ADEP_ID>=500 and CADEPC_DATA between '" + m_ctrlDataIni.Value.ToString(m_oParameters.DateFormat) + "' and '" + m_ctrlDataFim.Value.ToString(m_oParameters.DateFormat) + "'";
            string sQuery = oImport.MakeQuery02(sWhereClause);

            try
            {
                int iCount = 0;
                ds = null;
                ds = m_oParametersGCAA.DirectSqlDataSet(sQuery, "Importar02");
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    m_labelDocumento02.Text = "Importados: " + iCount++;
                    System.Windows.Forms.Application.DoEvents();
                    oImport.InsertDocumento02(oRow);

                    if (btImportarDocumento02.Enabled)
                    {
                        throw new Exception("Importar02 Canceled");
                    }
                }
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "btImportarDocumento02_Click()", 100);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                ds.Dispose();
                ds = null;
            }

            m_oParameters.CloseConnection();

            btImportarDocumento02.Enabled = true;
        }


        private void buttonStop02_Click(object sender, EventArgs e)
        {
            btImportarDocumento02.Enabled = true;
        }

        private void MDIsControloForm_Load(object sender, EventArgs e)
        {
            m_oMenuInterface.ControloMDIsFormMenuItemEnable(false);

            this.m_ctrlDataIni.Value = DateTime.Now.AddDays(-3);
            //this.Text = m_oParametersGCAA.GetProfileString("Genericos", "Config", "BalcaoGestor", "ND");
            this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

            this.btImportarDocumento02.Enabled = (m_oParameters.UserLogged.m_iUserGroup < 1);
            this.buttonStop02.Enabled = (m_oParameters.UserLogged.m_iUserGroup < 1);
            this.buttonProcessaImportação.Enabled = (m_oParameters.UserLogged.m_iUserGroup < 1);

            this.splitContainer1.Panel1.Enabled = (m_oParameters.UserLogged.m_iUserGroup < 1);
            this.splitContainer1.Panel1Collapsed = (m_oParameters.UserLogged.m_iUserGroup > 0);

            LoadInformacaoInicial();
        }

        private void AddRow2ListViewMDI(DataRow oRow)
        {
            Documento_02_MDI oDoc = new Documento_02_MDI(oRow, 1, true);

            ListViewItem olvItem = oDoc.MakeListViewItem(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt, 1);

            olvItem.Tag = oDoc;

            m_listViewDocumentosMDI.Items.Add(olvItem);

        }

        private void AddRow2ListView02(DataRow oRow)
        {
            Documento_02_MDI oDoc = new Documento_02_MDI(oRow, 2, true);

            ListViewItem olvItem = oDoc.MakeListViewItem(m_oParameters.DateFormat, m_oParameters.DateTimeSysFmt, 2);

            olvItem.Tag = oDoc;

            m_listViewDocumentos02.Items.Add(olvItem);

        }

        private void buttonRefresh_Click(object sender, EventArgs e)
        {
            string sQuery = "select * from mdi.DOCUMENTO_MDI where DEP_DATA between '" + m_dateTimePickerMenor.Value.ToString(m_oParameters.DateFormat) + "' and '" + m_dateTimePickerMaior.Value.ToString(m_oParameters.DateFormat) + "'";

            try
            {
                if (textBoxBalcao.Text.Trim().Length != 0)
                {
                    sQuery += " and CA_BALCAO=" + textBoxBalcao.Text;
                }
                if (textBoxSequencia.Text.Trim().Length != 0)
                {
                    sQuery += " and CA_NUMERO=" + textBoxSequencia.Text;
                }

                m_buttonRefreshMDI.Enabled = false;
                m_listViewDocumentosMDI.MyClear();
                
                m_listViewDocumentosMDI.BeginUpdate();

                DataSet ds = null;
                ds = m_oParameters.DirectSqlDataSet(sQuery, "DocumentoMDI");
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    AddRow2ListViewMDI(oRow);
                    m_textBoxNItemsMDI.Text = m_listViewDocumentosMDI.Items.Count.ToString() + " Registos";
                    if (m_listViewDocumentosMDI.Items.Count % 10 == 0)
                    {
                        System.Windows.Forms.Application.DoEvents();
                    }

                    if (m_buttonRefreshMDI.Enabled)
                    {
                        throw new Exception("Refresh Canceled");
                    }
                }

                m_textBoxNItemsMDI.Text = m_listViewDocumentosMDI.Items.Count.ToString() + " Registos";
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "buttonRefresh_Click()", 100);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                m_listViewDocumentosMDI.EndUpdate();
                m_buttonRefreshMDI.Enabled = true;
                m_textBoxNItemsMDI.Text = m_listViewDocumentosMDI.Items.Count.ToString() + " Registos";
                System.Windows.Forms.Application.DoEvents();
            }

        }

        private void buttonStopRefresh_Click(object sender, EventArgs e)
        {
            m_buttonRefreshMDI.Enabled = true;
        }

        private void listViewDocumentos_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            Documento_02_MDI oDoc = (Documento_02_MDI)m_listViewDocumentosMDI.SelectedItems[0].Tag;
            MostraImagem fMostraImg = new MostraImagem(m_oParameters, oDoc.m_sDOCMDI_ID);
            fMostraImg.ShowDialog();
        }

        private void m_buttonRefresh02_Click(object sender, EventArgs e)
        {
            string sQuery = "select * from mdi.DOCUMENTO_02 where DEP_DATA between '" + m_dateTimePickerMenor.Value.ToString(m_oParameters.DateFormat) + "' and '" + m_dateTimePickerMaior.Value.ToString(m_oParameters.DateFormat) + "'";

            try
            {
                if (textBoxBalcao.Text.Trim().Length != 0)
                {
                    sQuery += " and CA_IDDISPOSITIVO like '" + textBoxBalcao.Text + "%'";
                }
                m_buttonRefresh02.Enabled = false;
                m_listViewDocumentos02.MyClear();

                m_listViewDocumentos02.BeginUpdate();

                DataSet ds = null;
                ds = m_oParameters.DirectSqlDataSet(sQuery, "Documento02");
                foreach (DataRow oRow in ds.Tables[0].Rows)
                {
                    AddRow2ListView02(oRow);
                    m_textBoxNItems02.Text = m_listViewDocumentos02.Items.Count.ToString() + " Registos";
                    if (m_listViewDocumentos02.Items.Count % 10 == 0)
                    {
                        System.Windows.Forms.Application.DoEvents();
                    }

                    if (m_buttonRefresh02.Enabled)
                    {
                        throw new Exception("Refresh Canceled");
                    }
                }

                m_textBoxNItems02.Text = m_listViewDocumentos02.Items.Count.ToString() + " Registos";
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "m_buttonRefresh02_Click()", 100);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                m_listViewDocumentos02.EndUpdate();
                m_buttonRefresh02.Enabled = true;
                m_textBoxNItems02.Text = m_listViewDocumentos02.Items.Count.ToString() + " Registos";
                System.Windows.Forms.Application.DoEvents();
            }

        }

        private void m_buttonStopRefresh02_Click(object sender, EventArgs e)
        {
            m_buttonRefresh02.Enabled = true;
        }

        private void buttonProcessaImportação_Click(object sender, EventArgs e)
        {

            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                string sQuery = "exec [mdi].[Update_ProcessaDocumento02]";
                m_oParameters.DirectSqlNonQuery(sQuery);

                sQuery = "delete mdi.DOCUMENTO_02 where CI_ESTADO_PROC=-1";
                m_oParameters.DirectSqlNonQuery(sQuery);

                sQuery = "delete mdi.DOCUMENTO_MDI where CI_ESTADO_PROC=-1";
                m_oParameters.DirectSqlNonQuery(sQuery);

                UpdateDOCMDI_DOC02();

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
                MessageBox.Show("Documentos 02 Processados", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "buttonProcessaImportação_Click()", 100);
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
        }

        private void UpdateDOCMDI_DOC02()
        {

            string sQuery;

            sQuery = "exec mdi.Update_AssociaDOCMDI_DOC02";
            m_oParameters.DirectSqlNonQuery(sQuery);
            return;

            sQuery = "";
            sQuery += "update mdi.DOCUMENTO_02 set DOCMDI_ID=lista.DOCMDI_ID ";
            sQuery += "from mdi.DOCUMENTO_02  ";
            sQuery += "inner join ";
            sQuery += "( ";
            sQuery += "	select d02.DOC02_ID, dmdi.DOCMDI_ID from mdi.DOCUMENTO_02 d02 inner join mdi.DOCUMENTO_MDI dmdi on  ";
            sQuery += "		d02.DOCMDI_ID is null and ";
            sQuery += "		d02.CA_BALCAO=dmdi.CA_BALCAO and ";
            sQuery += "		d02.CA_NUMERO=dmdi.CA_NUMERO and ";
            sQuery += "		d02.DEP_NSESSAO=dmdi.DEP_NSESSAO and ";
            sQuery += "		d02.DEP_NUMCONTA=dmdi.DEP_NUMCONTA and  ";
            sQuery += "		d02.DOC_LOMONTANTE=dmdi.DOC_LOMONTANTE ";
            sQuery += "	where d02.DOC02_ID not in ";
            sQuery += "	(select d02.DOC02_ID from mdi.DOCUMENTO_02 d02 inner join mdi.DOCUMENTO_MDI dmdi on  ";
            sQuery += "		d02.DOCMDI_ID is null and ";
            sQuery += "		d02.CA_BALCAO=dmdi.CA_BALCAO and ";
            sQuery += "		d02.CA_NUMERO=dmdi.CA_NUMERO and ";
            sQuery += "		d02.DEP_NSESSAO=dmdi.DEP_NSESSAO and ";
            sQuery += "		d02.DEP_NUMCONTA=dmdi.DEP_NUMCONTA and  ";
            sQuery += "		d02.DOC_LOMONTANTE=dmdi.DOC_LOMONTANTE ";
            sQuery += "	group by d02.DOC02_ID having count(*)>1) ";
            sQuery += "	and dmdi.DOCMDI_ID not in ";
            sQuery += "	(select dmdi.DOCMDI_id from mdi.DOCUMENTO_02 d02 inner join mdi.DOCUMENTO_MDI dmdi on  ";
            sQuery += "		d02.DOCMDI_ID is null and ";
            sQuery += "		d02.CA_BALCAO=dmdi.CA_BALCAO and ";
            sQuery += "		d02.CA_NUMERO=dmdi.CA_NUMERO and ";
            sQuery += "		d02.DEP_NSESSAO=dmdi.DEP_NSESSAO and ";
            sQuery += "		d02.DEP_NUMCONTA=dmdi.DEP_NUMCONTA and  ";
            sQuery += "		d02.DOC_LOMONTANTE=dmdi.DOC_LOMONTANTE ";
            sQuery += "	group by dmdi.DOCMDI_ID having count(*)>1) ";
            sQuery += ") lista on lista.DOC02_ID=mdi.DOCUMENTO_02.DOC02_ID ";
            m_oParameters.DirectSqlNonQuery(sQuery);

            sQuery = "";
            sQuery += "update mdi.DOCUMENTO_02 set DOCMDI_ID=lista.DOCMDI_ID ";
            sQuery += "from mdi.DOCUMENTO_02  ";
            sQuery += "inner join ";
            sQuery += "( ";
            sQuery += "	select d02.DOC02_ID, dmdi.DOCMDI_ID from mdi.DOCUMENTO_02 d02 inner join mdi.DOCUMENTO_MDI dmdi on ";
            sQuery += "	    d02.DOCMDI_ID is null and ";
            sQuery += "		d02.CA_BALCAO=dmdi.CA_BALCAO and ";
            sQuery += "		d02.CA_NUMERO=dmdi.CA_NUMERO and ";
            sQuery += "		d02.DEP_NSESSAO=dmdi.DEP_NSESSAO and ";
            sQuery += "		d02.DEP_NUMCONTA=dmdi.DEP_NUMCONTA and  ";
            sQuery += "		d02.DOC_LONCHEQUE=dmdi.DOC_LONCHEQUE and ";
            sQuery += "		d02.DOC_LOMONTANTE=dmdi.DOC_LOMONTANTE ";
            sQuery += "	where d02.DOC02_ID not in ";
            sQuery += "	(select d02.DOC02_ID from mdi.DOCUMENTO_02 d02 inner join mdi.DOCUMENTO_MDI dmdi on  ";
            sQuery += "		d02.DOCMDI_ID is null and ";
            sQuery += "		d02.CA_BALCAO=dmdi.CA_BALCAO and ";
            sQuery += "		d02.CA_NUMERO=dmdi.CA_NUMERO and ";
            sQuery += "		d02.DEP_NSESSAO=dmdi.DEP_NSESSAO and ";
            sQuery += "		d02.DEP_NUMCONTA=dmdi.DEP_NUMCONTA and  ";
            sQuery += "		d02.DOC_LONCHEQUE=dmdi.DOC_LONCHEQUE and ";
            sQuery += "		d02.DOC_LOMONTANTE=dmdi.DOC_LOMONTANTE ";
            sQuery += "	group by d02.DOC02_ID having count(*)>1) ";
            sQuery += "	and dmdi.DOCMDI_ID not in ";
            sQuery += "	(select dmdi.DOCMDI_id from mdi.DOCUMENTO_02 d02 inner join mdi.DOCUMENTO_MDI dmdi on  ";
            sQuery += "		d02.DOCMDI_ID is null and ";
            sQuery += "		d02.CA_BALCAO=dmdi.CA_BALCAO and ";
            sQuery += "		d02.CA_NUMERO=dmdi.CA_NUMERO and ";
            sQuery += "		d02.DEP_NSESSAO=dmdi.DEP_NSESSAO and ";
            sQuery += "		d02.DEP_NUMCONTA=dmdi.DEP_NUMCONTA and  ";
            sQuery += "		d02.DOC_LONCHEQUE=dmdi.DOC_LONCHEQUE and ";
            sQuery += "		d02.DOC_LOMONTANTE=dmdi.DOC_LOMONTANTE ";
            sQuery += "	group by dmdi.DOCMDI_ID having count(*)>1) ";
            sQuery += ") lista on lista.DOC02_ID=mdi.DOCUMENTO_02.DOC02_ID ";
            m_oParameters.DirectSqlNonQuery(sQuery);

        }
    }
}

// FILE: SDCIM/ModusCI/MDIsControlo/MDIsControloForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAQAAAAAADoAgAAJgAAABAQEAAAAAAAKAEAAA4DAAAoAAAAIAAAAEAAAAABAAQAAAAAAAAC
        AAAAAAAAAAAAABAAAAAQAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAICAgADAwMAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAAAAAAAAAAAAAAAiIiIiIiIiIcAAAAAAAAAAPj///
        ////iHAAAAAAAAAACHj4iIiIiPhwcAAAAAAAAA9/j4iIiIj4B3AAAAAAAAAIePj4iIiI+AdwAAAAAAAA
        D3+Pj4iIiPgHcAAAAAAAAAh4+Pj4iIj4B3AAAAAAAAAIeI+Pj4iI+AdwAAAAAAAACHiI+Pj4iPgHcAAA
        AAAAAAh4iI+Pj4j4B3AAAAAAAAAIeIiI+Pj4+AdwAAAAAAAACId3d3d3d4gHcAAAAAAAAAiIiIiI+Pj4
        B3AAAAAAAAAAAAAAAAAAAAdwAAAAAAAA7u7u7u7u7u7gcAAAAAAAAH7MzOzszMzO5wAAAAAAAAB8zMzO
        zvzMzOcAAAAAAAAAfMzMzOzszMznCAAAAAAAAHzM4ODg4OzM5wgAAAAAAAB8zO7u7u7szOcIAAAAAAAA
        fMzMzMzs7MznCAAAAAAAAHzMzMzMzs7M5wgAAAAAAAB8zO7g4ODs7OcIAAAAAAAAfMzu7u7u7s7nCAAA
        AAAAAHzMzMzMzMzs5wgAAAAAAAB8zMzMzMzMzuCIAAAAAAAAd3d3d3d3d3fnCAAAAAAAAA+Pj4+Pj4+P
        h3AAAAAAAAAA+Pj4+Pj4+Ph3AAAAAAAAAA+Pj4+Pj4+PhwAAAAAAAAAAAAAAAAAAAAAAAAAA8AAH//AA
        AP/wAAD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD/4AAA/+AA
        AP/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/gAAB/4AAAf/AAAH/4AAB//AAAf/4A
        AP8oAAAAEAAAACAAAAABAAQAAAAAAIAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAAAgAAAgAAAAICAAIAA
        AACAAIAAgIAAAICAgADAwMAAAAD/AAD/AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAAAiIiIgA
        AAAACH//+HCAAAAIeIiPcIAAAAh4iI9wgAAACId3f3CAAAAIiIiIcIAAAAAAAAAAAAAAf/////AAAAB8
        AADM8IAAAHzMzMzwgAAAfMAAzPgAAAB3d3d3+AAAAAAAAAAAAAAACIiIiIAAAAAAAAAAAAAAwAcAAMAH
        AADAAwAAwAMAAMADAADAAwAAwAMAAIADAACAAwAAgAMAAIADAACAAwAAgAcAAIAHAADABwAA4AcAAA==
</value>
  </data>
</root>

// FILE: SDCIM/ModusCI/MDIsControlo/MostraImagem.Designer.cs
﻿namespace MDIsControlo
{
    partial class MostraImagem
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.labelErro = new System.Windows.Forms.Label();
            this.pictImgBack = new System.Windows.Forms.PictureBox();
            this.picImgFront = new System.Windows.Forms.PictureBox();
            ((System.ComponentModel.ISupportInitialize)(this.pictImgBack)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picImgFront)).BeginInit();
            this.SuspendLayout();
            // 
            // labelErro
            // 
            this.labelErro.AutoSize = true;
            this.labelErro.Font = new System.Drawing.Font("Arial", 36F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.labelErro.ForeColor = System.Drawing.Color.Red;
            this.labelErro.Location = new System.Drawing.Point(75, 235);
            this.labelErro.Name = "labelErro";
            this.labelErro.Size = new System.Drawing.Size(454, 56);
            this.labelErro.TabIndex = 6;
            this.labelErro.Text = "ERRO NA IMAGEM";
            this.labelErro.Visible = false;
            // 
            // pictImgBack
            // 
            this.pictImgBack.Location = new System.Drawing.Point(55, 265);
            this.pictImgBack.Name = "pictImgBack";
            this.pictImgBack.Size = new System.Drawing.Size(489, 249);
            this.pictImgBack.TabIndex = 5;
            this.pictImgBack.TabStop = false;
            // 
            // picImgFront
            // 
            this.picImgFront.Location = new System.Drawing.Point(55, 10);
            this.picImgFront.Name = "picImgFront";
            this.picImgFront.Size = new System.Drawing.Size(489, 249);
            this.picImgFront.TabIndex = 4;
            this.picImgFront.TabStop = false;
            // 
            // MostraImagem
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(601, 533);
            this.Controls.Add(this.labelErro);
            this.Controls.Add(this.pictImgBack);
            this.Controls.Add(this.picImgFront);
            this.Name = "MostraImagem";
            this.Text = "MostraImagem";
            this.Load += new System.EventHandler(this.MostraImagem_Load);
            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.MostraImagem_FormClosed);
            ((System.ComponentModel.ISupportInitialize)(this.pictImgBack)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picImgFront)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label labelErro;
        private System.Windows.Forms.PictureBox pictImgBack;
        private System.Windows.Forms.PictureBox picImgFront;
    }
}

// FILE: SDCIM/ModusCI/MDIsControlo/MostraImagem.cs
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;
using System.IO;

namespace MDIsControlo
{
    public partial class MostraImagem : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        string m_sDOCMDI_ID;

        public MostraImagem()
        {
            InitializeComponent();
        }

        public MostraImagem(CIConfigGP.CIGlobalParameters oParameters, string sDOCMDI_ID)
        {
            InitializeComponent();
            m_oParameters = oParameters;
            m_sDOCMDI_ID = sDOCMDI_ID;
        }

        protected void WriteImage(byte[] aBytes, string sFileName)
        {
            StreamWriter sw = new StreamWriter(sFileName, false);
            BinaryWriter bw = new BinaryWriter(sw.BaseStream);
            bw.Write(aBytes);
            sw.Close();
            bw.Close();
        }

        public string getImgFrente(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where DOCMDI_ID= " + m_sDOCMDI_ID + " and IMG_SIDE = 0";// and IMG_TYPE= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select top 1 IMG_IMAGE from dbo.IMAGEM" + sWhereClauseFront);

            sFileNameFrente = m_oParameters.GetTempFileName("IMGMDIFront") + ".jpg";
            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        public string getImgBack(CIConfigGP.CIGlobalParameters oParameters)
        {
            string sFileNameFrente, sWhereClauseFront;
            sWhereClauseFront = " where DOCMDI_ID= " + m_sDOCMDI_ID + " and IMG_SIDE = 1 ";// and IMG_TYPE= 'JPG'";
            byte[] aImgF = (byte[])oParameters.DirectSqlScalar("select top 1 IMG_IMAGE from dbo.IMAGEM" + sWhereClauseFront);

            sFileNameFrente = m_oParameters.GetTempFileName("IMGMDIBack") + ".jpg";
            WriteImage(aImgF, sFileNameFrente);

            return sFileNameFrente;

        }

        private void MostraImagem_Load(object sender, EventArgs e)
        {
            string sFileName;
            try
            {
                //parte da frente
                sFileName = getImgFrente(m_oParameters);
                picImgFront.Image = System.Drawing.Image.FromFile(sFileName);
                picImgFront.SizeMode = PictureBoxSizeMode.StretchImage;

                //parte de tras
                sFileName = getImgBack(m_oParameters);
                pictImgBack.Image = System.Drawing.Image.FromFile(sFileName);
                pictImgBack.SizeMode = PictureBoxSizeMode.StretchImage;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 11);
                labelErro.Visible = true;   
            }
        }

        private void MostraImagem_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                if (picImgFront.Image != null) picImgFront.Image.Dispose();
                if (pictImgBack.Image != null) pictImgBack.Image.Dispose();

                picImgFront.Image = null;
                pictImgBack.Image = null;
            }
            catch (Exception ex)
            {
                GenericLog.GenLogRegistarErro(ref ex, "MDIMostraImagemForm", 12);
                MessageBox.Show(this, ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
     }
}

// FILE: SDCIM/ModusCI/MDIsControlo/MostraImagem.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/QueryForm/Properties/AssemblyInfo.cs
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("QueryForm")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Grupo Caixa Geral de Depósitos")]
[assembly: AssemblyProduct("QueryForm")]
[assembly: AssemblyCopyright("Copyright © Grupo Caixa Geral de Depósitos 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("03a5537a-0a4f-4529-b148-ed2b1de40326")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]


// FILE: SDCIM/ModusCI/QueryForm/Properties/Resources.Designer.cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryForm.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("QueryForm.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}


// FILE: SDCIM/ModusCI/QueryForm/Properties/Resources.resx
﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>

// FILE: SDCIM/ModusCI/QueryForm/QueryForm.Designer.cs
﻿namespace QueryForm
{
    partial class QueryForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(QueryForm));
            this.m_ctrdtInicio = new System.Windows.Forms.DateTimePicker();
            this.m_ctrldtFim = new System.Windows.Forms.DateTimePicker();
            this.m_dgrigQuery = new NBIISNET.DataGridViewBase(this.components);
            this.m_label = new NBIISNET.LabelGradient();
            this.m_btExport = new System.Windows.Forms.Button();
            this.m_cbQuery = new System.Windows.Forms.ComboBox();
            this.btRun = new System.Windows.Forms.Button();
            this.splitContainerQuerie = new System.Windows.Forms.SplitContainer();
            this.label2 = new System.Windows.Forms.Label();
            this.textBoxQuerie = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            ((System.ComponentModel.ISupportInitialize)(this.m_dgrigQuery)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainerQuerie)).BeginInit();
            this.splitContainerQuerie.Panel1.SuspendLayout();
            this.splitContainerQuerie.Panel2.SuspendLayout();
            this.splitContainerQuerie.SuspendLayout();
            this.groupBox1.SuspendLayout();
            this.SuspendLayout();
            // 
            // m_ctrdtInicio
            // 
            this.m_ctrdtInicio.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrdtInicio.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrdtInicio.Location = new System.Drawing.Point(36, 16);
            this.m_ctrdtInicio.Name = "m_ctrdtInicio";
            this.m_ctrdtInicio.Size = new System.Drawing.Size(200, 20);
            this.m_ctrdtInicio.TabIndex = 0;
            // 
            // m_ctrldtFim
            // 
            this.m_ctrldtFim.CustomFormat = " dddd - yyyy-MM-dd";
            this.m_ctrldtFim.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.m_ctrldtFim.Location = new System.Drawing.Point(36, 38);
            this.m_ctrldtFim.Name = "m_ctrldtFim";
            this.m_ctrldtFim.Size = new System.Drawing.Size(200, 20);
            this.m_ctrldtFim.TabIndex = 1;
            // 
            // m_dgrigQuery
            // 
            this.m_dgrigQuery.AllowUserToAddRows = false;
            this.m_dgrigQuery.AllowUserToDeleteRows = false;
            this.m_dgrigQuery.AllowUserToOrderColumns = true;
            this.m_dgrigQuery.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.m_dgrigQuery.EnableExportar = true;
            this.m_dgrigQuery.ExportarHeader = true;
            this.m_dgrigQuery.ExportFilename = "export_%name%_%now%";
            this.m_dgrigQuery.ExportPath = "";
            this.m_dgrigQuery.Location = new System.Drawing.Point(0, 25);
            this.m_dgrigQuery.Name = "m_dgrigQuery";
            this.m_dgrigQuery.ReadOnly = true;
            this.m_dgrigQuery.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.m_dgrigQuery.Size = new System.Drawing.Size(917, 314);
            this.m_dgrigQuery.TabIndex = 4;
            // 
            // m_label
            // 
            this.m_label.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.m_label.ForeColor = System.Drawing.Color.White;
            this.m_label.GradientColorOne = System.Drawing.Color.Blue;
            this.m_label.GradientColorTwo = System.Drawing.Color.White;
            this.m_label.Location = new System.Drawing.Point(0, 0);
            this.m_label.Name = "m_label";
            this.m_label.Size = new System.Drawing.Size(920, 22);
            this.m_label.TabIndex = 3;
            this.m_label.Text = "Label";
            this.m_label.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // m_btExport
            // 
            this.m_btExport.Location = new System.Drawing.Point(158, 81);
            this.m_btExport.Name = "m_btExport";
            this.m_btExport.Size = new System.Drawing.Size(75, 23);
            this.m_btExport.TabIndex = 0;
            this.m_btExport.Text = "&Export";
            this.m_btExport.UseVisualStyleBackColor = true;
            this.m_btExport.Click += new System.EventHandler(this.m_btExport_Click);
            // 
            // m_cbQuery
            // 
            this.m_cbQuery.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.m_cbQuery.FormattingEnabled = true;
            this.m_cbQuery.Location = new System.Drawing.Point(12, 61);
            this.m_cbQuery.Name = "m_cbQuery";
            this.m_cbQuery.Size = new System.Drawing.Size(225, 21);
            this.m_cbQuery.TabIndex = 2;
            this.m_cbQuery.SelectedIndexChanged += new System.EventHandler(this.m_cbQuery_SelectedIndexChanged);
            // 
            // btRun
            // 
            this.btRun.Location = new System.Drawing.Point(51, 84);
            this.btRun.Name = "btRun";
            this.btRun.Size = new System.Drawing.Size(75, 23);
            this.btRun.TabIndex = 3;
            this.btRun.Text = "&Run";
            this.btRun.UseVisualStyleBackColor = true;
            this.btRun.Click += new System.EventHandler(this.btRun_Click);
            // 
            // splitContainerQuerie
            // 
            this.splitContainerQuerie.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.splitContainerQuerie.FixedPanel = System.Windows.Forms.FixedPanel.Panel1;
            this.splitContainerQuerie.Location = new System.Drawing.Point(15, 1);
            this.splitContainerQuerie.Name = "splitContainerQuerie";
            this.splitContainerQuerie.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainerQuerie.Panel1
            // 
            this.splitContainerQuerie.Panel1.Controls.Add(this.label2);
            this.splitContainerQuerie.Panel1.Controls.Add(this.btRun);
            this.splitContainerQuerie.Panel1.Controls.Add(this.textBoxQuerie);
            this.splitContainerQuerie.Panel1.Controls.Add(this.m_cbQuery);
            this.splitContainerQuerie.Panel1.Controls.Add(this.label1);
            this.splitContainerQuerie.Panel1.Controls.Add(this.m_ctrdtInicio);
            this.splitContainerQuerie.Panel1.Controls.Add(this.m_ctrldtFim);
            this.splitContainerQuerie.Panel1.Controls.Add(this.groupBox1);
            // 
            // splitContainerQuerie.Panel2
            // 
            this.splitContainerQuerie.Panel2.Controls.Add(this.m_label);
            this.splitContainerQuerie.Panel2.Controls.Add(this.m_dgrigQuery);
            this.splitContainerQuerie.Size = new System.Drawing.Size(920, 458);
            this.splitContainerQuerie.SplitterDistance = 112;
            this.splitContainerQuerie.TabIndex = 6;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(14, 41);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(18, 13);
            this.label2.TabIndex = 8;
            this.label2.Text = "a:";
            // 
            // textBoxQuerie
            // 
            this.textBoxQuerie.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.textBoxQuerie.Location = new System.Drawing.Point(253, 3);
            this.textBoxQuerie.Multiline = true;
            this.textBoxQuerie.Name = "textBoxQuerie";
            this.textBoxQuerie.Size = new System.Drawing.Size(664, 106);
            this.textBoxQuerie.TabIndex = 0;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(10, 19);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(25, 13);
            this.label1.TabIndex = 7;
            this.label1.Text = "de:";
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.m_btExport);
            this.groupBox1.ForeColor = System.Drawing.SystemColors.WindowText;
            this.groupBox1.Location = new System.Drawing.Point(4, 3);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(243, 107);
            this.groupBox1.TabIndex = 9;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Consultas";
            // 
            // QueryForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(947, 471);
            this.Controls.Add(this.splitContainerQuerie);
            this.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "QueryForm";
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Query";
            this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            this.Load += new System.EventHandler(this.QueryForm_Load);
            ((System.ComponentModel.ISupportInitialize)(this.m_dgrigQuery)).EndInit();
            this.splitContainerQuerie.Panel1.ResumeLayout(false);
            this.splitContainerQuerie.Panel1.PerformLayout();
            this.splitContainerQuerie.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainerQuerie)).EndInit();
            this.splitContainerQuerie.ResumeLayout(false);
            this.groupBox1.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.DateTimePicker m_ctrdtInicio;
        private System.Windows.Forms.DateTimePicker m_ctrldtFim;
        private NBIISNET.LabelGradient m_label;
        private NBIISNET.DataGridViewBase m_dgrigQuery;
        private System.Windows.Forms.Button m_btExport;
        private System.Windows.Forms.ComboBox m_cbQuery;
        private System.Windows.Forms.Button btRun;
        private System.Windows.Forms.SplitContainer splitContainerQuerie;
        private System.Windows.Forms.TextBox textBoxQuerie;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.GroupBox groupBox1;
    }
}



// FILE: SDCIM/ModusCI/QueryForm/QueryForm.cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Data.SqlClient;

using NBiis;
using NBiis.Generic;
using NBIISNET;
using CIConfigGlobalParameters;

namespace QueryForm
{
    public partial class QueryForm : Form
    {
        protected CIConfigGP.CIGlobalParameters m_oParameters;

        public QueryForm(CIConfigGP.CIGlobalParameters oParameters)
        {
            InitializeComponent();
            m_oParameters = oParameters;
        }

        private void QueryForm_Load(object sender, EventArgs e)
        {
            try
            {
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;

                try
                {
                    LoadComboboxQuery();
                }
                catch 
                { 
                }

                DefinirDatas();

                m_label.Text = "";

                m_dgrigQuery.ExportPath = m_oParameters.GetProfileString("Query","PATHS","PathExport","");

                GenericLog.GenLogRegistarInfo("QueryForm_Load", "QueryForm.cs", 47);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Dispose();
            }
        }

        protected void LoadComboboxQuery()
        {
            DataSet oDataSet = null;

            string sQuery = "select Q_DESCRICAO, Q_QUERY from QUERY where Q_GRUPO >= " + m_oParameters.UserLogged.m_iUserGroup.ToString() + " order by q_grupo, q_descricao";
            oDataSet = m_oParameters.DirectSqlDataSet(sQuery, "Query");

            m_cbQuery.DataSource = oDataSet.Tables[0];
            m_cbQuery.DisplayMember = "Q_DESCRICAO";
            m_cbQuery.ValueMember = "Q_QUERY";

            if (m_oParameters.UserLogged.m_iUserGroup != 0)
            {
                //btMyRun.Visible = false;
                textBoxQuerie.Enabled = false;
                //m_cbQuery.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            }
            textBoxQuerie.Text = m_cbQuery.SelectedValue.ToString();

        }

        protected void DefinirDatas()
        {
            m_ctrldtFim.Value = DateTime.Now.Date.AddDays(+1);
            m_ctrdtInicio.Value = DateTime.Now.Date;
        }


        protected string Translate(string sQuerieIni)
        {
            string sQuerieFinal = sQuerieIni;

            sQuerieFinal = sQuerieFinal.Replace("%AAAA%", m_ctrdtInicio.Value.Year.ToString());
            sQuerieFinal = sQuerieFinal.Replace("%MM%", m_ctrdtInicio.Value.Month.ToString());

            sQuerieFinal = sQuerieFinal.Replace("%DATAINI%", "'" +  m_ctrdtInicio.Value.ToString(m_oParameters.DateFormat) + "'");
            sQuerieFinal = sQuerieFinal.Replace("%DATAFIM%", "'" + m_ctrldtFim.Value.ToString(m_oParameters.DateFormat) + "'");

            return sQuerieFinal;
        }

        private void m_btExport_Click(object sender, EventArgs e)
        {
            try
            {
                m_dgrigQuery.ExportarParaExcel(false);
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();

                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btRun_Click(object sender, EventArgs e)
        {
            string sQuery;
            DataSet oDs = null;

            try
            {
                Cursor = Cursors.WaitCursor;
                frmEspereUmMomento.ShowWaitForm();

                m_label.Text = "";

                //sQuery = Translate(Convert.ToString(m_cbQuery.Text));
                sQuery = Translate(Convert.ToString(textBoxQuerie.Text));

//                GenericLog.GenLogRegistarAlerta(sQuery, "QueryForm.cs", 49);

                oDs = m_oParameters.DirectSqlDataSet(sQuery, "QUERY");

                m_dgrigQuery.DataSource = oDs.Tables[0];

                m_label.Text = oDs.Tables[0].Rows.Count.ToString() + " Linhas retornadas";

                m_dgrigQuery.ExportFilename = "Query_%now%";

                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();
            }
            catch (Exception ex)
            {
                Cursor = Cursors.Default;
                frmEspereUmMomento.HideWaitForm();

                MessageBox.Show(ex.Message, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void m_cbQuery_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                textBoxQuerie.Text = m_cbQuery.SelectedValue.ToString();
            }
            catch 
            { 
            }
        }
    }
}

// FILE: SDCIM/ModusCI/QueryForm/QueryForm.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{37DD4474-F8FC-4789-9D9D-160BD744E079}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>QueryForm</RootNamespace>
    <AssemblyName>QueryForm</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileUpgradeFlags>
    </FileUpgradeFlags>
    <OldToolsVersion>2.0</OldToolsVersion>
    <UpgradeBackupLocation />
    <TargetFrameworkProfile />
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="GenericLogNET, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\Imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericLogNET.dll</HintPath>
    </Reference>
    <Reference Include="GenericNet, Version=2.0.0.1, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\GenericNet.dll</HintPath>
    </Reference>
    <Reference Include="NBIISNET, Version=2.0.5.2, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>\\sqc6001fas02\imagens\DriveW\GCAA\Gestao\SharedLibrary\NBIISNET.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <Compile Include="QueryForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="QueryForm.Designer.cs">
      <DependentUpon>QueryForm.cs</DependentUpon>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Properties\Resources.resx">
      <SubType>Designer</SubType>
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="QueryForm.resx">
      <DependentUpon>QueryForm.cs</DependentUpon>
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj">
      <Project>{775F4662-F2F6-4270-ADAD-531E54F2979F}</Project>
      <Name>CIConfigGlobalParameters</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>
      <Install>false</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
    <BootstrapperPackage Include="Microsoft.Windows.Installer.3.1">
      <Visible>False</Visible>
      <ProductName>Windows Installer 3.1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>

// FILE: SDCIM/ModusCI/QueryForm/QueryForm.resx
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAQAAAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAACIgAAAAAAAAAAAAAAAAACIgAzMyqoAAAAAAAAAAAAIiAzMzMqqqgAAAAAAAAAA
        iIDMzMzKqqqgAIiIiIiIiIgJzMzMyqqqqgCIiIiIiIiAmZmczMqqqqZggAAAAAAAAJmZmZzKqqZmYID/
        3d//ZmCZmZmZqmZmZmCA/93f/2ZgmZmZm7ZmZmZggA8NDw8GAJmZmbu+ZmZmYID/3d//ZmCZmZu77uZm
        ZmCA/93f/2ZvCZu7u+7uZmYAgP/d3/9mb/C7u7vu7uZgAIAPDQ8PBg8PC7u+7u7uAACA/93f/2Zv/8AL
        vu7uAAAAgP/d3/9mb//MwAAAAPAAAID/3d//////zM//mZ/wAACADw0PDw8PDwwPDwkPAAAAgP/d3///
        ///Mz/+Zn/AAAID/3d//////zM//mZ/wAACA/93f/////8zP/5mf8AAAgA8PDw8PDw8MDw8JDwAAAID/
        ////////////mZ/wAACA/////////////5mf8AAAgP////////////+Zn/AAAIAPDw8PDw8PDw8PDw8A
        AACA////////////////8AAAgP////////////////AAAID////////////////wAAAA////////////
        ////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wA///wAD//4AAf/8AADAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAA
        AA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAAD4AAAA+AAAAP/////w==
</value>
  </data>
</root>

// FILE: SDCIM/CIControloComSetup.sln
﻿
Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIControlo", "ModusCI\CIControlo\CIControlo.csproj", "{7AE1DE61-8341-4A18-8071-1222AA96117B}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "QueryForm", "ModusCI\QueryForm\QueryForm.csproj", "{37DD4474-F8FC-4789-9D9D-160BD744E079}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIConfigGlobalParameters", "ModusCI\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj", "{775F4662-F2F6-4270-ADAD-531E54F2979F}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIConfiguration", "ModusCI\CIConfiguration\CIConfiguration.csproj", "{84354208-75AC-4D71-A00A-95232EF2C59C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIActividades", "ModusCI\CIActividades\CIActividades.csproj", "{6FFF83BB-F585-43A4-B446-46F0EE79D42E}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIReports", "ModusCI\CIReports\CIReports.csproj", "{BE6BD596-18AE-40B6-846E-6A8A09571A1A}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Alerta", "ModusCI\Alerta\Alerta.csproj", "{763022EF-042B-4160-AFFF-9E59EF4B02A5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServRemessas", "ModusCI\CIServRemessas\CIServRemessas.csproj", "{08EAC62C-72D9-4654-9387-8C1620E52329}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServTester", "ModusCI\CIServTester\CIServTester.csproj", "{8D5B89F8-7C35-4848-BC4E-279A0723130C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServAlertas", "ModusCI\CIServAlertas\CIServAlertas.csproj", "{8C4F582F-F862-4FFF-AF31-70BC3404CB37}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServico", "ModusCI\CIServico\CIServico.csproj", "{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIFicheirosControlo", "ModusCI\CIFicheirosControlo\CIFicheirosControlo.csproj", "{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIFicheiro", "ModusCI\CIFicheiro\CIFicheiro.csproj", "{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}"
EndProject
Project("{54435603-DBB4-11D2-8724-00A0C9A8B90C}") = "SetupCIControlo", "ModusCI\SetupCIControlo\SetupCIControlo.vdproj", "{55BC68BA-A860-48EC-8F09-E6611254663E}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MDIsControlo", "ModusCI\MDIsControlo\MDIsControlo.csproj", "{D3BC3C16-AE19-4664-AC69-E5282998467B}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "MDIWebTransmCI", "ModusCI\MDIWebTransmCI\MDIWebTransmCI.vbproj", "{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}"
EndProject
Global
	GlobalSection(SubversionScc) = preSolution
		Svn-Managed = True
		Manager = AnkhSVN - Subversion Support for Visual Studio
	EndGlobalSection
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Release|Any CPU.Build.0 = Release|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Release|Any CPU.Build.0 = Release|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Release|Any CPU.Build.0 = Release|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Release|Any CPU.Build.0 = Release|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Release|Any CPU.Build.0 = Release|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Release|Any CPU.Build.0 = Release|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Release|Any CPU.Build.0 = Release|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Release|Any CPU.Build.0 = Release|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Release|Any CPU.Build.0 = Release|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Release|Any CPU.Build.0 = Release|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Release|Any CPU.Build.0 = Release|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Release|Any CPU.Build.0 = Release|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Release|Any CPU.Build.0 = Release|Any CPU
		{55BC68BA-A860-48EC-8F09-E6611254663E}.Debug|Any CPU.ActiveCfg = Debug
		{55BC68BA-A860-48EC-8F09-E6611254663E}.Debug|Any CPU.Build.0 = Debug
		{55BC68BA-A860-48EC-8F09-E6611254663E}.Release|Any CPU.ActiveCfg = Release
		{55BC68BA-A860-48EC-8F09-E6611254663E}.Release|Any CPU.Build.0 = Release
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Release|Any CPU.Build.0 = Release|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal


// FILE: SDCIM/CIControloSemSetup.sln
﻿
Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIControlo", "ModusCI\CIControlo\CIControlo.csproj", "{7AE1DE61-8341-4A18-8071-1222AA96117B}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "QueryForm", "ModusCI\QueryForm\QueryForm.csproj", "{37DD4474-F8FC-4789-9D9D-160BD744E079}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIConfigGlobalParameters", "ModusCI\CIConfigGlobalParameters\CIConfigGlobalParameters.csproj", "{775F4662-F2F6-4270-ADAD-531E54F2979F}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIConfiguration", "ModusCI\CIConfiguration\CIConfiguration.csproj", "{84354208-75AC-4D71-A00A-95232EF2C59C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIActividades", "ModusCI\CIActividades\CIActividades.csproj", "{6FFF83BB-F585-43A4-B446-46F0EE79D42E}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIReports", "ModusCI\CIReports\CIReports.csproj", "{BE6BD596-18AE-40B6-846E-6A8A09571A1A}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Alerta", "ModusCI\Alerta\Alerta.csproj", "{763022EF-042B-4160-AFFF-9E59EF4B02A5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServRemessas", "ModusCI\CIServRemessas\CIServRemessas.csproj", "{08EAC62C-72D9-4654-9387-8C1620E52329}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServTester", "ModusCI\CIServTester\CIServTester.csproj", "{8D5B89F8-7C35-4848-BC4E-279A0723130C}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServAlertas", "ModusCI\CIServAlertas\CIServAlertas.csproj", "{8C4F582F-F862-4FFF-AF31-70BC3404CB37}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIServico", "ModusCI\CIServico\CIServico.csproj", "{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIFicheirosControlo", "ModusCI\CIFicheirosControlo\CIFicheirosControlo.csproj", "{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIFicheiro", "ModusCI\CIFicheiro\CIFicheiro.csproj", "{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MDIsControlo", "ModusCI\MDIsControlo\MDIsControlo.csproj", "{D3BC3C16-AE19-4664-AC69-E5282998467B}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "MDIWebTransmCI", "ModusCI\MDIWebTransmCI\MDIWebTransmCI.vbproj", "{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CITestes", "CITestes\CITestes.csproj", "{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{6FACC1CD-1220-4AF3-ACEC-EC175560CD4A}"
	ProjectSection(SolutionItems) = preProject
		CIControloSemSetup.vsmdi = CIControloSemSetup.vsmdi
		Local.testsettings = Local.testsettings
		TraceAndTestImpact.testsettings = TraceAndTestImpact.testsettings
	EndProjectSection
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CIDepositoErro", "CIDepositoErro\CIDepositoErro.csproj", "{2DD68655-8747-4CDA-B22E-1C898C515DDB}"
EndProject
Global
	GlobalSection(TeamFoundationVersionControl) = preSolution
		SccNumberOfProjects = 16
		SccEnterpriseProvider = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccTeamFoundationServer = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccProjectUniqueName0 = ModusCI\\CIControlo\\CIControlo.csproj
		SccProjectName0 = ModusCI/CIControlo
		SccAuxPath0 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath0 = ModusCI\\CIControlo
		SccProvider0 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName1 = ModusCI\\QueryForm\\QueryForm.csproj
		SccProjectName1 = ModusCI/QueryForm
		SccAuxPath1 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath1 = ModusCI\\QueryForm
		SccProvider1 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName2 = ModusCI\\CIConfigGlobalParameters\\CIConfigGlobalParameters.csproj
		SccProjectName2 = ModusCI/CIConfigGlobalParameters
		SccAuxPath2 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath2 = ModusCI\\CIConfigGlobalParameters
		SccProvider2 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName3 = ModusCI\\CIConfiguration\\CIConfiguration.csproj
		SccProjectName3 = ModusCI/CIConfiguration
		SccAuxPath3 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath3 = ModusCI\\CIConfiguration
		SccProvider3 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName4 = ModusCI\\CIActividades\\CIActividades.csproj
		SccProjectName4 = ModusCI/CIActividades
		SccAuxPath4 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath4 = ModusCI\\CIActividades
		SccProvider4 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName5 = ModusCI\\CIReports\\CIReports.csproj
		SccProjectName5 = ModusCI/CIReports
		SccAuxPath5 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath5 = ModusCI\\CIReports
		SccProvider5 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName6 = ModusCI\\Alerta\\Alerta.csproj
		SccProjectName6 = ModusCI/Alerta
		SccAuxPath6 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath6 = ModusCI\\Alerta
		SccProvider6 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName7 = ModusCI\\CIServRemessas\\CIServRemessas.csproj
		SccProjectName7 = ModusCI/CIServRemessas
		SccAuxPath7 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath7 = ModusCI\\CIServRemessas
		SccProvider7 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName8 = ModusCI\\CIServTester\\CIServTester.csproj
		SccProjectName8 = ModusCI/CIServTester
		SccAuxPath8 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath8 = ModusCI\\CIServTester
		SccProvider8 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName9 = ModusCI\\CIServAlertas\\CIServAlertas.csproj
		SccProjectName9 = ModusCI/CIServAlertas
		SccAuxPath9 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath9 = ModusCI\\CIServAlertas
		SccProvider9 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName10 = ModusCI\\CIServico\\CIServico.csproj
		SccProjectName10 = ModusCI/CIServico
		SccAuxPath10 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath10 = ModusCI\\CIServico
		SccProvider10 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName11 = ModusCI\\CIFicheirosControlo\\CIFicheirosControlo.csproj
		SccProjectName11 = ModusCI/CIFicheirosControlo
		SccAuxPath11 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath11 = ModusCI\\CIFicheirosControlo
		SccProvider11 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName12 = ModusCI\\CIFicheiro\\CIFicheiro.csproj
		SccProjectName12 = ModusCI/CIFicheiro
		SccAuxPath12 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath12 = ModusCI\\CIFicheiro
		SccProvider12 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName13 = ModusCI\\MDIsControlo\\MDIsControlo.csproj
		SccProjectName13 = ModusCI/MDIsControlo
		SccAuxPath13 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath13 = ModusCI\\MDIsControlo
		SccProvider13 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName14 = ModusCI\\MDIWebTransmCI\\MDIWebTransmCI.vbproj
		SccProjectName14 = ModusCI/MDIWebTransmCI
		SccAuxPath14 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath14 = ModusCI\\MDIWebTransmCI
		SccProvider14 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
		SccProjectUniqueName15 = CITestes\\CITestes.csproj
		SccProjectName15 = CITestes
		SccAuxPath15 = http://tfs.grupocgd.com:8001/tfs/sistemas%20distribuidos
		SccLocalPath15 = CITestes
		SccProvider15 = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
	EndGlobalSection
	GlobalSection(TestCaseManagementSettings) = postSolution
		CategoryFile = CIControloSemSetup.vsmdi
	EndGlobalSection
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|Mixed Platforms = Debug|Mixed Platforms
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|Mixed Platforms = Release|Mixed Platforms
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Debug|x86.ActiveCfg = Debug|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Release|Any CPU.Build.0 = Release|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{7AE1DE61-8341-4A18-8071-1222AA96117B}.Release|x86.ActiveCfg = Release|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Debug|x86.ActiveCfg = Debug|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Release|Any CPU.Build.0 = Release|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{37DD4474-F8FC-4789-9D9D-160BD744E079}.Release|x86.ActiveCfg = Release|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Debug|x86.ActiveCfg = Debug|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Release|Any CPU.Build.0 = Release|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{775F4662-F2F6-4270-ADAD-531E54F2979F}.Release|x86.ActiveCfg = Release|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Debug|x86.ActiveCfg = Debug|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Release|Any CPU.Build.0 = Release|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{84354208-75AC-4D71-A00A-95232EF2C59C}.Release|x86.ActiveCfg = Release|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Debug|x86.ActiveCfg = Debug|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Release|Any CPU.Build.0 = Release|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{6FFF83BB-F585-43A4-B446-46F0EE79D42E}.Release|x86.ActiveCfg = Release|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Debug|x86.ActiveCfg = Debug|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Release|Any CPU.Build.0 = Release|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{BE6BD596-18AE-40B6-846E-6A8A09571A1A}.Release|x86.ActiveCfg = Release|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Debug|x86.ActiveCfg = Debug|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Release|Any CPU.Build.0 = Release|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{763022EF-042B-4160-AFFF-9E59EF4B02A5}.Release|x86.ActiveCfg = Release|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Debug|x86.ActiveCfg = Debug|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Release|Any CPU.Build.0 = Release|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{08EAC62C-72D9-4654-9387-8C1620E52329}.Release|x86.ActiveCfg = Release|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Debug|x86.ActiveCfg = Debug|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Release|Any CPU.Build.0 = Release|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{8D5B89F8-7C35-4848-BC4E-279A0723130C}.Release|x86.ActiveCfg = Release|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Debug|x86.ActiveCfg = Debug|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Release|Any CPU.Build.0 = Release|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{8C4F582F-F862-4FFF-AF31-70BC3404CB37}.Release|x86.ActiveCfg = Release|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Debug|x86.ActiveCfg = Debug|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Release|Any CPU.Build.0 = Release|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{CDE2F1A8-F5C8-45B3-9AD6-D86773D641C5}.Release|x86.ActiveCfg = Release|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Debug|x86.ActiveCfg = Debug|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Release|Any CPU.Build.0 = Release|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{7AC27D8C-3712-4759-BDC2-2F32AB250FB4}.Release|x86.ActiveCfg = Release|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Debug|x86.ActiveCfg = Debug|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Release|Any CPU.Build.0 = Release|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{58A5D3AE-A73B-44FB-B212-A15F8651BDA9}.Release|x86.ActiveCfg = Release|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Debug|x86.ActiveCfg = Debug|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Release|Any CPU.Build.0 = Release|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{D3BC3C16-AE19-4664-AC69-E5282998467B}.Release|x86.ActiveCfg = Release|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Debug|x86.ActiveCfg = Debug|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Release|Any CPU.Build.0 = Release|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{6111F2C7-7D6D-4C4B-8684-D065CB8A53CF}.Release|x86.ActiveCfg = Release|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Debug|Mixed Platforms.ActiveCfg = Debug|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Debug|Mixed Platforms.Build.0 = Debug|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Debug|x86.ActiveCfg = Debug|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Release|Any CPU.Build.0 = Release|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Release|Mixed Platforms.ActiveCfg = Release|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Release|Mixed Platforms.Build.0 = Release|Any CPU
		{4F4665D0-AABF-4CC0-8B51-77E57B5CE50F}.Release|x86.ActiveCfg = Release|Any CPU
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Debug|Any CPU.ActiveCfg = Debug|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Debug|Mixed Platforms.ActiveCfg = Debug|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Debug|Mixed Platforms.Build.0 = Debug|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Debug|x86.ActiveCfg = Debug|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Debug|x86.Build.0 = Debug|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Release|Any CPU.ActiveCfg = Release|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Release|Mixed Platforms.ActiveCfg = Release|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Release|Mixed Platforms.Build.0 = Release|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Release|x86.ActiveCfg = Release|x86
		{2DD68655-8747-4CDA-B22E-1C898C515DDB}.Release|x86.Build.0 = Release|x86
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal


// FILE: SDCIM/SharedLibraryPath.txt
\\sdc6001fas02\DriveW\GCAA\Gestao\SharedLibrary

// FILE: SDCIM/metrics.ps1
$files = Get-ChildItem -Path $PSScriptRoot -Recurse -Include "*.cs", "*.vb"
Write-Output "File|LinesOfCode|KeywordCount"
foreach ($file in $files) {
    if ($file.Name -eq 'metrics.ps1') { continue }
    try {
        $content = Get-Content -Path $file.FullName -Raw -ErrorAction Stop
        $loc = $content.Split([Environment]::NewLine).Count
        
        $complexity = 0
        if ($file.Extension -eq ".cs") {
            # Keywords for complexity
            $pattern = 'if|while|for|foreach|case|catch|&&|\|\||\?\?'
            $complexity += ([regex]::Matches($content, $pattern)).Count
        } elseif ($file.Extension -eq ".vb") {
            # VB is case-insensitive for keywords
            $pattern = 'If|While|For|ForEach|Case|Catch|AndAlso|OrElse|Select Case'
            $complexity += ([regex]::Matches($content, $pattern, 'IgnoreCase')).Count
        }
        
        Write-Output "$($file.Name)|$loc|$complexity"
    } catch {
        Write-Output "$($file.Name)|Error|Error"
    }
}


